// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "simpledc20021212.hxx"

namespace dc
{
  // elementType
  // 

  const elementType::lang_type& elementType::
  lang () const
  {
    return this->lang_.get ();
  }

  elementType::lang_type& elementType::
  lang ()
  {
    return this->lang_.get ();
  }

  void elementType::
  lang (const lang_type& x)
  {
    this->lang_.set (x);
  }

  void elementType::
  lang (::std::auto_ptr< lang_type > x)
  {
    this->lang_.set (x);
  }

  const elementType::lang_type& elementType::
  lang_default_value ()
  {
    return lang_default_value_;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace dc
{
  // elementType
  //

  const elementType::lang_type elementType::lang_default_value_ (
    "en");

  elementType::
  elementType ()
  : ::xml_schema::string (),
    lang_ (lang_default_value (), ::xml_schema::flags (), this)
  {
  }

  elementType::
  elementType (const char* _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base),
    lang_ (lang_default_value (), ::xml_schema::flags (), this)
  {
  }

  elementType::
  elementType (const ::std::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base),
    lang_ (lang_default_value (), ::xml_schema::flags (), this)
  {
  }

  elementType::
  elementType (const ::xml_schema::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base),
    lang_ (lang_default_value (), ::xml_schema::flags (), this)
  {
  }

  elementType::
  elementType (const elementType& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::string (x, f, c),
    lang_ (x.lang_, f, this)
  {
  }

  elementType::
  elementType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::string (e, f | ::xml_schema::flags::base, c),
    lang_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void elementType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "lang" && n.namespace_ () == "http://www.w3.org/XML/1998/namespace")
      {
        ::std::auto_ptr< lang_type > r (
          lang_traits::create (i, f, this));

        this->lang_.set (r);
        continue;
      }
    }

    if (!lang_.present ())
    {
      this->lang_.set (lang_default_value ());
    }
  }

  elementType* elementType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class elementType (*this, f, c);
  }

  elementType::
  ~elementType ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace dc
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace dc
{
  void
  operator<< (::xercesc::DOMElement& e, const elementType& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);

    // lang
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "lang",
          "http://www.w3.org/XML/1998/namespace",
          e));

      a << i.lang ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

