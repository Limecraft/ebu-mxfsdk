// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MXF_PARTITIONS_HXX
#define MXF_PARTITIONS_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace st434
{
  namespace s377m
  {
    namespace multiplex
    {
      class HeaderPartition;
      class BodyPartition;
      class FooterPartition;
      class HeaderMetadata;
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "groups/s377m_packs.hxx"

#include "groups/s377m_indexTables.hxx"

#include "mxf/metadata.hxx"

namespace st434
{
  namespace s377m
  {
    namespace multiplex
    {
      class HeaderPartition: public ::xml_schema::type
      {
        public:
        // PartitionPack
        // 
        typedef ::st434::s377m::groups::PartitionPackType PartitionPack_type;
        typedef ::xsd::cxx::tree::traits< PartitionPack_type, char > PartitionPack_traits;

        const PartitionPack_type&
        PartitionPack () const;

        PartitionPack_type&
        PartitionPack ();

        void
        PartitionPack (const PartitionPack_type& x);

        void
        PartitionPack (::std::auto_ptr< PartitionPack_type > p);

        // HeaderMetadata
        // 
        typedef ::st434::s377m::multiplex::HeaderMetadata HeaderMetadata_type;
        typedef ::xsd::cxx::tree::traits< HeaderMetadata_type, char > HeaderMetadata_traits;

        const HeaderMetadata_type&
        HeaderMetadata () const;

        HeaderMetadata_type&
        HeaderMetadata ();

        void
        HeaderMetadata (const HeaderMetadata_type& x);

        void
        HeaderMetadata (::std::auto_ptr< HeaderMetadata_type > p);

        // IndexTable
        // 
        typedef ::st434::s377m::groups::IndexTable IndexTable_type;
        typedef ::xsd::cxx::tree::optional< IndexTable_type > IndexTable_optional;
        typedef ::xsd::cxx::tree::traits< IndexTable_type, char > IndexTable_traits;

        const IndexTable_optional&
        IndexTable () const;

        IndexTable_optional&
        IndexTable ();

        void
        IndexTable (const IndexTable_type& x);

        void
        IndexTable (const IndexTable_optional& x);

        void
        IndexTable (::std::auto_ptr< IndexTable_type > p);

        // Constructors.
        //
        HeaderPartition (const PartitionPack_type&,
                         const HeaderMetadata_type&);

        HeaderPartition (::std::auto_ptr< PartitionPack_type >&,
                         ::std::auto_ptr< HeaderMetadata_type >&);

        HeaderPartition (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        HeaderPartition (const HeaderPartition& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        virtual HeaderPartition*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~HeaderPartition ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< PartitionPack_type > PartitionPack_;
        ::xsd::cxx::tree::one< HeaderMetadata_type > HeaderMetadata_;
        IndexTable_optional IndexTable_;
      };

      class BodyPartition: public ::xml_schema::type
      {
        public:
        // PartitionPack
        // 
        typedef ::st434::s377m::groups::PartitionPackType PartitionPack_type;
        typedef ::xsd::cxx::tree::traits< PartitionPack_type, char > PartitionPack_traits;

        const PartitionPack_type&
        PartitionPack () const;

        PartitionPack_type&
        PartitionPack ();

        void
        PartitionPack (const PartitionPack_type& x);

        void
        PartitionPack (::std::auto_ptr< PartitionPack_type > p);

        // HeaderMetadata
        // 
        typedef ::st434::s377m::multiplex::HeaderMetadata HeaderMetadata_type;
        typedef ::xsd::cxx::tree::optional< HeaderMetadata_type > HeaderMetadata_optional;
        typedef ::xsd::cxx::tree::traits< HeaderMetadata_type, char > HeaderMetadata_traits;

        const HeaderMetadata_optional&
        HeaderMetadata () const;

        HeaderMetadata_optional&
        HeaderMetadata ();

        void
        HeaderMetadata (const HeaderMetadata_type& x);

        void
        HeaderMetadata (const HeaderMetadata_optional& x);

        void
        HeaderMetadata (::std::auto_ptr< HeaderMetadata_type > p);

        // IndexTable
        // 
        typedef ::st434::s377m::groups::IndexTable IndexTable_type;
        typedef ::xsd::cxx::tree::optional< IndexTable_type > IndexTable_optional;
        typedef ::xsd::cxx::tree::traits< IndexTable_type, char > IndexTable_traits;

        const IndexTable_optional&
        IndexTable () const;

        IndexTable_optional&
        IndexTable ();

        void
        IndexTable (const IndexTable_type& x);

        void
        IndexTable (const IndexTable_optional& x);

        void
        IndexTable (::std::auto_ptr< IndexTable_type > p);

        // Constructors.
        //
        BodyPartition (const PartitionPack_type&);

        BodyPartition (::std::auto_ptr< PartitionPack_type >&);

        BodyPartition (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

        BodyPartition (const BodyPartition& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

        virtual BodyPartition*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~BodyPartition ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< PartitionPack_type > PartitionPack_;
        HeaderMetadata_optional HeaderMetadata_;
        IndexTable_optional IndexTable_;
      };

      class FooterPartition: public ::xml_schema::type
      {
        public:
        // PartitionPack
        // 
        typedef ::st434::s377m::groups::PartitionPackType PartitionPack_type;
        typedef ::xsd::cxx::tree::traits< PartitionPack_type, char > PartitionPack_traits;

        const PartitionPack_type&
        PartitionPack () const;

        PartitionPack_type&
        PartitionPack ();

        void
        PartitionPack (const PartitionPack_type& x);

        void
        PartitionPack (::std::auto_ptr< PartitionPack_type > p);

        // HeaderMetadata
        // 
        typedef ::st434::s377m::multiplex::HeaderMetadata HeaderMetadata_type;
        typedef ::xsd::cxx::tree::optional< HeaderMetadata_type > HeaderMetadata_optional;
        typedef ::xsd::cxx::tree::traits< HeaderMetadata_type, char > HeaderMetadata_traits;

        const HeaderMetadata_optional&
        HeaderMetadata () const;

        HeaderMetadata_optional&
        HeaderMetadata ();

        void
        HeaderMetadata (const HeaderMetadata_type& x);

        void
        HeaderMetadata (const HeaderMetadata_optional& x);

        void
        HeaderMetadata (::std::auto_ptr< HeaderMetadata_type > p);

        // IndexTable
        // 
        typedef ::st434::s377m::groups::IndexTable IndexTable_type;
        typedef ::xsd::cxx::tree::optional< IndexTable_type > IndexTable_optional;
        typedef ::xsd::cxx::tree::traits< IndexTable_type, char > IndexTable_traits;

        const IndexTable_optional&
        IndexTable () const;

        IndexTable_optional&
        IndexTable ();

        void
        IndexTable (const IndexTable_type& x);

        void
        IndexTable (const IndexTable_optional& x);

        void
        IndexTable (::std::auto_ptr< IndexTable_type > p);

        // Constructors.
        //
        FooterPartition (const PartitionPack_type&);

        FooterPartition (::std::auto_ptr< PartitionPack_type >&);

        FooterPartition (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        FooterPartition (const FooterPartition& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        virtual FooterPartition*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~FooterPartition ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< PartitionPack_type > PartitionPack_;
        HeaderMetadata_optional HeaderMetadata_;
        IndexTable_optional IndexTable_;
      };

      class HeaderMetadata: public ::xml_schema::type
      {
        public:
        // PrimerPack
        // 
        typedef ::st434::s377m::groups::PrimerPackType PrimerPack_type;
        typedef ::xsd::cxx::tree::traits< PrimerPack_type, char > PrimerPack_traits;

        const PrimerPack_type&
        PrimerPack () const;

        PrimerPack_type&
        PrimerPack ();

        void
        PrimerPack (const PrimerPack_type& x);

        void
        PrimerPack (::std::auto_ptr< PrimerPack_type > p);

        // MetadataSets
        // 
        typedef ::st434::s377m::multiplex::MetadataSets MetadataSets_type;
        typedef ::xsd::cxx::tree::traits< MetadataSets_type, char > MetadataSets_traits;

        const MetadataSets_type&
        MetadataSets () const;

        MetadataSets_type&
        MetadataSets ();

        void
        MetadataSets (const MetadataSets_type& x);

        void
        MetadataSets (::std::auto_ptr< MetadataSets_type > p);

        // Constructors.
        //
        HeaderMetadata (const PrimerPack_type&,
                        const MetadataSets_type&);

        HeaderMetadata (::std::auto_ptr< PrimerPack_type >&,
                        ::std::auto_ptr< MetadataSets_type >&);

        HeaderMetadata (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        HeaderMetadata (const HeaderMetadata& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        virtual HeaderMetadata*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~HeaderMetadata ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< PrimerPack_type > PrimerPack_;
        ::xsd::cxx::tree::one< MetadataSets_type > MetadataSets_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace st434
{
  namespace s377m
  {
    namespace multiplex
    {
      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace st434
{
  namespace s377m
  {
    namespace multiplex
    {
      // Serialize to std::ostream.
      //

      void
      HeaderPartition_ (::std::ostream& os,
                        const ::st434::s377m::multiplex::HeaderPartition& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      void
      HeaderPartition_ (::std::ostream& os,
                        const ::st434::s377m::multiplex::HeaderPartition& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      void
      HeaderPartition_ (::std::ostream& os,
                        const ::st434::s377m::multiplex::HeaderPartition& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      HeaderPartition_ (::xercesc::XMLFormatTarget& ft,
                        const ::st434::s377m::multiplex::HeaderPartition& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      void
      HeaderPartition_ (::xercesc::XMLFormatTarget& ft,
                        const ::st434::s377m::multiplex::HeaderPartition& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      void
      HeaderPartition_ (::xercesc::XMLFormatTarget& ft,
                        const ::st434::s377m::multiplex::HeaderPartition& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      HeaderPartition_ (::xercesc::DOMDocument& d,
                        const ::st434::s377m::multiplex::HeaderPartition& x,
                        ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      HeaderPartition_ (const ::st434::s377m::multiplex::HeaderPartition& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      BodyPartition_ (::std::ostream& os,
                      const ::st434::s377m::multiplex::BodyPartition& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      BodyPartition_ (::std::ostream& os,
                      const ::st434::s377m::multiplex::BodyPartition& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      BodyPartition_ (::std::ostream& os,
                      const ::st434::s377m::multiplex::BodyPartition& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      BodyPartition_ (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::multiplex::BodyPartition& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      BodyPartition_ (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::multiplex::BodyPartition& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      BodyPartition_ (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::multiplex::BodyPartition& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      BodyPartition_ (::xercesc::DOMDocument& d,
                      const ::st434::s377m::multiplex::BodyPartition& x,
                      ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      BodyPartition_ (const ::st434::s377m::multiplex::BodyPartition& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      FooterPartition_ (::std::ostream& os,
                        const ::st434::s377m::multiplex::FooterPartition& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      void
      FooterPartition_ (::std::ostream& os,
                        const ::st434::s377m::multiplex::FooterPartition& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      void
      FooterPartition_ (::std::ostream& os,
                        const ::st434::s377m::multiplex::FooterPartition& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      FooterPartition_ (::xercesc::XMLFormatTarget& ft,
                        const ::st434::s377m::multiplex::FooterPartition& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      void
      FooterPartition_ (::xercesc::XMLFormatTarget& ft,
                        const ::st434::s377m::multiplex::FooterPartition& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      void
      FooterPartition_ (::xercesc::XMLFormatTarget& ft,
                        const ::st434::s377m::multiplex::FooterPartition& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      FooterPartition_ (::xercesc::DOMDocument& d,
                        const ::st434::s377m::multiplex::FooterPartition& x,
                        ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      FooterPartition_ (const ::st434::s377m::multiplex::FooterPartition& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      HeaderMetadata_ (::std::ostream& os,
                       const ::st434::s377m::multiplex::HeaderMetadata& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      HeaderMetadata_ (::std::ostream& os,
                       const ::st434::s377m::multiplex::HeaderMetadata& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      HeaderMetadata_ (::std::ostream& os,
                       const ::st434::s377m::multiplex::HeaderMetadata& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      HeaderMetadata_ (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::multiplex::HeaderMetadata& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      HeaderMetadata_ (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::multiplex::HeaderMetadata& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      HeaderMetadata_ (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::multiplex::HeaderMetadata& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      HeaderMetadata_ (::xercesc::DOMDocument& d,
                       const ::st434::s377m::multiplex::HeaderMetadata& x,
                       ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      HeaderMetadata_ (const ::st434::s377m::multiplex::HeaderMetadata& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const HeaderPartition&);

      void
      operator<< (::xercesc::DOMElement&, const BodyPartition&);

      void
      operator<< (::xercesc::DOMElement&, const FooterPartition&);

      void
      operator<< (::xercesc::DOMElement&, const HeaderMetadata&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MXF_PARTITIONS_HXX
