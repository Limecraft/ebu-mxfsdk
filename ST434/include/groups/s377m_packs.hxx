// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GROUPS_S377M_PACKS_HXX
#define GROUPS_S377M_PACKS_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      class PartitionPackType;
      class PrimerPackType;
      class RandomIndexPackType;
      class LocalTagEntryBatch;
      class PartitionOffsetPairArray;
      class LocalTagEntry;
      class PartitionOffsetPair;
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "dictionary/rp210.hxx"

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      class PartitionPackType: public ::xml_schema::type
      {
        public:
        // MajorVersion
        // 
        typedef ::st434::s377m::types::UInt16 MajorVersion_type;
        typedef ::xsd::cxx::tree::traits< MajorVersion_type, char > MajorVersion_traits;

        const MajorVersion_type&
        MajorVersion () const;

        MajorVersion_type&
        MajorVersion ();

        void
        MajorVersion (const MajorVersion_type& x);

        void
        MajorVersion (::std::auto_ptr< MajorVersion_type > p);

        static MajorVersion_type
        MajorVersion_default_value ();

        // MinorVersion
        // 
        typedef ::st434::s377m::types::UInt16 MinorVersion_type;
        typedef ::xsd::cxx::tree::traits< MinorVersion_type, char > MinorVersion_traits;

        const MinorVersion_type&
        MinorVersion () const;

        MinorVersion_type&
        MinorVersion ();

        void
        MinorVersion (const MinorVersion_type& x);

        void
        MinorVersion (::std::auto_ptr< MinorVersion_type > p);

        static MinorVersion_type
        MinorVersion_default_value ();

        // KAGSize
        // 
        typedef ::st434::s377m::types::UInt32 KAGSize_type;
        typedef ::xsd::cxx::tree::traits< KAGSize_type, char > KAGSize_traits;

        const KAGSize_type&
        KAGSize () const;

        KAGSize_type&
        KAGSize ();

        void
        KAGSize (const KAGSize_type& x);

        void
        KAGSize (::std::auto_ptr< KAGSize_type > p);

        // ThisPartition
        // 
        typedef ::st434::s377m::types::UInt64 ThisPartition_type;
        typedef ::xsd::cxx::tree::traits< ThisPartition_type, char > ThisPartition_traits;

        const ThisPartition_type&
        ThisPartition () const;

        ThisPartition_type&
        ThisPartition ();

        void
        ThisPartition (const ThisPartition_type& x);

        void
        ThisPartition (::std::auto_ptr< ThisPartition_type > p);

        // PreviousPartition
        // 
        typedef ::st434::s377m::types::UInt64 PreviousPartition_type;
        typedef ::xsd::cxx::tree::traits< PreviousPartition_type, char > PreviousPartition_traits;

        const PreviousPartition_type&
        PreviousPartition () const;

        PreviousPartition_type&
        PreviousPartition ();

        void
        PreviousPartition (const PreviousPartition_type& x);

        void
        PreviousPartition (::std::auto_ptr< PreviousPartition_type > p);

        static PreviousPartition_type
        PreviousPartition_default_value ();

        // FooterPartition
        // 
        typedef ::st434::s377m::types::UInt64 FooterPartition_type;
        typedef ::xsd::cxx::tree::traits< FooterPartition_type, char > FooterPartition_traits;

        const FooterPartition_type&
        FooterPartition () const;

        FooterPartition_type&
        FooterPartition ();

        void
        FooterPartition (const FooterPartition_type& x);

        void
        FooterPartition (::std::auto_ptr< FooterPartition_type > p);

        static FooterPartition_type
        FooterPartition_default_value ();

        // HeaderByteCount
        // 
        typedef ::st434::s377m::types::UInt64 HeaderByteCount_type;
        typedef ::xsd::cxx::tree::traits< HeaderByteCount_type, char > HeaderByteCount_traits;

        const HeaderByteCount_type&
        HeaderByteCount () const;

        HeaderByteCount_type&
        HeaderByteCount ();

        void
        HeaderByteCount (const HeaderByteCount_type& x);

        void
        HeaderByteCount (::std::auto_ptr< HeaderByteCount_type > p);

        static HeaderByteCount_type
        HeaderByteCount_default_value ();

        // IndexByteCount
        // 
        typedef ::st434::s377m::types::UInt64 IndexByteCount_type;
        typedef ::xsd::cxx::tree::traits< IndexByteCount_type, char > IndexByteCount_traits;

        const IndexByteCount_type&
        IndexByteCount () const;

        IndexByteCount_type&
        IndexByteCount ();

        void
        IndexByteCount (const IndexByteCount_type& x);

        void
        IndexByteCount (::std::auto_ptr< IndexByteCount_type > p);

        static IndexByteCount_type
        IndexByteCount_default_value ();

        // IndexStreamID
        // 
        typedef ::st434::s377m::types::UInt32 IndexStreamID_type;
        typedef ::xsd::cxx::tree::traits< IndexStreamID_type, char > IndexStreamID_traits;

        const IndexStreamID_type&
        IndexStreamID () const;

        IndexStreamID_type&
        IndexStreamID ();

        void
        IndexStreamID (const IndexStreamID_type& x);

        void
        IndexStreamID (::std::auto_ptr< IndexStreamID_type > p);

        static IndexStreamID_type
        IndexStreamID_default_value ();

        // BodyOffset
        // 
        typedef ::st434::s377m::types::UInt64 BodyOffset_type;
        typedef ::xsd::cxx::tree::traits< BodyOffset_type, char > BodyOffset_traits;

        const BodyOffset_type&
        BodyOffset () const;

        BodyOffset_type&
        BodyOffset ();

        void
        BodyOffset (const BodyOffset_type& x);

        void
        BodyOffset (::std::auto_ptr< BodyOffset_type > p);

        // EssenceStreamID
        // 
        typedef ::st434::s377m::types::UInt32 EssenceStreamID_type;
        typedef ::xsd::cxx::tree::traits< EssenceStreamID_type, char > EssenceStreamID_traits;

        const EssenceStreamID_type&
        EssenceStreamID () const;

        EssenceStreamID_type&
        EssenceStreamID ();

        void
        EssenceStreamID (const EssenceStreamID_type& x);

        void
        EssenceStreamID (::std::auto_ptr< EssenceStreamID_type > p);

        static EssenceStreamID_type
        EssenceStreamID_default_value ();

        // OperationalPattern
        // 
        typedef ::st434::s377m::types::UL OperationalPattern_type;
        typedef ::xsd::cxx::tree::traits< OperationalPattern_type, char > OperationalPattern_traits;

        const OperationalPattern_type&
        OperationalPattern () const;

        OperationalPattern_type&
        OperationalPattern ();

        void
        OperationalPattern (const OperationalPattern_type& x);

        void
        OperationalPattern (::std::auto_ptr< OperationalPattern_type > p);

        // EssenceContainers
        // 
        typedef ::properties::S335M::EssenceContainers EssenceContainers_type;
        typedef ::xsd::cxx::tree::traits< EssenceContainers_type, char > EssenceContainers_traits;

        const EssenceContainers_type&
        EssenceContainers () const;

        EssenceContainers_type&
        EssenceContainers ();

        void
        EssenceContainers (const EssenceContainers_type& x);

        void
        EssenceContainers (::std::auto_ptr< EssenceContainers_type > p);

        // Constructors.
        //
        PartitionPackType (const MajorVersion_type&,
                           const MinorVersion_type&,
                           const KAGSize_type&,
                           const ThisPartition_type&,
                           const PreviousPartition_type&,
                           const FooterPartition_type&,
                           const HeaderByteCount_type&,
                           const IndexByteCount_type&,
                           const IndexStreamID_type&,
                           const BodyOffset_type&,
                           const EssenceStreamID_type&,
                           const OperationalPattern_type&,
                           const EssenceContainers_type&);

        PartitionPackType (const MajorVersion_type&,
                           const MinorVersion_type&,
                           const KAGSize_type&,
                           const ThisPartition_type&,
                           const PreviousPartition_type&,
                           const FooterPartition_type&,
                           const HeaderByteCount_type&,
                           const IndexByteCount_type&,
                           const IndexStreamID_type&,
                           const BodyOffset_type&,
                           const EssenceStreamID_type&,
                           const OperationalPattern_type&,
                           ::std::auto_ptr< EssenceContainers_type >&);

        PartitionPackType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        PartitionPackType (const PartitionPackType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        virtual PartitionPackType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~PartitionPackType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< MajorVersion_type > MajorVersion_;
        ::xsd::cxx::tree::one< MinorVersion_type > MinorVersion_;
        ::xsd::cxx::tree::one< KAGSize_type > KAGSize_;
        ::xsd::cxx::tree::one< ThisPartition_type > ThisPartition_;
        ::xsd::cxx::tree::one< PreviousPartition_type > PreviousPartition_;
        ::xsd::cxx::tree::one< FooterPartition_type > FooterPartition_;
        ::xsd::cxx::tree::one< HeaderByteCount_type > HeaderByteCount_;
        ::xsd::cxx::tree::one< IndexByteCount_type > IndexByteCount_;
        ::xsd::cxx::tree::one< IndexStreamID_type > IndexStreamID_;
        ::xsd::cxx::tree::one< BodyOffset_type > BodyOffset_;
        ::xsd::cxx::tree::one< EssenceStreamID_type > EssenceStreamID_;
        ::xsd::cxx::tree::one< OperationalPattern_type > OperationalPattern_;
        ::xsd::cxx::tree::one< EssenceContainers_type > EssenceContainers_;
      };

      class PrimerPackType: public ::xml_schema::type
      {
        public:
        // LocalTagEntryBatch
        // 
        typedef ::st434::s377m::groups::LocalTagEntryBatch LocalTagEntryBatch_type;
        typedef ::xsd::cxx::tree::traits< LocalTagEntryBatch_type, char > LocalTagEntryBatch_traits;

        const LocalTagEntryBatch_type&
        LocalTagEntryBatch () const;

        LocalTagEntryBatch_type&
        LocalTagEntryBatch ();

        void
        LocalTagEntryBatch (const LocalTagEntryBatch_type& x);

        void
        LocalTagEntryBatch (::std::auto_ptr< LocalTagEntryBatch_type > p);

        // Constructors.
        //
        PrimerPackType (const LocalTagEntryBatch_type&);

        PrimerPackType (::std::auto_ptr< LocalTagEntryBatch_type >&);

        PrimerPackType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        PrimerPackType (const PrimerPackType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        virtual PrimerPackType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~PrimerPackType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< LocalTagEntryBatch_type > LocalTagEntryBatch_;
      };

      class RandomIndexPackType: public ::xml_schema::type
      {
        public:
        // PartitionOffsetPairArray
        // 
        typedef ::st434::s377m::groups::PartitionOffsetPairArray PartitionOffsetPairArray_type;
        typedef ::xsd::cxx::tree::traits< PartitionOffsetPairArray_type, char > PartitionOffsetPairArray_traits;

        const PartitionOffsetPairArray_type&
        PartitionOffsetPairArray () const;

        PartitionOffsetPairArray_type&
        PartitionOffsetPairArray ();

        void
        PartitionOffsetPairArray (const PartitionOffsetPairArray_type& x);

        void
        PartitionOffsetPairArray (::std::auto_ptr< PartitionOffsetPairArray_type > p);

        // PackLength
        // 
        typedef ::st434::s377m::types::UInt32 PackLength_type;
        typedef ::xsd::cxx::tree::traits< PackLength_type, char > PackLength_traits;

        const PackLength_type&
        PackLength () const;

        PackLength_type&
        PackLength ();

        void
        PackLength (const PackLength_type& x);

        void
        PackLength (::std::auto_ptr< PackLength_type > p);

        // Constructors.
        //
        RandomIndexPackType (const PartitionOffsetPairArray_type&,
                             const PackLength_type&);

        RandomIndexPackType (::std::auto_ptr< PartitionOffsetPairArray_type >&,
                             const PackLength_type&);

        RandomIndexPackType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

        RandomIndexPackType (const RandomIndexPackType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

        virtual RandomIndexPackType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~RandomIndexPackType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< PartitionOffsetPairArray_type > PartitionOffsetPairArray_;
        ::xsd::cxx::tree::one< PackLength_type > PackLength_;
      };

      class LocalTagEntryBatch: public ::xml_schema::type
      {
        public:
        // LocalTagEntry
        // 
        typedef ::st434::s377m::groups::LocalTagEntry LocalTagEntry_type;
        typedef ::xsd::cxx::tree::sequence< LocalTagEntry_type > LocalTagEntry_sequence;
        typedef LocalTagEntry_sequence::iterator LocalTagEntry_iterator;
        typedef LocalTagEntry_sequence::const_iterator LocalTagEntry_const_iterator;
        typedef ::xsd::cxx::tree::traits< LocalTagEntry_type, char > LocalTagEntry_traits;

        const LocalTagEntry_sequence&
        LocalTagEntry () const;

        LocalTagEntry_sequence&
        LocalTagEntry ();

        void
        LocalTagEntry (const LocalTagEntry_sequence& s);

        // Constructors.
        //
        LocalTagEntryBatch ();

        LocalTagEntryBatch (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        LocalTagEntryBatch (const LocalTagEntryBatch& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        virtual LocalTagEntryBatch*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~LocalTagEntryBatch ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        LocalTagEntry_sequence LocalTagEntry_;
      };

      class PartitionOffsetPairArray: public ::xml_schema::type
      {
        public:
        // PartitionOffsetPair
        // 
        typedef ::st434::s377m::groups::PartitionOffsetPair PartitionOffsetPair_type;
        typedef ::xsd::cxx::tree::sequence< PartitionOffsetPair_type > PartitionOffsetPair_sequence;
        typedef PartitionOffsetPair_sequence::iterator PartitionOffsetPair_iterator;
        typedef PartitionOffsetPair_sequence::const_iterator PartitionOffsetPair_const_iterator;
        typedef ::xsd::cxx::tree::traits< PartitionOffsetPair_type, char > PartitionOffsetPair_traits;

        const PartitionOffsetPair_sequence&
        PartitionOffsetPair () const;

        PartitionOffsetPair_sequence&
        PartitionOffsetPair ();

        void
        PartitionOffsetPair (const PartitionOffsetPair_sequence& s);

        // Constructors.
        //
        PartitionOffsetPairArray ();

        PartitionOffsetPairArray (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

        PartitionOffsetPairArray (const PartitionOffsetPairArray& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

        virtual PartitionOffsetPairArray*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~PartitionOffsetPairArray ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        PartitionOffsetPair_sequence PartitionOffsetPair_;
      };

      class LocalTagEntry: public ::xml_schema::type
      {
        public:
        // LocalTag
        // 
        typedef ::st434::s377m::types::LocalTag LocalTag_type;
        typedef ::xsd::cxx::tree::traits< LocalTag_type, char > LocalTag_traits;

        const LocalTag_type&
        LocalTag () const;

        LocalTag_type&
        LocalTag ();

        void
        LocalTag (const LocalTag_type& x);

        void
        LocalTag (::std::auto_ptr< LocalTag_type > p);

        // LocalTagUniqueID
        // 
        typedef ::st434::s377m::types::UL LocalTagUniqueID_type;
        typedef ::xsd::cxx::tree::traits< LocalTagUniqueID_type, char > LocalTagUniqueID_traits;

        const LocalTagUniqueID_type&
        LocalTagUniqueID () const;

        LocalTagUniqueID_type&
        LocalTagUniqueID ();

        void
        LocalTagUniqueID (const LocalTagUniqueID_type& x);

        void
        LocalTagUniqueID (::std::auto_ptr< LocalTagUniqueID_type > p);

        // Constructors.
        //
        LocalTagEntry (const LocalTag_type&,
                       const LocalTagUniqueID_type&);

        LocalTagEntry (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

        LocalTagEntry (const LocalTagEntry& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

        virtual LocalTagEntry*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~LocalTagEntry ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< LocalTag_type > LocalTag_;
        ::xsd::cxx::tree::one< LocalTagUniqueID_type > LocalTagUniqueID_;
      };

      class PartitionOffsetPair: public ::xml_schema::type
      {
        public:
        // EssenceStreamID
        // 
        typedef ::st434::s377m::types::UInt32 EssenceStreamID_type;
        typedef ::xsd::cxx::tree::traits< EssenceStreamID_type, char > EssenceStreamID_traits;

        const EssenceStreamID_type&
        EssenceStreamID () const;

        EssenceStreamID_type&
        EssenceStreamID ();

        void
        EssenceStreamID (const EssenceStreamID_type& x);

        void
        EssenceStreamID (::std::auto_ptr< EssenceStreamID_type > p);

        static EssenceStreamID_type
        EssenceStreamID_default_value ();

        // ByteOffset
        // 
        typedef ::st434::s377m::types::UInt64 ByteOffset_type;
        typedef ::xsd::cxx::tree::traits< ByteOffset_type, char > ByteOffset_traits;

        const ByteOffset_type&
        ByteOffset () const;

        ByteOffset_type&
        ByteOffset ();

        void
        ByteOffset (const ByteOffset_type& x);

        void
        ByteOffset (::std::auto_ptr< ByteOffset_type > p);

        // Constructors.
        //
        PartitionOffsetPair (const EssenceStreamID_type&,
                             const ByteOffset_type&);

        PartitionOffsetPair (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

        PartitionOffsetPair (const PartitionOffsetPair& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

        virtual PartitionOffsetPair*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~PartitionOffsetPair ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< EssenceStreamID_type > EssenceStreamID_;
        ::xsd::cxx::tree::one< ByteOffset_type > ByteOffset_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      // Serialize to std::ostream.
      //

      void
      PartitionPack (::std::ostream& os,
                     const ::st434::s377m::groups::PartitionPackType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      PartitionPack (::std::ostream& os,
                     const ::st434::s377m::groups::PartitionPackType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      PartitionPack (::std::ostream& os,
                     const ::st434::s377m::groups::PartitionPackType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      PartitionPack (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s377m::groups::PartitionPackType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      PartitionPack (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s377m::groups::PartitionPackType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      PartitionPack (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s377m::groups::PartitionPackType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      PartitionPack (::xercesc::DOMDocument& d,
                     const ::st434::s377m::groups::PartitionPackType& x,
                     ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      PartitionPack (const ::st434::s377m::groups::PartitionPackType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const PartitionPackType&);

      // Serialize to std::ostream.
      //

      void
      PrimerPack (::std::ostream& os,
                  const ::st434::s377m::groups::PrimerPackType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      PrimerPack (::std::ostream& os,
                  const ::st434::s377m::groups::PrimerPackType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      PrimerPack (::std::ostream& os,
                  const ::st434::s377m::groups::PrimerPackType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      PrimerPack (::xercesc::XMLFormatTarget& ft,
                  const ::st434::s377m::groups::PrimerPackType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      PrimerPack (::xercesc::XMLFormatTarget& ft,
                  const ::st434::s377m::groups::PrimerPackType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      PrimerPack (::xercesc::XMLFormatTarget& ft,
                  const ::st434::s377m::groups::PrimerPackType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      PrimerPack (::xercesc::DOMDocument& d,
                  const ::st434::s377m::groups::PrimerPackType& x,
                  ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      PrimerPack (const ::st434::s377m::groups::PrimerPackType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const PrimerPackType&);

      // Serialize to std::ostream.
      //

      void
      RandomIndexPack (::std::ostream& os,
                       const ::st434::s377m::groups::RandomIndexPackType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      RandomIndexPack (::std::ostream& os,
                       const ::st434::s377m::groups::RandomIndexPackType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      RandomIndexPack (::std::ostream& os,
                       const ::st434::s377m::groups::RandomIndexPackType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      RandomIndexPack (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::groups::RandomIndexPackType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      RandomIndexPack (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::groups::RandomIndexPackType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      RandomIndexPack (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::groups::RandomIndexPackType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      RandomIndexPack (::xercesc::DOMDocument& d,
                       const ::st434::s377m::groups::RandomIndexPackType& x,
                       ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      RandomIndexPack (const ::st434::s377m::groups::RandomIndexPackType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const RandomIndexPackType&);

      void
      operator<< (::xercesc::DOMElement&, const LocalTagEntryBatch&);

      void
      operator<< (::xercesc::DOMElement&, const PartitionOffsetPairArray&);

      void
      operator<< (::xercesc::DOMElement&, const LocalTagEntry&);

      void
      operator<< (::xercesc::DOMElement&, const PartitionOffsetPair&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // GROUPS_S377M_PACKS_HXX
