// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GROUPS_S377M_INDEX_TABLES_HXX
#define GROUPS_S377M_INDEX_TABLES_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      class IndexTableSegmentType;
      class IndexTable;
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "dictionary/rp210.hxx"

#include "groups/s377m_metadata.hxx"

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      class IndexTableSegmentType: public ::st434::s377m::groups::AbstractSetType
      {
        public:
        // IndexEditRate
        // 
        typedef ::st434::s377m::types::Rational IndexEditRate_type;
        typedef ::xsd::cxx::tree::traits< IndexEditRate_type, char > IndexEditRate_traits;

        const IndexEditRate_type&
        IndexEditRate () const;

        IndexEditRate_type&
        IndexEditRate ();

        void
        IndexEditRate (const IndexEditRate_type& x);

        void
        IndexEditRate (::std::auto_ptr< IndexEditRate_type > p);

        // IndexStartPosition
        // 
        typedef ::st434::s377m::types::Position IndexStartPosition_type;
        typedef ::xsd::cxx::tree::traits< IndexStartPosition_type, char > IndexStartPosition_traits;

        const IndexStartPosition_type&
        IndexStartPosition () const;

        IndexStartPosition_type&
        IndexStartPosition ();

        void
        IndexStartPosition (const IndexStartPosition_type& x);

        void
        IndexStartPosition (::std::auto_ptr< IndexStartPosition_type > p);

        // IndexDuration
        // 
        typedef ::st434::s377m::types::Length IndexDuration_type;
        typedef ::xsd::cxx::tree::traits< IndexDuration_type, char > IndexDuration_traits;

        const IndexDuration_type&
        IndexDuration () const;

        IndexDuration_type&
        IndexDuration ();

        void
        IndexDuration (const IndexDuration_type& x);

        void
        IndexDuration (::std::auto_ptr< IndexDuration_type > p);

        // EditUnitByteCount
        // 
        typedef ::st434::s377m::types::UInt32 EditUnitByteCount_type;
        typedef ::xsd::cxx::tree::optional< EditUnitByteCount_type > EditUnitByteCount_optional;
        typedef ::xsd::cxx::tree::traits< EditUnitByteCount_type, char > EditUnitByteCount_traits;

        const EditUnitByteCount_optional&
        EditUnitByteCount () const;

        EditUnitByteCount_optional&
        EditUnitByteCount ();

        void
        EditUnitByteCount (const EditUnitByteCount_type& x);

        void
        EditUnitByteCount (const EditUnitByteCount_optional& x);

        void
        EditUnitByteCount (::std::auto_ptr< EditUnitByteCount_type > p);

        static EditUnitByteCount_type
        EditUnitByteCount_default_value ();

        // IndexStreamID
        // 
        typedef ::st434::s377m::types::UInt32 IndexStreamID_type;
        typedef ::xsd::cxx::tree::optional< IndexStreamID_type > IndexStreamID_optional;
        typedef ::xsd::cxx::tree::traits< IndexStreamID_type, char > IndexStreamID_traits;

        const IndexStreamID_optional&
        IndexStreamID () const;

        IndexStreamID_optional&
        IndexStreamID ();

        void
        IndexStreamID (const IndexStreamID_type& x);

        void
        IndexStreamID (const IndexStreamID_optional& x);

        void
        IndexStreamID (::std::auto_ptr< IndexStreamID_type > p);

        static IndexStreamID_type
        IndexStreamID_default_value ();

        // EssenceStreamID
        // 
        typedef ::st434::s377m::types::UInt32 EssenceStreamID_type;
        typedef ::xsd::cxx::tree::traits< EssenceStreamID_type, char > EssenceStreamID_traits;

        const EssenceStreamID_type&
        EssenceStreamID () const;

        EssenceStreamID_type&
        EssenceStreamID ();

        void
        EssenceStreamID (const EssenceStreamID_type& x);

        void
        EssenceStreamID (::std::auto_ptr< EssenceStreamID_type > p);

        static EssenceStreamID_type
        EssenceStreamID_default_value ();

        // SliceCount
        // 
        typedef ::st434::s377m::types::UInt8 SliceCount_type;
        typedef ::xsd::cxx::tree::optional< SliceCount_type > SliceCount_optional;
        typedef ::xsd::cxx::tree::traits< SliceCount_type, char > SliceCount_traits;

        const SliceCount_optional&
        SliceCount () const;

        SliceCount_optional&
        SliceCount ();

        void
        SliceCount (const SliceCount_type& x);

        void
        SliceCount (const SliceCount_optional& x);

        void
        SliceCount (::std::auto_ptr< SliceCount_type > p);

        static SliceCount_type
        SliceCount_default_value ();

        // PositionTableCount
        // 
        typedef ::st434::s377m::types::UInt8 PositionTableCount_type;
        typedef ::xsd::cxx::tree::optional< PositionTableCount_type > PositionTableCount_optional;
        typedef ::xsd::cxx::tree::traits< PositionTableCount_type, char > PositionTableCount_traits;

        const PositionTableCount_optional&
        PositionTableCount () const;

        PositionTableCount_optional&
        PositionTableCount ();

        void
        PositionTableCount (const PositionTableCount_type& x);

        void
        PositionTableCount (const PositionTableCount_optional& x);

        void
        PositionTableCount (::std::auto_ptr< PositionTableCount_type > p);

        // DeltaEntryArray
        // 
        typedef ::properties::S335M::DeltaEntryArray DeltaEntryArray_type;
        typedef ::xsd::cxx::tree::optional< DeltaEntryArray_type > DeltaEntryArray_optional;
        typedef ::xsd::cxx::tree::traits< DeltaEntryArray_type, char > DeltaEntryArray_traits;

        const DeltaEntryArray_optional&
        DeltaEntryArray () const;

        DeltaEntryArray_optional&
        DeltaEntryArray ();

        void
        DeltaEntryArray (const DeltaEntryArray_type& x);

        void
        DeltaEntryArray (const DeltaEntryArray_optional& x);

        void
        DeltaEntryArray (::std::auto_ptr< DeltaEntryArray_type > p);

        // IndexEntryArray
        // 
        typedef ::properties::S335M::IndexEntryArray IndexEntryArray_type;
        typedef ::xsd::cxx::tree::optional< IndexEntryArray_type > IndexEntryArray_optional;
        typedef ::xsd::cxx::tree::traits< IndexEntryArray_type, char > IndexEntryArray_traits;

        const IndexEntryArray_optional&
        IndexEntryArray () const;

        IndexEntryArray_optional&
        IndexEntryArray ();

        void
        IndexEntryArray (const IndexEntryArray_type& x);

        void
        IndexEntryArray (const IndexEntryArray_optional& x);

        void
        IndexEntryArray (::std::auto_ptr< IndexEntryArray_type > p);

        // Constructors.
        //
        IndexTableSegmentType (const InstanceID_type&,
                               const IndexEditRate_type&,
                               const IndexStartPosition_type&,
                               const IndexDuration_type&,
                               const EssenceStreamID_type&);

        IndexTableSegmentType (const InstanceID_type&,
                               ::std::auto_ptr< IndexEditRate_type >&,
                               const IndexStartPosition_type&,
                               const IndexDuration_type&,
                               const EssenceStreamID_type&);

        IndexTableSegmentType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

        IndexTableSegmentType (const IndexTableSegmentType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

        virtual IndexTableSegmentType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~IndexTableSegmentType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< IndexEditRate_type > IndexEditRate_;
        ::xsd::cxx::tree::one< IndexStartPosition_type > IndexStartPosition_;
        ::xsd::cxx::tree::one< IndexDuration_type > IndexDuration_;
        EditUnitByteCount_optional EditUnitByteCount_;
        IndexStreamID_optional IndexStreamID_;
        ::xsd::cxx::tree::one< EssenceStreamID_type > EssenceStreamID_;
        SliceCount_optional SliceCount_;
        PositionTableCount_optional PositionTableCount_;
        DeltaEntryArray_optional DeltaEntryArray_;
        IndexEntryArray_optional IndexEntryArray_;
      };

      class IndexTable: public ::xml_schema::type
      {
        public:
        // IndexTableSegment
        // 
        typedef ::st434::s377m::groups::IndexTableSegmentType IndexTableSegment_type;
        typedef ::xsd::cxx::tree::sequence< IndexTableSegment_type > IndexTableSegment_sequence;
        typedef IndexTableSegment_sequence::iterator IndexTableSegment_iterator;
        typedef IndexTableSegment_sequence::const_iterator IndexTableSegment_const_iterator;
        typedef ::xsd::cxx::tree::traits< IndexTableSegment_type, char > IndexTableSegment_traits;

        const IndexTableSegment_sequence&
        IndexTableSegment () const;

        IndexTableSegment_sequence&
        IndexTableSegment ();

        void
        IndexTableSegment (const IndexTableSegment_sequence& s);

        // Constructors.
        //
        IndexTable ();

        IndexTable (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

        IndexTable (const IndexTable& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

        virtual IndexTable*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~IndexTable ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        IndexTableSegment_sequence IndexTableSegment_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      // Serialize to std::ostream.
      //

      void
      IndexTableSegment (::std::ostream& os,
                         const ::st434::s377m::groups::IndexTableSegmentType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      IndexTableSegment (::std::ostream& os,
                         const ::st434::s377m::groups::IndexTableSegmentType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      IndexTableSegment (::std::ostream& os,
                         const ::st434::s377m::groups::IndexTableSegmentType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      IndexTableSegment (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::groups::IndexTableSegmentType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      IndexTableSegment (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::groups::IndexTableSegmentType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      IndexTableSegment (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::groups::IndexTableSegmentType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      IndexTableSegment (::xercesc::DOMDocument& d,
                         const ::st434::s377m::groups::IndexTableSegmentType& x,
                         ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      IndexTableSegment (const ::st434::s377m::groups::IndexTableSegmentType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const IndexTableSegmentType&);

      // Serialize to std::ostream.
      //

      void
      IndexTable_ (::std::ostream& os,
                   const ::st434::s377m::groups::IndexTable& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      IndexTable_ (::std::ostream& os,
                   const ::st434::s377m::groups::IndexTable& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      IndexTable_ (::std::ostream& os,
                   const ::st434::s377m::groups::IndexTable& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      IndexTable_ (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::groups::IndexTable& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      IndexTable_ (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::groups::IndexTable& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      IndexTable_ (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::groups::IndexTable& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      IndexTable_ (::xercesc::DOMDocument& d,
                   const ::st434::s377m::groups::IndexTable& x,
                   ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      IndexTable_ (const ::st434::s377m::groups::IndexTable& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const IndexTable&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // GROUPS_S377M_INDEX_TABLES_HXX
