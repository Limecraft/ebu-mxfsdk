// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GROUPS_S429_6_METADATA_HXX
#define GROUPS_S429_6_METADATA_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace st434
{
  namespace s429_6
  {
    namespace groups
    {
      class CryptographicFrameworkType;
      class CryptographicContextType;
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "dataTypes/s377m_types.hxx"

#include "dictionary/rp210.hxx"

#include "groups/s377m_metadata.hxx"

namespace st434
{
  namespace s429_6
  {
    namespace groups
    {
      class CryptographicFrameworkType: public ::st434::s377m::groups::DescriptiveFrameworkType
      {
        public:
        // CryptographicContextObject
        // 
        typedef ::properties::S335M::CryptographicContextObject CryptographicContextObject_type;
        typedef ::xsd::cxx::tree::traits< CryptographicContextObject_type, char > CryptographicContextObject_traits;

        const CryptographicContextObject_type&
        CryptographicContextObject () const;

        CryptographicContextObject_type&
        CryptographicContextObject ();

        void
        CryptographicContextObject (const CryptographicContextObject_type& x);

        void
        CryptographicContextObject (::std::auto_ptr< CryptographicContextObject_type > p);

        // Constructors.
        //
        CryptographicFrameworkType (const InstanceID_type&,
                                    const CryptographicContextObject_type&);

        CryptographicFrameworkType (const InstanceID_type&,
                                    ::std::auto_ptr< CryptographicContextObject_type >&);

        CryptographicFrameworkType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

        CryptographicFrameworkType (const CryptographicFrameworkType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

        virtual CryptographicFrameworkType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~CryptographicFrameworkType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< CryptographicContextObject_type > CryptographicContextObject_;
      };

      class CryptographicContextType: public ::st434::s377m::groups::DescriptiveObjectType
      {
        public:
        // CryptographicContextID
        // 
        typedef ::st434::s377m::types::UUID CryptographicContextID_type;
        typedef ::xsd::cxx::tree::traits< CryptographicContextID_type, char > CryptographicContextID_traits;

        const CryptographicContextID_type&
        CryptographicContextID () const;

        CryptographicContextID_type&
        CryptographicContextID ();

        void
        CryptographicContextID (const CryptographicContextID_type& x);

        void
        CryptographicContextID (::std::auto_ptr< CryptographicContextID_type > p);

        // SourceContainerFormat
        // 
        typedef ::st434::s377m::types::UL SourceContainerFormat_type;
        typedef ::xsd::cxx::tree::traits< SourceContainerFormat_type, char > SourceContainerFormat_traits;

        const SourceContainerFormat_type&
        SourceContainerFormat () const;

        SourceContainerFormat_type&
        SourceContainerFormat ();

        void
        SourceContainerFormat (const SourceContainerFormat_type& x);

        void
        SourceContainerFormat (::std::auto_ptr< SourceContainerFormat_type > p);

        // CipherAlgorithm
        // 
        typedef ::st434::s377m::types::UL CipherAlgorithm_type;
        typedef ::xsd::cxx::tree::traits< CipherAlgorithm_type, char > CipherAlgorithm_traits;

        const CipherAlgorithm_type&
        CipherAlgorithm () const;

        CipherAlgorithm_type&
        CipherAlgorithm ();

        void
        CipherAlgorithm (const CipherAlgorithm_type& x);

        void
        CipherAlgorithm (::std::auto_ptr< CipherAlgorithm_type > p);

        // MICAlgorithm
        // 
        typedef ::st434::s377m::types::UL MICAlgorithm_type;
        typedef ::xsd::cxx::tree::traits< MICAlgorithm_type, char > MICAlgorithm_traits;

        const MICAlgorithm_type&
        MICAlgorithm () const;

        MICAlgorithm_type&
        MICAlgorithm ();

        void
        MICAlgorithm (const MICAlgorithm_type& x);

        void
        MICAlgorithm (::std::auto_ptr< MICAlgorithm_type > p);

        // CryptographicKeyID
        // 
        typedef ::st434::s377m::types::UUID CryptographicKeyID_type;
        typedef ::xsd::cxx::tree::traits< CryptographicKeyID_type, char > CryptographicKeyID_traits;

        const CryptographicKeyID_type&
        CryptographicKeyID () const;

        CryptographicKeyID_type&
        CryptographicKeyID ();

        void
        CryptographicKeyID (const CryptographicKeyID_type& x);

        void
        CryptographicKeyID (::std::auto_ptr< CryptographicKeyID_type > p);

        // Constructors.
        //
        CryptographicContextType (const InstanceID_type&,
                                  const CryptographicContextID_type&,
                                  const SourceContainerFormat_type&,
                                  const CipherAlgorithm_type&,
                                  const MICAlgorithm_type&,
                                  const CryptographicKeyID_type&);

        CryptographicContextType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

        CryptographicContextType (const CryptographicContextType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

        virtual CryptographicContextType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~CryptographicContextType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< CryptographicContextID_type > CryptographicContextID_;
        ::xsd::cxx::tree::one< SourceContainerFormat_type > SourceContainerFormat_;
        ::xsd::cxx::tree::one< CipherAlgorithm_type > CipherAlgorithm_;
        ::xsd::cxx::tree::one< MICAlgorithm_type > MICAlgorithm_;
        ::xsd::cxx::tree::one< CryptographicKeyID_type > CryptographicKeyID_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace st434
{
  namespace s429_6
  {
    namespace groups
    {
      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (const ::std::string& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (const ::std::string& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (const ::std::string& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (::std::istream& is,
                                  const ::std::string& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (::xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (::xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (const ::std::string& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (const ::std::string& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (const ::std::string& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (::std::istream& is,
                                const ::std::string& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (::std::istream& is,
                                const ::std::string& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (const ::std::string& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (const ::std::string& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (::xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (::xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace st434
{
  namespace s429_6
  {
    namespace groups
    {
      // Serialize to std::ostream.
      //

      void
      CryptographicFramework_REF (::std::ostream& os,
                                  const ::st434::s377m::types::Ref& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

      void
      CryptographicFramework_REF (::std::ostream& os,
                                  const ::st434::s377m::types::Ref& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

      void
      CryptographicFramework_REF (::std::ostream& os,
                                  const ::st434::s377m::types::Ref& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      CryptographicFramework_REF (::xercesc::XMLFormatTarget& ft,
                                  const ::st434::s377m::types::Ref& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

      void
      CryptographicFramework_REF (::xercesc::XMLFormatTarget& ft,
                                  const ::st434::s377m::types::Ref& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

      void
      CryptographicFramework_REF (::xercesc::XMLFormatTarget& ft,
                                  const ::st434::s377m::types::Ref& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      CryptographicFramework_REF (::xercesc::DOMDocument& d,
                                  const ::st434::s377m::types::Ref& x,
                                  ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      CryptographicFramework_REF (const ::st434::s377m::types::Ref& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      CryptographicFramework (::std::ostream& os,
                              const ::st434::s429_6::groups::CryptographicFrameworkType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

      void
      CryptographicFramework (::std::ostream& os,
                              const ::st434::s429_6::groups::CryptographicFrameworkType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

      void
      CryptographicFramework (::std::ostream& os,
                              const ::st434::s429_6::groups::CryptographicFrameworkType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      CryptographicFramework (::xercesc::XMLFormatTarget& ft,
                              const ::st434::s429_6::groups::CryptographicFrameworkType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

      void
      CryptographicFramework (::xercesc::XMLFormatTarget& ft,
                              const ::st434::s429_6::groups::CryptographicFrameworkType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

      void
      CryptographicFramework (::xercesc::XMLFormatTarget& ft,
                              const ::st434::s429_6::groups::CryptographicFrameworkType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      CryptographicFramework (::xercesc::DOMDocument& d,
                              const ::st434::s429_6::groups::CryptographicFrameworkType& x,
                              ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      CryptographicFramework (const ::st434::s429_6::groups::CryptographicFrameworkType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const CryptographicFrameworkType&);

      // Serialize to std::ostream.
      //

      void
      CryptographicContext_REF (::std::ostream& os,
                                const ::st434::s377m::types::Ref& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

      void
      CryptographicContext_REF (::std::ostream& os,
                                const ::st434::s377m::types::Ref& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

      void
      CryptographicContext_REF (::std::ostream& os,
                                const ::st434::s377m::types::Ref& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      CryptographicContext_REF (::xercesc::XMLFormatTarget& ft,
                                const ::st434::s377m::types::Ref& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

      void
      CryptographicContext_REF (::xercesc::XMLFormatTarget& ft,
                                const ::st434::s377m::types::Ref& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

      void
      CryptographicContext_REF (::xercesc::XMLFormatTarget& ft,
                                const ::st434::s377m::types::Ref& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::string& e = "UTF-8",
                                ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      CryptographicContext_REF (::xercesc::DOMDocument& d,
                                const ::st434::s377m::types::Ref& x,
                                ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      CryptographicContext_REF (const ::st434::s377m::types::Ref& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      CryptographicContext (::std::ostream& os,
                            const ::st434::s429_6::groups::CryptographicContextType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

      void
      CryptographicContext (::std::ostream& os,
                            const ::st434::s429_6::groups::CryptographicContextType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

      void
      CryptographicContext (::std::ostream& os,
                            const ::st434::s429_6::groups::CryptographicContextType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      CryptographicContext (::xercesc::XMLFormatTarget& ft,
                            const ::st434::s429_6::groups::CryptographicContextType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

      void
      CryptographicContext (::xercesc::XMLFormatTarget& ft,
                            const ::st434::s429_6::groups::CryptographicContextType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

      void
      CryptographicContext (::xercesc::XMLFormatTarget& ft,
                            const ::st434::s429_6::groups::CryptographicContextType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      CryptographicContext (::xercesc::DOMDocument& d,
                            const ::st434::s429_6::groups::CryptographicContextType& x,
                            ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      CryptographicContext (const ::st434::s429_6::groups::CryptographicContextType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const CryptographicContextType&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // GROUPS_S429_6_METADATA_HXX
