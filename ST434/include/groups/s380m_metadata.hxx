// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GROUPS_S380M_METADATA_HXX
#define GROUPS_S380M_METADATA_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace st434
{
  namespace s380m
  {
    namespace groups
    {
      class DMS1ObjectType;
      class DMS1FrameworkType;
      class TextLanguageType;
      class ThesaurusType;
      class ContactType;
      class ProductionClipFrameworkType;
      class ProductionFrameworkType;
      class ClipFrameworkType;
      class SceneFrameworkType;
      class TitlesType;
      class DMS1IdentificationType;
      class GroupRelationshipType;
      class BrandingType;
      class DMS1EventType;
      class PublicationType;
      class AwardType;
      class CaptionsDescriptionType;
      class DMS1AnnotationType;
      class SettingPeriodType;
      class ScriptingType;
      class ClassificationType;
      class ShotType;
      class KeypointType;
      class ParticipantType;
      class PersonType;
      class OrganizationType;
      class LocationType;
      class AddressType;
      class CommunicationsType;
      class ContractType;
      class RightsType;
      class PictureFormatType;
      class DeviceParametersType;
      class NameValueType;
      class ProcessingType;
      class ProjectType;
      class ContactsListType;
      class CueWordsType;
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "dataTypes/s377m_types.hxx"

#include "dictionary/rp210.hxx"

#include "groups/s377m_metadata.hxx"

namespace st434
{
  namespace s380m
  {
    namespace groups
    {
      class DMS1ObjectType: public ::st434::s377m::groups::DescriptiveObjectType
      {
        public:
        // Constructors.
        //
        DMS1ObjectType (const InstanceID_type&);

        DMS1ObjectType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        DMS1ObjectType (const DMS1ObjectType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        virtual DMS1ObjectType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~DMS1ObjectType ();
      };

      class DMS1FrameworkType: public ::st434::s377m::groups::DescriptiveFrameworkType
      {
        public:
        // FrameworkExtendedTextLanguageCode
        // 
        typedef ::st434::s377m::types::ISO7bitCharString FrameworkExtendedTextLanguageCode_type;
        typedef ::xsd::cxx::tree::traits< FrameworkExtendedTextLanguageCode_type, char > FrameworkExtendedTextLanguageCode_traits;

        const FrameworkExtendedTextLanguageCode_type&
        FrameworkExtendedTextLanguageCode () const;

        FrameworkExtendedTextLanguageCode_type&
        FrameworkExtendedTextLanguageCode ();

        void
        FrameworkExtendedTextLanguageCode (const FrameworkExtendedTextLanguageCode_type& x);

        void
        FrameworkExtendedTextLanguageCode (::std::auto_ptr< FrameworkExtendedTextLanguageCode_type > p);

        // FrameworkThesaurusName
        // 
        typedef ::st434::s377m::types::UTF16CharString FrameworkThesaurusName_type;
        typedef ::xsd::cxx::tree::optional< FrameworkThesaurusName_type > FrameworkThesaurusName_optional;
        typedef ::xsd::cxx::tree::traits< FrameworkThesaurusName_type, char > FrameworkThesaurusName_traits;

        const FrameworkThesaurusName_optional&
        FrameworkThesaurusName () const;

        FrameworkThesaurusName_optional&
        FrameworkThesaurusName ();

        void
        FrameworkThesaurusName (const FrameworkThesaurusName_type& x);

        void
        FrameworkThesaurusName (const FrameworkThesaurusName_optional& x);

        void
        FrameworkThesaurusName (::std::auto_ptr< FrameworkThesaurusName_type > p);

        // FrameworkTitle
        // 
        typedef ::st434::s377m::types::UTF16CharString FrameworkTitle_type;
        typedef ::xsd::cxx::tree::optional< FrameworkTitle_type > FrameworkTitle_optional;
        typedef ::xsd::cxx::tree::traits< FrameworkTitle_type, char > FrameworkTitle_traits;

        const FrameworkTitle_optional&
        FrameworkTitle () const;

        FrameworkTitle_optional&
        FrameworkTitle ();

        void
        FrameworkTitle (const FrameworkTitle_type& x);

        void
        FrameworkTitle (const FrameworkTitle_optional& x);

        void
        FrameworkTitle (::std::auto_ptr< FrameworkTitle_type > p);

        // PrimaryExtendedSpokenLanguageCode
        // 
        typedef ::st434::s377m::types::ISO7bitCharString PrimaryExtendedSpokenLanguageCode_type;
        typedef ::xsd::cxx::tree::optional< PrimaryExtendedSpokenLanguageCode_type > PrimaryExtendedSpokenLanguageCode_optional;
        typedef ::xsd::cxx::tree::traits< PrimaryExtendedSpokenLanguageCode_type, char > PrimaryExtendedSpokenLanguageCode_traits;

        const PrimaryExtendedSpokenLanguageCode_optional&
        PrimaryExtendedSpokenLanguageCode () const;

        PrimaryExtendedSpokenLanguageCode_optional&
        PrimaryExtendedSpokenLanguageCode ();

        void
        PrimaryExtendedSpokenLanguageCode (const PrimaryExtendedSpokenLanguageCode_type& x);

        void
        PrimaryExtendedSpokenLanguageCode (const PrimaryExtendedSpokenLanguageCode_optional& x);

        void
        PrimaryExtendedSpokenLanguageCode (::std::auto_ptr< PrimaryExtendedSpokenLanguageCode_type > p);

        // SecondaryExtendedSpokenLanguageCode
        // 
        typedef ::st434::s377m::types::ISO7bitCharString SecondaryExtendedSpokenLanguageCode_type;
        typedef ::xsd::cxx::tree::optional< SecondaryExtendedSpokenLanguageCode_type > SecondaryExtendedSpokenLanguageCode_optional;
        typedef ::xsd::cxx::tree::traits< SecondaryExtendedSpokenLanguageCode_type, char > SecondaryExtendedSpokenLanguageCode_traits;

        const SecondaryExtendedSpokenLanguageCode_optional&
        SecondaryExtendedSpokenLanguageCode () const;

        SecondaryExtendedSpokenLanguageCode_optional&
        SecondaryExtendedSpokenLanguageCode ();

        void
        SecondaryExtendedSpokenLanguageCode (const SecondaryExtendedSpokenLanguageCode_type& x);

        void
        SecondaryExtendedSpokenLanguageCode (const SecondaryExtendedSpokenLanguageCode_optional& x);

        void
        SecondaryExtendedSpokenLanguageCode (::std::auto_ptr< SecondaryExtendedSpokenLanguageCode_type > p);

        // OriginalExtendedSpokenLanguageCode
        // 
        typedef ::st434::s377m::types::ISO7bitCharString OriginalExtendedSpokenLanguageCode_type;
        typedef ::xsd::cxx::tree::optional< OriginalExtendedSpokenLanguageCode_type > OriginalExtendedSpokenLanguageCode_optional;
        typedef ::xsd::cxx::tree::traits< OriginalExtendedSpokenLanguageCode_type, char > OriginalExtendedSpokenLanguageCode_traits;

        const OriginalExtendedSpokenLanguageCode_optional&
        OriginalExtendedSpokenLanguageCode () const;

        OriginalExtendedSpokenLanguageCode_optional&
        OriginalExtendedSpokenLanguageCode ();

        void
        OriginalExtendedSpokenLanguageCode (const OriginalExtendedSpokenLanguageCode_type& x);

        void
        OriginalExtendedSpokenLanguageCode (const OriginalExtendedSpokenLanguageCode_optional& x);

        void
        OriginalExtendedSpokenLanguageCode (::std::auto_ptr< OriginalExtendedSpokenLanguageCode_type > p);

        // MetadataServerLocators
        // 
        typedef ::properties::S335M::MetadataServerLocators MetadataServerLocators_type;
        typedef ::xsd::cxx::tree::optional< MetadataServerLocators_type > MetadataServerLocators_optional;
        typedef ::xsd::cxx::tree::traits< MetadataServerLocators_type, char > MetadataServerLocators_traits;

        const MetadataServerLocators_optional&
        MetadataServerLocators () const;

        MetadataServerLocators_optional&
        MetadataServerLocators ();

        void
        MetadataServerLocators (const MetadataServerLocators_type& x);

        void
        MetadataServerLocators (const MetadataServerLocators_optional& x);

        void
        MetadataServerLocators (::std::auto_ptr< MetadataServerLocators_type > p);

        // TitlesObjects
        // 
        typedef ::properties::S335M::TitlesObjects TitlesObjects_type;
        typedef ::xsd::cxx::tree::optional< TitlesObjects_type > TitlesObjects_optional;
        typedef ::xsd::cxx::tree::traits< TitlesObjects_type, char > TitlesObjects_traits;

        const TitlesObjects_optional&
        TitlesObjects () const;

        TitlesObjects_optional&
        TitlesObjects ();

        void
        TitlesObjects (const TitlesObjects_type& x);

        void
        TitlesObjects (const TitlesObjects_optional& x);

        void
        TitlesObjects (::std::auto_ptr< TitlesObjects_type > p);

        // AnnotationObjects
        // 
        typedef ::properties::S335M::AnnotationObjects AnnotationObjects_type;
        typedef ::xsd::cxx::tree::optional< AnnotationObjects_type > AnnotationObjects_optional;
        typedef ::xsd::cxx::tree::traits< AnnotationObjects_type, char > AnnotationObjects_traits;

        const AnnotationObjects_optional&
        AnnotationObjects () const;

        AnnotationObjects_optional&
        AnnotationObjects ();

        void
        AnnotationObjects (const AnnotationObjects_type& x);

        void
        AnnotationObjects (const AnnotationObjects_optional& x);

        void
        AnnotationObjects (::std::auto_ptr< AnnotationObjects_type > p);

        // ParticipantObjects
        // 
        typedef ::properties::S335M::ParticipantObjects ParticipantObjects_type;
        typedef ::xsd::cxx::tree::optional< ParticipantObjects_type > ParticipantObjects_optional;
        typedef ::xsd::cxx::tree::traits< ParticipantObjects_type, char > ParticipantObjects_traits;

        const ParticipantObjects_optional&
        ParticipantObjects () const;

        ParticipantObjects_optional&
        ParticipantObjects ();

        void
        ParticipantObjects (const ParticipantObjects_type& x);

        void
        ParticipantObjects (const ParticipantObjects_optional& x);

        void
        ParticipantObjects (::std::auto_ptr< ParticipantObjects_type > p);

        // Locations
        // 
        typedef ::properties::S335M::Locations Locations_type;
        typedef ::xsd::cxx::tree::optional< Locations_type > Locations_optional;
        typedef ::xsd::cxx::tree::traits< Locations_type, char > Locations_traits;

        const Locations_optional&
        Locations () const;

        Locations_optional&
        Locations ();

        void
        Locations (const Locations_type& x);

        void
        Locations (const Locations_optional& x);

        void
        Locations (::std::auto_ptr< Locations_type > p);

        // ContactsListObject
        // 
        typedef ::properties::S335M::ContactsListObject ContactsListObject_type;
        typedef ::xsd::cxx::tree::optional< ContactsListObject_type > ContactsListObject_optional;
        typedef ::xsd::cxx::tree::traits< ContactsListObject_type, char > ContactsListObject_traits;

        const ContactsListObject_optional&
        ContactsListObject () const;

        ContactsListObject_optional&
        ContactsListObject ();

        void
        ContactsListObject (const ContactsListObject_type& x);

        void
        ContactsListObject (const ContactsListObject_optional& x);

        void
        ContactsListObject (::std::auto_ptr< ContactsListObject_type > p);

        // Constructors.
        //
        DMS1FrameworkType (const InstanceID_type&,
                           const FrameworkExtendedTextLanguageCode_type&);

        DMS1FrameworkType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        DMS1FrameworkType (const DMS1FrameworkType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        virtual DMS1FrameworkType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~DMS1FrameworkType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< FrameworkExtendedTextLanguageCode_type > FrameworkExtendedTextLanguageCode_;
        FrameworkThesaurusName_optional FrameworkThesaurusName_;
        FrameworkTitle_optional FrameworkTitle_;
        PrimaryExtendedSpokenLanguageCode_optional PrimaryExtendedSpokenLanguageCode_;
        SecondaryExtendedSpokenLanguageCode_optional SecondaryExtendedSpokenLanguageCode_;
        OriginalExtendedSpokenLanguageCode_optional OriginalExtendedSpokenLanguageCode_;
        MetadataServerLocators_optional MetadataServerLocators_;
        TitlesObjects_optional TitlesObjects_;
        AnnotationObjects_optional AnnotationObjects_;
        ParticipantObjects_optional ParticipantObjects_;
        Locations_optional Locations_;
        ContactsListObject_optional ContactsListObject_;
      };

      class TextLanguageType: public ::st434::s380m::groups::DMS1ObjectType
      {
        public:
        // ExtendedTextLanguageCode
        // 
        typedef ::st434::s377m::types::ISO7bitCharString ExtendedTextLanguageCode_type;
        typedef ::xsd::cxx::tree::optional< ExtendedTextLanguageCode_type > ExtendedTextLanguageCode_optional;
        typedef ::xsd::cxx::tree::traits< ExtendedTextLanguageCode_type, char > ExtendedTextLanguageCode_traits;

        const ExtendedTextLanguageCode_optional&
        ExtendedTextLanguageCode () const;

        ExtendedTextLanguageCode_optional&
        ExtendedTextLanguageCode ();

        void
        ExtendedTextLanguageCode (const ExtendedTextLanguageCode_type& x);

        void
        ExtendedTextLanguageCode (const ExtendedTextLanguageCode_optional& x);

        void
        ExtendedTextLanguageCode (::std::auto_ptr< ExtendedTextLanguageCode_type > p);

        // Constructors.
        //
        TextLanguageType (const InstanceID_type&);

        TextLanguageType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

        TextLanguageType (const TextLanguageType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

        virtual TextLanguageType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~TextLanguageType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ExtendedTextLanguageCode_optional ExtendedTextLanguageCode_;
      };

      class ThesaurusType: public ::st434::s380m::groups::TextLanguageType
      {
        public:
        // ThesaurusName
        // 
        typedef ::st434::s377m::types::UTF16CharString ThesaurusName_type;
        typedef ::xsd::cxx::tree::optional< ThesaurusName_type > ThesaurusName_optional;
        typedef ::xsd::cxx::tree::traits< ThesaurusName_type, char > ThesaurusName_traits;

        const ThesaurusName_optional&
        ThesaurusName () const;

        ThesaurusName_optional&
        ThesaurusName ();

        void
        ThesaurusName (const ThesaurusName_type& x);

        void
        ThesaurusName (const ThesaurusName_optional& x);

        void
        ThesaurusName (::std::auto_ptr< ThesaurusName_type > p);

        // Constructors.
        //
        ThesaurusType (const InstanceID_type&);

        ThesaurusType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

        ThesaurusType (const ThesaurusType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

        virtual ThesaurusType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~ThesaurusType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ThesaurusName_optional ThesaurusName_;
      };

      class ContactType: public ::st434::s380m::groups::ThesaurusType
      {
        public:
        // ContactID
        // 
        typedef ::st434::s377m::types::UUID ContactID_type;
        typedef ::xsd::cxx::tree::traits< ContactID_type, char > ContactID_traits;

        const ContactID_type&
        ContactID () const;

        ContactID_type&
        ContactID ();

        void
        ContactID (const ContactID_type& x);

        void
        ContactID (::std::auto_ptr< ContactID_type > p);

        // ContactNameValueObjects
        // 
        typedef ::properties::S335M::ContactNameValueObjects ContactNameValueObjects_type;
        typedef ::xsd::cxx::tree::optional< ContactNameValueObjects_type > ContactNameValueObjects_optional;
        typedef ::xsd::cxx::tree::traits< ContactNameValueObjects_type, char > ContactNameValueObjects_traits;

        const ContactNameValueObjects_optional&
        ContactNameValueObjects () const;

        ContactNameValueObjects_optional&
        ContactNameValueObjects ();

        void
        ContactNameValueObjects (const ContactNameValueObjects_type& x);

        void
        ContactNameValueObjects (const ContactNameValueObjects_optional& x);

        void
        ContactNameValueObjects (::std::auto_ptr< ContactNameValueObjects_type > p);

        // AddressObjects
        // 
        typedef ::properties::S335M::AddressObjects AddressObjects_type;
        typedef ::xsd::cxx::tree::optional< AddressObjects_type > AddressObjects_optional;
        typedef ::xsd::cxx::tree::traits< AddressObjects_type, char > AddressObjects_traits;

        const AddressObjects_optional&
        AddressObjects () const;

        AddressObjects_optional&
        AddressObjects ();

        void
        AddressObjects (const AddressObjects_type& x);

        void
        AddressObjects (const AddressObjects_optional& x);

        void
        AddressObjects (::std::auto_ptr< AddressObjects_type > p);

        // Constructors.
        //
        ContactType (const InstanceID_type&,
                     const ContactID_type&);

        ContactType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

        ContactType (const ContactType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

        virtual ContactType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~ContactType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< ContactID_type > ContactID_;
        ContactNameValueObjects_optional ContactNameValueObjects_;
        AddressObjects_optional AddressObjects_;
      };

      class ProductionClipFrameworkType: public ::st434::s380m::groups::DMS1FrameworkType
      {
        public:
        // CaptionsDescriptionObjects
        // 
        typedef ::properties::S335M::CaptionsDescriptionObjects CaptionsDescriptionObjects_type;
        typedef ::xsd::cxx::tree::optional< CaptionsDescriptionObjects_type > CaptionsDescriptionObjects_optional;
        typedef ::xsd::cxx::tree::traits< CaptionsDescriptionObjects_type, char > CaptionsDescriptionObjects_traits;

        const CaptionsDescriptionObjects_optional&
        CaptionsDescriptionObjects () const;

        CaptionsDescriptionObjects_optional&
        CaptionsDescriptionObjects ();

        void
        CaptionsDescriptionObjects (const CaptionsDescriptionObjects_type& x);

        void
        CaptionsDescriptionObjects (const CaptionsDescriptionObjects_optional& x);

        void
        CaptionsDescriptionObjects (::std::auto_ptr< CaptionsDescriptionObjects_type > p);

        // ContractObjects
        // 
        typedef ::properties::S335M::ContractObjects ContractObjects_type;
        typedef ::xsd::cxx::tree::optional< ContractObjects_type > ContractObjects_optional;
        typedef ::xsd::cxx::tree::traits< ContractObjects_type, char > ContractObjects_traits;

        const ContractObjects_optional&
        ContractObjects () const;

        ContractObjects_optional&
        ContractObjects ();

        void
        ContractObjects (const ContractObjects_type& x);

        void
        ContractObjects (const ContractObjects_optional& x);

        void
        ContractObjects (::std::auto_ptr< ContractObjects_type > p);

        // PictureFormatObject
        // 
        typedef ::properties::S335M::PictureFormatObject PictureFormatObject_type;
        typedef ::xsd::cxx::tree::optional< PictureFormatObject_type > PictureFormatObject_optional;
        typedef ::xsd::cxx::tree::traits< PictureFormatObject_type, char > PictureFormatObject_traits;

        const PictureFormatObject_optional&
        PictureFormatObject () const;

        PictureFormatObject_optional&
        PictureFormatObject ();

        void
        PictureFormatObject (const PictureFormatObject_type& x);

        void
        PictureFormatObject (const PictureFormatObject_optional& x);

        void
        PictureFormatObject (::std::auto_ptr< PictureFormatObject_type > p);

        // ProjectObject
        // 
        typedef ::properties::S335M::ProjectObject ProjectObject_type;
        typedef ::xsd::cxx::tree::optional< ProjectObject_type > ProjectObject_optional;
        typedef ::xsd::cxx::tree::traits< ProjectObject_type, char > ProjectObject_traits;

        const ProjectObject_optional&
        ProjectObject () const;

        ProjectObject_optional&
        ProjectObject ();

        void
        ProjectObject (const ProjectObject_type& x);

        void
        ProjectObject (const ProjectObject_optional& x);

        void
        ProjectObject (::std::auto_ptr< ProjectObject_type > p);

        // Constructors.
        //
        ProductionClipFrameworkType (const InstanceID_type&,
                                     const FrameworkExtendedTextLanguageCode_type&);

        ProductionClipFrameworkType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

        ProductionClipFrameworkType (const ProductionClipFrameworkType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

        virtual ProductionClipFrameworkType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~ProductionClipFrameworkType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        CaptionsDescriptionObjects_optional CaptionsDescriptionObjects_;
        ContractObjects_optional ContractObjects_;
        PictureFormatObject_optional PictureFormatObject_;
        ProjectObject_optional ProjectObject_;
      };

      class ProductionFrameworkType: public ::st434::s380m::groups::ProductionClipFrameworkType
      {
        public:
        // IntegrationIndication
        // 
        typedef ::st434::s377m::types::UTF16CharString IntegrationIndication_type;
        typedef ::xsd::cxx::tree::optional< IntegrationIndication_type > IntegrationIndication_optional;
        typedef ::xsd::cxx::tree::traits< IntegrationIndication_type, char > IntegrationIndication_traits;

        const IntegrationIndication_optional&
        IntegrationIndication () const;

        IntegrationIndication_optional&
        IntegrationIndication ();

        void
        IntegrationIndication (const IntegrationIndication_type& x);

        void
        IntegrationIndication (const IntegrationIndication_optional& x);

        void
        IntegrationIndication (::std::auto_ptr< IntegrationIndication_type > p);

        // IdentificationObjects
        // 
        typedef ::properties::S335M::IdentificationObjects IdentificationObjects_type;
        typedef ::xsd::cxx::tree::optional< IdentificationObjects_type > IdentificationObjects_optional;
        typedef ::xsd::cxx::tree::traits< IdentificationObjects_type, char > IdentificationObjects_traits;

        const IdentificationObjects_optional&
        IdentificationObjects () const;

        IdentificationObjects_optional&
        IdentificationObjects ();

        void
        IdentificationObjects (const IdentificationObjects_type& x);

        void
        IdentificationObjects (const IdentificationObjects_optional& x);

        void
        IdentificationObjects (::std::auto_ptr< IdentificationObjects_type > p);

        // GroupRelationshipObjects
        // 
        typedef ::properties::S335M::GroupRelationshipObjects GroupRelationshipObjects_type;
        typedef ::xsd::cxx::tree::optional< GroupRelationshipObjects_type > GroupRelationshipObjects_optional;
        typedef ::xsd::cxx::tree::traits< GroupRelationshipObjects_type, char > GroupRelationshipObjects_traits;

        const GroupRelationshipObjects_optional&
        GroupRelationshipObjects () const;

        GroupRelationshipObjects_optional&
        GroupRelationshipObjects ();

        void
        GroupRelationshipObjects (const GroupRelationshipObjects_type& x);

        void
        GroupRelationshipObjects (const GroupRelationshipObjects_optional& x);

        void
        GroupRelationshipObjects (::std::auto_ptr< GroupRelationshipObjects_type > p);

        // BrandingObjects
        // 
        typedef ::properties::S335M::BrandingObjects BrandingObjects_type;
        typedef ::xsd::cxx::tree::optional< BrandingObjects_type > BrandingObjects_optional;
        typedef ::xsd::cxx::tree::traits< BrandingObjects_type, char > BrandingObjects_traits;

        const BrandingObjects_optional&
        BrandingObjects () const;

        BrandingObjects_optional&
        BrandingObjects ();

        void
        BrandingObjects (const BrandingObjects_type& x);

        void
        BrandingObjects (const BrandingObjects_optional& x);

        void
        BrandingObjects (::std::auto_ptr< BrandingObjects_type > p);

        // EventObjects
        // 
        typedef ::properties::S335M::EventObjects EventObjects_type;
        typedef ::xsd::cxx::tree::optional< EventObjects_type > EventObjects_optional;
        typedef ::xsd::cxx::tree::traits< EventObjects_type, char > EventObjects_traits;

        const EventObjects_optional&
        EventObjects () const;

        EventObjects_optional&
        EventObjects ();

        void
        EventObjects (const EventObjects_type& x);

        void
        EventObjects (const EventObjects_optional& x);

        void
        EventObjects (::std::auto_ptr< EventObjects_type > p);

        // AwardObjects
        // 
        typedef ::properties::S335M::AwardObjects AwardObjects_type;
        typedef ::xsd::cxx::tree::optional< AwardObjects_type > AwardObjects_optional;
        typedef ::xsd::cxx::tree::traits< AwardObjects_type, char > AwardObjects_traits;

        const AwardObjects_optional&
        AwardObjects () const;

        AwardObjects_optional&
        AwardObjects ();

        void
        AwardObjects (const AwardObjects_type& x);

        void
        AwardObjects (const AwardObjects_optional& x);

        void
        AwardObjects (::std::auto_ptr< AwardObjects_type > p);

        // ProductionSettingPeriodObjects
        // 
        typedef ::properties::S335M::ProductionSettingPeriodObjects ProductionSettingPeriodObjects_type;
        typedef ::xsd::cxx::tree::optional< ProductionSettingPeriodObjects_type > ProductionSettingPeriodObjects_optional;
        typedef ::xsd::cxx::tree::traits< ProductionSettingPeriodObjects_type, char > ProductionSettingPeriodObjects_traits;

        const ProductionSettingPeriodObjects_optional&
        ProductionSettingPeriodObjects () const;

        ProductionSettingPeriodObjects_optional&
        ProductionSettingPeriodObjects ();

        void
        ProductionSettingPeriodObjects (const ProductionSettingPeriodObjects_type& x);

        void
        ProductionSettingPeriodObjects (const ProductionSettingPeriodObjects_optional& x);

        void
        ProductionSettingPeriodObjects (::std::auto_ptr< ProductionSettingPeriodObjects_type > p);

        // Constructors.
        //
        ProductionFrameworkType (const InstanceID_type&,
                                 const FrameworkExtendedTextLanguageCode_type&);

        ProductionFrameworkType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

        ProductionFrameworkType (const ProductionFrameworkType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

        virtual ProductionFrameworkType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~ProductionFrameworkType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        IntegrationIndication_optional IntegrationIndication_;
        IdentificationObjects_optional IdentificationObjects_;
        GroupRelationshipObjects_optional GroupRelationshipObjects_;
        BrandingObjects_optional BrandingObjects_;
        EventObjects_optional EventObjects_;
        AwardObjects_optional AwardObjects_;
        ProductionSettingPeriodObjects_optional ProductionSettingPeriodObjects_;
      };

      class ClipFrameworkType: public ::st434::s380m::groups::ProductionClipFrameworkType
      {
        public:
        // ClipKind
        // 
        typedef ::st434::s377m::types::UTF16CharString ClipKind_type;
        typedef ::xsd::cxx::tree::traits< ClipKind_type, char > ClipKind_traits;

        const ClipKind_type&
        ClipKind () const;

        ClipKind_type&
        ClipKind ();

        void
        ClipKind (const ClipKind_type& x);

        void
        ClipKind (::std::auto_ptr< ClipKind_type > p);

        // ClipNumber
        // 
        typedef ::st434::s377m::types::ISO7bitCharString ClipNumber_type;
        typedef ::xsd::cxx::tree::optional< ClipNumber_type > ClipNumber_optional;
        typedef ::xsd::cxx::tree::traits< ClipNumber_type, char > ClipNumber_traits;

        const ClipNumber_optional&
        ClipNumber () const;

        ClipNumber_optional&
        ClipNumber ();

        void
        ClipNumber (const ClipNumber_type& x);

        void
        ClipNumber (const ClipNumber_optional& x);

        void
        ClipNumber (::std::auto_ptr< ClipNumber_type > p);

        // ExtendedClipID
        // 
        typedef ::st434::s377m::types::UMID64 ExtendedClipID_type;
        typedef ::xsd::cxx::tree::optional< ExtendedClipID_type > ExtendedClipID_optional;
        typedef ::xsd::cxx::tree::traits< ExtendedClipID_type, char > ExtendedClipID_traits;

        const ExtendedClipID_optional&
        ExtendedClipID () const;

        ExtendedClipID_optional&
        ExtendedClipID ();

        void
        ExtendedClipID (const ExtendedClipID_type& x);

        void
        ExtendedClipID (const ExtendedClipID_optional& x);

        void
        ExtendedClipID (::std::auto_ptr< ExtendedClipID_type > p);

        // ClipCreationDateTime
        // 
        typedef ::st434::s377m::types::TimestampType ClipCreationDateTime_type;
        typedef ::xsd::cxx::tree::optional< ClipCreationDateTime_type > ClipCreationDateTime_optional;
        typedef ::xsd::cxx::tree::traits< ClipCreationDateTime_type, char > ClipCreationDateTime_traits;

        const ClipCreationDateTime_optional&
        ClipCreationDateTime () const;

        ClipCreationDateTime_optional&
        ClipCreationDateTime ();

        void
        ClipCreationDateTime (const ClipCreationDateTime_type& x);

        void
        ClipCreationDateTime (const ClipCreationDateTime_optional& x);

        void
        ClipCreationDateTime (::std::auto_ptr< ClipCreationDateTime_type > p);

        // TakeNumber
        // 
        typedef ::st434::s377m::types::UInt16 TakeNumber_type;
        typedef ::xsd::cxx::tree::optional< TakeNumber_type > TakeNumber_optional;
        typedef ::xsd::cxx::tree::traits< TakeNumber_type, char > TakeNumber_traits;

        const TakeNumber_optional&
        TakeNumber () const;

        TakeNumber_optional&
        TakeNumber ();

        void
        TakeNumber (const TakeNumber_type& x);

        void
        TakeNumber (const TakeNumber_optional& x);

        void
        TakeNumber (::std::auto_ptr< TakeNumber_type > p);

        // SlateInformation
        // 
        typedef ::st434::s377m::types::UTF16CharString SlateInformation_type;
        typedef ::xsd::cxx::tree::optional< SlateInformation_type > SlateInformation_optional;
        typedef ::xsd::cxx::tree::traits< SlateInformation_type, char > SlateInformation_traits;

        const SlateInformation_optional&
        SlateInformation () const;

        SlateInformation_optional&
        SlateInformation ();

        void
        SlateInformation (const SlateInformation_type& x);

        void
        SlateInformation (const SlateInformation_optional& x);

        void
        SlateInformation (::std::auto_ptr< SlateInformation_type > p);

        // ScriptingObjects
        // 
        typedef ::properties::S335M::ScriptingObjects ScriptingObjects_type;
        typedef ::xsd::cxx::tree::optional< ScriptingObjects_type > ScriptingObjects_optional;
        typedef ::xsd::cxx::tree::traits< ScriptingObjects_type, char > ScriptingObjects_traits;

        const ScriptingObjects_optional&
        ScriptingObjects () const;

        ScriptingObjects_optional&
        ScriptingObjects ();

        void
        ScriptingObjects (const ScriptingObjects_type& x);

        void
        ScriptingObjects (const ScriptingObjects_optional& x);

        void
        ScriptingObjects (::std::auto_ptr< ScriptingObjects_type > p);

        // ClipShotObjects
        // 
        typedef ::properties::S335M::ClipShotObjects ClipShotObjects_type;
        typedef ::xsd::cxx::tree::optional< ClipShotObjects_type > ClipShotObjects_optional;
        typedef ::xsd::cxx::tree::traits< ClipShotObjects_type, char > ClipShotObjects_traits;

        const ClipShotObjects_optional&
        ClipShotObjects () const;

        ClipShotObjects_optional&
        ClipShotObjects ();

        void
        ClipShotObjects (const ClipShotObjects_type& x);

        void
        ClipShotObjects (const ClipShotObjects_optional& x);

        void
        ClipShotObjects (::std::auto_ptr< ClipShotObjects_type > p);

        // DeviceParametersObjects
        // 
        typedef ::properties::S335M::DeviceParametersObjects DeviceParametersObjects_type;
        typedef ::xsd::cxx::tree::optional< DeviceParametersObjects_type > DeviceParametersObjects_optional;
        typedef ::xsd::cxx::tree::traits< DeviceParametersObjects_type, char > DeviceParametersObjects_traits;

        const DeviceParametersObjects_optional&
        DeviceParametersObjects () const;

        DeviceParametersObjects_optional&
        DeviceParametersObjects ();

        void
        DeviceParametersObjects (const DeviceParametersObjects_type& x);

        void
        DeviceParametersObjects (const DeviceParametersObjects_optional& x);

        void
        DeviceParametersObjects (::std::auto_ptr< DeviceParametersObjects_type > p);

        // ProcessingObject
        // 
        typedef ::properties::S335M::ProcessingObject ProcessingObject_type;
        typedef ::xsd::cxx::tree::optional< ProcessingObject_type > ProcessingObject_optional;
        typedef ::xsd::cxx::tree::traits< ProcessingObject_type, char > ProcessingObject_traits;

        const ProcessingObject_optional&
        ProcessingObject () const;

        ProcessingObject_optional&
        ProcessingObject ();

        void
        ProcessingObject (const ProcessingObject_type& x);

        void
        ProcessingObject (const ProcessingObject_optional& x);

        void
        ProcessingObject (::std::auto_ptr< ProcessingObject_type > p);

        // Constructors.
        //
        ClipFrameworkType (const InstanceID_type&,
                           const FrameworkExtendedTextLanguageCode_type&,
                           const ClipKind_type&);

        ClipFrameworkType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        ClipFrameworkType (const ClipFrameworkType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        virtual ClipFrameworkType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~ClipFrameworkType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< ClipKind_type > ClipKind_;
        ClipNumber_optional ClipNumber_;
        ExtendedClipID_optional ExtendedClipID_;
        ClipCreationDateTime_optional ClipCreationDateTime_;
        TakeNumber_optional TakeNumber_;
        SlateInformation_optional SlateInformation_;
        ScriptingObjects_optional ScriptingObjects_;
        ClipShotObjects_optional ClipShotObjects_;
        DeviceParametersObjects_optional DeviceParametersObjects_;
        ProcessingObject_optional ProcessingObject_;
      };

      class SceneFrameworkType: public ::st434::s380m::groups::DMS1FrameworkType
      {
        public:
        // SceneNumber
        // 
        typedef ::st434::s377m::types::ISO7bitCharString SceneNumber_type;
        typedef ::xsd::cxx::tree::optional< SceneNumber_type > SceneNumber_optional;
        typedef ::xsd::cxx::tree::traits< SceneNumber_type, char > SceneNumber_traits;

        const SceneNumber_optional&
        SceneNumber () const;

        SceneNumber_optional&
        SceneNumber ();

        void
        SceneNumber (const SceneNumber_type& x);

        void
        SceneNumber (const SceneNumber_optional& x);

        void
        SceneNumber (::std::auto_ptr< SceneNumber_type > p);

        // SceneSettingPeriodObjects
        // 
        typedef ::properties::S335M::SceneSettingPeriodObjects SceneSettingPeriodObjects_type;
        typedef ::xsd::cxx::tree::optional< SceneSettingPeriodObjects_type > SceneSettingPeriodObjects_optional;
        typedef ::xsd::cxx::tree::traits< SceneSettingPeriodObjects_type, char > SceneSettingPeriodObjects_traits;

        const SceneSettingPeriodObjects_optional&
        SceneSettingPeriodObjects () const;

        SceneSettingPeriodObjects_optional&
        SceneSettingPeriodObjects ();

        void
        SceneSettingPeriodObjects (const SceneSettingPeriodObjects_type& x);

        void
        SceneSettingPeriodObjects (const SceneSettingPeriodObjects_optional& x);

        void
        SceneSettingPeriodObjects (::std::auto_ptr< SceneSettingPeriodObjects_type > p);

        // SceneShotObjects
        // 
        typedef ::properties::S335M::SceneShotObjects SceneShotObjects_type;
        typedef ::xsd::cxx::tree::optional< SceneShotObjects_type > SceneShotObjects_optional;
        typedef ::xsd::cxx::tree::traits< SceneShotObjects_type, char > SceneShotObjects_traits;

        const SceneShotObjects_optional&
        SceneShotObjects () const;

        SceneShotObjects_optional&
        SceneShotObjects ();

        void
        SceneShotObjects (const SceneShotObjects_type& x);

        void
        SceneShotObjects (const SceneShotObjects_optional& x);

        void
        SceneShotObjects (::std::auto_ptr< SceneShotObjects_type > p);

        // Constructors.
        //
        SceneFrameworkType (const InstanceID_type&,
                            const FrameworkExtendedTextLanguageCode_type&);

        SceneFrameworkType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        SceneFrameworkType (const SceneFrameworkType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        virtual SceneFrameworkType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~SceneFrameworkType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SceneNumber_optional SceneNumber_;
        SceneSettingPeriodObjects_optional SceneSettingPeriodObjects_;
        SceneShotObjects_optional SceneShotObjects_;
      };

      class TitlesType: public ::st434::s380m::groups::TextLanguageType
      {
        public:
        // MainTitle
        // 
        typedef ::st434::s377m::types::UTF16CharString MainTitle_type;
        typedef ::xsd::cxx::tree::optional< MainTitle_type > MainTitle_optional;
        typedef ::xsd::cxx::tree::traits< MainTitle_type, char > MainTitle_traits;

        const MainTitle_optional&
        MainTitle () const;

        MainTitle_optional&
        MainTitle ();

        void
        MainTitle (const MainTitle_type& x);

        void
        MainTitle (const MainTitle_optional& x);

        void
        MainTitle (::std::auto_ptr< MainTitle_type > p);

        // SecondaryTitle
        // 
        typedef ::st434::s377m::types::UTF16CharString SecondaryTitle_type;
        typedef ::xsd::cxx::tree::optional< SecondaryTitle_type > SecondaryTitle_optional;
        typedef ::xsd::cxx::tree::traits< SecondaryTitle_type, char > SecondaryTitle_traits;

        const SecondaryTitle_optional&
        SecondaryTitle () const;

        SecondaryTitle_optional&
        SecondaryTitle ();

        void
        SecondaryTitle (const SecondaryTitle_type& x);

        void
        SecondaryTitle (const SecondaryTitle_optional& x);

        void
        SecondaryTitle (::std::auto_ptr< SecondaryTitle_type > p);

        // WorkingTitle
        // 
        typedef ::st434::s377m::types::UTF16CharString WorkingTitle_type;
        typedef ::xsd::cxx::tree::optional< WorkingTitle_type > WorkingTitle_optional;
        typedef ::xsd::cxx::tree::traits< WorkingTitle_type, char > WorkingTitle_traits;

        const WorkingTitle_optional&
        WorkingTitle () const;

        WorkingTitle_optional&
        WorkingTitle ();

        void
        WorkingTitle (const WorkingTitle_type& x);

        void
        WorkingTitle (const WorkingTitle_optional& x);

        void
        WorkingTitle (::std::auto_ptr< WorkingTitle_type > p);

        // OriginalTitle
        // 
        typedef ::st434::s377m::types::UTF16CharString OriginalTitle_type;
        typedef ::xsd::cxx::tree::optional< OriginalTitle_type > OriginalTitle_optional;
        typedef ::xsd::cxx::tree::traits< OriginalTitle_type, char > OriginalTitle_traits;

        const OriginalTitle_optional&
        OriginalTitle () const;

        OriginalTitle_optional&
        OriginalTitle ();

        void
        OriginalTitle (const OriginalTitle_type& x);

        void
        OriginalTitle (const OriginalTitle_optional& x);

        void
        OriginalTitle (::std::auto_ptr< OriginalTitle_type > p);

        // VersionTitle
        // 
        typedef ::st434::s377m::types::UTF16CharString VersionTitle_type;
        typedef ::xsd::cxx::tree::optional< VersionTitle_type > VersionTitle_optional;
        typedef ::xsd::cxx::tree::traits< VersionTitle_type, char > VersionTitle_traits;

        const VersionTitle_optional&
        VersionTitle () const;

        VersionTitle_optional&
        VersionTitle ();

        void
        VersionTitle (const VersionTitle_type& x);

        void
        VersionTitle (const VersionTitle_optional& x);

        void
        VersionTitle (::std::auto_ptr< VersionTitle_type > p);

        // Constructors.
        //
        TitlesType (const InstanceID_type&);

        TitlesType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

        TitlesType (const TitlesType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

        virtual TitlesType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~TitlesType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        MainTitle_optional MainTitle_;
        SecondaryTitle_optional SecondaryTitle_;
        WorkingTitle_optional WorkingTitle_;
        OriginalTitle_optional OriginalTitle_;
        VersionTitle_optional VersionTitle_;
      };

      class DMS1IdentificationType: public ::st434::s380m::groups::ThesaurusType
      {
        public:
        // IdentifierKind
        // 
        typedef ::st434::s377m::types::ISO7bitCharString IdentifierKind_type;
        typedef ::xsd::cxx::tree::optional< IdentifierKind_type > IdentifierKind_optional;
        typedef ::xsd::cxx::tree::traits< IdentifierKind_type, char > IdentifierKind_traits;

        const IdentifierKind_optional&
        IdentifierKind () const;

        IdentifierKind_optional&
        IdentifierKind ();

        void
        IdentifierKind (const IdentifierKind_type& x);

        void
        IdentifierKind (const IdentifierKind_optional& x);

        void
        IdentifierKind (::std::auto_ptr< IdentifierKind_type > p);

        // IdentifierValue
        // 
        typedef ::st434::s377m::types::ISO7bitCharString IdentifierValue_type;
        typedef ::xsd::cxx::tree::optional< IdentifierValue_type > IdentifierValue_optional;
        typedef ::xsd::cxx::tree::traits< IdentifierValue_type, char > IdentifierValue_traits;

        const IdentifierValue_optional&
        IdentifierValue () const;

        IdentifierValue_optional&
        IdentifierValue ();

        void
        IdentifierValue (const IdentifierValue_type& x);

        void
        IdentifierValue (const IdentifierValue_optional& x);

        void
        IdentifierValue (::std::auto_ptr< IdentifierValue_type > p);

        // IdentificationLocator
        // 
        typedef ::st434::s377m::types::UL IdentificationLocator_type;
        typedef ::xsd::cxx::tree::optional< IdentificationLocator_type > IdentificationLocator_optional;
        typedef ::xsd::cxx::tree::traits< IdentificationLocator_type, char > IdentificationLocator_traits;

        const IdentificationLocator_optional&
        IdentificationLocator () const;

        IdentificationLocator_optional&
        IdentificationLocator ();

        void
        IdentificationLocator (const IdentificationLocator_type& x);

        void
        IdentificationLocator (const IdentificationLocator_optional& x);

        void
        IdentificationLocator (::std::auto_ptr< IdentificationLocator_type > p);

        // IdentificationIssuingAuthority
        // 
        typedef ::st434::s377m::types::UTF16CharString IdentificationIssuingAuthority_type;
        typedef ::xsd::cxx::tree::optional< IdentificationIssuingAuthority_type > IdentificationIssuingAuthority_optional;
        typedef ::xsd::cxx::tree::traits< IdentificationIssuingAuthority_type, char > IdentificationIssuingAuthority_traits;

        const IdentificationIssuingAuthority_optional&
        IdentificationIssuingAuthority () const;

        IdentificationIssuingAuthority_optional&
        IdentificationIssuingAuthority ();

        void
        IdentificationIssuingAuthority (const IdentificationIssuingAuthority_type& x);

        void
        IdentificationIssuingAuthority (const IdentificationIssuingAuthority_optional& x);

        void
        IdentificationIssuingAuthority (::std::auto_ptr< IdentificationIssuingAuthority_type > p);

        // Constructors.
        //
        DMS1IdentificationType (const InstanceID_type&);

        DMS1IdentificationType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

        DMS1IdentificationType (const DMS1IdentificationType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

        virtual DMS1IdentificationType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~DMS1IdentificationType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        IdentifierKind_optional IdentifierKind_;
        IdentifierValue_optional IdentifierValue_;
        IdentificationLocator_optional IdentificationLocator_;
        IdentificationIssuingAuthority_optional IdentificationIssuingAuthority_;
      };

      class GroupRelationshipType: public ::st434::s380m::groups::ThesaurusType
      {
        public:
        // ProgrammingGroupKind
        // 
        typedef ::st434::s377m::types::UTF16CharString ProgrammingGroupKind_type;
        typedef ::xsd::cxx::tree::optional< ProgrammingGroupKind_type > ProgrammingGroupKind_optional;
        typedef ::xsd::cxx::tree::traits< ProgrammingGroupKind_type, char > ProgrammingGroupKind_traits;

        const ProgrammingGroupKind_optional&
        ProgrammingGroupKind () const;

        ProgrammingGroupKind_optional&
        ProgrammingGroupKind ();

        void
        ProgrammingGroupKind (const ProgrammingGroupKind_type& x);

        void
        ProgrammingGroupKind (const ProgrammingGroupKind_optional& x);

        void
        ProgrammingGroupKind (::std::auto_ptr< ProgrammingGroupKind_type > p);

        // ProgrammingGroupTitle
        // 
        typedef ::st434::s377m::types::UTF16CharString ProgrammingGroupTitle_type;
        typedef ::xsd::cxx::tree::optional< ProgrammingGroupTitle_type > ProgrammingGroupTitle_optional;
        typedef ::xsd::cxx::tree::traits< ProgrammingGroupTitle_type, char > ProgrammingGroupTitle_traits;

        const ProgrammingGroupTitle_optional&
        ProgrammingGroupTitle () const;

        ProgrammingGroupTitle_optional&
        ProgrammingGroupTitle ();

        void
        ProgrammingGroupTitle (const ProgrammingGroupTitle_type& x);

        void
        ProgrammingGroupTitle (const ProgrammingGroupTitle_optional& x);

        void
        ProgrammingGroupTitle (::std::auto_ptr< ProgrammingGroupTitle_type > p);

        // GroupSynopsis
        // 
        typedef ::st434::s377m::types::UTF16CharString GroupSynopsis_type;
        typedef ::xsd::cxx::tree::optional< GroupSynopsis_type > GroupSynopsis_optional;
        typedef ::xsd::cxx::tree::traits< GroupSynopsis_type, char > GroupSynopsis_traits;

        const GroupSynopsis_optional&
        GroupSynopsis () const;

        GroupSynopsis_optional&
        GroupSynopsis ();

        void
        GroupSynopsis (const GroupSynopsis_type& x);

        void
        GroupSynopsis (const GroupSynopsis_optional& x);

        void
        GroupSynopsis (::std::auto_ptr< GroupSynopsis_type > p);

        // PositionInSequence
        // 
        typedef ::st434::s377m::types::UInt32 PositionInSequence_type;
        typedef ::xsd::cxx::tree::optional< PositionInSequence_type > PositionInSequence_optional;
        typedef ::xsd::cxx::tree::traits< PositionInSequence_type, char > PositionInSequence_traits;

        const PositionInSequence_optional&
        PositionInSequence () const;

        PositionInSequence_optional&
        PositionInSequence ();

        void
        PositionInSequence (const PositionInSequence_type& x);

        void
        PositionInSequence (const PositionInSequence_optional& x);

        void
        PositionInSequence (::std::auto_ptr< PositionInSequence_type > p);

        // TotalNumberInSequence
        // 
        typedef ::st434::s377m::types::UInt32 TotalNumberInSequence_type;
        typedef ::xsd::cxx::tree::optional< TotalNumberInSequence_type > TotalNumberInSequence_optional;
        typedef ::xsd::cxx::tree::traits< TotalNumberInSequence_type, char > TotalNumberInSequence_traits;

        const TotalNumberInSequence_optional&
        TotalNumberInSequence () const;

        TotalNumberInSequence_optional&
        TotalNumberInSequence ();

        void
        TotalNumberInSequence (const TotalNumberInSequence_type& x);

        void
        TotalNumberInSequence (const TotalNumberInSequence_optional& x);

        void
        TotalNumberInSequence (::std::auto_ptr< TotalNumberInSequence_type > p);

        // EpisodicStartNumber
        // 
        typedef ::st434::s377m::types::UInt16 EpisodicStartNumber_type;
        typedef ::xsd::cxx::tree::optional< EpisodicStartNumber_type > EpisodicStartNumber_optional;
        typedef ::xsd::cxx::tree::traits< EpisodicStartNumber_type, char > EpisodicStartNumber_traits;

        const EpisodicStartNumber_optional&
        EpisodicStartNumber () const;

        EpisodicStartNumber_optional&
        EpisodicStartNumber ();

        void
        EpisodicStartNumber (const EpisodicStartNumber_type& x);

        void
        EpisodicStartNumber (const EpisodicStartNumber_optional& x);

        void
        EpisodicStartNumber (::std::auto_ptr< EpisodicStartNumber_type > p);

        // EpisodicEndNumber
        // 
        typedef ::st434::s377m::types::UInt16 EpisodicEndNumber_type;
        typedef ::xsd::cxx::tree::optional< EpisodicEndNumber_type > EpisodicEndNumber_optional;
        typedef ::xsd::cxx::tree::traits< EpisodicEndNumber_type, char > EpisodicEndNumber_traits;

        const EpisodicEndNumber_optional&
        EpisodicEndNumber () const;

        EpisodicEndNumber_optional&
        EpisodicEndNumber ();

        void
        EpisodicEndNumber (const EpisodicEndNumber_type& x);

        void
        EpisodicEndNumber (const EpisodicEndNumber_optional& x);

        void
        EpisodicEndNumber (::std::auto_ptr< EpisodicEndNumber_type > p);

        // Constructors.
        //
        GroupRelationshipType (const InstanceID_type&);

        GroupRelationshipType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

        GroupRelationshipType (const GroupRelationshipType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

        virtual GroupRelationshipType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~GroupRelationshipType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ProgrammingGroupKind_optional ProgrammingGroupKind_;
        ProgrammingGroupTitle_optional ProgrammingGroupTitle_;
        GroupSynopsis_optional GroupSynopsis_;
        PositionInSequence_optional PositionInSequence_;
        TotalNumberInSequence_optional TotalNumberInSequence_;
        EpisodicStartNumber_optional EpisodicStartNumber_;
        EpisodicEndNumber_optional EpisodicEndNumber_;
      };

      class BrandingType: public ::st434::s380m::groups::TextLanguageType
      {
        public:
        // BrandMainTitle
        // 
        typedef ::st434::s377m::types::UTF16CharString BrandMainTitle_type;
        typedef ::xsd::cxx::tree::optional< BrandMainTitle_type > BrandMainTitle_optional;
        typedef ::xsd::cxx::tree::traits< BrandMainTitle_type, char > BrandMainTitle_traits;

        const BrandMainTitle_optional&
        BrandMainTitle () const;

        BrandMainTitle_optional&
        BrandMainTitle ();

        void
        BrandMainTitle (const BrandMainTitle_type& x);

        void
        BrandMainTitle (const BrandMainTitle_optional& x);

        void
        BrandMainTitle (::std::auto_ptr< BrandMainTitle_type > p);

        // BrandOriginalTitle
        // 
        typedef ::st434::s377m::types::UTF16CharString BrandOriginalTitle_type;
        typedef ::xsd::cxx::tree::optional< BrandOriginalTitle_type > BrandOriginalTitle_optional;
        typedef ::xsd::cxx::tree::traits< BrandOriginalTitle_type, char > BrandOriginalTitle_traits;

        const BrandOriginalTitle_optional&
        BrandOriginalTitle () const;

        BrandOriginalTitle_optional&
        BrandOriginalTitle ();

        void
        BrandOriginalTitle (const BrandOriginalTitle_type& x);

        void
        BrandOriginalTitle (const BrandOriginalTitle_optional& x);

        void
        BrandOriginalTitle (::std::auto_ptr< BrandOriginalTitle_type > p);

        // Constructors.
        //
        BrandingType (const InstanceID_type&);

        BrandingType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        BrandingType (const BrandingType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        virtual BrandingType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~BrandingType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        BrandMainTitle_optional BrandMainTitle_;
        BrandOriginalTitle_optional BrandOriginalTitle_;
      };

      class DMS1EventType: public ::st434::s380m::groups::ThesaurusType
      {
        public:
        // EventIndication
        // 
        typedef ::st434::s377m::types::UTF16CharString EventIndication_type;
        typedef ::xsd::cxx::tree::optional< EventIndication_type > EventIndication_optional;
        typedef ::xsd::cxx::tree::traits< EventIndication_type, char > EventIndication_traits;

        const EventIndication_optional&
        EventIndication () const;

        EventIndication_optional&
        EventIndication ();

        void
        EventIndication (const EventIndication_type& x);

        void
        EventIndication (const EventIndication_optional& x);

        void
        EventIndication (::std::auto_ptr< EventIndication_type > p);

        // EventStartDateTime
        // 
        typedef ::st434::s377m::types::ISO7bitCharString EventStartDateTime_type;
        typedef ::xsd::cxx::tree::optional< EventStartDateTime_type > EventStartDateTime_optional;
        typedef ::xsd::cxx::tree::traits< EventStartDateTime_type, char > EventStartDateTime_traits;

        const EventStartDateTime_optional&
        EventStartDateTime () const;

        EventStartDateTime_optional&
        EventStartDateTime ();

        void
        EventStartDateTime (const EventStartDateTime_type& x);

        void
        EventStartDateTime (const EventStartDateTime_optional& x);

        void
        EventStartDateTime (::std::auto_ptr< EventStartDateTime_type > p);

        // EventEndDateTime
        // 
        typedef ::st434::s377m::types::ISO7bitCharString EventEndDateTime_type;
        typedef ::xsd::cxx::tree::optional< EventEndDateTime_type > EventEndDateTime_optional;
        typedef ::xsd::cxx::tree::traits< EventEndDateTime_type, char > EventEndDateTime_traits;

        const EventEndDateTime_optional&
        EventEndDateTime () const;

        EventEndDateTime_optional&
        EventEndDateTime ();

        void
        EventEndDateTime (const EventEndDateTime_type& x);

        void
        EventEndDateTime (const EventEndDateTime_optional& x);

        void
        EventEndDateTime (::std::auto_ptr< EventEndDateTime_type > p);

        // PublicationObjects
        // 
        typedef ::properties::S335M::PublicationObjects PublicationObjects_type;
        typedef ::xsd::cxx::tree::optional< PublicationObjects_type > PublicationObjects_optional;
        typedef ::xsd::cxx::tree::traits< PublicationObjects_type, char > PublicationObjects_traits;

        const PublicationObjects_optional&
        PublicationObjects () const;

        PublicationObjects_optional&
        PublicationObjects ();

        void
        PublicationObjects (const PublicationObjects_type& x);

        void
        PublicationObjects (const PublicationObjects_optional& x);

        void
        PublicationObjects (::std::auto_ptr< PublicationObjects_type > p);

        // EventAnnotationObjects
        // 
        typedef ::properties::S335M::EventAnnotationObjects EventAnnotationObjects_type;
        typedef ::xsd::cxx::tree::optional< EventAnnotationObjects_type > EventAnnotationObjects_optional;
        typedef ::xsd::cxx::tree::traits< EventAnnotationObjects_type, char > EventAnnotationObjects_traits;

        const EventAnnotationObjects_optional&
        EventAnnotationObjects () const;

        EventAnnotationObjects_optional&
        EventAnnotationObjects ();

        void
        EventAnnotationObjects (const EventAnnotationObjects_type& x);

        void
        EventAnnotationObjects (const EventAnnotationObjects_optional& x);

        void
        EventAnnotationObjects (::std::auto_ptr< EventAnnotationObjects_type > p);

        // Constructors.
        //
        DMS1EventType (const InstanceID_type&);

        DMS1EventType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

        DMS1EventType (const DMS1EventType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

        virtual DMS1EventType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~DMS1EventType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        EventIndication_optional EventIndication_;
        EventStartDateTime_optional EventStartDateTime_;
        EventEndDateTime_optional EventEndDateTime_;
        PublicationObjects_optional PublicationObjects_;
        EventAnnotationObjects_optional EventAnnotationObjects_;
      };

      class PublicationType: public ::st434::s380m::groups::DMS1ObjectType
      {
        public:
        // PublishingOrganizationName
        // 
        typedef ::st434::s377m::types::UTF16CharString PublishingOrganizationName_type;
        typedef ::xsd::cxx::tree::optional< PublishingOrganizationName_type > PublishingOrganizationName_optional;
        typedef ::xsd::cxx::tree::traits< PublishingOrganizationName_type, char > PublishingOrganizationName_traits;

        const PublishingOrganizationName_optional&
        PublishingOrganizationName () const;

        PublishingOrganizationName_optional&
        PublishingOrganizationName ();

        void
        PublishingOrganizationName (const PublishingOrganizationName_type& x);

        void
        PublishingOrganizationName (const PublishingOrganizationName_optional& x);

        void
        PublishingOrganizationName (::std::auto_ptr< PublishingOrganizationName_type > p);

        // PublishingServiceName
        // 
        typedef ::st434::s377m::types::UTF16CharString PublishingServiceName_type;
        typedef ::xsd::cxx::tree::optional< PublishingServiceName_type > PublishingServiceName_optional;
        typedef ::xsd::cxx::tree::traits< PublishingServiceName_type, char > PublishingServiceName_traits;

        const PublishingServiceName_optional&
        PublishingServiceName () const;

        PublishingServiceName_optional&
        PublishingServiceName ();

        void
        PublishingServiceName (const PublishingServiceName_type& x);

        void
        PublishingServiceName (const PublishingServiceName_optional& x);

        void
        PublishingServiceName (::std::auto_ptr< PublishingServiceName_type > p);

        // PublishingMediumName
        // 
        typedef ::st434::s377m::types::UTF16CharString PublishingMediumName_type;
        typedef ::xsd::cxx::tree::optional< PublishingMediumName_type > PublishingMediumName_optional;
        typedef ::xsd::cxx::tree::traits< PublishingMediumName_type, char > PublishingMediumName_traits;

        const PublishingMediumName_optional&
        PublishingMediumName () const;

        PublishingMediumName_optional&
        PublishingMediumName ();

        void
        PublishingMediumName (const PublishingMediumName_type& x);

        void
        PublishingMediumName (const PublishingMediumName_optional& x);

        void
        PublishingMediumName (::std::auto_ptr< PublishingMediumName_type > p);

        // PublishingRegionName
        // 
        typedef ::st434::s377m::types::UTF16CharString PublishingRegionName_type;
        typedef ::xsd::cxx::tree::optional< PublishingRegionName_type > PublishingRegionName_optional;
        typedef ::xsd::cxx::tree::traits< PublishingRegionName_type, char > PublishingRegionName_traits;

        const PublishingRegionName_optional&
        PublishingRegionName () const;

        PublishingRegionName_optional&
        PublishingRegionName ();

        void
        PublishingRegionName (const PublishingRegionName_type& x);

        void
        PublishingRegionName (const PublishingRegionName_optional& x);

        void
        PublishingRegionName (::std::auto_ptr< PublishingRegionName_type > p);

        // Constructors.
        //
        PublicationType (const InstanceID_type&);

        PublicationType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        PublicationType (const PublicationType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        virtual PublicationType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~PublicationType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        PublishingOrganizationName_optional PublishingOrganizationName_;
        PublishingServiceName_optional PublishingServiceName_;
        PublishingMediumName_optional PublishingMediumName_;
        PublishingRegionName_optional PublishingRegionName_;
      };

      class AwardType: public ::st434::s380m::groups::ThesaurusType
      {
        public:
        // FestivalName
        // 
        typedef ::st434::s377m::types::UTF16CharString FestivalName_type;
        typedef ::xsd::cxx::tree::optional< FestivalName_type > FestivalName_optional;
        typedef ::xsd::cxx::tree::traits< FestivalName_type, char > FestivalName_traits;

        const FestivalName_optional&
        FestivalName () const;

        FestivalName_optional&
        FestivalName ();

        void
        FestivalName (const FestivalName_type& x);

        void
        FestivalName (const FestivalName_optional& x);

        void
        FestivalName (::std::auto_ptr< FestivalName_type > p);

        // FestivalDateTime
        // 
        typedef ::st434::s377m::types::ISO7bitCharString FestivalDateTime_type;
        typedef ::xsd::cxx::tree::optional< FestivalDateTime_type > FestivalDateTime_optional;
        typedef ::xsd::cxx::tree::traits< FestivalDateTime_type, char > FestivalDateTime_traits;

        const FestivalDateTime_optional&
        FestivalDateTime () const;

        FestivalDateTime_optional&
        FestivalDateTime ();

        void
        FestivalDateTime (const FestivalDateTime_type& x);

        void
        FestivalDateTime (const FestivalDateTime_optional& x);

        void
        FestivalDateTime (::std::auto_ptr< FestivalDateTime_type > p);

        // AwardName
        // 
        typedef ::st434::s377m::types::UTF16CharString AwardName_type;
        typedef ::xsd::cxx::tree::optional< AwardName_type > AwardName_optional;
        typedef ::xsd::cxx::tree::traits< AwardName_type, char > AwardName_traits;

        const AwardName_optional&
        AwardName () const;

        AwardName_optional&
        AwardName ();

        void
        AwardName (const AwardName_type& x);

        void
        AwardName (const AwardName_optional& x);

        void
        AwardName (::std::auto_ptr< AwardName_type > p);

        // AwardCategory
        // 
        typedef ::st434::s377m::types::UTF16CharString AwardCategory_type;
        typedef ::xsd::cxx::tree::optional< AwardCategory_type > AwardCategory_optional;
        typedef ::xsd::cxx::tree::traits< AwardCategory_type, char > AwardCategory_traits;

        const AwardCategory_optional&
        AwardCategory () const;

        AwardCategory_optional&
        AwardCategory ();

        void
        AwardCategory (const AwardCategory_type& x);

        void
        AwardCategory (const AwardCategory_optional& x);

        void
        AwardCategory (::std::auto_ptr< AwardCategory_type > p);

        // NominationCategory
        // 
        typedef ::st434::s377m::types::UTF16CharString NominationCategory_type;
        typedef ::xsd::cxx::tree::optional< NominationCategory_type > NominationCategory_optional;
        typedef ::xsd::cxx::tree::traits< NominationCategory_type, char > NominationCategory_traits;

        const NominationCategory_optional&
        NominationCategory () const;

        NominationCategory_optional&
        NominationCategory ();

        void
        NominationCategory (const NominationCategory_type& x);

        void
        NominationCategory (const NominationCategory_optional& x);

        void
        NominationCategory (::std::auto_ptr< NominationCategory_type > p);

        // AwardParticipants
        // 
        typedef ::properties::S335M::AwardParticipants AwardParticipants_type;
        typedef ::xsd::cxx::tree::optional< AwardParticipants_type > AwardParticipants_optional;
        typedef ::xsd::cxx::tree::traits< AwardParticipants_type, char > AwardParticipants_traits;

        const AwardParticipants_optional&
        AwardParticipants () const;

        AwardParticipants_optional&
        AwardParticipants ();

        void
        AwardParticipants (const AwardParticipants_type& x);

        void
        AwardParticipants (const AwardParticipants_optional& x);

        void
        AwardParticipants (::std::auto_ptr< AwardParticipants_type > p);

        // Constructors.
        //
        AwardType (const InstanceID_type&);

        AwardType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

        AwardType (const AwardType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

        virtual AwardType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~AwardType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        FestivalName_optional FestivalName_;
        FestivalDateTime_optional FestivalDateTime_;
        AwardName_optional AwardName_;
        AwardCategory_optional AwardCategory_;
        NominationCategory_optional NominationCategory_;
        AwardParticipants_optional AwardParticipants_;
      };

      class CaptionsDescriptionType: public ::st434::s380m::groups::ThesaurusType
      {
        public:
        // ExtendedCaptionsLanguageCode
        // 
        typedef ::st434::s377m::types::ISO7bitCharString ExtendedCaptionsLanguageCode_type;
        typedef ::xsd::cxx::tree::optional< ExtendedCaptionsLanguageCode_type > ExtendedCaptionsLanguageCode_optional;
        typedef ::xsd::cxx::tree::traits< ExtendedCaptionsLanguageCode_type, char > ExtendedCaptionsLanguageCode_traits;

        const ExtendedCaptionsLanguageCode_optional&
        ExtendedCaptionsLanguageCode () const;

        ExtendedCaptionsLanguageCode_optional&
        ExtendedCaptionsLanguageCode ();

        void
        ExtendedCaptionsLanguageCode (const ExtendedCaptionsLanguageCode_type& x);

        void
        ExtendedCaptionsLanguageCode (const ExtendedCaptionsLanguageCode_optional& x);

        void
        ExtendedCaptionsLanguageCode (::std::auto_ptr< ExtendedCaptionsLanguageCode_type > p);

        // CaptionKind
        // 
        typedef ::st434::s377m::types::UTF16CharString CaptionKind_type;
        typedef ::xsd::cxx::tree::optional< CaptionKind_type > CaptionKind_optional;
        typedef ::xsd::cxx::tree::traits< CaptionKind_type, char > CaptionKind_traits;

        const CaptionKind_optional&
        CaptionKind () const;

        CaptionKind_optional&
        CaptionKind ();

        void
        CaptionKind (const CaptionKind_type& x);

        void
        CaptionKind (const CaptionKind_optional& x);

        void
        CaptionKind (::std::auto_ptr< CaptionKind_type > p);

        // Constructors.
        //
        CaptionsDescriptionType (const InstanceID_type&);

        CaptionsDescriptionType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

        CaptionsDescriptionType (const CaptionsDescriptionType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

        virtual CaptionsDescriptionType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~CaptionsDescriptionType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ExtendedCaptionsLanguageCode_optional ExtendedCaptionsLanguageCode_;
        CaptionKind_optional CaptionKind_;
      };

      class DMS1AnnotationType: public ::st434::s380m::groups::ThesaurusType
      {
        public:
        // AnnotationKind
        // 
        typedef ::st434::s377m::types::UTF16CharString AnnotationKind_type;
        typedef ::xsd::cxx::tree::optional< AnnotationKind_type > AnnotationKind_optional;
        typedef ::xsd::cxx::tree::traits< AnnotationKind_type, char > AnnotationKind_traits;

        const AnnotationKind_optional&
        AnnotationKind () const;

        AnnotationKind_optional&
        AnnotationKind ();

        void
        AnnotationKind (const AnnotationKind_type& x);

        void
        AnnotationKind (const AnnotationKind_optional& x);

        void
        AnnotationKind (::std::auto_ptr< AnnotationKind_type > p);

        // AnnotationSynopsis
        // 
        typedef ::st434::s377m::types::UTF16CharString AnnotationSynopsis_type;
        typedef ::xsd::cxx::tree::optional< AnnotationSynopsis_type > AnnotationSynopsis_optional;
        typedef ::xsd::cxx::tree::traits< AnnotationSynopsis_type, char > AnnotationSynopsis_traits;

        const AnnotationSynopsis_optional&
        AnnotationSynopsis () const;

        AnnotationSynopsis_optional&
        AnnotationSynopsis ();

        void
        AnnotationSynopsis (const AnnotationSynopsis_type& x);

        void
        AnnotationSynopsis (const AnnotationSynopsis_optional& x);

        void
        AnnotationSynopsis (::std::auto_ptr< AnnotationSynopsis_type > p);

        // AnnotationDescription
        // 
        typedef ::st434::s377m::types::UTF16CharString AnnotationDescription_type;
        typedef ::xsd::cxx::tree::optional< AnnotationDescription_type > AnnotationDescription_optional;
        typedef ::xsd::cxx::tree::traits< AnnotationDescription_type, char > AnnotationDescription_traits;

        const AnnotationDescription_optional&
        AnnotationDescription () const;

        AnnotationDescription_optional&
        AnnotationDescription ();

        void
        AnnotationDescription (const AnnotationDescription_type& x);

        void
        AnnotationDescription (const AnnotationDescription_optional& x);

        void
        AnnotationDescription (::std::auto_ptr< AnnotationDescription_type > p);

        // RelatedMaterialDescription
        // 
        typedef ::st434::s377m::types::UTF16CharString RelatedMaterialDescription_type;
        typedef ::xsd::cxx::tree::optional< RelatedMaterialDescription_type > RelatedMaterialDescription_optional;
        typedef ::xsd::cxx::tree::traits< RelatedMaterialDescription_type, char > RelatedMaterialDescription_traits;

        const RelatedMaterialDescription_optional&
        RelatedMaterialDescription () const;

        RelatedMaterialDescription_optional&
        RelatedMaterialDescription ();

        void
        RelatedMaterialDescription (const RelatedMaterialDescription_type& x);

        void
        RelatedMaterialDescription (const RelatedMaterialDescription_optional& x);

        void
        RelatedMaterialDescription (::std::auto_ptr< RelatedMaterialDescription_type > p);

        // ClassificationObjects
        // 
        typedef ::properties::S335M::ClassificationObjects ClassificationObjects_type;
        typedef ::xsd::cxx::tree::optional< ClassificationObjects_type > ClassificationObjects_optional;
        typedef ::xsd::cxx::tree::traits< ClassificationObjects_type, char > ClassificationObjects_traits;

        const ClassificationObjects_optional&
        ClassificationObjects () const;

        ClassificationObjects_optional&
        ClassificationObjects ();

        void
        ClassificationObjects (const ClassificationObjects_type& x);

        void
        ClassificationObjects (const ClassificationObjects_optional& x);

        void
        ClassificationObjects (::std::auto_ptr< ClassificationObjects_type > p);

        // AnnotationCueWordsObject
        // 
        typedef ::properties::S335M::AnnotationCueWordsObject AnnotationCueWordsObject_type;
        typedef ::xsd::cxx::tree::optional< AnnotationCueWordsObject_type > AnnotationCueWordsObject_optional;
        typedef ::xsd::cxx::tree::traits< AnnotationCueWordsObject_type, char > AnnotationCueWordsObject_traits;

        const AnnotationCueWordsObject_optional&
        AnnotationCueWordsObject () const;

        AnnotationCueWordsObject_optional&
        AnnotationCueWordsObject ();

        void
        AnnotationCueWordsObject (const AnnotationCueWordsObject_type& x);

        void
        AnnotationCueWordsObject (const AnnotationCueWordsObject_optional& x);

        void
        AnnotationCueWordsObject (::std::auto_ptr< AnnotationCueWordsObject_type > p);

        // RelatedMaterialLocators
        // 
        typedef ::properties::S335M::RelatedMaterialLocators RelatedMaterialLocators_type;
        typedef ::xsd::cxx::tree::optional< RelatedMaterialLocators_type > RelatedMaterialLocators_optional;
        typedef ::xsd::cxx::tree::traits< RelatedMaterialLocators_type, char > RelatedMaterialLocators_traits;

        const RelatedMaterialLocators_optional&
        RelatedMaterialLocators () const;

        RelatedMaterialLocators_optional&
        RelatedMaterialLocators ();

        void
        RelatedMaterialLocators (const RelatedMaterialLocators_type& x);

        void
        RelatedMaterialLocators (const RelatedMaterialLocators_optional& x);

        void
        RelatedMaterialLocators (::std::auto_ptr< RelatedMaterialLocators_type > p);

        // AnnotationParticipants
        // 
        typedef ::properties::S335M::AnnotationParticipants AnnotationParticipants_type;
        typedef ::xsd::cxx::tree::optional< AnnotationParticipants_type > AnnotationParticipants_optional;
        typedef ::xsd::cxx::tree::traits< AnnotationParticipants_type, char > AnnotationParticipants_traits;

        const AnnotationParticipants_optional&
        AnnotationParticipants () const;

        AnnotationParticipants_optional&
        AnnotationParticipants ();

        void
        AnnotationParticipants (const AnnotationParticipants_type& x);

        void
        AnnotationParticipants (const AnnotationParticipants_optional& x);

        void
        AnnotationParticipants (::std::auto_ptr< AnnotationParticipants_type > p);

        // Constructors.
        //
        DMS1AnnotationType (const InstanceID_type&);

        DMS1AnnotationType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        DMS1AnnotationType (const DMS1AnnotationType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        virtual DMS1AnnotationType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~DMS1AnnotationType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        AnnotationKind_optional AnnotationKind_;
        AnnotationSynopsis_optional AnnotationSynopsis_;
        AnnotationDescription_optional AnnotationDescription_;
        RelatedMaterialDescription_optional RelatedMaterialDescription_;
        ClassificationObjects_optional ClassificationObjects_;
        AnnotationCueWordsObject_optional AnnotationCueWordsObject_;
        RelatedMaterialLocators_optional RelatedMaterialLocators_;
        AnnotationParticipants_optional AnnotationParticipants_;
      };

      class SettingPeriodType: public ::st434::s380m::groups::ThesaurusType
      {
        public:
        // SettingDateTime
        // 
        typedef ::st434::s377m::types::TimestampType SettingDateTime_type;
        typedef ::xsd::cxx::tree::optional< SettingDateTime_type > SettingDateTime_optional;
        typedef ::xsd::cxx::tree::traits< SettingDateTime_type, char > SettingDateTime_traits;

        const SettingDateTime_optional&
        SettingDateTime () const;

        SettingDateTime_optional&
        SettingDateTime ();

        void
        SettingDateTime (const SettingDateTime_type& x);

        void
        SettingDateTime (const SettingDateTime_optional& x);

        void
        SettingDateTime (::std::auto_ptr< SettingDateTime_type > p);

        // TimePeriodKeyword
        // 
        typedef ::st434::s377m::types::UTF16CharString TimePeriodKeyword_type;
        typedef ::xsd::cxx::tree::optional< TimePeriodKeyword_type > TimePeriodKeyword_optional;
        typedef ::xsd::cxx::tree::traits< TimePeriodKeyword_type, char > TimePeriodKeyword_traits;

        const TimePeriodKeyword_optional&
        TimePeriodKeyword () const;

        TimePeriodKeyword_optional&
        TimePeriodKeyword ();

        void
        TimePeriodKeyword (const TimePeriodKeyword_type& x);

        void
        TimePeriodKeyword (const TimePeriodKeyword_optional& x);

        void
        TimePeriodKeyword (::std::auto_ptr< TimePeriodKeyword_type > p);

        // SettingPeriodDescription
        // 
        typedef ::st434::s377m::types::UTF16CharString SettingPeriodDescription_type;
        typedef ::xsd::cxx::tree::optional< SettingPeriodDescription_type > SettingPeriodDescription_optional;
        typedef ::xsd::cxx::tree::traits< SettingPeriodDescription_type, char > SettingPeriodDescription_traits;

        const SettingPeriodDescription_optional&
        SettingPeriodDescription () const;

        SettingPeriodDescription_optional&
        SettingPeriodDescription ();

        void
        SettingPeriodDescription (const SettingPeriodDescription_type& x);

        void
        SettingPeriodDescription (const SettingPeriodDescription_optional& x);

        void
        SettingPeriodDescription (::std::auto_ptr< SettingPeriodDescription_type > p);

        // Constructors.
        //
        SettingPeriodType (const InstanceID_type&);

        SettingPeriodType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        SettingPeriodType (const SettingPeriodType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        virtual SettingPeriodType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~SettingPeriodType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SettingDateTime_optional SettingDateTime_;
        TimePeriodKeyword_optional TimePeriodKeyword_;
        SettingPeriodDescription_optional SettingPeriodDescription_;
      };

      class ScriptingType: public ::st434::s380m::groups::ThesaurusType
      {
        public:
        // ScriptingKind
        // 
        typedef ::st434::s377m::types::UTF16CharString ScriptingKind_type;
        typedef ::xsd::cxx::tree::optional< ScriptingKind_type > ScriptingKind_optional;
        typedef ::xsd::cxx::tree::traits< ScriptingKind_type, char > ScriptingKind_traits;

        const ScriptingKind_optional&
        ScriptingKind () const;

        ScriptingKind_optional&
        ScriptingKind ();

        void
        ScriptingKind (const ScriptingKind_type& x);

        void
        ScriptingKind (const ScriptingKind_optional& x);

        void
        ScriptingKind (::std::auto_ptr< ScriptingKind_type > p);

        // ScriptingText
        // 
        typedef ::st434::s377m::types::UTF16CharString ScriptingText_type;
        typedef ::xsd::cxx::tree::optional< ScriptingText_type > ScriptingText_optional;
        typedef ::xsd::cxx::tree::traits< ScriptingText_type, char > ScriptingText_traits;

        const ScriptingText_optional&
        ScriptingText () const;

        ScriptingText_optional&
        ScriptingText ();

        void
        ScriptingText (const ScriptingText_type& x);

        void
        ScriptingText (const ScriptingText_optional& x);

        void
        ScriptingText (::std::auto_ptr< ScriptingText_type > p);

        // ScriptingLocators
        // 
        typedef ::properties::S335M::ScriptingLocators ScriptingLocators_type;
        typedef ::xsd::cxx::tree::optional< ScriptingLocators_type > ScriptingLocators_optional;
        typedef ::xsd::cxx::tree::traits< ScriptingLocators_type, char > ScriptingLocators_traits;

        const ScriptingLocators_optional&
        ScriptingLocators () const;

        ScriptingLocators_optional&
        ScriptingLocators ();

        void
        ScriptingLocators (const ScriptingLocators_type& x);

        void
        ScriptingLocators (const ScriptingLocators_optional& x);

        void
        ScriptingLocators (::std::auto_ptr< ScriptingLocators_type > p);

        // Constructors.
        //
        ScriptingType (const InstanceID_type&);

        ScriptingType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

        ScriptingType (const ScriptingType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

        virtual ScriptingType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~ScriptingType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ScriptingKind_optional ScriptingKind_;
        ScriptingText_optional ScriptingText_;
        ScriptingLocators_optional ScriptingLocators_;
      };

      class ClassificationType: public ::st434::s380m::groups::ThesaurusType
      {
        public:
        // ContentClassification
        // 
        typedef ::st434::s377m::types::ISO7bitCharString ContentClassification_type;
        typedef ::xsd::cxx::tree::optional< ContentClassification_type > ContentClassification_optional;
        typedef ::xsd::cxx::tree::traits< ContentClassification_type, char > ContentClassification_traits;

        const ContentClassification_optional&
        ContentClassification () const;

        ContentClassification_optional&
        ContentClassification ();

        void
        ContentClassification (const ContentClassification_type& x);

        void
        ContentClassification (const ContentClassification_optional& x);

        void
        ContentClassification (::std::auto_ptr< ContentClassification_type > p);

        // ClassificationNameValueObjects
        // 
        typedef ::properties::S335M::ClassificationNameValueObjects ClassificationNameValueObjects_type;
        typedef ::xsd::cxx::tree::optional< ClassificationNameValueObjects_type > ClassificationNameValueObjects_optional;
        typedef ::xsd::cxx::tree::traits< ClassificationNameValueObjects_type, char > ClassificationNameValueObjects_traits;

        const ClassificationNameValueObjects_optional&
        ClassificationNameValueObjects () const;

        ClassificationNameValueObjects_optional&
        ClassificationNameValueObjects ();

        void
        ClassificationNameValueObjects (const ClassificationNameValueObjects_type& x);

        void
        ClassificationNameValueObjects (const ClassificationNameValueObjects_optional& x);

        void
        ClassificationNameValueObjects (::std::auto_ptr< ClassificationNameValueObjects_type > p);

        // Constructors.
        //
        ClassificationType (const InstanceID_type&);

        ClassificationType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        ClassificationType (const ClassificationType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        virtual ClassificationType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~ClassificationType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ContentClassification_optional ContentClassification_;
        ClassificationNameValueObjects_optional ClassificationNameValueObjects_;
      };

      class ShotType: public ::st434::s380m::groups::TextLanguageType
      {
        public:
        // ShotStartPosition
        // 
        typedef ::st434::s377m::types::Position ShotStartPosition_type;
        typedef ::xsd::cxx::tree::optional< ShotStartPosition_type > ShotStartPosition_optional;
        typedef ::xsd::cxx::tree::traits< ShotStartPosition_type, char > ShotStartPosition_traits;

        const ShotStartPosition_optional&
        ShotStartPosition () const;

        ShotStartPosition_optional&
        ShotStartPosition ();

        void
        ShotStartPosition (const ShotStartPosition_type& x);

        void
        ShotStartPosition (const ShotStartPosition_optional& x);

        void
        ShotStartPosition (::std::auto_ptr< ShotStartPosition_type > p);

        // ShotDuration
        // 
        typedef ::st434::s377m::types::Length ShotDuration_type;
        typedef ::xsd::cxx::tree::optional< ShotDuration_type > ShotDuration_optional;
        typedef ::xsd::cxx::tree::traits< ShotDuration_type, char > ShotDuration_traits;

        const ShotDuration_optional&
        ShotDuration () const;

        ShotDuration_optional&
        ShotDuration ();

        void
        ShotDuration (const ShotDuration_type& x);

        void
        ShotDuration (const ShotDuration_optional& x);

        void
        ShotDuration (::std::auto_ptr< ShotDuration_type > p);

        // ShotTrackIDs
        // 
        typedef ::properties::S335M::ShotTrackIDs ShotTrackIDs_type;
        typedef ::xsd::cxx::tree::optional< ShotTrackIDs_type > ShotTrackIDs_optional;
        typedef ::xsd::cxx::tree::traits< ShotTrackIDs_type, char > ShotTrackIDs_traits;

        const ShotTrackIDs_optional&
        ShotTrackIDs () const;

        ShotTrackIDs_optional&
        ShotTrackIDs ();

        void
        ShotTrackIDs (const ShotTrackIDs_type& x);

        void
        ShotTrackIDs (const ShotTrackIDs_optional& x);

        void
        ShotTrackIDs (::std::auto_ptr< ShotTrackIDs_type > p);

        // ShotDescription
        // 
        typedef ::st434::s377m::types::UTF16CharString ShotDescription_type;
        typedef ::xsd::cxx::tree::optional< ShotDescription_type > ShotDescription_optional;
        typedef ::xsd::cxx::tree::traits< ShotDescription_type, char > ShotDescription_traits;

        const ShotDescription_optional&
        ShotDescription () const;

        ShotDescription_optional&
        ShotDescription ();

        void
        ShotDescription (const ShotDescription_type& x);

        void
        ShotDescription (const ShotDescription_optional& x);

        void
        ShotDescription (::std::auto_ptr< ShotDescription_type > p);

        // ShotCommentKind
        // 
        typedef ::st434::s377m::types::UTF16CharString ShotCommentKind_type;
        typedef ::xsd::cxx::tree::optional< ShotCommentKind_type > ShotCommentKind_optional;
        typedef ::xsd::cxx::tree::traits< ShotCommentKind_type, char > ShotCommentKind_traits;

        const ShotCommentKind_optional&
        ShotCommentKind () const;

        ShotCommentKind_optional&
        ShotCommentKind ();

        void
        ShotCommentKind (const ShotCommentKind_type& x);

        void
        ShotCommentKind (const ShotCommentKind_optional& x);

        void
        ShotCommentKind (::std::auto_ptr< ShotCommentKind_type > p);

        // ShotComment
        // 
        typedef ::st434::s377m::types::UTF16CharString ShotComment_type;
        typedef ::xsd::cxx::tree::optional< ShotComment_type > ShotComment_optional;
        typedef ::xsd::cxx::tree::traits< ShotComment_type, char > ShotComment_traits;

        const ShotComment_optional&
        ShotComment () const;

        ShotComment_optional&
        ShotComment ();

        void
        ShotComment (const ShotComment_type& x);

        void
        ShotComment (const ShotComment_optional& x);

        void
        ShotComment (::std::auto_ptr< ShotComment_type > p);

        // ShotCueWordsObject
        // 
        typedef ::properties::S335M::ShotCueWordsObject ShotCueWordsObject_type;
        typedef ::xsd::cxx::tree::optional< ShotCueWordsObject_type > ShotCueWordsObject_optional;
        typedef ::xsd::cxx::tree::traits< ShotCueWordsObject_type, char > ShotCueWordsObject_traits;

        const ShotCueWordsObject_optional&
        ShotCueWordsObject () const;

        ShotCueWordsObject_optional&
        ShotCueWordsObject ();

        void
        ShotCueWordsObject (const ShotCueWordsObject_type& x);

        void
        ShotCueWordsObject (const ShotCueWordsObject_optional& x);

        void
        ShotCueWordsObject (::std::auto_ptr< ShotCueWordsObject_type > p);

        // KeypointObjects
        // 
        typedef ::properties::S335M::KeypointObjects KeypointObjects_type;
        typedef ::xsd::cxx::tree::optional< KeypointObjects_type > KeypointObjects_optional;
        typedef ::xsd::cxx::tree::traits< KeypointObjects_type, char > KeypointObjects_traits;

        const KeypointObjects_optional&
        KeypointObjects () const;

        KeypointObjects_optional&
        KeypointObjects ();

        void
        KeypointObjects (const KeypointObjects_type& x);

        void
        KeypointObjects (const KeypointObjects_optional& x);

        void
        KeypointObjects (::std::auto_ptr< KeypointObjects_type > p);

        // Constructors.
        //
        ShotType (const InstanceID_type&);

        ShotType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

        ShotType (const ShotType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

        virtual ShotType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~ShotType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ShotStartPosition_optional ShotStartPosition_;
        ShotDuration_optional ShotDuration_;
        ShotTrackIDs_optional ShotTrackIDs_;
        ShotDescription_optional ShotDescription_;
        ShotCommentKind_optional ShotCommentKind_;
        ShotComment_optional ShotComment_;
        ShotCueWordsObject_optional ShotCueWordsObject_;
        KeypointObjects_optional KeypointObjects_;
      };

      class KeypointType: public ::st434::s380m::groups::ThesaurusType
      {
        public:
        // KeypointKind
        // 
        typedef ::st434::s377m::types::UTF16CharString KeypointKind_type;
        typedef ::xsd::cxx::tree::optional< KeypointKind_type > KeypointKind_optional;
        typedef ::xsd::cxx::tree::traits< KeypointKind_type, char > KeypointKind_traits;

        const KeypointKind_optional&
        KeypointKind () const;

        KeypointKind_optional&
        KeypointKind ();

        void
        KeypointKind (const KeypointKind_type& x);

        void
        KeypointKind (const KeypointKind_optional& x);

        void
        KeypointKind (::std::auto_ptr< KeypointKind_type > p);

        // KeypointPosition
        // 
        typedef ::st434::s377m::types::Position KeypointPosition_type;
        typedef ::xsd::cxx::tree::traits< KeypointPosition_type, char > KeypointPosition_traits;

        const KeypointPosition_type&
        KeypointPosition () const;

        KeypointPosition_type&
        KeypointPosition ();

        void
        KeypointPosition (const KeypointPosition_type& x);

        void
        KeypointPosition (::std::auto_ptr< KeypointPosition_type > p);

        // KeypointValue
        // 
        typedef ::st434::s377m::types::UTF16CharString KeypointValue_type;
        typedef ::xsd::cxx::tree::optional< KeypointValue_type > KeypointValue_optional;
        typedef ::xsd::cxx::tree::traits< KeypointValue_type, char > KeypointValue_traits;

        const KeypointValue_optional&
        KeypointValue () const;

        KeypointValue_optional&
        KeypointValue ();

        void
        KeypointValue (const KeypointValue_type& x);

        void
        KeypointValue (const KeypointValue_optional& x);

        void
        KeypointValue (::std::auto_ptr< KeypointValue_type > p);

        // Constructors.
        //
        KeypointType (const InstanceID_type&,
                      const KeypointPosition_type&);

        KeypointType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        KeypointType (const KeypointType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        virtual KeypointType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~KeypointType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        KeypointKind_optional KeypointKind_;
        ::xsd::cxx::tree::one< KeypointPosition_type > KeypointPosition_;
        KeypointValue_optional KeypointValue_;
      };

      class ParticipantType: public ::st434::s380m::groups::ThesaurusType
      {
        public:
        // ParticipantID
        // 
        typedef ::st434::s377m::types::UUID ParticipantID_type;
        typedef ::xsd::cxx::tree::traits< ParticipantID_type, char > ParticipantID_traits;

        const ParticipantID_type&
        ParticipantID () const;

        ParticipantID_type&
        ParticipantID ();

        void
        ParticipantID (const ParticipantID_type& x);

        void
        ParticipantID (::std::auto_ptr< ParticipantID_type > p);

        // ContributionStatus
        // 
        typedef ::st434::s377m::types::UTF16CharString ContributionStatus_type;
        typedef ::xsd::cxx::tree::optional< ContributionStatus_type > ContributionStatus_optional;
        typedef ::xsd::cxx::tree::traits< ContributionStatus_type, char > ContributionStatus_traits;

        const ContributionStatus_optional&
        ContributionStatus () const;

        ContributionStatus_optional&
        ContributionStatus ();

        void
        ContributionStatus (const ContributionStatus_type& x);

        void
        ContributionStatus (const ContributionStatus_optional& x);

        void
        ContributionStatus (::std::auto_ptr< ContributionStatus_type > p);

        // JobFunction
        // 
        typedef ::st434::s377m::types::UTF16CharString JobFunction_type;
        typedef ::xsd::cxx::tree::optional< JobFunction_type > JobFunction_optional;
        typedef ::xsd::cxx::tree::traits< JobFunction_type, char > JobFunction_traits;

        const JobFunction_optional&
        JobFunction () const;

        JobFunction_optional&
        JobFunction ();

        void
        JobFunction (const JobFunction_type& x);

        void
        JobFunction (const JobFunction_optional& x);

        void
        JobFunction (::std::auto_ptr< JobFunction_type > p);

        // JobFunctionCode
        // 
        typedef ::st434::s377m::types::ISO7bitCharString JobFunctionCode_type;
        typedef ::xsd::cxx::tree::optional< JobFunctionCode_type > JobFunctionCode_optional;
        typedef ::xsd::cxx::tree::traits< JobFunctionCode_type, char > JobFunctionCode_traits;

        const JobFunctionCode_optional&
        JobFunctionCode () const;

        JobFunctionCode_optional&
        JobFunctionCode ();

        void
        JobFunctionCode (const JobFunctionCode_type& x);

        void
        JobFunctionCode (const JobFunctionCode_optional& x);

        void
        JobFunctionCode (::std::auto_ptr< JobFunctionCode_type > p);

        // RoleName
        // 
        typedef ::st434::s377m::types::UTF16CharString RoleName_type;
        typedef ::xsd::cxx::tree::optional< RoleName_type > RoleName_optional;
        typedef ::xsd::cxx::tree::traits< RoleName_type, char > RoleName_traits;

        const RoleName_optional&
        RoleName () const;

        RoleName_optional&
        RoleName ();

        void
        RoleName (const RoleName_type& x);

        void
        RoleName (const RoleName_optional& x);

        void
        RoleName (::std::auto_ptr< RoleName_type > p);

        // Persons
        // 
        typedef ::properties::S335M::Persons Persons_type;
        typedef ::xsd::cxx::tree::optional< Persons_type > Persons_optional;
        typedef ::xsd::cxx::tree::traits< Persons_type, char > Persons_traits;

        const Persons_optional&
        Persons () const;

        Persons_optional&
        Persons ();

        void
        Persons (const Persons_type& x);

        void
        Persons (const Persons_optional& x);

        void
        Persons (::std::auto_ptr< Persons_type > p);

        // ParticipantOrganizations
        // 
        typedef ::properties::S335M::ParticipantOrganizations ParticipantOrganizations_type;
        typedef ::xsd::cxx::tree::optional< ParticipantOrganizations_type > ParticipantOrganizations_optional;
        typedef ::xsd::cxx::tree::traits< ParticipantOrganizations_type, char > ParticipantOrganizations_traits;

        const ParticipantOrganizations_optional&
        ParticipantOrganizations () const;

        ParticipantOrganizations_optional&
        ParticipantOrganizations ();

        void
        ParticipantOrganizations (const ParticipantOrganizations_type& x);

        void
        ParticipantOrganizations (const ParticipantOrganizations_optional& x);

        void
        ParticipantOrganizations (::std::auto_ptr< ParticipantOrganizations_type > p);

        // Constructors.
        //
        ParticipantType (const InstanceID_type&,
                         const ParticipantID_type&);

        ParticipantType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        ParticipantType (const ParticipantType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        virtual ParticipantType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~ParticipantType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< ParticipantID_type > ParticipantID_;
        ContributionStatus_optional ContributionStatus_;
        JobFunction_optional JobFunction_;
        JobFunctionCode_optional JobFunctionCode_;
        RoleName_optional RoleName_;
        Persons_optional Persons_;
        ParticipantOrganizations_optional ParticipantOrganizations_;
      };

      class PersonType: public ::st434::s380m::groups::ContactType
      {
        public:
        // FamilyName
        // 
        typedef ::st434::s377m::types::UTF16CharString FamilyName_type;
        typedef ::xsd::cxx::tree::optional< FamilyName_type > FamilyName_optional;
        typedef ::xsd::cxx::tree::traits< FamilyName_type, char > FamilyName_traits;

        const FamilyName_optional&
        FamilyName () const;

        FamilyName_optional&
        FamilyName ();

        void
        FamilyName (const FamilyName_type& x);

        void
        FamilyName (const FamilyName_optional& x);

        void
        FamilyName (::std::auto_ptr< FamilyName_type > p);

        // FirstGivenName
        // 
        typedef ::st434::s377m::types::UTF16CharString FirstGivenName_type;
        typedef ::xsd::cxx::tree::optional< FirstGivenName_type > FirstGivenName_optional;
        typedef ::xsd::cxx::tree::traits< FirstGivenName_type, char > FirstGivenName_traits;

        const FirstGivenName_optional&
        FirstGivenName () const;

        FirstGivenName_optional&
        FirstGivenName ();

        void
        FirstGivenName (const FirstGivenName_type& x);

        void
        FirstGivenName (const FirstGivenName_optional& x);

        void
        FirstGivenName (::std::auto_ptr< FirstGivenName_type > p);

        // OtherGivenNames
        // 
        typedef ::st434::s377m::types::UTF16CharString OtherGivenNames_type;
        typedef ::xsd::cxx::tree::optional< OtherGivenNames_type > OtherGivenNames_optional;
        typedef ::xsd::cxx::tree::traits< OtherGivenNames_type, char > OtherGivenNames_traits;

        const OtherGivenNames_optional&
        OtherGivenNames () const;

        OtherGivenNames_optional&
        OtherGivenNames ();

        void
        OtherGivenNames (const OtherGivenNames_type& x);

        void
        OtherGivenNames (const OtherGivenNames_optional& x);

        void
        OtherGivenNames (::std::auto_ptr< OtherGivenNames_type > p);

        // Salutation
        // 
        typedef ::st434::s377m::types::UTF16CharString Salutation_type;
        typedef ::xsd::cxx::tree::optional< Salutation_type > Salutation_optional;
        typedef ::xsd::cxx::tree::traits< Salutation_type, char > Salutation_traits;

        const Salutation_optional&
        Salutation () const;

        Salutation_optional&
        Salutation ();

        void
        Salutation (const Salutation_type& x);

        void
        Salutation (const Salutation_optional& x);

        void
        Salutation (::std::auto_ptr< Salutation_type > p);

        // HonorsQualifications
        // 
        typedef ::st434::s377m::types::UTF16CharString HonorsQualifications_type;
        typedef ::xsd::cxx::tree::optional< HonorsQualifications_type > HonorsQualifications_optional;
        typedef ::xsd::cxx::tree::traits< HonorsQualifications_type, char > HonorsQualifications_traits;

        const HonorsQualifications_optional&
        HonorsQualifications () const;

        HonorsQualifications_optional&
        HonorsQualifications ();

        void
        HonorsQualifications (const HonorsQualifications_type& x);

        void
        HonorsQualifications (const HonorsQualifications_optional& x);

        void
        HonorsQualifications (::std::auto_ptr< HonorsQualifications_type > p);

        // PersonDescription
        // 
        typedef ::st434::s377m::types::UTF16CharString PersonDescription_type;
        typedef ::xsd::cxx::tree::optional< PersonDescription_type > PersonDescription_optional;
        typedef ::xsd::cxx::tree::traits< PersonDescription_type, char > PersonDescription_traits;

        const PersonDescription_optional&
        PersonDescription () const;

        PersonDescription_optional&
        PersonDescription ();

        void
        PersonDescription (const PersonDescription_type& x);

        void
        PersonDescription (const PersonDescription_optional& x);

        void
        PersonDescription (::std::auto_ptr< PersonDescription_type > p);

        // AlternateName
        // 
        typedef ::st434::s377m::types::UTF16CharString AlternateName_type;
        typedef ::xsd::cxx::tree::optional< AlternateName_type > AlternateName_optional;
        typedef ::xsd::cxx::tree::traits< AlternateName_type, char > AlternateName_traits;

        const AlternateName_optional&
        AlternateName () const;

        AlternateName_optional&
        AlternateName ();

        void
        AlternateName (const AlternateName_type& x);

        void
        AlternateName (const AlternateName_optional& x);

        void
        AlternateName (::std::auto_ptr< AlternateName_type > p);

        // LinkingName
        // 
        typedef ::st434::s377m::types::UTF16CharString LinkingName_type;
        typedef ::xsd::cxx::tree::optional< LinkingName_type > LinkingName_optional;
        typedef ::xsd::cxx::tree::traits< LinkingName_type, char > LinkingName_traits;

        const LinkingName_optional&
        LinkingName () const;

        LinkingName_optional&
        LinkingName ();

        void
        LinkingName (const LinkingName_type& x);

        void
        LinkingName (const LinkingName_optional& x);

        void
        LinkingName (::std::auto_ptr< LinkingName_type > p);

        // NameSuffix
        // 
        typedef ::st434::s377m::types::UTF16CharString NameSuffix_type;
        typedef ::xsd::cxx::tree::optional< NameSuffix_type > NameSuffix_optional;
        typedef ::xsd::cxx::tree::traits< NameSuffix_type, char > NameSuffix_traits;

        const NameSuffix_optional&
        NameSuffix () const;

        NameSuffix_optional&
        NameSuffix ();

        void
        NameSuffix (const NameSuffix_type& x);

        void
        NameSuffix (const NameSuffix_optional& x);

        void
        NameSuffix (::std::auto_ptr< NameSuffix_type > p);

        // FormerFamilyName
        // 
        typedef ::st434::s377m::types::UTF16CharString FormerFamilyName_type;
        typedef ::xsd::cxx::tree::optional< FormerFamilyName_type > FormerFamilyName_optional;
        typedef ::xsd::cxx::tree::traits< FormerFamilyName_type, char > FormerFamilyName_traits;

        const FormerFamilyName_optional&
        FormerFamilyName () const;

        FormerFamilyName_optional&
        FormerFamilyName ();

        void
        FormerFamilyName (const FormerFamilyName_type& x);

        void
        FormerFamilyName (const FormerFamilyName_optional& x);

        void
        FormerFamilyName (::std::auto_ptr< FormerFamilyName_type > p);

        // Nationality
        // 
        typedef ::st434::s377m::types::UTF16CharString Nationality_type;
        typedef ::xsd::cxx::tree::optional< Nationality_type > Nationality_optional;
        typedef ::xsd::cxx::tree::traits< Nationality_type, char > Nationality_traits;

        const Nationality_optional&
        Nationality () const;

        Nationality_optional&
        Nationality ();

        void
        Nationality (const Nationality_type& x);

        void
        Nationality (const Nationality_optional& x);

        void
        Nationality (::std::auto_ptr< Nationality_type > p);

        // Citizenship
        // 
        typedef ::st434::s377m::types::UTF16CharString Citizenship_type;
        typedef ::xsd::cxx::tree::optional< Citizenship_type > Citizenship_optional;
        typedef ::xsd::cxx::tree::traits< Citizenship_type, char > Citizenship_traits;

        const Citizenship_optional&
        Citizenship () const;

        Citizenship_optional&
        Citizenship ();

        void
        Citizenship (const Citizenship_type& x);

        void
        Citizenship (const Citizenship_optional& x);

        void
        Citizenship (::std::auto_ptr< Citizenship_type > p);

        // PersonOrganizations
        // 
        typedef ::properties::S335M::PersonOrganizations PersonOrganizations_type;
        typedef ::xsd::cxx::tree::optional< PersonOrganizations_type > PersonOrganizations_optional;
        typedef ::xsd::cxx::tree::traits< PersonOrganizations_type, char > PersonOrganizations_traits;

        const PersonOrganizations_optional&
        PersonOrganizations () const;

        PersonOrganizations_optional&
        PersonOrganizations ();

        void
        PersonOrganizations (const PersonOrganizations_type& x);

        void
        PersonOrganizations (const PersonOrganizations_optional& x);

        void
        PersonOrganizations (::std::auto_ptr< PersonOrganizations_type > p);

        // Constructors.
        //
        PersonType (const InstanceID_type&,
                    const ContactID_type&);

        PersonType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

        PersonType (const PersonType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

        virtual PersonType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~PersonType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        FamilyName_optional FamilyName_;
        FirstGivenName_optional FirstGivenName_;
        OtherGivenNames_optional OtherGivenNames_;
        Salutation_optional Salutation_;
        HonorsQualifications_optional HonorsQualifications_;
        PersonDescription_optional PersonDescription_;
        AlternateName_optional AlternateName_;
        LinkingName_optional LinkingName_;
        NameSuffix_optional NameSuffix_;
        FormerFamilyName_optional FormerFamilyName_;
        Nationality_optional Nationality_;
        Citizenship_optional Citizenship_;
        PersonOrganizations_optional PersonOrganizations_;
      };

      class OrganizationType: public ::st434::s380m::groups::ContactType
      {
        public:
        // OrganizationKind
        // 
        typedef ::st434::s377m::types::UTF16CharString OrganizationKind_type;
        typedef ::xsd::cxx::tree::optional< OrganizationKind_type > OrganizationKind_optional;
        typedef ::xsd::cxx::tree::traits< OrganizationKind_type, char > OrganizationKind_traits;

        const OrganizationKind_optional&
        OrganizationKind () const;

        OrganizationKind_optional&
        OrganizationKind ();

        void
        OrganizationKind (const OrganizationKind_type& x);

        void
        OrganizationKind (const OrganizationKind_optional& x);

        void
        OrganizationKind (::std::auto_ptr< OrganizationKind_type > p);

        // OrganizationMainName
        // 
        typedef ::st434::s377m::types::UTF16CharString OrganizationMainName_type;
        typedef ::xsd::cxx::tree::optional< OrganizationMainName_type > OrganizationMainName_optional;
        typedef ::xsd::cxx::tree::traits< OrganizationMainName_type, char > OrganizationMainName_traits;

        const OrganizationMainName_optional&
        OrganizationMainName () const;

        OrganizationMainName_optional&
        OrganizationMainName ();

        void
        OrganizationMainName (const OrganizationMainName_type& x);

        void
        OrganizationMainName (const OrganizationMainName_optional& x);

        void
        OrganizationMainName (::std::auto_ptr< OrganizationMainName_type > p);

        // OrganizationCode
        // 
        typedef ::st434::s377m::types::UTF16CharString OrganizationCode_type;
        typedef ::xsd::cxx::tree::optional< OrganizationCode_type > OrganizationCode_optional;
        typedef ::xsd::cxx::tree::traits< OrganizationCode_type, char > OrganizationCode_traits;

        const OrganizationCode_optional&
        OrganizationCode () const;

        OrganizationCode_optional&
        OrganizationCode ();

        void
        OrganizationCode (const OrganizationCode_type& x);

        void
        OrganizationCode (const OrganizationCode_optional& x);

        void
        OrganizationCode (::std::auto_ptr< OrganizationCode_type > p);

        // ContactDepartment
        // 
        typedef ::st434::s377m::types::UTF16CharString ContactDepartment_type;
        typedef ::xsd::cxx::tree::optional< ContactDepartment_type > ContactDepartment_optional;
        typedef ::xsd::cxx::tree::traits< ContactDepartment_type, char > ContactDepartment_traits;

        const ContactDepartment_optional&
        ContactDepartment () const;

        ContactDepartment_optional&
        ContactDepartment ();

        void
        ContactDepartment (const ContactDepartment_type& x);

        void
        ContactDepartment (const ContactDepartment_optional& x);

        void
        ContactDepartment (::std::auto_ptr< ContactDepartment_type > p);

        // Constructors.
        //
        OrganizationType (const InstanceID_type&,
                          const ContactID_type&);

        OrganizationType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

        OrganizationType (const OrganizationType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

        virtual OrganizationType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~OrganizationType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        OrganizationKind_optional OrganizationKind_;
        OrganizationMainName_optional OrganizationMainName_;
        OrganizationCode_optional OrganizationCode_;
        ContactDepartment_optional ContactDepartment_;
      };

      class LocationType: public ::st434::s380m::groups::ContactType
      {
        public:
        // LocationKind
        // 
        typedef ::st434::s377m::types::UTF16CharString LocationKind_type;
        typedef ::xsd::cxx::tree::optional< LocationKind_type > LocationKind_optional;
        typedef ::xsd::cxx::tree::traits< LocationKind_type, char > LocationKind_traits;

        const LocationKind_optional&
        LocationKind () const;

        LocationKind_optional&
        LocationKind ();

        void
        LocationKind (const LocationKind_type& x);

        void
        LocationKind (const LocationKind_optional& x);

        void
        LocationKind (::std::auto_ptr< LocationKind_type > p);

        // LocationDescription
        // 
        typedef ::st434::s377m::types::UTF16CharString LocationDescription_type;
        typedef ::xsd::cxx::tree::optional< LocationDescription_type > LocationDescription_optional;
        typedef ::xsd::cxx::tree::traits< LocationDescription_type, char > LocationDescription_traits;

        const LocationDescription_optional&
        LocationDescription () const;

        LocationDescription_optional&
        LocationDescription ();

        void
        LocationDescription (const LocationDescription_type& x);

        void
        LocationDescription (const LocationDescription_optional& x);

        void
        LocationDescription (::std::auto_ptr< LocationDescription_type > p);

        // Constructors.
        //
        LocationType (const InstanceID_type&,
                      const ContactID_type&);

        LocationType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        LocationType (const LocationType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        virtual LocationType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~LocationType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        LocationKind_optional LocationKind_;
        LocationDescription_optional LocationDescription_;
      };

      class AddressType: public ::st434::s380m::groups::DMS1ObjectType
      {
        public:
        // RoomSuiteNumber
        // 
        typedef ::st434::s377m::types::UTF16CharString RoomSuiteNumber_type;
        typedef ::xsd::cxx::tree::optional< RoomSuiteNumber_type > RoomSuiteNumber_optional;
        typedef ::xsd::cxx::tree::traits< RoomSuiteNumber_type, char > RoomSuiteNumber_traits;

        const RoomSuiteNumber_optional&
        RoomSuiteNumber () const;

        RoomSuiteNumber_optional&
        RoomSuiteNumber ();

        void
        RoomSuiteNumber (const RoomSuiteNumber_type& x);

        void
        RoomSuiteNumber (const RoomSuiteNumber_optional& x);

        void
        RoomSuiteNumber (::std::auto_ptr< RoomSuiteNumber_type > p);

        // RoomSuiteName
        // 
        typedef ::st434::s377m::types::UTF16CharString RoomSuiteName_type;
        typedef ::xsd::cxx::tree::optional< RoomSuiteName_type > RoomSuiteName_optional;
        typedef ::xsd::cxx::tree::traits< RoomSuiteName_type, char > RoomSuiteName_traits;

        const RoomSuiteName_optional&
        RoomSuiteName () const;

        RoomSuiteName_optional&
        RoomSuiteName ();

        void
        RoomSuiteName (const RoomSuiteName_type& x);

        void
        RoomSuiteName (const RoomSuiteName_optional& x);

        void
        RoomSuiteName (::std::auto_ptr< RoomSuiteName_type > p);

        // BuildingName
        // 
        typedef ::st434::s377m::types::UTF16CharString BuildingName_type;
        typedef ::xsd::cxx::tree::optional< BuildingName_type > BuildingName_optional;
        typedef ::xsd::cxx::tree::traits< BuildingName_type, char > BuildingName_traits;

        const BuildingName_optional&
        BuildingName () const;

        BuildingName_optional&
        BuildingName ();

        void
        BuildingName (const BuildingName_type& x);

        void
        BuildingName (const BuildingName_optional& x);

        void
        BuildingName (::std::auto_ptr< BuildingName_type > p);

        // PlaceName
        // 
        typedef ::st434::s377m::types::UTF16CharString PlaceName_type;
        typedef ::xsd::cxx::tree::optional< PlaceName_type > PlaceName_optional;
        typedef ::xsd::cxx::tree::traits< PlaceName_type, char > PlaceName_traits;

        const PlaceName_optional&
        PlaceName () const;

        PlaceName_optional&
        PlaceName ();

        void
        PlaceName (const PlaceName_type& x);

        void
        PlaceName (const PlaceName_optional& x);

        void
        PlaceName (::std::auto_ptr< PlaceName_type > p);

        // StreetNumber
        // 
        typedef ::st434::s377m::types::UTF16CharString StreetNumber_type;
        typedef ::xsd::cxx::tree::optional< StreetNumber_type > StreetNumber_optional;
        typedef ::xsd::cxx::tree::traits< StreetNumber_type, char > StreetNumber_traits;

        const StreetNumber_optional&
        StreetNumber () const;

        StreetNumber_optional&
        StreetNumber ();

        void
        StreetNumber (const StreetNumber_type& x);

        void
        StreetNumber (const StreetNumber_optional& x);

        void
        StreetNumber (::std::auto_ptr< StreetNumber_type > p);

        // StreetName
        // 
        typedef ::st434::s377m::types::UTF16CharString StreetName_type;
        typedef ::xsd::cxx::tree::optional< StreetName_type > StreetName_optional;
        typedef ::xsd::cxx::tree::traits< StreetName_type, char > StreetName_traits;

        const StreetName_optional&
        StreetName () const;

        StreetName_optional&
        StreetName ();

        void
        StreetName (const StreetName_type& x);

        void
        StreetName (const StreetName_optional& x);

        void
        StreetName (::std::auto_ptr< StreetName_type > p);

        // PostalTown
        // 
        typedef ::st434::s377m::types::UTF16CharString PostalTown_type;
        typedef ::xsd::cxx::tree::optional< PostalTown_type > PostalTown_optional;
        typedef ::xsd::cxx::tree::traits< PostalTown_type, char > PostalTown_traits;

        const PostalTown_optional&
        PostalTown () const;

        PostalTown_optional&
        PostalTown ();

        void
        PostalTown (const PostalTown_type& x);

        void
        PostalTown (const PostalTown_optional& x);

        void
        PostalTown (::std::auto_ptr< PostalTown_type > p);

        // City
        // 
        typedef ::st434::s377m::types::UTF16CharString City_type;
        typedef ::xsd::cxx::tree::optional< City_type > City_optional;
        typedef ::xsd::cxx::tree::traits< City_type, char > City_traits;

        const City_optional&
        City () const;

        City_optional&
        City ();

        void
        City (const City_type& x);

        void
        City (const City_optional& x);

        void
        City (::std::auto_ptr< City_type > p);

        // StateProvinceCounty
        // 
        typedef ::st434::s377m::types::UTF16CharString StateProvinceCounty_type;
        typedef ::xsd::cxx::tree::optional< StateProvinceCounty_type > StateProvinceCounty_optional;
        typedef ::xsd::cxx::tree::traits< StateProvinceCounty_type, char > StateProvinceCounty_traits;

        const StateProvinceCounty_optional&
        StateProvinceCounty () const;

        StateProvinceCounty_optional&
        StateProvinceCounty ();

        void
        StateProvinceCounty (const StateProvinceCounty_type& x);

        void
        StateProvinceCounty (const StateProvinceCounty_optional& x);

        void
        StateProvinceCounty (::std::auto_ptr< StateProvinceCounty_type > p);

        // PostalCode
        // 
        typedef ::st434::s377m::types::UTF16CharString PostalCode_type;
        typedef ::xsd::cxx::tree::optional< PostalCode_type > PostalCode_optional;
        typedef ::xsd::cxx::tree::traits< PostalCode_type, char > PostalCode_traits;

        const PostalCode_optional&
        PostalCode () const;

        PostalCode_optional&
        PostalCode ();

        void
        PostalCode (const PostalCode_type& x);

        void
        PostalCode (const PostalCode_optional& x);

        void
        PostalCode (::std::auto_ptr< PostalCode_type > p);

        // Country
        // 
        typedef ::st434::s377m::types::UTF16CharString Country_type;
        typedef ::xsd::cxx::tree::optional< Country_type > Country_optional;
        typedef ::xsd::cxx::tree::traits< Country_type, char > Country_traits;

        const Country_optional&
        Country () const;

        Country_optional&
        Country ();

        void
        Country (const Country_type& x);

        void
        Country (const Country_optional& x);

        void
        Country (::std::auto_ptr< Country_type > p);

        // GeographicalCoordinates
        // 
        typedef ::st434::s377m::types::DataStream GeographicalCoordinates_type;
        typedef ::xsd::cxx::tree::optional< GeographicalCoordinates_type > GeographicalCoordinates_optional;
        typedef ::xsd::cxx::tree::traits< GeographicalCoordinates_type, char > GeographicalCoordinates_traits;

        const GeographicalCoordinates_optional&
        GeographicalCoordinates () const;

        GeographicalCoordinates_optional&
        GeographicalCoordinates ();

        void
        GeographicalCoordinates (const GeographicalCoordinates_type& x);

        void
        GeographicalCoordinates (const GeographicalCoordinates_optional& x);

        void
        GeographicalCoordinates (::std::auto_ptr< GeographicalCoordinates_type > p);

        // AstronomicalBodyName
        // 
        typedef ::st434::s377m::types::UTF16CharString AstronomicalBodyName_type;
        typedef ::xsd::cxx::tree::optional< AstronomicalBodyName_type > AstronomicalBodyName_optional;
        typedef ::xsd::cxx::tree::traits< AstronomicalBodyName_type, char > AstronomicalBodyName_traits;

        const AstronomicalBodyName_optional&
        AstronomicalBodyName () const;

        AstronomicalBodyName_optional&
        AstronomicalBodyName ();

        void
        AstronomicalBodyName (const AstronomicalBodyName_type& x);

        void
        AstronomicalBodyName (const AstronomicalBodyName_optional& x);

        void
        AstronomicalBodyName (::std::auto_ptr< AstronomicalBodyName_type > p);

        // CommunicationsObjects
        // 
        typedef ::properties::S335M::CommunicationsObjects CommunicationsObjects_type;
        typedef ::xsd::cxx::tree::optional< CommunicationsObjects_type > CommunicationsObjects_optional;
        typedef ::xsd::cxx::tree::traits< CommunicationsObjects_type, char > CommunicationsObjects_traits;

        const CommunicationsObjects_optional&
        CommunicationsObjects () const;

        CommunicationsObjects_optional&
        CommunicationsObjects ();

        void
        CommunicationsObjects (const CommunicationsObjects_type& x);

        void
        CommunicationsObjects (const CommunicationsObjects_optional& x);

        void
        CommunicationsObjects (::std::auto_ptr< CommunicationsObjects_type > p);

        // AddressNameValueObjects
        // 
        typedef ::properties::S335M::AddressNameValueObjects AddressNameValueObjects_type;
        typedef ::xsd::cxx::tree::optional< AddressNameValueObjects_type > AddressNameValueObjects_optional;
        typedef ::xsd::cxx::tree::traits< AddressNameValueObjects_type, char > AddressNameValueObjects_traits;

        const AddressNameValueObjects_optional&
        AddressNameValueObjects () const;

        AddressNameValueObjects_optional&
        AddressNameValueObjects ();

        void
        AddressNameValueObjects (const AddressNameValueObjects_type& x);

        void
        AddressNameValueObjects (const AddressNameValueObjects_optional& x);

        void
        AddressNameValueObjects (::std::auto_ptr< AddressNameValueObjects_type > p);

        // Constructors.
        //
        AddressType (const InstanceID_type&);

        AddressType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

        AddressType (const AddressType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

        virtual AddressType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~AddressType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        RoomSuiteNumber_optional RoomSuiteNumber_;
        RoomSuiteName_optional RoomSuiteName_;
        BuildingName_optional BuildingName_;
        PlaceName_optional PlaceName_;
        StreetNumber_optional StreetNumber_;
        StreetName_optional StreetName_;
        PostalTown_optional PostalTown_;
        City_optional City_;
        StateProvinceCounty_optional StateProvinceCounty_;
        PostalCode_optional PostalCode_;
        Country_optional Country_;
        GeographicalCoordinates_optional GeographicalCoordinates_;
        AstronomicalBodyName_optional AstronomicalBodyName_;
        CommunicationsObjects_optional CommunicationsObjects_;
        AddressNameValueObjects_optional AddressNameValueObjects_;
      };

      class CommunicationsType: public ::st434::s380m::groups::DMS1ObjectType
      {
        public:
        // CentralTelephoneNumber
        // 
        typedef ::st434::s377m::types::ISO7bitCharString CentralTelephoneNumber_type;
        typedef ::xsd::cxx::tree::optional< CentralTelephoneNumber_type > CentralTelephoneNumber_optional;
        typedef ::xsd::cxx::tree::traits< CentralTelephoneNumber_type, char > CentralTelephoneNumber_traits;

        const CentralTelephoneNumber_optional&
        CentralTelephoneNumber () const;

        CentralTelephoneNumber_optional&
        CentralTelephoneNumber ();

        void
        CentralTelephoneNumber (const CentralTelephoneNumber_type& x);

        void
        CentralTelephoneNumber (const CentralTelephoneNumber_optional& x);

        void
        CentralTelephoneNumber (::std::auto_ptr< CentralTelephoneNumber_type > p);

        // TelephoneNumber
        // 
        typedef ::st434::s377m::types::ISO7bitCharString TelephoneNumber_type;
        typedef ::xsd::cxx::tree::optional< TelephoneNumber_type > TelephoneNumber_optional;
        typedef ::xsd::cxx::tree::traits< TelephoneNumber_type, char > TelephoneNumber_traits;

        const TelephoneNumber_optional&
        TelephoneNumber () const;

        TelephoneNumber_optional&
        TelephoneNumber ();

        void
        TelephoneNumber (const TelephoneNumber_type& x);

        void
        TelephoneNumber (const TelephoneNumber_optional& x);

        void
        TelephoneNumber (::std::auto_ptr< TelephoneNumber_type > p);

        // MobileTelephoneNumber
        // 
        typedef ::st434::s377m::types::ISO7bitCharString MobileTelephoneNumber_type;
        typedef ::xsd::cxx::tree::optional< MobileTelephoneNumber_type > MobileTelephoneNumber_optional;
        typedef ::xsd::cxx::tree::traits< MobileTelephoneNumber_type, char > MobileTelephoneNumber_traits;

        const MobileTelephoneNumber_optional&
        MobileTelephoneNumber () const;

        MobileTelephoneNumber_optional&
        MobileTelephoneNumber ();

        void
        MobileTelephoneNumber (const MobileTelephoneNumber_type& x);

        void
        MobileTelephoneNumber (const MobileTelephoneNumber_optional& x);

        void
        MobileTelephoneNumber (::std::auto_ptr< MobileTelephoneNumber_type > p);

        // FaxNumber
        // 
        typedef ::st434::s377m::types::ISO7bitCharString FaxNumber_type;
        typedef ::xsd::cxx::tree::optional< FaxNumber_type > FaxNumber_optional;
        typedef ::xsd::cxx::tree::traits< FaxNumber_type, char > FaxNumber_traits;

        const FaxNumber_optional&
        FaxNumber () const;

        FaxNumber_optional&
        FaxNumber ();

        void
        FaxNumber (const FaxNumber_type& x);

        void
        FaxNumber (const FaxNumber_optional& x);

        void
        FaxNumber (::std::auto_ptr< FaxNumber_type > p);

        // EmailAddress
        // 
        typedef ::st434::s377m::types::UTF16CharString EmailAddress_type;
        typedef ::xsd::cxx::tree::optional< EmailAddress_type > EmailAddress_optional;
        typedef ::xsd::cxx::tree::traits< EmailAddress_type, char > EmailAddress_traits;

        const EmailAddress_optional&
        EmailAddress () const;

        EmailAddress_optional&
        EmailAddress ();

        void
        EmailAddress (const EmailAddress_type& x);

        void
        EmailAddress (const EmailAddress_optional& x);

        void
        EmailAddress (::std::auto_ptr< EmailAddress_type > p);

        // ContactWebPage
        // 
        typedef ::st434::s377m::types::UTF16CharString ContactWebPage_type;
        typedef ::xsd::cxx::tree::optional< ContactWebPage_type > ContactWebPage_optional;
        typedef ::xsd::cxx::tree::traits< ContactWebPage_type, char > ContactWebPage_traits;

        const ContactWebPage_optional&
        ContactWebPage () const;

        ContactWebPage_optional&
        ContactWebPage ();

        void
        ContactWebPage (const ContactWebPage_type& x);

        void
        ContactWebPage (const ContactWebPage_optional& x);

        void
        ContactWebPage (::std::auto_ptr< ContactWebPage_type > p);

        // Constructors.
        //
        CommunicationsType (const InstanceID_type&);

        CommunicationsType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        CommunicationsType (const CommunicationsType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        virtual CommunicationsType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~CommunicationsType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        CentralTelephoneNumber_optional CentralTelephoneNumber_;
        TelephoneNumber_optional TelephoneNumber_;
        MobileTelephoneNumber_optional MobileTelephoneNumber_;
        FaxNumber_optional FaxNumber_;
        EmailAddress_optional EmailAddress_;
        ContactWebPage_optional ContactWebPage_;
      };

      class ContractType: public ::st434::s380m::groups::ThesaurusType
      {
        public:
        // SupplyContractNumber
        // 
        typedef ::st434::s377m::types::ISO7bitCharString SupplyContractNumber_type;
        typedef ::xsd::cxx::tree::optional< SupplyContractNumber_type > SupplyContractNumber_optional;
        typedef ::xsd::cxx::tree::traits< SupplyContractNumber_type, char > SupplyContractNumber_traits;

        const SupplyContractNumber_optional&
        SupplyContractNumber () const;

        SupplyContractNumber_optional&
        SupplyContractNumber ();

        void
        SupplyContractNumber (const SupplyContractNumber_type& x);

        void
        SupplyContractNumber (const SupplyContractNumber_optional& x);

        void
        SupplyContractNumber (::std::auto_ptr< SupplyContractNumber_type > p);

        // RightsObjects
        // 
        typedef ::properties::S335M::RightsObjects RightsObjects_type;
        typedef ::xsd::cxx::tree::optional< RightsObjects_type > RightsObjects_optional;
        typedef ::xsd::cxx::tree::traits< RightsObjects_type, char > RightsObjects_traits;

        const RightsObjects_optional&
        RightsObjects () const;

        RightsObjects_optional&
        RightsObjects ();

        void
        RightsObjects (const RightsObjects_type& x);

        void
        RightsObjects (const RightsObjects_optional& x);

        void
        RightsObjects (::std::auto_ptr< RightsObjects_type > p);

        // ContractParticipants
        // 
        typedef ::properties::S335M::ContractParticipants ContractParticipants_type;
        typedef ::xsd::cxx::tree::optional< ContractParticipants_type > ContractParticipants_optional;
        typedef ::xsd::cxx::tree::traits< ContractParticipants_type, char > ContractParticipants_traits;

        const ContractParticipants_optional&
        ContractParticipants () const;

        ContractParticipants_optional&
        ContractParticipants ();

        void
        ContractParticipants (const ContractParticipants_type& x);

        void
        ContractParticipants (const ContractParticipants_optional& x);

        void
        ContractParticipants (::std::auto_ptr< ContractParticipants_type > p);

        // Constructors.
        //
        ContractType (const InstanceID_type&);

        ContractType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        ContractType (const ContractType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        virtual ContractType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~ContractType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SupplyContractNumber_optional SupplyContractNumber_;
        RightsObjects_optional RightsObjects_;
        ContractParticipants_optional ContractParticipants_;
      };

      class RightsType: public ::st434::s380m::groups::ThesaurusType
      {
        public:
        // CopyrightOwner
        // 
        typedef ::st434::s377m::types::UTF16CharString CopyrightOwner_type;
        typedef ::xsd::cxx::tree::optional< CopyrightOwner_type > CopyrightOwner_optional;
        typedef ::xsd::cxx::tree::traits< CopyrightOwner_type, char > CopyrightOwner_traits;

        const CopyrightOwner_optional&
        CopyrightOwner () const;

        CopyrightOwner_optional&
        CopyrightOwner ();

        void
        CopyrightOwner (const CopyrightOwner_type& x);

        void
        CopyrightOwner (const CopyrightOwner_optional& x);

        void
        CopyrightOwner (::std::auto_ptr< CopyrightOwner_type > p);

        // Rightsholder
        // 
        typedef ::st434::s377m::types::UTF16CharString Rightsholder_type;
        typedef ::xsd::cxx::tree::optional< Rightsholder_type > Rightsholder_optional;
        typedef ::xsd::cxx::tree::traits< Rightsholder_type, char > Rightsholder_traits;

        const Rightsholder_optional&
        Rightsholder () const;

        Rightsholder_optional&
        Rightsholder ();

        void
        Rightsholder (const Rightsholder_type& x);

        void
        Rightsholder (const Rightsholder_optional& x);

        void
        Rightsholder (::std::auto_ptr< Rightsholder_type > p);

        // RightsManagementAuthority
        // 
        typedef ::st434::s377m::types::UTF16CharString RightsManagementAuthority_type;
        typedef ::xsd::cxx::tree::optional< RightsManagementAuthority_type > RightsManagementAuthority_optional;
        typedef ::xsd::cxx::tree::traits< RightsManagementAuthority_type, char > RightsManagementAuthority_traits;

        const RightsManagementAuthority_optional&
        RightsManagementAuthority () const;

        RightsManagementAuthority_optional&
        RightsManagementAuthority ();

        void
        RightsManagementAuthority (const RightsManagementAuthority_type& x);

        void
        RightsManagementAuthority (const RightsManagementAuthority_optional& x);

        void
        RightsManagementAuthority (::std::auto_ptr< RightsManagementAuthority_type > p);

        // RegionAreaOfIPLicense
        // 
        typedef ::st434::s377m::types::UTF16CharString RegionAreaOfIPLicense_type;
        typedef ::xsd::cxx::tree::optional< RegionAreaOfIPLicense_type > RegionAreaOfIPLicense_optional;
        typedef ::xsd::cxx::tree::traits< RegionAreaOfIPLicense_type, char > RegionAreaOfIPLicense_traits;

        const RegionAreaOfIPLicense_optional&
        RegionAreaOfIPLicense () const;

        RegionAreaOfIPLicense_optional&
        RegionAreaOfIPLicense ();

        void
        RegionAreaOfIPLicense (const RegionAreaOfIPLicense_type& x);

        void
        RegionAreaOfIPLicense (const RegionAreaOfIPLicense_optional& x);

        void
        RegionAreaOfIPLicense (::std::auto_ptr< RegionAreaOfIPLicense_type > p);

        // IntellectualPropertyDescription
        // 
        typedef ::st434::s377m::types::UTF16CharString IntellectualPropertyDescription_type;
        typedef ::xsd::cxx::tree::optional< IntellectualPropertyDescription_type > IntellectualPropertyDescription_optional;
        typedef ::xsd::cxx::tree::traits< IntellectualPropertyDescription_type, char > IntellectualPropertyDescription_traits;

        const IntellectualPropertyDescription_optional&
        IntellectualPropertyDescription () const;

        IntellectualPropertyDescription_optional&
        IntellectualPropertyDescription ();

        void
        IntellectualPropertyDescription (const IntellectualPropertyDescription_type& x);

        void
        IntellectualPropertyDescription (const IntellectualPropertyDescription_optional& x);

        void
        IntellectualPropertyDescription (::std::auto_ptr< IntellectualPropertyDescription_type > p);

        // RightsCondition
        // 
        typedef ::st434::s377m::types::UTF16CharString RightsCondition_type;
        typedef ::xsd::cxx::tree::optional< RightsCondition_type > RightsCondition_optional;
        typedef ::xsd::cxx::tree::traits< RightsCondition_type, char > RightsCondition_traits;

        const RightsCondition_optional&
        RightsCondition () const;

        RightsCondition_optional&
        RightsCondition ();

        void
        RightsCondition (const RightsCondition_type& x);

        void
        RightsCondition (const RightsCondition_optional& x);

        void
        RightsCondition (::std::auto_ptr< RightsCondition_type > p);

        // RightsComment
        // 
        typedef ::st434::s377m::types::UTF16CharString RightsComment_type;
        typedef ::xsd::cxx::tree::optional< RightsComment_type > RightsComment_optional;
        typedef ::xsd::cxx::tree::traits< RightsComment_type, char > RightsComment_traits;

        const RightsComment_optional&
        RightsComment () const;

        RightsComment_optional&
        RightsComment ();

        void
        RightsComment (const RightsComment_type& x);

        void
        RightsComment (const RightsComment_optional& x);

        void
        RightsComment (::std::auto_ptr< RightsComment_type > p);

        // IntellectualPropertyRight
        // 
        typedef ::st434::s377m::types::UTF16CharString IntellectualPropertyRight_type;
        typedef ::xsd::cxx::tree::optional< IntellectualPropertyRight_type > IntellectualPropertyRight_optional;
        typedef ::xsd::cxx::tree::traits< IntellectualPropertyRight_type, char > IntellectualPropertyRight_traits;

        const IntellectualPropertyRight_optional&
        IntellectualPropertyRight () const;

        IntellectualPropertyRight_optional&
        IntellectualPropertyRight ();

        void
        IntellectualPropertyRight (const IntellectualPropertyRight_type& x);

        void
        IntellectualPropertyRight (const IntellectualPropertyRight_optional& x);

        void
        IntellectualPropertyRight (::std::auto_ptr< IntellectualPropertyRight_type > p);

        // RightsStartDateTime
        // 
        typedef ::st434::s377m::types::TimestampType RightsStartDateTime_type;
        typedef ::xsd::cxx::tree::optional< RightsStartDateTime_type > RightsStartDateTime_optional;
        typedef ::xsd::cxx::tree::traits< RightsStartDateTime_type, char > RightsStartDateTime_traits;

        const RightsStartDateTime_optional&
        RightsStartDateTime () const;

        RightsStartDateTime_optional&
        RightsStartDateTime ();

        void
        RightsStartDateTime (const RightsStartDateTime_type& x);

        void
        RightsStartDateTime (const RightsStartDateTime_optional& x);

        void
        RightsStartDateTime (::std::auto_ptr< RightsStartDateTime_type > p);

        // RightsStopDateTime
        // 
        typedef ::st434::s377m::types::TimestampType RightsStopDateTime_type;
        typedef ::xsd::cxx::tree::optional< RightsStopDateTime_type > RightsStopDateTime_optional;
        typedef ::xsd::cxx::tree::traits< RightsStopDateTime_type, char > RightsStopDateTime_traits;

        const RightsStopDateTime_optional&
        RightsStopDateTime () const;

        RightsStopDateTime_optional&
        RightsStopDateTime ();

        void
        RightsStopDateTime (const RightsStopDateTime_type& x);

        void
        RightsStopDateTime (const RightsStopDateTime_optional& x);

        void
        RightsStopDateTime (::std::auto_ptr< RightsStopDateTime_type > p);

        // MaxNumberOfUsages
        // 
        typedef ::st434::s377m::types::UInt16 MaxNumberOfUsages_type;
        typedef ::xsd::cxx::tree::optional< MaxNumberOfUsages_type > MaxNumberOfUsages_optional;
        typedef ::xsd::cxx::tree::traits< MaxNumberOfUsages_type, char > MaxNumberOfUsages_traits;

        const MaxNumberOfUsages_optional&
        MaxNumberOfUsages () const;

        MaxNumberOfUsages_optional&
        MaxNumberOfUsages ();

        void
        MaxNumberOfUsages (const MaxNumberOfUsages_type& x);

        void
        MaxNumberOfUsages (const MaxNumberOfUsages_optional& x);

        void
        MaxNumberOfUsages (::std::auto_ptr< MaxNumberOfUsages_type > p);

        // Constructors.
        //
        RightsType (const InstanceID_type&);

        RightsType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

        RightsType (const RightsType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

        virtual RightsType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~RightsType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        CopyrightOwner_optional CopyrightOwner_;
        Rightsholder_optional Rightsholder_;
        RightsManagementAuthority_optional RightsManagementAuthority_;
        RegionAreaOfIPLicense_optional RegionAreaOfIPLicense_;
        IntellectualPropertyDescription_optional IntellectualPropertyDescription_;
        RightsCondition_optional RightsCondition_;
        RightsComment_optional RightsComment_;
        IntellectualPropertyRight_optional IntellectualPropertyRight_;
        RightsStartDateTime_optional RightsStartDateTime_;
        RightsStopDateTime_optional RightsStopDateTime_;
        MaxNumberOfUsages_optional MaxNumberOfUsages_;
      };

      class PictureFormatType: public ::st434::s380m::groups::DMS1ObjectType
      {
        public:
        // ViewportAspectRatio
        // 
        typedef ::st434::s377m::types::Rational ViewportAspectRatio_type;
        typedef ::xsd::cxx::tree::optional< ViewportAspectRatio_type > ViewportAspectRatio_optional;
        typedef ::xsd::cxx::tree::traits< ViewportAspectRatio_type, char > ViewportAspectRatio_traits;

        const ViewportAspectRatio_optional&
        ViewportAspectRatio () const;

        ViewportAspectRatio_optional&
        ViewportAspectRatio ();

        void
        ViewportAspectRatio (const ViewportAspectRatio_type& x);

        void
        ViewportAspectRatio (const ViewportAspectRatio_optional& x);

        void
        ViewportAspectRatio (::std::auto_ptr< ViewportAspectRatio_type > p);

        // PerceivedDisplayFormat
        // 
        typedef ::st434::s377m::types::ISO7bitCharString PerceivedDisplayFormat_type;
        typedef ::xsd::cxx::tree::optional< PerceivedDisplayFormat_type > PerceivedDisplayFormat_optional;
        typedef ::xsd::cxx::tree::traits< PerceivedDisplayFormat_type, char > PerceivedDisplayFormat_traits;

        const PerceivedDisplayFormat_optional&
        PerceivedDisplayFormat () const;

        PerceivedDisplayFormat_optional&
        PerceivedDisplayFormat ();

        void
        PerceivedDisplayFormat (const PerceivedDisplayFormat_type& x);

        void
        PerceivedDisplayFormat (const PerceivedDisplayFormat_optional& x);

        void
        PerceivedDisplayFormat (::std::auto_ptr< PerceivedDisplayFormat_type > p);

        // ColorDescriptor
        // 
        typedef ::st434::s377m::types::UTF16CharString ColorDescriptor_type;
        typedef ::xsd::cxx::tree::optional< ColorDescriptor_type > ColorDescriptor_optional;
        typedef ::xsd::cxx::tree::traits< ColorDescriptor_type, char > ColorDescriptor_traits;

        const ColorDescriptor_optional&
        ColorDescriptor () const;

        ColorDescriptor_optional&
        ColorDescriptor ();

        void
        ColorDescriptor (const ColorDescriptor_type& x);

        void
        ColorDescriptor (const ColorDescriptor_optional& x);

        void
        ColorDescriptor (::std::auto_ptr< ColorDescriptor_type > p);

        // Constructors.
        //
        PictureFormatType (const InstanceID_type&);

        PictureFormatType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        PictureFormatType (const PictureFormatType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        virtual PictureFormatType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~PictureFormatType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ViewportAspectRatio_optional ViewportAspectRatio_;
        PerceivedDisplayFormat_optional PerceivedDisplayFormat_;
        ColorDescriptor_optional ColorDescriptor_;
      };

      class DeviceParametersType: public ::st434::s380m::groups::ThesaurusType
      {
        public:
        // DeviceKind
        // 
        typedef ::st434::s377m::types::UTF16CharString DeviceKind_type;
        typedef ::xsd::cxx::tree::optional< DeviceKind_type > DeviceKind_optional;
        typedef ::xsd::cxx::tree::traits< DeviceKind_type, char > DeviceKind_traits;

        const DeviceKind_optional&
        DeviceKind () const;

        DeviceKind_optional&
        DeviceKind ();

        void
        DeviceKind (const DeviceKind_type& x);

        void
        DeviceKind (const DeviceKind_optional& x);

        void
        DeviceKind (::std::auto_ptr< DeviceKind_type > p);

        // DeviceDesignation
        // 
        typedef ::st434::s377m::types::ISO7bitCharString DeviceDesignation_type;
        typedef ::xsd::cxx::tree::optional< DeviceDesignation_type > DeviceDesignation_optional;
        typedef ::xsd::cxx::tree::traits< DeviceDesignation_type, char > DeviceDesignation_traits;

        const DeviceDesignation_optional&
        DeviceDesignation () const;

        DeviceDesignation_optional&
        DeviceDesignation ();

        void
        DeviceDesignation (const DeviceDesignation_type& x);

        void
        DeviceDesignation (const DeviceDesignation_optional& x);

        void
        DeviceDesignation (::std::auto_ptr< DeviceDesignation_type > p);

        // DeviceAssetNumber
        // 
        typedef ::st434::s377m::types::ISO7bitCharString DeviceAssetNumber_type;
        typedef ::xsd::cxx::tree::optional< DeviceAssetNumber_type > DeviceAssetNumber_optional;
        typedef ::xsd::cxx::tree::traits< DeviceAssetNumber_type, char > DeviceAssetNumber_traits;

        const DeviceAssetNumber_optional&
        DeviceAssetNumber () const;

        DeviceAssetNumber_optional&
        DeviceAssetNumber ();

        void
        DeviceAssetNumber (const DeviceAssetNumber_type& x);

        void
        DeviceAssetNumber (const DeviceAssetNumber_optional& x);

        void
        DeviceAssetNumber (::std::auto_ptr< DeviceAssetNumber_type > p);

        // IEEEDeviceIdentifier
        // 
        typedef ::st434::s377m::types::ISO7bitCharString IEEEDeviceIdentifier_type;
        typedef ::xsd::cxx::tree::optional< IEEEDeviceIdentifier_type > IEEEDeviceIdentifier_optional;
        typedef ::xsd::cxx::tree::traits< IEEEDeviceIdentifier_type, char > IEEEDeviceIdentifier_traits;

        const IEEEDeviceIdentifier_optional&
        IEEEDeviceIdentifier () const;

        IEEEDeviceIdentifier_optional&
        IEEEDeviceIdentifier ();

        void
        IEEEDeviceIdentifier (const IEEEDeviceIdentifier_type& x);

        void
        IEEEDeviceIdentifier (const IEEEDeviceIdentifier_optional& x);

        void
        IEEEDeviceIdentifier (::std::auto_ptr< IEEEDeviceIdentifier_type > p);

        // DeviceManufacturerName
        // 
        typedef ::st434::s377m::types::UTF16CharString DeviceManufacturerName_type;
        typedef ::xsd::cxx::tree::optional< DeviceManufacturerName_type > DeviceManufacturerName_optional;
        typedef ::xsd::cxx::tree::traits< DeviceManufacturerName_type, char > DeviceManufacturerName_traits;

        const DeviceManufacturerName_optional&
        DeviceManufacturerName () const;

        DeviceManufacturerName_optional&
        DeviceManufacturerName ();

        void
        DeviceManufacturerName (const DeviceManufacturerName_type& x);

        void
        DeviceManufacturerName (const DeviceManufacturerName_optional& x);

        void
        DeviceManufacturerName (::std::auto_ptr< DeviceManufacturerName_type > p);

        // DeviceModel
        // 
        typedef ::st434::s377m::types::ISO7bitCharString DeviceModel_type;
        typedef ::xsd::cxx::tree::optional< DeviceModel_type > DeviceModel_optional;
        typedef ::xsd::cxx::tree::traits< DeviceModel_type, char > DeviceModel_traits;

        const DeviceModel_optional&
        DeviceModel () const;

        DeviceModel_optional&
        DeviceModel ();

        void
        DeviceModel (const DeviceModel_type& x);

        void
        DeviceModel (const DeviceModel_optional& x);

        void
        DeviceModel (::std::auto_ptr< DeviceModel_type > p);

        // DeviceSerialNumber
        // 
        typedef ::st434::s377m::types::ISO7bitCharString DeviceSerialNumber_type;
        typedef ::xsd::cxx::tree::optional< DeviceSerialNumber_type > DeviceSerialNumber_optional;
        typedef ::xsd::cxx::tree::traits< DeviceSerialNumber_type, char > DeviceSerialNumber_traits;

        const DeviceSerialNumber_optional&
        DeviceSerialNumber () const;

        DeviceSerialNumber_optional&
        DeviceSerialNumber ();

        void
        DeviceSerialNumber (const DeviceSerialNumber_type& x);

        void
        DeviceSerialNumber (const DeviceSerialNumber_optional& x);

        void
        DeviceSerialNumber (::std::auto_ptr< DeviceSerialNumber_type > p);

        // DeviceUsageDescription
        // 
        typedef ::st434::s377m::types::UTF16CharString DeviceUsageDescription_type;
        typedef ::xsd::cxx::tree::optional< DeviceUsageDescription_type > DeviceUsageDescription_optional;
        typedef ::xsd::cxx::tree::traits< DeviceUsageDescription_type, char > DeviceUsageDescription_traits;

        const DeviceUsageDescription_optional&
        DeviceUsageDescription () const;

        DeviceUsageDescription_optional&
        DeviceUsageDescription ();

        void
        DeviceUsageDescription (const DeviceUsageDescription_type& x);

        void
        DeviceUsageDescription (const DeviceUsageDescription_optional& x);

        void
        DeviceUsageDescription (::std::auto_ptr< DeviceUsageDescription_type > p);

        // DeviceParametersNameValueObjects
        // 
        typedef ::properties::S335M::DeviceParametersNameValueObjects DeviceParametersNameValueObjects_type;
        typedef ::xsd::cxx::tree::optional< DeviceParametersNameValueObjects_type > DeviceParametersNameValueObjects_optional;
        typedef ::xsd::cxx::tree::traits< DeviceParametersNameValueObjects_type, char > DeviceParametersNameValueObjects_traits;

        const DeviceParametersNameValueObjects_optional&
        DeviceParametersNameValueObjects () const;

        DeviceParametersNameValueObjects_optional&
        DeviceParametersNameValueObjects ();

        void
        DeviceParametersNameValueObjects (const DeviceParametersNameValueObjects_type& x);

        void
        DeviceParametersNameValueObjects (const DeviceParametersNameValueObjects_optional& x);

        void
        DeviceParametersNameValueObjects (::std::auto_ptr< DeviceParametersNameValueObjects_type > p);

        // Constructors.
        //
        DeviceParametersType (const InstanceID_type&);

        DeviceParametersType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

        DeviceParametersType (const DeviceParametersType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

        virtual DeviceParametersType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~DeviceParametersType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        DeviceKind_optional DeviceKind_;
        DeviceDesignation_optional DeviceDesignation_;
        DeviceAssetNumber_optional DeviceAssetNumber_;
        IEEEDeviceIdentifier_optional IEEEDeviceIdentifier_;
        DeviceManufacturerName_optional DeviceManufacturerName_;
        DeviceModel_optional DeviceModel_;
        DeviceSerialNumber_optional DeviceSerialNumber_;
        DeviceUsageDescription_optional DeviceUsageDescription_;
        DeviceParametersNameValueObjects_optional DeviceParametersNameValueObjects_;
      };

      class NameValueType: public ::st434::s380m::groups::DMS1ObjectType
      {
        public:
        // ItemName
        // 
        typedef ::st434::s377m::types::UTF16CharString ItemName_type;
        typedef ::xsd::cxx::tree::optional< ItemName_type > ItemName_optional;
        typedef ::xsd::cxx::tree::traits< ItemName_type, char > ItemName_traits;

        const ItemName_optional&
        ItemName () const;

        ItemName_optional&
        ItemName ();

        void
        ItemName (const ItemName_type& x);

        void
        ItemName (const ItemName_optional& x);

        void
        ItemName (::std::auto_ptr< ItemName_type > p);

        // ItemValue
        // 
        typedef ::st434::s377m::types::UTF16CharString ItemValue_type;
        typedef ::xsd::cxx::tree::optional< ItemValue_type > ItemValue_optional;
        typedef ::xsd::cxx::tree::traits< ItemValue_type, char > ItemValue_traits;

        const ItemValue_optional&
        ItemValue () const;

        ItemValue_optional&
        ItemValue ();

        void
        ItemValue (const ItemValue_type& x);

        void
        ItemValue (const ItemValue_optional& x);

        void
        ItemValue (::std::auto_ptr< ItemValue_type > p);

        // SMPTEUniversalLabelLocator
        // 
        typedef ::st434::s377m::types::UL SMPTEUniversalLabelLocator_type;
        typedef ::xsd::cxx::tree::optional< SMPTEUniversalLabelLocator_type > SMPTEUniversalLabelLocator_optional;
        typedef ::xsd::cxx::tree::traits< SMPTEUniversalLabelLocator_type, char > SMPTEUniversalLabelLocator_traits;

        const SMPTEUniversalLabelLocator_optional&
        SMPTEUniversalLabelLocator () const;

        SMPTEUniversalLabelLocator_optional&
        SMPTEUniversalLabelLocator ();

        void
        SMPTEUniversalLabelLocator (const SMPTEUniversalLabelLocator_type& x);

        void
        SMPTEUniversalLabelLocator (const SMPTEUniversalLabelLocator_optional& x);

        void
        SMPTEUniversalLabelLocator (::std::auto_ptr< SMPTEUniversalLabelLocator_type > p);

        // Constructors.
        //
        NameValueType (const InstanceID_type&);

        NameValueType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

        NameValueType (const NameValueType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

        virtual NameValueType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~NameValueType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ItemName_optional ItemName_;
        ItemValue_optional ItemValue_;
        SMPTEUniversalLabelLocator_optional SMPTEUniversalLabelLocator_;
      };

      class ProcessingType: public ::st434::s380m::groups::DMS1ObjectType
      {
        public:
        // QualityFlag
        // 
        typedef ::st434::s377m::types::Boolean QualityFlag_type;
        typedef ::xsd::cxx::tree::optional< QualityFlag_type > QualityFlag_optional;
        typedef ::xsd::cxx::tree::traits< QualityFlag_type, char > QualityFlag_traits;

        const QualityFlag_optional&
        QualityFlag () const;

        QualityFlag_optional&
        QualityFlag ();

        void
        QualityFlag (const QualityFlag_type& x);

        void
        QualityFlag (const QualityFlag_optional& x);

        void
        QualityFlag (::std::auto_ptr< QualityFlag_type > p);

        // DescriptiveComment
        // 
        typedef ::st434::s377m::types::UTF16CharString DescriptiveComment_type;
        typedef ::xsd::cxx::tree::optional< DescriptiveComment_type > DescriptiveComment_optional;
        typedef ::xsd::cxx::tree::traits< DescriptiveComment_type, char > DescriptiveComment_traits;

        const DescriptiveComment_optional&
        DescriptiveComment () const;

        DescriptiveComment_optional&
        DescriptiveComment ();

        void
        DescriptiveComment (const DescriptiveComment_type& x);

        void
        DescriptiveComment (const DescriptiveComment_optional& x);

        void
        DescriptiveComment (::std::auto_ptr< DescriptiveComment_type > p);

        // GraphicUsage
        // 
        typedef ::st434::s377m::types::UTF16CharString GraphicUsage_type;
        typedef ::xsd::cxx::tree::optional< GraphicUsage_type > GraphicUsage_optional;
        typedef ::xsd::cxx::tree::traits< GraphicUsage_type, char > GraphicUsage_traits;

        const GraphicUsage_optional&
        GraphicUsage () const;

        GraphicUsage_optional&
        GraphicUsage ();

        void
        GraphicUsage (const GraphicUsage_type& x);

        void
        GraphicUsage (const GraphicUsage_optional& x);

        void
        GraphicUsage (::std::auto_ptr< GraphicUsage_type > p);

        // LogoFlag
        // 
        typedef ::st434::s377m::types::Boolean LogoFlag_type;
        typedef ::xsd::cxx::tree::optional< LogoFlag_type > LogoFlag_optional;
        typedef ::xsd::cxx::tree::traits< LogoFlag_type, char > LogoFlag_traits;

        const LogoFlag_optional&
        LogoFlag () const;

        LogoFlag_optional&
        LogoFlag ();

        void
        LogoFlag (const LogoFlag_type& x);

        void
        LogoFlag (const LogoFlag_optional& x);

        void
        LogoFlag (::std::auto_ptr< LogoFlag_type > p);

        // SimpleFlagging
        // 
        typedef ::st434::s377m::types::UInt16 SimpleFlagging_type;
        typedef ::xsd::cxx::tree::optional< SimpleFlagging_type > SimpleFlagging_optional;
        typedef ::xsd::cxx::tree::traits< SimpleFlagging_type, char > SimpleFlagging_traits;

        const SimpleFlagging_optional&
        SimpleFlagging () const;

        SimpleFlagging_optional&
        SimpleFlagging ();

        void
        SimpleFlagging (const SimpleFlagging_type& x);

        void
        SimpleFlagging (const SimpleFlagging_optional& x);

        void
        SimpleFlagging (::std::auto_ptr< SimpleFlagging_type > p);

        // GenerationCopyNumber
        // 
        typedef ::st434::s377m::types::UInt16 GenerationCopyNumber_type;
        typedef ::xsd::cxx::tree::traits< GenerationCopyNumber_type, char > GenerationCopyNumber_traits;

        const GenerationCopyNumber_type&
        GenerationCopyNumber () const;

        GenerationCopyNumber_type&
        GenerationCopyNumber ();

        void
        GenerationCopyNumber (const GenerationCopyNumber_type& x);

        void
        GenerationCopyNumber (::std::auto_ptr< GenerationCopyNumber_type > p);

        // GenerationCloneNumber
        // 
        typedef ::st434::s377m::types::UInt16 GenerationCloneNumber_type;
        typedef ::xsd::cxx::tree::traits< GenerationCloneNumber_type, char > GenerationCloneNumber_traits;

        const GenerationCloneNumber_type&
        GenerationCloneNumber () const;

        GenerationCloneNumber_type&
        GenerationCloneNumber ();

        void
        GenerationCloneNumber (const GenerationCloneNumber_type& x);

        void
        GenerationCloneNumber (::std::auto_ptr< GenerationCloneNumber_type > p);

        // Constructors.
        //
        ProcessingType (const InstanceID_type&,
                        const GenerationCopyNumber_type&,
                        const GenerationCloneNumber_type&);

        ProcessingType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        ProcessingType (const ProcessingType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        virtual ProcessingType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~ProcessingType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        QualityFlag_optional QualityFlag_;
        DescriptiveComment_optional DescriptiveComment_;
        GraphicUsage_optional GraphicUsage_;
        LogoFlag_optional LogoFlag_;
        SimpleFlagging_optional SimpleFlagging_;
        ::xsd::cxx::tree::one< GenerationCopyNumber_type > GenerationCopyNumber_;
        ::xsd::cxx::tree::one< GenerationCloneNumber_type > GenerationCloneNumber_;
      };

      class ProjectType: public ::st434::s380m::groups::DMS1ObjectType
      {
        public:
        // ProjectNumber
        // 
        typedef ::st434::s377m::types::ISO7bitCharString ProjectNumber_type;
        typedef ::xsd::cxx::tree::optional< ProjectNumber_type > ProjectNumber_optional;
        typedef ::xsd::cxx::tree::traits< ProjectNumber_type, char > ProjectNumber_traits;

        const ProjectNumber_optional&
        ProjectNumber () const;

        ProjectNumber_optional&
        ProjectNumber ();

        void
        ProjectNumber (const ProjectNumber_type& x);

        void
        ProjectNumber (const ProjectNumber_optional& x);

        void
        ProjectNumber (::std::auto_ptr< ProjectNumber_type > p);

        // ProjectName
        // 
        typedef ::st434::s377m::types::UTF16CharString ProjectName_type;
        typedef ::xsd::cxx::tree::optional< ProjectName_type > ProjectName_optional;
        typedef ::xsd::cxx::tree::traits< ProjectName_type, char > ProjectName_traits;

        const ProjectName_optional&
        ProjectName () const;

        ProjectName_optional&
        ProjectName ();

        void
        ProjectName (const ProjectName_type& x);

        void
        ProjectName (const ProjectName_optional& x);

        void
        ProjectName (::std::auto_ptr< ProjectName_type > p);

        // Constructors.
        //
        ProjectType (const InstanceID_type&);

        ProjectType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

        ProjectType (const ProjectType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

        virtual ProjectType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~ProjectType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ProjectNumber_optional ProjectNumber_;
        ProjectName_optional ProjectName_;
      };

      class ContactsListType: public ::st434::s380m::groups::DMS1ObjectType
      {
        public:
        // PersonObjects
        // 
        typedef ::properties::S335M::PersonObjects PersonObjects_type;
        typedef ::xsd::cxx::tree::optional< PersonObjects_type > PersonObjects_optional;
        typedef ::xsd::cxx::tree::traits< PersonObjects_type, char > PersonObjects_traits;

        const PersonObjects_optional&
        PersonObjects () const;

        PersonObjects_optional&
        PersonObjects ();

        void
        PersonObjects (const PersonObjects_type& x);

        void
        PersonObjects (const PersonObjects_optional& x);

        void
        PersonObjects (::std::auto_ptr< PersonObjects_type > p);

        // OrganizationObjects
        // 
        typedef ::properties::S335M::OrganizationObjects OrganizationObjects_type;
        typedef ::xsd::cxx::tree::optional< OrganizationObjects_type > OrganizationObjects_optional;
        typedef ::xsd::cxx::tree::traits< OrganizationObjects_type, char > OrganizationObjects_traits;

        const OrganizationObjects_optional&
        OrganizationObjects () const;

        OrganizationObjects_optional&
        OrganizationObjects ();

        void
        OrganizationObjects (const OrganizationObjects_type& x);

        void
        OrganizationObjects (const OrganizationObjects_optional& x);

        void
        OrganizationObjects (::std::auto_ptr< OrganizationObjects_type > p);

        // LocationObjects
        // 
        typedef ::properties::S335M::LocationObjects LocationObjects_type;
        typedef ::xsd::cxx::tree::optional< LocationObjects_type > LocationObjects_optional;
        typedef ::xsd::cxx::tree::traits< LocationObjects_type, char > LocationObjects_traits;

        const LocationObjects_optional&
        LocationObjects () const;

        LocationObjects_optional&
        LocationObjects ();

        void
        LocationObjects (const LocationObjects_type& x);

        void
        LocationObjects (const LocationObjects_optional& x);

        void
        LocationObjects (::std::auto_ptr< LocationObjects_type > p);

        // Constructors.
        //
        ContactsListType (const InstanceID_type&);

        ContactsListType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

        ContactsListType (const ContactsListType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

        virtual ContactsListType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~ContactsListType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        PersonObjects_optional PersonObjects_;
        OrganizationObjects_optional OrganizationObjects_;
        LocationObjects_optional LocationObjects_;
      };

      class CueWordsType: public ::st434::s380m::groups::TextLanguageType
      {
        public:
        // InCueWords
        // 
        typedef ::st434::s377m::types::UTF16CharString InCueWords_type;
        typedef ::xsd::cxx::tree::optional< InCueWords_type > InCueWords_optional;
        typedef ::xsd::cxx::tree::traits< InCueWords_type, char > InCueWords_traits;

        const InCueWords_optional&
        InCueWords () const;

        InCueWords_optional&
        InCueWords ();

        void
        InCueWords (const InCueWords_type& x);

        void
        InCueWords (const InCueWords_optional& x);

        void
        InCueWords (::std::auto_ptr< InCueWords_type > p);

        // OutCueWords
        // 
        typedef ::st434::s377m::types::UTF16CharString OutCueWords_type;
        typedef ::xsd::cxx::tree::optional< OutCueWords_type > OutCueWords_optional;
        typedef ::xsd::cxx::tree::traits< OutCueWords_type, char > OutCueWords_traits;

        const OutCueWords_optional&
        OutCueWords () const;

        OutCueWords_optional&
        OutCueWords ();

        void
        OutCueWords (const OutCueWords_type& x);

        void
        OutCueWords (const OutCueWords_optional& x);

        void
        OutCueWords (::std::auto_ptr< OutCueWords_type > p);

        // Constructors.
        //
        CueWordsType (const InstanceID_type&);

        CueWordsType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        CueWordsType (const CueWordsType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        virtual CueWordsType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~CueWordsType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        InCueWords_optional InCueWords_;
        OutCueWords_optional OutCueWords_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace st434
{
  namespace s380m
  {
    namespace groups
    {
      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (const ::std::string& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (const ::std::string& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (const ::std::string& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (::std::istream& is,
                               const ::std::string& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (::std::istream& is,
                               const ::std::string& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (const ::std::string& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (const ::std::string& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (::xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (::xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace st434
{
  namespace s380m
  {
    namespace groups
    {
      void
      operator<< (::xercesc::DOMElement&, const DMS1ObjectType&);

      void
      operator<< (::xercesc::DOMElement&, const DMS1FrameworkType&);

      void
      operator<< (::xercesc::DOMElement&, const TextLanguageType&);

      void
      operator<< (::xercesc::DOMElement&, const ThesaurusType&);

      void
      operator<< (::xercesc::DOMElement&, const ContactType&);

      void
      operator<< (::xercesc::DOMElement&, const ProductionClipFrameworkType&);

      // Serialize to std::ostream.
      //

      void
      ProductionFramework_REF (::std::ostream& os,
                               const ::st434::s377m::types::Ref& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

      void
      ProductionFramework_REF (::std::ostream& os,
                               const ::st434::s377m::types::Ref& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

      void
      ProductionFramework_REF (::std::ostream& os,
                               const ::st434::s377m::types::Ref& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      ProductionFramework_REF (::xercesc::XMLFormatTarget& ft,
                               const ::st434::s377m::types::Ref& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

      void
      ProductionFramework_REF (::xercesc::XMLFormatTarget& ft,
                               const ::st434::s377m::types::Ref& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

      void
      ProductionFramework_REF (::xercesc::XMLFormatTarget& ft,
                               const ::st434::s377m::types::Ref& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      ProductionFramework_REF (::xercesc::DOMDocument& d,
                               const ::st434::s377m::types::Ref& x,
                               ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      ProductionFramework_REF (const ::st434::s377m::types::Ref& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      ProductionFramework (::std::ostream& os,
                           const ::st434::s380m::groups::ProductionFrameworkType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      void
      ProductionFramework (::std::ostream& os,
                           const ::st434::s380m::groups::ProductionFrameworkType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      void
      ProductionFramework (::std::ostream& os,
                           const ::st434::s380m::groups::ProductionFrameworkType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      ProductionFramework (::xercesc::XMLFormatTarget& ft,
                           const ::st434::s380m::groups::ProductionFrameworkType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      void
      ProductionFramework (::xercesc::XMLFormatTarget& ft,
                           const ::st434::s380m::groups::ProductionFrameworkType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      void
      ProductionFramework (::xercesc::XMLFormatTarget& ft,
                           const ::st434::s380m::groups::ProductionFrameworkType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      ProductionFramework (::xercesc::DOMDocument& d,
                           const ::st434::s380m::groups::ProductionFrameworkType& x,
                           ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      ProductionFramework (const ::st434::s380m::groups::ProductionFrameworkType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const ProductionFrameworkType&);

      // Serialize to std::ostream.
      //

      void
      ClipFramework_REF (::std::ostream& os,
                         const ::st434::s377m::types::Ref& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      ClipFramework_REF (::std::ostream& os,
                         const ::st434::s377m::types::Ref& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      ClipFramework_REF (::std::ostream& os,
                         const ::st434::s377m::types::Ref& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      ClipFramework_REF (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::types::Ref& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      ClipFramework_REF (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::types::Ref& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      ClipFramework_REF (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::types::Ref& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      ClipFramework_REF (::xercesc::DOMDocument& d,
                         const ::st434::s377m::types::Ref& x,
                         ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      ClipFramework_REF (const ::st434::s377m::types::Ref& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      ClipFramework (::std::ostream& os,
                     const ::st434::s380m::groups::ClipFrameworkType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      ClipFramework (::std::ostream& os,
                     const ::st434::s380m::groups::ClipFrameworkType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      ClipFramework (::std::ostream& os,
                     const ::st434::s380m::groups::ClipFrameworkType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      ClipFramework (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s380m::groups::ClipFrameworkType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      ClipFramework (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s380m::groups::ClipFrameworkType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      ClipFramework (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s380m::groups::ClipFrameworkType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      ClipFramework (::xercesc::DOMDocument& d,
                     const ::st434::s380m::groups::ClipFrameworkType& x,
                     ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      ClipFramework (const ::st434::s380m::groups::ClipFrameworkType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const ClipFrameworkType&);

      // Serialize to std::ostream.
      //

      void
      SceneFramework_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      SceneFramework_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      SceneFramework_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      SceneFramework_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      SceneFramework_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      SceneFramework_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      SceneFramework_REF (::xercesc::DOMDocument& d,
                          const ::st434::s377m::types::Ref& x,
                          ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SceneFramework_REF (const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      SceneFramework (::std::ostream& os,
                      const ::st434::s380m::groups::SceneFrameworkType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      SceneFramework (::std::ostream& os,
                      const ::st434::s380m::groups::SceneFrameworkType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      SceneFramework (::std::ostream& os,
                      const ::st434::s380m::groups::SceneFrameworkType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      SceneFramework (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s380m::groups::SceneFrameworkType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      SceneFramework (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s380m::groups::SceneFrameworkType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      SceneFramework (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s380m::groups::SceneFrameworkType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      SceneFramework (::xercesc::DOMDocument& d,
                      const ::st434::s380m::groups::SceneFrameworkType& x,
                      ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SceneFramework (const ::st434::s380m::groups::SceneFrameworkType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const SceneFrameworkType&);

      // Serialize to std::ostream.
      //

      void
      Titles_REF (::std::ostream& os,
                  const ::st434::s377m::types::Ref& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      Titles_REF (::std::ostream& os,
                  const ::st434::s377m::types::Ref& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      Titles_REF (::std::ostream& os,
                  const ::st434::s377m::types::Ref& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Titles_REF (::xercesc::XMLFormatTarget& ft,
                  const ::st434::s377m::types::Ref& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      Titles_REF (::xercesc::XMLFormatTarget& ft,
                  const ::st434::s377m::types::Ref& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      Titles_REF (::xercesc::XMLFormatTarget& ft,
                  const ::st434::s377m::types::Ref& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Titles_REF (::xercesc::DOMDocument& d,
                  const ::st434::s377m::types::Ref& x,
                  ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Titles_REF (const ::st434::s377m::types::Ref& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      Titles (::std::ostream& os,
              const ::st434::s380m::groups::TitlesType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

      void
      Titles (::std::ostream& os,
              const ::st434::s380m::groups::TitlesType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

      void
      Titles (::std::ostream& os,
              const ::st434::s380m::groups::TitlesType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Titles (::xercesc::XMLFormatTarget& ft,
              const ::st434::s380m::groups::TitlesType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

      void
      Titles (::xercesc::XMLFormatTarget& ft,
              const ::st434::s380m::groups::TitlesType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

      void
      Titles (::xercesc::XMLFormatTarget& ft,
              const ::st434::s380m::groups::TitlesType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Titles (::xercesc::DOMDocument& d,
              const ::st434::s380m::groups::TitlesType& x,
              ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Titles (const ::st434::s380m::groups::TitlesType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const TitlesType&);

      // Serialize to std::ostream.
      //

      void
      DMS1Identification_REF (::std::ostream& os,
                              const ::st434::s377m::types::Ref& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

      void
      DMS1Identification_REF (::std::ostream& os,
                              const ::st434::s377m::types::Ref& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

      void
      DMS1Identification_REF (::std::ostream& os,
                              const ::st434::s377m::types::Ref& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      DMS1Identification_REF (::xercesc::XMLFormatTarget& ft,
                              const ::st434::s377m::types::Ref& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

      void
      DMS1Identification_REF (::xercesc::XMLFormatTarget& ft,
                              const ::st434::s377m::types::Ref& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

      void
      DMS1Identification_REF (::xercesc::XMLFormatTarget& ft,
                              const ::st434::s377m::types::Ref& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      DMS1Identification_REF (::xercesc::DOMDocument& d,
                              const ::st434::s377m::types::Ref& x,
                              ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DMS1Identification_REF (const ::st434::s377m::types::Ref& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      DMS1Identification (::std::ostream& os,
                          const ::st434::s380m::groups::DMS1IdentificationType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      DMS1Identification (::std::ostream& os,
                          const ::st434::s380m::groups::DMS1IdentificationType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      DMS1Identification (::std::ostream& os,
                          const ::st434::s380m::groups::DMS1IdentificationType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      DMS1Identification (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s380m::groups::DMS1IdentificationType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      DMS1Identification (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s380m::groups::DMS1IdentificationType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      DMS1Identification (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s380m::groups::DMS1IdentificationType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      DMS1Identification (::xercesc::DOMDocument& d,
                          const ::st434::s380m::groups::DMS1IdentificationType& x,
                          ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DMS1Identification (const ::st434::s380m::groups::DMS1IdentificationType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const DMS1IdentificationType&);

      // Serialize to std::ostream.
      //

      void
      GroupRelationship_REF (::std::ostream& os,
                             const ::st434::s377m::types::Ref& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      void
      GroupRelationship_REF (::std::ostream& os,
                             const ::st434::s377m::types::Ref& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      void
      GroupRelationship_REF (::std::ostream& os,
                             const ::st434::s377m::types::Ref& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      GroupRelationship_REF (::xercesc::XMLFormatTarget& ft,
                             const ::st434::s377m::types::Ref& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      void
      GroupRelationship_REF (::xercesc::XMLFormatTarget& ft,
                             const ::st434::s377m::types::Ref& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      void
      GroupRelationship_REF (::xercesc::XMLFormatTarget& ft,
                             const ::st434::s377m::types::Ref& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      GroupRelationship_REF (::xercesc::DOMDocument& d,
                             const ::st434::s377m::types::Ref& x,
                             ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      GroupRelationship_REF (const ::st434::s377m::types::Ref& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      GroupRelationship (::std::ostream& os,
                         const ::st434::s380m::groups::GroupRelationshipType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      GroupRelationship (::std::ostream& os,
                         const ::st434::s380m::groups::GroupRelationshipType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      GroupRelationship (::std::ostream& os,
                         const ::st434::s380m::groups::GroupRelationshipType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      GroupRelationship (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s380m::groups::GroupRelationshipType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      GroupRelationship (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s380m::groups::GroupRelationshipType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      GroupRelationship (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s380m::groups::GroupRelationshipType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      GroupRelationship (::xercesc::DOMDocument& d,
                         const ::st434::s380m::groups::GroupRelationshipType& x,
                         ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      GroupRelationship (const ::st434::s380m::groups::GroupRelationshipType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const GroupRelationshipType&);

      // Serialize to std::ostream.
      //

      void
      Branding_REF (::std::ostream& os,
                    const ::st434::s377m::types::Ref& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Branding_REF (::std::ostream& os,
                    const ::st434::s377m::types::Ref& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Branding_REF (::std::ostream& os,
                    const ::st434::s377m::types::Ref& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Branding_REF (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s377m::types::Ref& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Branding_REF (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s377m::types::Ref& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Branding_REF (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s377m::types::Ref& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Branding_REF (::xercesc::DOMDocument& d,
                    const ::st434::s377m::types::Ref& x,
                    ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Branding_REF (const ::st434::s377m::types::Ref& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      Branding (::std::ostream& os,
                const ::st434::s380m::groups::BrandingType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Branding (::std::ostream& os,
                const ::st434::s380m::groups::BrandingType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Branding (::std::ostream& os,
                const ::st434::s380m::groups::BrandingType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Branding (::xercesc::XMLFormatTarget& ft,
                const ::st434::s380m::groups::BrandingType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Branding (::xercesc::XMLFormatTarget& ft,
                const ::st434::s380m::groups::BrandingType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Branding (::xercesc::XMLFormatTarget& ft,
                const ::st434::s380m::groups::BrandingType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Branding (::xercesc::DOMDocument& d,
                const ::st434::s380m::groups::BrandingType& x,
                ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Branding (const ::st434::s380m::groups::BrandingType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const BrandingType&);

      // Serialize to std::ostream.
      //

      void
      DMS1Event_REF (::std::ostream& os,
                     const ::st434::s377m::types::Ref& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      DMS1Event_REF (::std::ostream& os,
                     const ::st434::s377m::types::Ref& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      DMS1Event_REF (::std::ostream& os,
                     const ::st434::s377m::types::Ref& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      DMS1Event_REF (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s377m::types::Ref& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      DMS1Event_REF (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s377m::types::Ref& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      DMS1Event_REF (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s377m::types::Ref& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      DMS1Event_REF (::xercesc::DOMDocument& d,
                     const ::st434::s377m::types::Ref& x,
                     ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DMS1Event_REF (const ::st434::s377m::types::Ref& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      DMS1Event (::std::ostream& os,
                 const ::st434::s380m::groups::DMS1EventType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      DMS1Event (::std::ostream& os,
                 const ::st434::s380m::groups::DMS1EventType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      DMS1Event (::std::ostream& os,
                 const ::st434::s380m::groups::DMS1EventType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      DMS1Event (::xercesc::XMLFormatTarget& ft,
                 const ::st434::s380m::groups::DMS1EventType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      DMS1Event (::xercesc::XMLFormatTarget& ft,
                 const ::st434::s380m::groups::DMS1EventType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      DMS1Event (::xercesc::XMLFormatTarget& ft,
                 const ::st434::s380m::groups::DMS1EventType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      DMS1Event (::xercesc::DOMDocument& d,
                 const ::st434::s380m::groups::DMS1EventType& x,
                 ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DMS1Event (const ::st434::s380m::groups::DMS1EventType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const DMS1EventType&);

      // Serialize to std::ostream.
      //

      void
      Publication_REF (::std::ostream& os,
                       const ::st434::s377m::types::Ref& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      Publication_REF (::std::ostream& os,
                       const ::st434::s377m::types::Ref& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      Publication_REF (::std::ostream& os,
                       const ::st434::s377m::types::Ref& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Publication_REF (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::types::Ref& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      Publication_REF (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::types::Ref& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      Publication_REF (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::types::Ref& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Publication_REF (::xercesc::DOMDocument& d,
                       const ::st434::s377m::types::Ref& x,
                       ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Publication_REF (const ::st434::s377m::types::Ref& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      Publication (::std::ostream& os,
                   const ::st434::s380m::groups::PublicationType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      Publication (::std::ostream& os,
                   const ::st434::s380m::groups::PublicationType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      Publication (::std::ostream& os,
                   const ::st434::s380m::groups::PublicationType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Publication (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s380m::groups::PublicationType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      Publication (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s380m::groups::PublicationType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      Publication (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s380m::groups::PublicationType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Publication (::xercesc::DOMDocument& d,
                   const ::st434::s380m::groups::PublicationType& x,
                   ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Publication (const ::st434::s380m::groups::PublicationType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const PublicationType&);

      // Serialize to std::ostream.
      //

      void
      Award_REF (::std::ostream& os,
                 const ::st434::s377m::types::Ref& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      Award_REF (::std::ostream& os,
                 const ::st434::s377m::types::Ref& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      Award_REF (::std::ostream& os,
                 const ::st434::s377m::types::Ref& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Award_REF (::xercesc::XMLFormatTarget& ft,
                 const ::st434::s377m::types::Ref& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      Award_REF (::xercesc::XMLFormatTarget& ft,
                 const ::st434::s377m::types::Ref& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      Award_REF (::xercesc::XMLFormatTarget& ft,
                 const ::st434::s377m::types::Ref& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Award_REF (::xercesc::DOMDocument& d,
                 const ::st434::s377m::types::Ref& x,
                 ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Award_REF (const ::st434::s377m::types::Ref& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      Award (::std::ostream& os,
             const ::st434::s380m::groups::AwardType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

      void
      Award (::std::ostream& os,
             const ::st434::s380m::groups::AwardType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

      void
      Award (::std::ostream& os,
             const ::st434::s380m::groups::AwardType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Award (::xercesc::XMLFormatTarget& ft,
             const ::st434::s380m::groups::AwardType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

      void
      Award (::xercesc::XMLFormatTarget& ft,
             const ::st434::s380m::groups::AwardType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

      void
      Award (::xercesc::XMLFormatTarget& ft,
             const ::st434::s380m::groups::AwardType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Award (::xercesc::DOMDocument& d,
             const ::st434::s380m::groups::AwardType& x,
             ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Award (const ::st434::s380m::groups::AwardType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const AwardType&);

      // Serialize to std::ostream.
      //

      void
      CaptionsDescription_REF (::std::ostream& os,
                               const ::st434::s377m::types::Ref& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

      void
      CaptionsDescription_REF (::std::ostream& os,
                               const ::st434::s377m::types::Ref& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

      void
      CaptionsDescription_REF (::std::ostream& os,
                               const ::st434::s377m::types::Ref& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      CaptionsDescription_REF (::xercesc::XMLFormatTarget& ft,
                               const ::st434::s377m::types::Ref& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

      void
      CaptionsDescription_REF (::xercesc::XMLFormatTarget& ft,
                               const ::st434::s377m::types::Ref& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

      void
      CaptionsDescription_REF (::xercesc::XMLFormatTarget& ft,
                               const ::st434::s377m::types::Ref& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::string& e = "UTF-8",
                               ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      CaptionsDescription_REF (::xercesc::DOMDocument& d,
                               const ::st434::s377m::types::Ref& x,
                               ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      CaptionsDescription_REF (const ::st434::s377m::types::Ref& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      CaptionsDescription (::std::ostream& os,
                           const ::st434::s380m::groups::CaptionsDescriptionType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      void
      CaptionsDescription (::std::ostream& os,
                           const ::st434::s380m::groups::CaptionsDescriptionType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      void
      CaptionsDescription (::std::ostream& os,
                           const ::st434::s380m::groups::CaptionsDescriptionType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      CaptionsDescription (::xercesc::XMLFormatTarget& ft,
                           const ::st434::s380m::groups::CaptionsDescriptionType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      void
      CaptionsDescription (::xercesc::XMLFormatTarget& ft,
                           const ::st434::s380m::groups::CaptionsDescriptionType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      void
      CaptionsDescription (::xercesc::XMLFormatTarget& ft,
                           const ::st434::s380m::groups::CaptionsDescriptionType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      CaptionsDescription (::xercesc::DOMDocument& d,
                           const ::st434::s380m::groups::CaptionsDescriptionType& x,
                           ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      CaptionsDescription (const ::st434::s380m::groups::CaptionsDescriptionType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const CaptionsDescriptionType&);

      // Serialize to std::ostream.
      //

      void
      DMS1Annotation_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      DMS1Annotation_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      DMS1Annotation_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      DMS1Annotation_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      DMS1Annotation_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      DMS1Annotation_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      DMS1Annotation_REF (::xercesc::DOMDocument& d,
                          const ::st434::s377m::types::Ref& x,
                          ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DMS1Annotation_REF (const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      DMS1Annotation (::std::ostream& os,
                      const ::st434::s380m::groups::DMS1AnnotationType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      DMS1Annotation (::std::ostream& os,
                      const ::st434::s380m::groups::DMS1AnnotationType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      DMS1Annotation (::std::ostream& os,
                      const ::st434::s380m::groups::DMS1AnnotationType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      DMS1Annotation (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s380m::groups::DMS1AnnotationType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      DMS1Annotation (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s380m::groups::DMS1AnnotationType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      DMS1Annotation (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s380m::groups::DMS1AnnotationType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      DMS1Annotation (::xercesc::DOMDocument& d,
                      const ::st434::s380m::groups::DMS1AnnotationType& x,
                      ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DMS1Annotation (const ::st434::s380m::groups::DMS1AnnotationType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const DMS1AnnotationType&);

      // Serialize to std::ostream.
      //

      void
      SettingPeriod_REF (::std::ostream& os,
                         const ::st434::s377m::types::Ref& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      SettingPeriod_REF (::std::ostream& os,
                         const ::st434::s377m::types::Ref& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      SettingPeriod_REF (::std::ostream& os,
                         const ::st434::s377m::types::Ref& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      SettingPeriod_REF (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::types::Ref& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      SettingPeriod_REF (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::types::Ref& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      SettingPeriod_REF (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::types::Ref& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      SettingPeriod_REF (::xercesc::DOMDocument& d,
                         const ::st434::s377m::types::Ref& x,
                         ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SettingPeriod_REF (const ::st434::s377m::types::Ref& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      SettingPeriod (::std::ostream& os,
                     const ::st434::s380m::groups::SettingPeriodType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      SettingPeriod (::std::ostream& os,
                     const ::st434::s380m::groups::SettingPeriodType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      SettingPeriod (::std::ostream& os,
                     const ::st434::s380m::groups::SettingPeriodType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      SettingPeriod (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s380m::groups::SettingPeriodType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      SettingPeriod (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s380m::groups::SettingPeriodType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      SettingPeriod (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s380m::groups::SettingPeriodType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      SettingPeriod (::xercesc::DOMDocument& d,
                     const ::st434::s380m::groups::SettingPeriodType& x,
                     ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SettingPeriod (const ::st434::s380m::groups::SettingPeriodType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const SettingPeriodType&);

      // Serialize to std::ostream.
      //

      void
      Scripting_REF (::std::ostream& os,
                     const ::st434::s377m::types::Ref& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      Scripting_REF (::std::ostream& os,
                     const ::st434::s377m::types::Ref& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      Scripting_REF (::std::ostream& os,
                     const ::st434::s377m::types::Ref& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Scripting_REF (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s377m::types::Ref& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      Scripting_REF (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s377m::types::Ref& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      Scripting_REF (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s377m::types::Ref& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Scripting_REF (::xercesc::DOMDocument& d,
                     const ::st434::s377m::types::Ref& x,
                     ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Scripting_REF (const ::st434::s377m::types::Ref& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      Scripting (::std::ostream& os,
                 const ::st434::s380m::groups::ScriptingType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      Scripting (::std::ostream& os,
                 const ::st434::s380m::groups::ScriptingType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      Scripting (::std::ostream& os,
                 const ::st434::s380m::groups::ScriptingType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Scripting (::xercesc::XMLFormatTarget& ft,
                 const ::st434::s380m::groups::ScriptingType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      Scripting (::xercesc::XMLFormatTarget& ft,
                 const ::st434::s380m::groups::ScriptingType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      Scripting (::xercesc::XMLFormatTarget& ft,
                 const ::st434::s380m::groups::ScriptingType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Scripting (::xercesc::DOMDocument& d,
                 const ::st434::s380m::groups::ScriptingType& x,
                 ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Scripting (const ::st434::s380m::groups::ScriptingType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const ScriptingType&);

      // Serialize to std::ostream.
      //

      void
      Classification_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      Classification_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      Classification_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Classification_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      Classification_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      Classification_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Classification_REF (::xercesc::DOMDocument& d,
                          const ::st434::s377m::types::Ref& x,
                          ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Classification_REF (const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      Classification (::std::ostream& os,
                      const ::st434::s380m::groups::ClassificationType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      Classification (::std::ostream& os,
                      const ::st434::s380m::groups::ClassificationType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      Classification (::std::ostream& os,
                      const ::st434::s380m::groups::ClassificationType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Classification (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s380m::groups::ClassificationType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      Classification (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s380m::groups::ClassificationType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      Classification (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s380m::groups::ClassificationType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Classification (::xercesc::DOMDocument& d,
                      const ::st434::s380m::groups::ClassificationType& x,
                      ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Classification (const ::st434::s380m::groups::ClassificationType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const ClassificationType&);

      // Serialize to std::ostream.
      //

      void
      Shot_REF (::std::ostream& os,
                const ::st434::s377m::types::Ref& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Shot_REF (::std::ostream& os,
                const ::st434::s377m::types::Ref& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Shot_REF (::std::ostream& os,
                const ::st434::s377m::types::Ref& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Shot_REF (::xercesc::XMLFormatTarget& ft,
                const ::st434::s377m::types::Ref& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Shot_REF (::xercesc::XMLFormatTarget& ft,
                const ::st434::s377m::types::Ref& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Shot_REF (::xercesc::XMLFormatTarget& ft,
                const ::st434::s377m::types::Ref& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Shot_REF (::xercesc::DOMDocument& d,
                const ::st434::s377m::types::Ref& x,
                ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Shot_REF (const ::st434::s377m::types::Ref& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      Shot (::std::ostream& os,
            const ::st434::s380m::groups::ShotType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

      void
      Shot (::std::ostream& os,
            const ::st434::s380m::groups::ShotType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

      void
      Shot (::std::ostream& os,
            const ::st434::s380m::groups::ShotType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Shot (::xercesc::XMLFormatTarget& ft,
            const ::st434::s380m::groups::ShotType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

      void
      Shot (::xercesc::XMLFormatTarget& ft,
            const ::st434::s380m::groups::ShotType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

      void
      Shot (::xercesc::XMLFormatTarget& ft,
            const ::st434::s380m::groups::ShotType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Shot (::xercesc::DOMDocument& d,
            const ::st434::s380m::groups::ShotType& x,
            ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Shot (const ::st434::s380m::groups::ShotType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const ShotType&);

      // Serialize to std::ostream.
      //

      void
      Keypoint_REF (::std::ostream& os,
                    const ::st434::s377m::types::Ref& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Keypoint_REF (::std::ostream& os,
                    const ::st434::s377m::types::Ref& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Keypoint_REF (::std::ostream& os,
                    const ::st434::s377m::types::Ref& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Keypoint_REF (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s377m::types::Ref& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Keypoint_REF (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s377m::types::Ref& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Keypoint_REF (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s377m::types::Ref& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Keypoint_REF (::xercesc::DOMDocument& d,
                    const ::st434::s377m::types::Ref& x,
                    ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Keypoint_REF (const ::st434::s377m::types::Ref& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      Keypoint (::std::ostream& os,
                const ::st434::s380m::groups::KeypointType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Keypoint (::std::ostream& os,
                const ::st434::s380m::groups::KeypointType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Keypoint (::std::ostream& os,
                const ::st434::s380m::groups::KeypointType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Keypoint (::xercesc::XMLFormatTarget& ft,
                const ::st434::s380m::groups::KeypointType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Keypoint (::xercesc::XMLFormatTarget& ft,
                const ::st434::s380m::groups::KeypointType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Keypoint (::xercesc::XMLFormatTarget& ft,
                const ::st434::s380m::groups::KeypointType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Keypoint (::xercesc::DOMDocument& d,
                const ::st434::s380m::groups::KeypointType& x,
                ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Keypoint (const ::st434::s380m::groups::KeypointType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const KeypointType&);

      // Serialize to std::ostream.
      //

      void
      Participant_REF (::std::ostream& os,
                       const ::st434::s377m::types::Ref& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      Participant_REF (::std::ostream& os,
                       const ::st434::s377m::types::Ref& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      Participant_REF (::std::ostream& os,
                       const ::st434::s377m::types::Ref& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Participant_REF (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::types::Ref& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      Participant_REF (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::types::Ref& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      Participant_REF (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::types::Ref& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Participant_REF (::xercesc::DOMDocument& d,
                       const ::st434::s377m::types::Ref& x,
                       ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Participant_REF (const ::st434::s377m::types::Ref& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      Participant (::std::ostream& os,
                   const ::st434::s380m::groups::ParticipantType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      Participant (::std::ostream& os,
                   const ::st434::s380m::groups::ParticipantType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      Participant (::std::ostream& os,
                   const ::st434::s380m::groups::ParticipantType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Participant (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s380m::groups::ParticipantType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      Participant (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s380m::groups::ParticipantType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      Participant (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s380m::groups::ParticipantType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Participant (::xercesc::DOMDocument& d,
                   const ::st434::s380m::groups::ParticipantType& x,
                   ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Participant (const ::st434::s380m::groups::ParticipantType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const ParticipantType&);

      // Serialize to std::ostream.
      //

      void
      Person_REF (::std::ostream& os,
                  const ::st434::s377m::types::Ref& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      Person_REF (::std::ostream& os,
                  const ::st434::s377m::types::Ref& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      Person_REF (::std::ostream& os,
                  const ::st434::s377m::types::Ref& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Person_REF (::xercesc::XMLFormatTarget& ft,
                  const ::st434::s377m::types::Ref& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      Person_REF (::xercesc::XMLFormatTarget& ft,
                  const ::st434::s377m::types::Ref& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      Person_REF (::xercesc::XMLFormatTarget& ft,
                  const ::st434::s377m::types::Ref& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Person_REF (::xercesc::DOMDocument& d,
                  const ::st434::s377m::types::Ref& x,
                  ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Person_REF (const ::st434::s377m::types::Ref& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      Person (::std::ostream& os,
              const ::st434::s380m::groups::PersonType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

      void
      Person (::std::ostream& os,
              const ::st434::s380m::groups::PersonType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

      void
      Person (::std::ostream& os,
              const ::st434::s380m::groups::PersonType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Person (::xercesc::XMLFormatTarget& ft,
              const ::st434::s380m::groups::PersonType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

      void
      Person (::xercesc::XMLFormatTarget& ft,
              const ::st434::s380m::groups::PersonType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

      void
      Person (::xercesc::XMLFormatTarget& ft,
              const ::st434::s380m::groups::PersonType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Person (::xercesc::DOMDocument& d,
              const ::st434::s380m::groups::PersonType& x,
              ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Person (const ::st434::s380m::groups::PersonType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const PersonType&);

      // Serialize to std::ostream.
      //

      void
      Organization_REF (::std::ostream& os,
                        const ::st434::s377m::types::Ref& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      void
      Organization_REF (::std::ostream& os,
                        const ::st434::s377m::types::Ref& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      void
      Organization_REF (::std::ostream& os,
                        const ::st434::s377m::types::Ref& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Organization_REF (::xercesc::XMLFormatTarget& ft,
                        const ::st434::s377m::types::Ref& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      void
      Organization_REF (::xercesc::XMLFormatTarget& ft,
                        const ::st434::s377m::types::Ref& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      void
      Organization_REF (::xercesc::XMLFormatTarget& ft,
                        const ::st434::s377m::types::Ref& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Organization_REF (::xercesc::DOMDocument& d,
                        const ::st434::s377m::types::Ref& x,
                        ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Organization_REF (const ::st434::s377m::types::Ref& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      Organization (::std::ostream& os,
                    const ::st434::s380m::groups::OrganizationType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Organization (::std::ostream& os,
                    const ::st434::s380m::groups::OrganizationType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Organization (::std::ostream& os,
                    const ::st434::s380m::groups::OrganizationType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Organization (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s380m::groups::OrganizationType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Organization (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s380m::groups::OrganizationType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Organization (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s380m::groups::OrganizationType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Organization (::xercesc::DOMDocument& d,
                    const ::st434::s380m::groups::OrganizationType& x,
                    ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Organization (const ::st434::s380m::groups::OrganizationType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const OrganizationType&);

      // Serialize to std::ostream.
      //

      void
      Location_REF (::std::ostream& os,
                    const ::st434::s377m::types::Ref& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Location_REF (::std::ostream& os,
                    const ::st434::s377m::types::Ref& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Location_REF (::std::ostream& os,
                    const ::st434::s377m::types::Ref& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Location_REF (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s377m::types::Ref& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Location_REF (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s377m::types::Ref& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Location_REF (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s377m::types::Ref& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Location_REF (::xercesc::DOMDocument& d,
                    const ::st434::s377m::types::Ref& x,
                    ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Location_REF (const ::st434::s377m::types::Ref& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      Location (::std::ostream& os,
                const ::st434::s380m::groups::LocationType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Location (::std::ostream& os,
                const ::st434::s380m::groups::LocationType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Location (::std::ostream& os,
                const ::st434::s380m::groups::LocationType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Location (::xercesc::XMLFormatTarget& ft,
                const ::st434::s380m::groups::LocationType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Location (::xercesc::XMLFormatTarget& ft,
                const ::st434::s380m::groups::LocationType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Location (::xercesc::XMLFormatTarget& ft,
                const ::st434::s380m::groups::LocationType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Location (::xercesc::DOMDocument& d,
                const ::st434::s380m::groups::LocationType& x,
                ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Location (const ::st434::s380m::groups::LocationType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const LocationType&);

      // Serialize to std::ostream.
      //

      void
      Address_REF (::std::ostream& os,
                   const ::st434::s377m::types::Ref& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      Address_REF (::std::ostream& os,
                   const ::st434::s377m::types::Ref& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      Address_REF (::std::ostream& os,
                   const ::st434::s377m::types::Ref& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Address_REF (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::types::Ref& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      Address_REF (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::types::Ref& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      Address_REF (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::types::Ref& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Address_REF (::xercesc::DOMDocument& d,
                   const ::st434::s377m::types::Ref& x,
                   ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Address_REF (const ::st434::s377m::types::Ref& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      Address (::std::ostream& os,
               const ::st434::s380m::groups::AddressType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Address (::std::ostream& os,
               const ::st434::s380m::groups::AddressType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Address (::std::ostream& os,
               const ::st434::s380m::groups::AddressType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Address (::xercesc::XMLFormatTarget& ft,
               const ::st434::s380m::groups::AddressType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Address (::xercesc::XMLFormatTarget& ft,
               const ::st434::s380m::groups::AddressType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Address (::xercesc::XMLFormatTarget& ft,
               const ::st434::s380m::groups::AddressType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Address (::xercesc::DOMDocument& d,
               const ::st434::s380m::groups::AddressType& x,
               ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Address (const ::st434::s380m::groups::AddressType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const AddressType&);

      // Serialize to std::ostream.
      //

      void
      Communications_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      Communications_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      Communications_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Communications_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      Communications_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      Communications_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Communications_REF (::xercesc::DOMDocument& d,
                          const ::st434::s377m::types::Ref& x,
                          ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Communications_REF (const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      Communications (::std::ostream& os,
                      const ::st434::s380m::groups::CommunicationsType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      Communications (::std::ostream& os,
                      const ::st434::s380m::groups::CommunicationsType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      Communications (::std::ostream& os,
                      const ::st434::s380m::groups::CommunicationsType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Communications (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s380m::groups::CommunicationsType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      Communications (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s380m::groups::CommunicationsType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      Communications (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s380m::groups::CommunicationsType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Communications (::xercesc::DOMDocument& d,
                      const ::st434::s380m::groups::CommunicationsType& x,
                      ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Communications (const ::st434::s380m::groups::CommunicationsType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const CommunicationsType&);

      // Serialize to std::ostream.
      //

      void
      Contract_REF (::std::ostream& os,
                    const ::st434::s377m::types::Ref& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Contract_REF (::std::ostream& os,
                    const ::st434::s377m::types::Ref& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Contract_REF (::std::ostream& os,
                    const ::st434::s377m::types::Ref& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Contract_REF (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s377m::types::Ref& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Contract_REF (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s377m::types::Ref& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Contract_REF (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s377m::types::Ref& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Contract_REF (::xercesc::DOMDocument& d,
                    const ::st434::s377m::types::Ref& x,
                    ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Contract_REF (const ::st434::s377m::types::Ref& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      Contract (::std::ostream& os,
                const ::st434::s380m::groups::ContractType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Contract (::std::ostream& os,
                const ::st434::s380m::groups::ContractType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Contract (::std::ostream& os,
                const ::st434::s380m::groups::ContractType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Contract (::xercesc::XMLFormatTarget& ft,
                const ::st434::s380m::groups::ContractType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Contract (::xercesc::XMLFormatTarget& ft,
                const ::st434::s380m::groups::ContractType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Contract (::xercesc::XMLFormatTarget& ft,
                const ::st434::s380m::groups::ContractType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Contract (::xercesc::DOMDocument& d,
                const ::st434::s380m::groups::ContractType& x,
                ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Contract (const ::st434::s380m::groups::ContractType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const ContractType&);

      // Serialize to std::ostream.
      //

      void
      Rights_REF (::std::ostream& os,
                  const ::st434::s377m::types::Ref& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      Rights_REF (::std::ostream& os,
                  const ::st434::s377m::types::Ref& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      Rights_REF (::std::ostream& os,
                  const ::st434::s377m::types::Ref& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Rights_REF (::xercesc::XMLFormatTarget& ft,
                  const ::st434::s377m::types::Ref& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      Rights_REF (::xercesc::XMLFormatTarget& ft,
                  const ::st434::s377m::types::Ref& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      Rights_REF (::xercesc::XMLFormatTarget& ft,
                  const ::st434::s377m::types::Ref& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Rights_REF (::xercesc::DOMDocument& d,
                  const ::st434::s377m::types::Ref& x,
                  ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Rights_REF (const ::st434::s377m::types::Ref& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      Rights (::std::ostream& os,
              const ::st434::s380m::groups::RightsType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

      void
      Rights (::std::ostream& os,
              const ::st434::s380m::groups::RightsType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

      void
      Rights (::std::ostream& os,
              const ::st434::s380m::groups::RightsType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Rights (::xercesc::XMLFormatTarget& ft,
              const ::st434::s380m::groups::RightsType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

      void
      Rights (::xercesc::XMLFormatTarget& ft,
              const ::st434::s380m::groups::RightsType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

      void
      Rights (::xercesc::XMLFormatTarget& ft,
              const ::st434::s380m::groups::RightsType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Rights (::xercesc::DOMDocument& d,
              const ::st434::s380m::groups::RightsType& x,
              ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Rights (const ::st434::s380m::groups::RightsType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const RightsType&);

      // Serialize to std::ostream.
      //

      void
      PictureFormat_REF (::std::ostream& os,
                         const ::st434::s377m::types::Ref& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      PictureFormat_REF (::std::ostream& os,
                         const ::st434::s377m::types::Ref& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      PictureFormat_REF (::std::ostream& os,
                         const ::st434::s377m::types::Ref& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      PictureFormat_REF (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::types::Ref& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      PictureFormat_REF (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::types::Ref& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      PictureFormat_REF (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::types::Ref& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      PictureFormat_REF (::xercesc::DOMDocument& d,
                         const ::st434::s377m::types::Ref& x,
                         ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      PictureFormat_REF (const ::st434::s377m::types::Ref& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      PictureFormat (::std::ostream& os,
                     const ::st434::s380m::groups::PictureFormatType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      PictureFormat (::std::ostream& os,
                     const ::st434::s380m::groups::PictureFormatType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      PictureFormat (::std::ostream& os,
                     const ::st434::s380m::groups::PictureFormatType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      PictureFormat (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s380m::groups::PictureFormatType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      PictureFormat (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s380m::groups::PictureFormatType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      PictureFormat (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s380m::groups::PictureFormatType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      PictureFormat (::xercesc::DOMDocument& d,
                     const ::st434::s380m::groups::PictureFormatType& x,
                     ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      PictureFormat (const ::st434::s380m::groups::PictureFormatType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const PictureFormatType&);

      // Serialize to std::ostream.
      //

      void
      DeviceParameters_REF (::std::ostream& os,
                            const ::st434::s377m::types::Ref& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

      void
      DeviceParameters_REF (::std::ostream& os,
                            const ::st434::s377m::types::Ref& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

      void
      DeviceParameters_REF (::std::ostream& os,
                            const ::st434::s377m::types::Ref& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      DeviceParameters_REF (::xercesc::XMLFormatTarget& ft,
                            const ::st434::s377m::types::Ref& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

      void
      DeviceParameters_REF (::xercesc::XMLFormatTarget& ft,
                            const ::st434::s377m::types::Ref& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

      void
      DeviceParameters_REF (::xercesc::XMLFormatTarget& ft,
                            const ::st434::s377m::types::Ref& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      DeviceParameters_REF (::xercesc::DOMDocument& d,
                            const ::st434::s377m::types::Ref& x,
                            ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DeviceParameters_REF (const ::st434::s377m::types::Ref& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      DeviceParameters (::std::ostream& os,
                        const ::st434::s380m::groups::DeviceParametersType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      void
      DeviceParameters (::std::ostream& os,
                        const ::st434::s380m::groups::DeviceParametersType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      void
      DeviceParameters (::std::ostream& os,
                        const ::st434::s380m::groups::DeviceParametersType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      DeviceParameters (::xercesc::XMLFormatTarget& ft,
                        const ::st434::s380m::groups::DeviceParametersType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      void
      DeviceParameters (::xercesc::XMLFormatTarget& ft,
                        const ::st434::s380m::groups::DeviceParametersType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      void
      DeviceParameters (::xercesc::XMLFormatTarget& ft,
                        const ::st434::s380m::groups::DeviceParametersType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      DeviceParameters (::xercesc::DOMDocument& d,
                        const ::st434::s380m::groups::DeviceParametersType& x,
                        ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DeviceParameters (const ::st434::s380m::groups::DeviceParametersType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const DeviceParametersType&);

      // Serialize to std::ostream.
      //

      void
      NameValue_REF (::std::ostream& os,
                     const ::st434::s377m::types::Ref& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      NameValue_REF (::std::ostream& os,
                     const ::st434::s377m::types::Ref& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      NameValue_REF (::std::ostream& os,
                     const ::st434::s377m::types::Ref& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      NameValue_REF (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s377m::types::Ref& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      NameValue_REF (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s377m::types::Ref& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      NameValue_REF (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s377m::types::Ref& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      NameValue_REF (::xercesc::DOMDocument& d,
                     const ::st434::s377m::types::Ref& x,
                     ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      NameValue_REF (const ::st434::s377m::types::Ref& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      NameValue (::std::ostream& os,
                 const ::st434::s380m::groups::NameValueType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      NameValue (::std::ostream& os,
                 const ::st434::s380m::groups::NameValueType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      NameValue (::std::ostream& os,
                 const ::st434::s380m::groups::NameValueType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      NameValue (::xercesc::XMLFormatTarget& ft,
                 const ::st434::s380m::groups::NameValueType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      NameValue (::xercesc::XMLFormatTarget& ft,
                 const ::st434::s380m::groups::NameValueType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      NameValue (::xercesc::XMLFormatTarget& ft,
                 const ::st434::s380m::groups::NameValueType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      NameValue (::xercesc::DOMDocument& d,
                 const ::st434::s380m::groups::NameValueType& x,
                 ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      NameValue (const ::st434::s380m::groups::NameValueType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const NameValueType&);

      // Serialize to std::ostream.
      //

      void
      Processing_REF (::std::ostream& os,
                      const ::st434::s377m::types::Ref& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      Processing_REF (::std::ostream& os,
                      const ::st434::s377m::types::Ref& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      Processing_REF (::std::ostream& os,
                      const ::st434::s377m::types::Ref& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Processing_REF (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::types::Ref& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      Processing_REF (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::types::Ref& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      Processing_REF (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::types::Ref& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Processing_REF (::xercesc::DOMDocument& d,
                      const ::st434::s377m::types::Ref& x,
                      ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Processing_REF (const ::st434::s377m::types::Ref& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      Processing (::std::ostream& os,
                  const ::st434::s380m::groups::ProcessingType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      Processing (::std::ostream& os,
                  const ::st434::s380m::groups::ProcessingType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      Processing (::std::ostream& os,
                  const ::st434::s380m::groups::ProcessingType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Processing (::xercesc::XMLFormatTarget& ft,
                  const ::st434::s380m::groups::ProcessingType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      Processing (::xercesc::XMLFormatTarget& ft,
                  const ::st434::s380m::groups::ProcessingType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      Processing (::xercesc::XMLFormatTarget& ft,
                  const ::st434::s380m::groups::ProcessingType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Processing (::xercesc::DOMDocument& d,
                  const ::st434::s380m::groups::ProcessingType& x,
                  ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Processing (const ::st434::s380m::groups::ProcessingType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const ProcessingType&);

      // Serialize to std::ostream.
      //

      void
      Project_REF (::std::ostream& os,
                   const ::st434::s377m::types::Ref& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      Project_REF (::std::ostream& os,
                   const ::st434::s377m::types::Ref& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      Project_REF (::std::ostream& os,
                   const ::st434::s377m::types::Ref& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Project_REF (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::types::Ref& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      Project_REF (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::types::Ref& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      Project_REF (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::types::Ref& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Project_REF (::xercesc::DOMDocument& d,
                   const ::st434::s377m::types::Ref& x,
                   ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Project_REF (const ::st434::s377m::types::Ref& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      Project (::std::ostream& os,
               const ::st434::s380m::groups::ProjectType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Project (::std::ostream& os,
               const ::st434::s380m::groups::ProjectType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Project (::std::ostream& os,
               const ::st434::s380m::groups::ProjectType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Project (::xercesc::XMLFormatTarget& ft,
               const ::st434::s380m::groups::ProjectType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Project (::xercesc::XMLFormatTarget& ft,
               const ::st434::s380m::groups::ProjectType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Project (::xercesc::XMLFormatTarget& ft,
               const ::st434::s380m::groups::ProjectType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Project (::xercesc::DOMDocument& d,
               const ::st434::s380m::groups::ProjectType& x,
               ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Project (const ::st434::s380m::groups::ProjectType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const ProjectType&);

      // Serialize to std::ostream.
      //

      void
      ContactsList_REF (::std::ostream& os,
                        const ::st434::s377m::types::Ref& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      void
      ContactsList_REF (::std::ostream& os,
                        const ::st434::s377m::types::Ref& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      void
      ContactsList_REF (::std::ostream& os,
                        const ::st434::s377m::types::Ref& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      ContactsList_REF (::xercesc::XMLFormatTarget& ft,
                        const ::st434::s377m::types::Ref& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      void
      ContactsList_REF (::xercesc::XMLFormatTarget& ft,
                        const ::st434::s377m::types::Ref& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      void
      ContactsList_REF (::xercesc::XMLFormatTarget& ft,
                        const ::st434::s377m::types::Ref& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      ContactsList_REF (::xercesc::DOMDocument& d,
                        const ::st434::s377m::types::Ref& x,
                        ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      ContactsList_REF (const ::st434::s377m::types::Ref& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      ContactsList (::std::ostream& os,
                    const ::st434::s380m::groups::ContactsListType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      ContactsList (::std::ostream& os,
                    const ::st434::s380m::groups::ContactsListType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      ContactsList (::std::ostream& os,
                    const ::st434::s380m::groups::ContactsListType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      ContactsList (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s380m::groups::ContactsListType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      ContactsList (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s380m::groups::ContactsListType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      ContactsList (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s380m::groups::ContactsListType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      ContactsList (::xercesc::DOMDocument& d,
                    const ::st434::s380m::groups::ContactsListType& x,
                    ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      ContactsList (const ::st434::s380m::groups::ContactsListType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const ContactsListType&);

      // Serialize to std::ostream.
      //

      void
      CueWords_REF (::std::ostream& os,
                    const ::st434::s377m::types::Ref& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      CueWords_REF (::std::ostream& os,
                    const ::st434::s377m::types::Ref& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      CueWords_REF (::std::ostream& os,
                    const ::st434::s377m::types::Ref& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      CueWords_REF (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s377m::types::Ref& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      CueWords_REF (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s377m::types::Ref& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      CueWords_REF (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s377m::types::Ref& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      CueWords_REF (::xercesc::DOMDocument& d,
                    const ::st434::s377m::types::Ref& x,
                    ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      CueWords_REF (const ::st434::s377m::types::Ref& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      CueWords (::std::ostream& os,
                const ::st434::s380m::groups::CueWordsType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      CueWords (::std::ostream& os,
                const ::st434::s380m::groups::CueWordsType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      CueWords (::std::ostream& os,
                const ::st434::s380m::groups::CueWordsType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      CueWords (::xercesc::XMLFormatTarget& ft,
                const ::st434::s380m::groups::CueWordsType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      CueWords (::xercesc::XMLFormatTarget& ft,
                const ::st434::s380m::groups::CueWordsType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      CueWords (::xercesc::XMLFormatTarget& ft,
                const ::st434::s380m::groups::CueWordsType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      CueWords (::xercesc::DOMDocument& d,
                const ::st434::s380m::groups::CueWordsType& x,
                ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      CueWords (const ::st434::s380m::groups::CueWordsType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const CueWordsType&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // GROUPS_S380M_METADATA_HXX
