// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GROUPS_S377M_METADATA_HXX
#define GROUPS_S377M_METADATA_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      class AbstractSetType;
      class InterchangeObjectType;
      class SubDescriptorsType;
      class DescriptiveFrameworkType;
      class DescriptiveObjectType;
      class TrackType;
      class PackageType;
      class ComponentType;
      class SegmentType;
      class SourceReferenceType;
      class DMS1EventType;
      class CommentMarkerType;
      class GenericDescriptorType;
      class PhysicalDescriptorType;
      class LocatorType;
      class PrefaceType;
      class IdentificationType;
      class ContentStorageType;
      class EssenceDataType;
      class NetworkLocatorType;
      class TextLocatorType;
      class TimelineTrackType;
      class EventTrackType;
      class StaticTrackType;
      class SequenceType;
      class TimecodeType;
      class DescriptiveMarkerType;
      class SourceClipType;
      class DescriptiveClipType;
      class MaterialPackageType;
      class SourcePackageType;
      class FileDescriptorType;
      class PictureDescriptorType;
      class CDCIDescriptorType;
      class RGBADescriptorType;
      class SoundDescriptorType;
      class DataEssenceDescriptorType;
      class MultipleDescriptorType;
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "dataTypes/s377m_types.hxx"

#include "dictionary/rp210.hxx"

#include "groups/dark_metadata.hxx"

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      class AbstractSetType: public ::xml_schema::type
      {
        public:
        // ExtensionProperties
        // 
        typedef ::st434::s377m::groups::ExtensionProperties ExtensionProperties_type;
        typedef ::xsd::cxx::tree::optional< ExtensionProperties_type > ExtensionProperties_optional;
        typedef ::xsd::cxx::tree::traits< ExtensionProperties_type, char > ExtensionProperties_traits;

        const ExtensionProperties_optional&
        ExtensionProperties () const;

        ExtensionProperties_optional&
        ExtensionProperties ();

        void
        ExtensionProperties (const ExtensionProperties_type& x);

        void
        ExtensionProperties (const ExtensionProperties_optional& x);

        void
        ExtensionProperties (::std::auto_ptr< ExtensionProperties_type > p);

        // InstanceID
        // 
        typedef ::st434::s377m::types::UUID InstanceID_type;
        typedef ::xsd::cxx::tree::traits< InstanceID_type, char > InstanceID_traits;

        const InstanceID_type&
        InstanceID () const;

        InstanceID_type&
        InstanceID ();

        void
        InstanceID (const InstanceID_type& x);

        void
        InstanceID (::std::auto_ptr< InstanceID_type > p);

        // Constructors.
        //
        AbstractSetType (const InstanceID_type&);

        AbstractSetType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        AbstractSetType (const AbstractSetType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        virtual AbstractSetType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~AbstractSetType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ExtensionProperties_optional ExtensionProperties_;
        ::xsd::cxx::tree::one< InstanceID_type > InstanceID_;
      };

      class InterchangeObjectType: public ::st434::s377m::groups::AbstractSetType
      {
        public:
        // LinkedGenerationID
        // 
        typedef ::st434::s377m::types::UUID LinkedGenerationID_type;
        typedef ::xsd::cxx::tree::optional< LinkedGenerationID_type > LinkedGenerationID_optional;
        typedef ::xsd::cxx::tree::traits< LinkedGenerationID_type, char > LinkedGenerationID_traits;

        const LinkedGenerationID_optional&
        LinkedGenerationID () const;

        LinkedGenerationID_optional&
        LinkedGenerationID ();

        void
        LinkedGenerationID (const LinkedGenerationID_type& x);

        void
        LinkedGenerationID (const LinkedGenerationID_optional& x);

        void
        LinkedGenerationID (::std::auto_ptr< LinkedGenerationID_type > p);

        // Constructors.
        //
        InterchangeObjectType (const InstanceID_type&);

        InterchangeObjectType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

        InterchangeObjectType (const InterchangeObjectType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

        virtual InterchangeObjectType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~InterchangeObjectType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        LinkedGenerationID_optional LinkedGenerationID_;
      };

      class SubDescriptorsType: public ::st434::s377m::groups::InterchangeObjectType
      {
        public:
        // Constructors.
        //
        SubDescriptorsType (const InstanceID_type&);

        SubDescriptorsType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        SubDescriptorsType (const SubDescriptorsType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        virtual SubDescriptorsType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~SubDescriptorsType ();
      };

      class DescriptiveFrameworkType: public ::st434::s377m::groups::InterchangeObjectType
      {
        public:
        // Constructors.
        //
        DescriptiveFrameworkType (const InstanceID_type&);

        DescriptiveFrameworkType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

        DescriptiveFrameworkType (const DescriptiveFrameworkType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

        virtual DescriptiveFrameworkType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~DescriptiveFrameworkType ();
      };

      class DescriptiveObjectType: public ::st434::s377m::groups::InterchangeObjectType
      {
        public:
        // Constructors.
        //
        DescriptiveObjectType (const InstanceID_type&);

        DescriptiveObjectType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

        DescriptiveObjectType (const DescriptiveObjectType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

        virtual DescriptiveObjectType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~DescriptiveObjectType ();
      };

      class TrackType: public ::st434::s377m::groups::InterchangeObjectType
      {
        public:
        // TrackID
        // 
        typedef ::st434::s377m::types::UInt32 TrackID_type;
        typedef ::xsd::cxx::tree::optional< TrackID_type > TrackID_optional;
        typedef ::xsd::cxx::tree::traits< TrackID_type, char > TrackID_traits;

        const TrackID_optional&
        TrackID () const;

        TrackID_optional&
        TrackID ();

        void
        TrackID (const TrackID_type& x);

        void
        TrackID (const TrackID_optional& x);

        void
        TrackID (::std::auto_ptr< TrackID_type > p);

        // EssenceTrackNumber
        // 
        typedef ::st434::s377m::types::UInt32 EssenceTrackNumber_type;
        typedef ::xsd::cxx::tree::traits< EssenceTrackNumber_type, char > EssenceTrackNumber_traits;

        const EssenceTrackNumber_type&
        EssenceTrackNumber () const;

        EssenceTrackNumber_type&
        EssenceTrackNumber ();

        void
        EssenceTrackNumber (const EssenceTrackNumber_type& x);

        void
        EssenceTrackNumber (::std::auto_ptr< EssenceTrackNumber_type > p);

        static EssenceTrackNumber_type
        EssenceTrackNumber_default_value ();

        // TrackName
        // 
        typedef ::st434::s377m::types::UTF16CharString TrackName_type;
        typedef ::xsd::cxx::tree::optional< TrackName_type > TrackName_optional;
        typedef ::xsd::cxx::tree::traits< TrackName_type, char > TrackName_traits;

        const TrackName_optional&
        TrackName () const;

        TrackName_optional&
        TrackName ();

        void
        TrackName (const TrackName_type& x);

        void
        TrackName (const TrackName_optional& x);

        void
        TrackName (::std::auto_ptr< TrackName_type > p);

        static const TrackName_type&
        TrackName_default_value ();

        // TrackSegment
        // 
        typedef ::properties::S335M::TrackSegment TrackSegment_type;
        typedef ::xsd::cxx::tree::traits< TrackSegment_type, char > TrackSegment_traits;

        const TrackSegment_type&
        TrackSegment () const;

        TrackSegment_type&
        TrackSegment ();

        void
        TrackSegment (const TrackSegment_type& x);

        void
        TrackSegment (::std::auto_ptr< TrackSegment_type > p);

        // Constructors.
        //
        TrackType (const InstanceID_type&,
                   const EssenceTrackNumber_type&,
                   const TrackSegment_type&);

        TrackType (const InstanceID_type&,
                   const EssenceTrackNumber_type&,
                   ::std::auto_ptr< TrackSegment_type >&);

        TrackType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

        TrackType (const TrackType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

        virtual TrackType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~TrackType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        TrackID_optional TrackID_;
        ::xsd::cxx::tree::one< EssenceTrackNumber_type > EssenceTrackNumber_;
        TrackName_optional TrackName_;
        static const TrackName_type TrackName_default_value_;
        ::xsd::cxx::tree::one< TrackSegment_type > TrackSegment_;
      };

      class PackageType: public ::st434::s377m::groups::InterchangeObjectType
      {
        public:
        // PackageID
        // 
        typedef ::st434::s377m::types::UMID32 PackageID_type;
        typedef ::xsd::cxx::tree::traits< PackageID_type, char > PackageID_traits;

        const PackageID_type&
        PackageID () const;

        PackageID_type&
        PackageID ();

        void
        PackageID (const PackageID_type& x);

        void
        PackageID (::std::auto_ptr< PackageID_type > p);

        // PackageName
        // 
        typedef ::st434::s377m::types::UTF16CharString PackageName_type;
        typedef ::xsd::cxx::tree::optional< PackageName_type > PackageName_optional;
        typedef ::xsd::cxx::tree::traits< PackageName_type, char > PackageName_traits;

        const PackageName_optional&
        PackageName () const;

        PackageName_optional&
        PackageName ();

        void
        PackageName (const PackageName_type& x);

        void
        PackageName (const PackageName_optional& x);

        void
        PackageName (::std::auto_ptr< PackageName_type > p);

        // CreationTime
        // 
        typedef ::st434::s377m::types::TimestampType CreationTime_type;
        typedef ::xsd::cxx::tree::traits< CreationTime_type, char > CreationTime_traits;

        const CreationTime_type&
        CreationTime () const;

        CreationTime_type&
        CreationTime ();

        void
        CreationTime (const CreationTime_type& x);

        void
        CreationTime (::std::auto_ptr< CreationTime_type > p);

        // PackageLastModified
        // 
        typedef ::st434::s377m::types::TimestampType PackageLastModified_type;
        typedef ::xsd::cxx::tree::traits< PackageLastModified_type, char > PackageLastModified_traits;

        const PackageLastModified_type&
        PackageLastModified () const;

        PackageLastModified_type&
        PackageLastModified ();

        void
        PackageLastModified (const PackageLastModified_type& x);

        void
        PackageLastModified (::std::auto_ptr< PackageLastModified_type > p);

        // PackageTracks
        // 
        typedef ::properties::S335M::PackageTracks PackageTracks_type;
        typedef ::xsd::cxx::tree::traits< PackageTracks_type, char > PackageTracks_traits;

        const PackageTracks_type&
        PackageTracks () const;

        PackageTracks_type&
        PackageTracks ();

        void
        PackageTracks (const PackageTracks_type& x);

        void
        PackageTracks (::std::auto_ptr< PackageTracks_type > p);

        // Constructors.
        //
        PackageType (const InstanceID_type&,
                     const PackageID_type&,
                     const CreationTime_type&,
                     const PackageLastModified_type&,
                     const PackageTracks_type&);

        PackageType (const InstanceID_type&,
                     const PackageID_type&,
                     ::std::auto_ptr< CreationTime_type >&,
                     ::std::auto_ptr< PackageLastModified_type >&,
                     ::std::auto_ptr< PackageTracks_type >&);

        PackageType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

        PackageType (const PackageType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

        virtual PackageType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~PackageType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< PackageID_type > PackageID_;
        PackageName_optional PackageName_;
        ::xsd::cxx::tree::one< CreationTime_type > CreationTime_;
        ::xsd::cxx::tree::one< PackageLastModified_type > PackageLastModified_;
        ::xsd::cxx::tree::one< PackageTracks_type > PackageTracks_;
      };

      class ComponentType: public ::st434::s377m::groups::InterchangeObjectType
      {
        public:
        // ComponentDataDefinition
        // 
        typedef ::st434::s377m::types::UL ComponentDataDefinition_type;
        typedef ::xsd::cxx::tree::traits< ComponentDataDefinition_type, char > ComponentDataDefinition_traits;

        const ComponentDataDefinition_type&
        ComponentDataDefinition () const;

        ComponentDataDefinition_type&
        ComponentDataDefinition ();

        void
        ComponentDataDefinition (const ComponentDataDefinition_type& x);

        void
        ComponentDataDefinition (::std::auto_ptr< ComponentDataDefinition_type > p);

        // ComponentLength
        // 
        typedef ::st434::s377m::types::Length ComponentLength_type;
        typedef ::xsd::cxx::tree::optional< ComponentLength_type > ComponentLength_optional;
        typedef ::xsd::cxx::tree::traits< ComponentLength_type, char > ComponentLength_traits;

        const ComponentLength_optional&
        ComponentLength () const;

        ComponentLength_optional&
        ComponentLength ();

        void
        ComponentLength (const ComponentLength_type& x);

        void
        ComponentLength (const ComponentLength_optional& x);

        void
        ComponentLength (::std::auto_ptr< ComponentLength_type > p);

        // Constructors.
        //
        ComponentType (const InstanceID_type&,
                       const ComponentDataDefinition_type&);

        ComponentType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

        ComponentType (const ComponentType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

        virtual ComponentType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~ComponentType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< ComponentDataDefinition_type > ComponentDataDefinition_;
        ComponentLength_optional ComponentLength_;
      };

      class SegmentType: public ::st434::s377m::groups::ComponentType
      {
        public:
        // Constructors.
        //
        SegmentType (const InstanceID_type&,
                     const ComponentDataDefinition_type&);

        SegmentType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

        SegmentType (const SegmentType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

        virtual SegmentType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~SegmentType ();
      };

      class SourceReferenceType: public ::st434::s377m::groups::SegmentType
      {
        public:
        // SourcePackageID
        // 
        typedef ::st434::s377m::types::UMID32 SourcePackageID_type;
        typedef ::xsd::cxx::tree::traits< SourcePackageID_type, char > SourcePackageID_traits;

        const SourcePackageID_type&
        SourcePackageID () const;

        SourcePackageID_type&
        SourcePackageID ();

        void
        SourcePackageID (const SourcePackageID_type& x);

        void
        SourcePackageID (::std::auto_ptr< SourcePackageID_type > p);

        // SourceTrackID
        // 
        typedef ::st434::s377m::types::UInt32 SourceTrackID_type;
        typedef ::xsd::cxx::tree::traits< SourceTrackID_type, char > SourceTrackID_traits;

        const SourceTrackID_type&
        SourceTrackID () const;

        SourceTrackID_type&
        SourceTrackID ();

        void
        SourceTrackID (const SourceTrackID_type& x);

        void
        SourceTrackID (::std::auto_ptr< SourceTrackID_type > p);

        // ChannelIDs
        // 
        typedef ::properties::S335M::ChannelIDs ChannelIDs_type;
        typedef ::xsd::cxx::tree::optional< ChannelIDs_type > ChannelIDs_optional;
        typedef ::xsd::cxx::tree::traits< ChannelIDs_type, char > ChannelIDs_traits;

        const ChannelIDs_optional&
        ChannelIDs () const;

        ChannelIDs_optional&
        ChannelIDs ();

        void
        ChannelIDs (const ChannelIDs_type& x);

        void
        ChannelIDs (const ChannelIDs_optional& x);

        void
        ChannelIDs (::std::auto_ptr< ChannelIDs_type > p);

        // MonoSourceTrackIDs
        // 
        typedef ::properties::S335M::MonoSourceTrackIDs MonoSourceTrackIDs_type;
        typedef ::xsd::cxx::tree::optional< MonoSourceTrackIDs_type > MonoSourceTrackIDs_optional;
        typedef ::xsd::cxx::tree::traits< MonoSourceTrackIDs_type, char > MonoSourceTrackIDs_traits;

        const MonoSourceTrackIDs_optional&
        MonoSourceTrackIDs () const;

        MonoSourceTrackIDs_optional&
        MonoSourceTrackIDs ();

        void
        MonoSourceTrackIDs (const MonoSourceTrackIDs_type& x);

        void
        MonoSourceTrackIDs (const MonoSourceTrackIDs_optional& x);

        void
        MonoSourceTrackIDs (::std::auto_ptr< MonoSourceTrackIDs_type > p);

        // Constructors.
        //
        SourceReferenceType (const InstanceID_type&,
                             const ComponentDataDefinition_type&,
                             const SourcePackageID_type&,
                             const SourceTrackID_type&);

        SourceReferenceType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

        SourceReferenceType (const SourceReferenceType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

        virtual SourceReferenceType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~SourceReferenceType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< SourcePackageID_type > SourcePackageID_;
        ::xsd::cxx::tree::one< SourceTrackID_type > SourceTrackID_;
        ChannelIDs_optional ChannelIDs_;
        MonoSourceTrackIDs_optional MonoSourceTrackIDs_;
      };

      class DMS1EventType: public ::st434::s377m::groups::SegmentType
      {
        public:
        // EventPosition
        // 
        typedef ::st434::s377m::types::Position EventPosition_type;
        typedef ::xsd::cxx::tree::optional< EventPosition_type > EventPosition_optional;
        typedef ::xsd::cxx::tree::traits< EventPosition_type, char > EventPosition_traits;

        const EventPosition_optional&
        EventPosition () const;

        EventPosition_optional&
        EventPosition ();

        void
        EventPosition (const EventPosition_type& x);

        void
        EventPosition (const EventPosition_optional& x);

        void
        EventPosition (::std::auto_ptr< EventPosition_type > p);

        // EventComment
        // 
        typedef ::st434::s377m::types::UTF16CharString EventComment_type;
        typedef ::xsd::cxx::tree::optional< EventComment_type > EventComment_optional;
        typedef ::xsd::cxx::tree::traits< EventComment_type, char > EventComment_traits;

        const EventComment_optional&
        EventComment () const;

        EventComment_optional&
        EventComment ();

        void
        EventComment (const EventComment_type& x);

        void
        EventComment (const EventComment_optional& x);

        void
        EventComment (::std::auto_ptr< EventComment_type > p);

        // Constructors.
        //
        DMS1EventType (const InstanceID_type&,
                       const ComponentDataDefinition_type&);

        DMS1EventType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

        DMS1EventType (const DMS1EventType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

        virtual DMS1EventType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~DMS1EventType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        EventPosition_optional EventPosition_;
        EventComment_optional EventComment_;
      };

      class CommentMarkerType: public ::st434::s377m::groups::DMS1EventType
      {
        public:
        // Constructors.
        //
        CommentMarkerType (const InstanceID_type&,
                           const ComponentDataDefinition_type&);

        CommentMarkerType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        CommentMarkerType (const CommentMarkerType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        virtual CommentMarkerType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~CommentMarkerType ();
      };

      class GenericDescriptorType: public ::st434::s377m::groups::InterchangeObjectType
      {
        public:
        // Locators
        // 
        typedef ::properties::S335M::Locators Locators_type;
        typedef ::xsd::cxx::tree::optional< Locators_type > Locators_optional;
        typedef ::xsd::cxx::tree::traits< Locators_type, char > Locators_traits;

        const Locators_optional&
        Locators () const;

        Locators_optional&
        Locators ();

        void
        Locators (const Locators_type& x);

        void
        Locators (const Locators_optional& x);

        void
        Locators (::std::auto_ptr< Locators_type > p);

        // SubDescriptors
        // 
        typedef ::properties::S335M::SubDescriptors SubDescriptors_type;
        typedef ::xsd::cxx::tree::optional< SubDescriptors_type > SubDescriptors_optional;
        typedef ::xsd::cxx::tree::traits< SubDescriptors_type, char > SubDescriptors_traits;

        const SubDescriptors_optional&
        SubDescriptors () const;

        SubDescriptors_optional&
        SubDescriptors ();

        void
        SubDescriptors (const SubDescriptors_type& x);

        void
        SubDescriptors (const SubDescriptors_optional& x);

        void
        SubDescriptors (::std::auto_ptr< SubDescriptors_type > p);

        // Constructors.
        //
        GenericDescriptorType (const InstanceID_type&);

        GenericDescriptorType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

        GenericDescriptorType (const GenericDescriptorType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

        virtual GenericDescriptorType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~GenericDescriptorType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        Locators_optional Locators_;
        SubDescriptors_optional SubDescriptors_;
      };

      class PhysicalDescriptorType: public ::st434::s377m::groups::GenericDescriptorType
      {
        public:
        // Constructors.
        //
        PhysicalDescriptorType (const InstanceID_type&);

        PhysicalDescriptorType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

        PhysicalDescriptorType (const PhysicalDescriptorType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

        virtual PhysicalDescriptorType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~PhysicalDescriptorType ();
      };

      class LocatorType: public ::st434::s377m::groups::InterchangeObjectType
      {
        public:
        // Constructors.
        //
        LocatorType (const InstanceID_type&);

        LocatorType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

        LocatorType (const LocatorType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

        virtual LocatorType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~LocatorType ();
      };

      class PrefaceType: public ::st434::s377m::groups::InterchangeObjectType
      {
        public:
        // FileLastModified
        // 
        typedef ::st434::s377m::types::TimestampType FileLastModified_type;
        typedef ::xsd::cxx::tree::traits< FileLastModified_type, char > FileLastModified_traits;

        const FileLastModified_type&
        FileLastModified () const;

        FileLastModified_type&
        FileLastModified ();

        void
        FileLastModified (const FileLastModified_type& x);

        void
        FileLastModified (::std::auto_ptr< FileLastModified_type > p);

        // FormatVersion
        // 
        typedef ::st434::s377m::types::VersionType FormatVersion_type;
        typedef ::xsd::cxx::tree::traits< FormatVersion_type, char > FormatVersion_traits;

        const FormatVersion_type&
        FormatVersion () const;

        FormatVersion_type&
        FormatVersion ();

        void
        FormatVersion (const FormatVersion_type& x);

        void
        FormatVersion (::std::auto_ptr< FormatVersion_type > p);

        // ObjectModelVersion
        // 
        typedef ::st434::s377m::types::UInt32 ObjectModelVersion_type;
        typedef ::xsd::cxx::tree::optional< ObjectModelVersion_type > ObjectModelVersion_optional;
        typedef ::xsd::cxx::tree::traits< ObjectModelVersion_type, char > ObjectModelVersion_traits;

        const ObjectModelVersion_optional&
        ObjectModelVersion () const;

        ObjectModelVersion_optional&
        ObjectModelVersion ();

        void
        ObjectModelVersion (const ObjectModelVersion_type& x);

        void
        ObjectModelVersion (const ObjectModelVersion_optional& x);

        void
        ObjectModelVersion (::std::auto_ptr< ObjectModelVersion_type > p);

        static ObjectModelVersion_type
        ObjectModelVersion_default_value ();

        // PrimaryPackage
        // 
        typedef ::properties::S335M::PrimaryPackage PrimaryPackage_type;
        typedef ::xsd::cxx::tree::optional< PrimaryPackage_type > PrimaryPackage_optional;
        typedef ::xsd::cxx::tree::traits< PrimaryPackage_type, char > PrimaryPackage_traits;

        const PrimaryPackage_optional&
        PrimaryPackage () const;

        PrimaryPackage_optional&
        PrimaryPackage ();

        void
        PrimaryPackage (const PrimaryPackage_type& x);

        void
        PrimaryPackage (const PrimaryPackage_optional& x);

        void
        PrimaryPackage (::std::auto_ptr< PrimaryPackage_type > p);

        // IdentificationList
        // 
        typedef ::properties::S335M::IdentificationList IdentificationList_type;
        typedef ::xsd::cxx::tree::traits< IdentificationList_type, char > IdentificationList_traits;

        const IdentificationList_type&
        IdentificationList () const;

        IdentificationList_type&
        IdentificationList ();

        void
        IdentificationList (const IdentificationList_type& x);

        void
        IdentificationList (::std::auto_ptr< IdentificationList_type > p);

        // ContentStorageObject
        // 
        typedef ::properties::S335M::ContentStorageObject ContentStorageObject_type;
        typedef ::xsd::cxx::tree::traits< ContentStorageObject_type, char > ContentStorageObject_traits;

        const ContentStorageObject_type&
        ContentStorageObject () const;

        ContentStorageObject_type&
        ContentStorageObject ();

        void
        ContentStorageObject (const ContentStorageObject_type& x);

        void
        ContentStorageObject (::std::auto_ptr< ContentStorageObject_type > p);

        // OperationalPattern
        // 
        typedef ::st434::s377m::types::UL OperationalPattern_type;
        typedef ::xsd::cxx::tree::traits< OperationalPattern_type, char > OperationalPattern_traits;

        const OperationalPattern_type&
        OperationalPattern () const;

        OperationalPattern_type&
        OperationalPattern ();

        void
        OperationalPattern (const OperationalPattern_type& x);

        void
        OperationalPattern (::std::auto_ptr< OperationalPattern_type > p);

        // EssenceContainers
        // 
        typedef ::properties::S335M::EssenceContainers EssenceContainers_type;
        typedef ::xsd::cxx::tree::traits< EssenceContainers_type, char > EssenceContainers_traits;

        const EssenceContainers_type&
        EssenceContainers () const;

        EssenceContainers_type&
        EssenceContainers ();

        void
        EssenceContainers (const EssenceContainers_type& x);

        void
        EssenceContainers (::std::auto_ptr< EssenceContainers_type > p);

        // DescriptiveSchemes
        // 
        typedef ::properties::S335M::DescriptiveSchemes DescriptiveSchemes_type;
        typedef ::xsd::cxx::tree::traits< DescriptiveSchemes_type, char > DescriptiveSchemes_traits;

        const DescriptiveSchemes_type&
        DescriptiveSchemes () const;

        DescriptiveSchemes_type&
        DescriptiveSchemes ();

        void
        DescriptiveSchemes (const DescriptiveSchemes_type& x);

        void
        DescriptiveSchemes (::std::auto_ptr< DescriptiveSchemes_type > p);

        // Constructors.
        //
        PrefaceType (const InstanceID_type&,
                     const FileLastModified_type&,
                     const FormatVersion_type&,
                     const IdentificationList_type&,
                     const ContentStorageObject_type&,
                     const OperationalPattern_type&,
                     const EssenceContainers_type&,
                     const DescriptiveSchemes_type&);

        PrefaceType (const InstanceID_type&,
                     ::std::auto_ptr< FileLastModified_type >&,
                     const FormatVersion_type&,
                     ::std::auto_ptr< IdentificationList_type >&,
                     ::std::auto_ptr< ContentStorageObject_type >&,
                     const OperationalPattern_type&,
                     ::std::auto_ptr< EssenceContainers_type >&,
                     ::std::auto_ptr< DescriptiveSchemes_type >&);

        PrefaceType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

        PrefaceType (const PrefaceType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

        virtual PrefaceType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~PrefaceType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< FileLastModified_type > FileLastModified_;
        ::xsd::cxx::tree::one< FormatVersion_type > FormatVersion_;
        ObjectModelVersion_optional ObjectModelVersion_;
        PrimaryPackage_optional PrimaryPackage_;
        ::xsd::cxx::tree::one< IdentificationList_type > IdentificationList_;
        ::xsd::cxx::tree::one< ContentStorageObject_type > ContentStorageObject_;
        ::xsd::cxx::tree::one< OperationalPattern_type > OperationalPattern_;
        ::xsd::cxx::tree::one< EssenceContainers_type > EssenceContainers_;
        ::xsd::cxx::tree::one< DescriptiveSchemes_type > DescriptiveSchemes_;
      };

      class IdentificationType: public ::st434::s377m::groups::AbstractSetType
      {
        public:
        // GenerationID
        // 
        typedef ::st434::s377m::types::UUID GenerationID_type;
        typedef ::xsd::cxx::tree::traits< GenerationID_type, char > GenerationID_traits;

        const GenerationID_type&
        GenerationID () const;

        GenerationID_type&
        GenerationID ();

        void
        GenerationID (const GenerationID_type& x);

        void
        GenerationID (::std::auto_ptr< GenerationID_type > p);

        // ApplicationSupplierName
        // 
        typedef ::st434::s377m::types::UTF16CharString ApplicationSupplierName_type;
        typedef ::xsd::cxx::tree::traits< ApplicationSupplierName_type, char > ApplicationSupplierName_traits;

        const ApplicationSupplierName_type&
        ApplicationSupplierName () const;

        ApplicationSupplierName_type&
        ApplicationSupplierName ();

        void
        ApplicationSupplierName (const ApplicationSupplierName_type& x);

        void
        ApplicationSupplierName (::std::auto_ptr< ApplicationSupplierName_type > p);

        // ApplicationName
        // 
        typedef ::st434::s377m::types::UTF16CharString ApplicationName_type;
        typedef ::xsd::cxx::tree::traits< ApplicationName_type, char > ApplicationName_traits;

        const ApplicationName_type&
        ApplicationName () const;

        ApplicationName_type&
        ApplicationName ();

        void
        ApplicationName (const ApplicationName_type& x);

        void
        ApplicationName (::std::auto_ptr< ApplicationName_type > p);

        // ApplicationVersion
        // 
        typedef ::st434::s377m::types::ProductVersionType ApplicationVersion_type;
        typedef ::xsd::cxx::tree::optional< ApplicationVersion_type > ApplicationVersion_optional;
        typedef ::xsd::cxx::tree::traits< ApplicationVersion_type, char > ApplicationVersion_traits;

        const ApplicationVersion_optional&
        ApplicationVersion () const;

        ApplicationVersion_optional&
        ApplicationVersion ();

        void
        ApplicationVersion (const ApplicationVersion_type& x);

        void
        ApplicationVersion (const ApplicationVersion_optional& x);

        void
        ApplicationVersion (::std::auto_ptr< ApplicationVersion_type > p);

        // ApplicationVersionString
        // 
        typedef ::st434::s377m::types::UTF16CharString ApplicationVersionString_type;
        typedef ::xsd::cxx::tree::traits< ApplicationVersionString_type, char > ApplicationVersionString_traits;

        const ApplicationVersionString_type&
        ApplicationVersionString () const;

        ApplicationVersionString_type&
        ApplicationVersionString ();

        void
        ApplicationVersionString (const ApplicationVersionString_type& x);

        void
        ApplicationVersionString (::std::auto_ptr< ApplicationVersionString_type > p);

        // ApplicationProductID
        // 
        typedef ::st434::s377m::types::UUID ApplicationProductID_type;
        typedef ::xsd::cxx::tree::traits< ApplicationProductID_type, char > ApplicationProductID_traits;

        const ApplicationProductID_type&
        ApplicationProductID () const;

        ApplicationProductID_type&
        ApplicationProductID ();

        void
        ApplicationProductID (const ApplicationProductID_type& x);

        void
        ApplicationProductID (::std::auto_ptr< ApplicationProductID_type > p);

        // FileModificationDate
        // 
        typedef ::st434::s377m::types::TimestampType FileModificationDate_type;
        typedef ::xsd::cxx::tree::traits< FileModificationDate_type, char > FileModificationDate_traits;

        const FileModificationDate_type&
        FileModificationDate () const;

        FileModificationDate_type&
        FileModificationDate ();

        void
        FileModificationDate (const FileModificationDate_type& x);

        void
        FileModificationDate (::std::auto_ptr< FileModificationDate_type > p);

        // ToolkitVersion
        // 
        typedef ::st434::s377m::types::ProductVersionType ToolkitVersion_type;
        typedef ::xsd::cxx::tree::optional< ToolkitVersion_type > ToolkitVersion_optional;
        typedef ::xsd::cxx::tree::traits< ToolkitVersion_type, char > ToolkitVersion_traits;

        const ToolkitVersion_optional&
        ToolkitVersion () const;

        ToolkitVersion_optional&
        ToolkitVersion ();

        void
        ToolkitVersion (const ToolkitVersion_type& x);

        void
        ToolkitVersion (const ToolkitVersion_optional& x);

        void
        ToolkitVersion (::std::auto_ptr< ToolkitVersion_type > p);

        // ApplicationPlatform
        // 
        typedef ::st434::s377m::types::UTF16CharString ApplicationPlatform_type;
        typedef ::xsd::cxx::tree::optional< ApplicationPlatform_type > ApplicationPlatform_optional;
        typedef ::xsd::cxx::tree::traits< ApplicationPlatform_type, char > ApplicationPlatform_traits;

        const ApplicationPlatform_optional&
        ApplicationPlatform () const;

        ApplicationPlatform_optional&
        ApplicationPlatform ();

        void
        ApplicationPlatform (const ApplicationPlatform_type& x);

        void
        ApplicationPlatform (const ApplicationPlatform_optional& x);

        void
        ApplicationPlatform (::std::auto_ptr< ApplicationPlatform_type > p);

        // Constructors.
        //
        IdentificationType (const InstanceID_type&,
                            const GenerationID_type&,
                            const ApplicationSupplierName_type&,
                            const ApplicationName_type&,
                            const ApplicationVersionString_type&,
                            const ApplicationProductID_type&,
                            const FileModificationDate_type&);

        IdentificationType (const InstanceID_type&,
                            const GenerationID_type&,
                            const ApplicationSupplierName_type&,
                            const ApplicationName_type&,
                            const ApplicationVersionString_type&,
                            const ApplicationProductID_type&,
                            ::std::auto_ptr< FileModificationDate_type >&);

        IdentificationType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        IdentificationType (const IdentificationType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        virtual IdentificationType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~IdentificationType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< GenerationID_type > GenerationID_;
        ::xsd::cxx::tree::one< ApplicationSupplierName_type > ApplicationSupplierName_;
        ::xsd::cxx::tree::one< ApplicationName_type > ApplicationName_;
        ApplicationVersion_optional ApplicationVersion_;
        ::xsd::cxx::tree::one< ApplicationVersionString_type > ApplicationVersionString_;
        ::xsd::cxx::tree::one< ApplicationProductID_type > ApplicationProductID_;
        ::xsd::cxx::tree::one< FileModificationDate_type > FileModificationDate_;
        ToolkitVersion_optional ToolkitVersion_;
        ApplicationPlatform_optional ApplicationPlatform_;
      };

      class ContentStorageType: public ::st434::s377m::groups::InterchangeObjectType
      {
        public:
        // Packages
        // 
        typedef ::properties::S335M::Packages Packages_type;
        typedef ::xsd::cxx::tree::traits< Packages_type, char > Packages_traits;

        const Packages_type&
        Packages () const;

        Packages_type&
        Packages ();

        void
        Packages (const Packages_type& x);

        void
        Packages (::std::auto_ptr< Packages_type > p);

        // EssenceDataObjects
        // 
        typedef ::properties::S335M::EssenceDataObjects EssenceDataObjects_type;
        typedef ::xsd::cxx::tree::optional< EssenceDataObjects_type > EssenceDataObjects_optional;
        typedef ::xsd::cxx::tree::traits< EssenceDataObjects_type, char > EssenceDataObjects_traits;

        const EssenceDataObjects_optional&
        EssenceDataObjects () const;

        EssenceDataObjects_optional&
        EssenceDataObjects ();

        void
        EssenceDataObjects (const EssenceDataObjects_type& x);

        void
        EssenceDataObjects (const EssenceDataObjects_optional& x);

        void
        EssenceDataObjects (::std::auto_ptr< EssenceDataObjects_type > p);

        // Constructors.
        //
        ContentStorageType (const InstanceID_type&,
                            const Packages_type&);

        ContentStorageType (const InstanceID_type&,
                            ::std::auto_ptr< Packages_type >&);

        ContentStorageType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        ContentStorageType (const ContentStorageType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        virtual ContentStorageType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~ContentStorageType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< Packages_type > Packages_;
        EssenceDataObjects_optional EssenceDataObjects_;
      };

      class EssenceDataType: public ::st434::s377m::groups::InterchangeObjectType
      {
        public:
        // LinkedPackageID
        // 
        typedef ::st434::s377m::types::UMID32 LinkedPackageID_type;
        typedef ::xsd::cxx::tree::traits< LinkedPackageID_type, char > LinkedPackageID_traits;

        const LinkedPackageID_type&
        LinkedPackageID () const;

        LinkedPackageID_type&
        LinkedPackageID ();

        void
        LinkedPackageID (const LinkedPackageID_type& x);

        void
        LinkedPackageID (::std::auto_ptr< LinkedPackageID_type > p);

        // IndexStreamID
        // 
        typedef ::st434::s377m::types::UInt32 IndexStreamID_type;
        typedef ::xsd::cxx::tree::optional< IndexStreamID_type > IndexStreamID_optional;
        typedef ::xsd::cxx::tree::traits< IndexStreamID_type, char > IndexStreamID_traits;

        const IndexStreamID_optional&
        IndexStreamID () const;

        IndexStreamID_optional&
        IndexStreamID ();

        void
        IndexStreamID (const IndexStreamID_type& x);

        void
        IndexStreamID (const IndexStreamID_optional& x);

        void
        IndexStreamID (::std::auto_ptr< IndexStreamID_type > p);

        static IndexStreamID_type
        IndexStreamID_default_value ();

        // EssenceStreamID
        // 
        typedef ::st434::s377m::types::UInt32 EssenceStreamID_type;
        typedef ::xsd::cxx::tree::traits< EssenceStreamID_type, char > EssenceStreamID_traits;

        const EssenceStreamID_type&
        EssenceStreamID () const;

        EssenceStreamID_type&
        EssenceStreamID ();

        void
        EssenceStreamID (const EssenceStreamID_type& x);

        void
        EssenceStreamID (::std::auto_ptr< EssenceStreamID_type > p);

        static EssenceStreamID_type
        EssenceStreamID_default_value ();

        // Constructors.
        //
        EssenceDataType (const InstanceID_type&,
                         const LinkedPackageID_type&,
                         const EssenceStreamID_type&);

        EssenceDataType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        EssenceDataType (const EssenceDataType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        virtual EssenceDataType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~EssenceDataType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< LinkedPackageID_type > LinkedPackageID_;
        IndexStreamID_optional IndexStreamID_;
        ::xsd::cxx::tree::one< EssenceStreamID_type > EssenceStreamID_;
      };

      class NetworkLocatorType: public ::st434::s377m::groups::LocatorType
      {
        public:
        // URL
        // 
        typedef ::st434::s377m::types::UTF16CharString URL_type;
        typedef ::xsd::cxx::tree::traits< URL_type, char > URL_traits;

        const URL_type&
        URL () const;

        URL_type&
        URL ();

        void
        URL (const URL_type& x);

        void
        URL (::std::auto_ptr< URL_type > p);

        // Constructors.
        //
        NetworkLocatorType (const InstanceID_type&,
                            const URL_type&);

        NetworkLocatorType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        NetworkLocatorType (const NetworkLocatorType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        virtual NetworkLocatorType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~NetworkLocatorType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< URL_type > URL_;
      };

      class TextLocatorType: public ::st434::s377m::groups::LocatorType
      {
        public:
        // LocationName
        // 
        typedef ::st434::s377m::types::UTF16CharString LocationName_type;
        typedef ::xsd::cxx::tree::traits< LocationName_type, char > LocationName_traits;

        const LocationName_type&
        LocationName () const;

        LocationName_type&
        LocationName ();

        void
        LocationName (const LocationName_type& x);

        void
        LocationName (::std::auto_ptr< LocationName_type > p);

        // Constructors.
        //
        TextLocatorType (const InstanceID_type&,
                         const LocationName_type&);

        TextLocatorType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        TextLocatorType (const TextLocatorType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        virtual TextLocatorType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~TextLocatorType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< LocationName_type > LocationName_;
      };

      class TimelineTrackType: public ::st434::s377m::groups::TrackType
      {
        public:
        // EditRate
        // 
        typedef ::st434::s377m::types::Rational EditRate_type;
        typedef ::xsd::cxx::tree::traits< EditRate_type, char > EditRate_traits;

        const EditRate_type&
        EditRate () const;

        EditRate_type&
        EditRate ();

        void
        EditRate (const EditRate_type& x);

        void
        EditRate (::std::auto_ptr< EditRate_type > p);

        // Origin
        // 
        typedef ::st434::s377m::types::Position Origin_type;
        typedef ::xsd::cxx::tree::traits< Origin_type, char > Origin_traits;

        const Origin_type&
        Origin () const;

        Origin_type&
        Origin ();

        void
        Origin (const Origin_type& x);

        void
        Origin (::std::auto_ptr< Origin_type > p);

        // Constructors.
        //
        TimelineTrackType (const InstanceID_type&,
                           const EssenceTrackNumber_type&,
                           const TrackSegment_type&,
                           const EditRate_type&,
                           const Origin_type&);

        TimelineTrackType (const InstanceID_type&,
                           const EssenceTrackNumber_type&,
                           ::std::auto_ptr< TrackSegment_type >&,
                           ::std::auto_ptr< EditRate_type >&,
                           const Origin_type&);

        TimelineTrackType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        TimelineTrackType (const TimelineTrackType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        virtual TimelineTrackType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~TimelineTrackType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< EditRate_type > EditRate_;
        ::xsd::cxx::tree::one< Origin_type > Origin_;
      };

      class EventTrackType: public ::st434::s377m::groups::TrackType
      {
        public:
        // EventTrackEditRate
        // 
        typedef ::st434::s377m::types::Rational EventTrackEditRate_type;
        typedef ::xsd::cxx::tree::traits< EventTrackEditRate_type, char > EventTrackEditRate_traits;

        const EventTrackEditRate_type&
        EventTrackEditRate () const;

        EventTrackEditRate_type&
        EventTrackEditRate ();

        void
        EventTrackEditRate (const EventTrackEditRate_type& x);

        void
        EventTrackEditRate (::std::auto_ptr< EventTrackEditRate_type > p);

        // EventTrackOrigin
        // 
        typedef ::st434::s377m::types::Position EventTrackOrigin_type;
        typedef ::xsd::cxx::tree::optional< EventTrackOrigin_type > EventTrackOrigin_optional;
        typedef ::xsd::cxx::tree::traits< EventTrackOrigin_type, char > EventTrackOrigin_traits;

        const EventTrackOrigin_optional&
        EventTrackOrigin () const;

        EventTrackOrigin_optional&
        EventTrackOrigin ();

        void
        EventTrackOrigin (const EventTrackOrigin_type& x);

        void
        EventTrackOrigin (const EventTrackOrigin_optional& x);

        void
        EventTrackOrigin (::std::auto_ptr< EventTrackOrigin_type > p);

        // Constructors.
        //
        EventTrackType (const InstanceID_type&,
                        const EssenceTrackNumber_type&,
                        const TrackSegment_type&,
                        const EventTrackEditRate_type&);

        EventTrackType (const InstanceID_type&,
                        const EssenceTrackNumber_type&,
                        ::std::auto_ptr< TrackSegment_type >&,
                        ::std::auto_ptr< EventTrackEditRate_type >&);

        EventTrackType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        EventTrackType (const EventTrackType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        virtual EventTrackType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~EventTrackType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< EventTrackEditRate_type > EventTrackEditRate_;
        EventTrackOrigin_optional EventTrackOrigin_;
      };

      class StaticTrackType: public ::st434::s377m::groups::TrackType
      {
        public:
        // Constructors.
        //
        StaticTrackType (const InstanceID_type&,
                         const EssenceTrackNumber_type&,
                         const TrackSegment_type&);

        StaticTrackType (const InstanceID_type&,
                         const EssenceTrackNumber_type&,
                         ::std::auto_ptr< TrackSegment_type >&);

        StaticTrackType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        StaticTrackType (const StaticTrackType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        virtual StaticTrackType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~StaticTrackType ();
      };

      class SequenceType: public ::st434::s377m::groups::SegmentType
      {
        public:
        // ComponentObjects
        // 
        typedef ::properties::S335M::ComponentObjects ComponentObjects_type;
        typedef ::xsd::cxx::tree::traits< ComponentObjects_type, char > ComponentObjects_traits;

        const ComponentObjects_type&
        ComponentObjects () const;

        ComponentObjects_type&
        ComponentObjects ();

        void
        ComponentObjects (const ComponentObjects_type& x);

        void
        ComponentObjects (::std::auto_ptr< ComponentObjects_type > p);

        // Constructors.
        //
        SequenceType (const InstanceID_type&,
                      const ComponentDataDefinition_type&,
                      const ComponentObjects_type&);

        SequenceType (const InstanceID_type&,
                      const ComponentDataDefinition_type&,
                      ::std::auto_ptr< ComponentObjects_type >&);

        SequenceType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        SequenceType (const SequenceType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        virtual SequenceType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~SequenceType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< ComponentObjects_type > ComponentObjects_;
      };

      class TimecodeType: public ::st434::s377m::groups::SegmentType
      {
        public:
        // StartTimecode
        // 
        typedef ::st434::s377m::types::Position StartTimecode_type;
        typedef ::xsd::cxx::tree::traits< StartTimecode_type, char > StartTimecode_traits;

        const StartTimecode_type&
        StartTimecode () const;

        StartTimecode_type&
        StartTimecode ();

        void
        StartTimecode (const StartTimecode_type& x);

        void
        StartTimecode (::std::auto_ptr< StartTimecode_type > p);

        // FramesPerSecond
        // 
        typedef ::st434::s377m::types::UInt16 FramesPerSecond_type;
        typedef ::xsd::cxx::tree::traits< FramesPerSecond_type, char > FramesPerSecond_traits;

        const FramesPerSecond_type&
        FramesPerSecond () const;

        FramesPerSecond_type&
        FramesPerSecond ();

        void
        FramesPerSecond (const FramesPerSecond_type& x);

        void
        FramesPerSecond (::std::auto_ptr< FramesPerSecond_type > p);

        // DropFrame
        // 
        typedef ::st434::s377m::types::Boolean DropFrame_type;
        typedef ::xsd::cxx::tree::traits< DropFrame_type, char > DropFrame_traits;

        const DropFrame_type&
        DropFrame () const;

        DropFrame_type&
        DropFrame ();

        void
        DropFrame (const DropFrame_type& x);

        void
        DropFrame (::std::auto_ptr< DropFrame_type > p);

        // Constructors.
        //
        TimecodeType (const InstanceID_type&,
                      const ComponentDataDefinition_type&,
                      const StartTimecode_type&,
                      const FramesPerSecond_type&,
                      const DropFrame_type&);

        TimecodeType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        TimecodeType (const TimecodeType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        virtual TimecodeType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~TimecodeType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< StartTimecode_type > StartTimecode_;
        ::xsd::cxx::tree::one< FramesPerSecond_type > FramesPerSecond_;
        ::xsd::cxx::tree::one< DropFrame_type > DropFrame_;
      };

      class DescriptiveMarkerType: public ::st434::s377m::groups::CommentMarkerType
      {
        public:
        // DescribedTrackIDs
        // 
        typedef ::properties::S335M::DescribedTrackIDs DescribedTrackIDs_type;
        typedef ::xsd::cxx::tree::optional< DescribedTrackIDs_type > DescribedTrackIDs_optional;
        typedef ::xsd::cxx::tree::traits< DescribedTrackIDs_type, char > DescribedTrackIDs_traits;

        const DescribedTrackIDs_optional&
        DescribedTrackIDs () const;

        DescribedTrackIDs_optional&
        DescribedTrackIDs ();

        void
        DescribedTrackIDs (const DescribedTrackIDs_type& x);

        void
        DescribedTrackIDs (const DescribedTrackIDs_optional& x);

        void
        DescribedTrackIDs (::std::auto_ptr< DescribedTrackIDs_type > p);

        // DescriptiveFrameworkObject
        // 
        typedef ::properties::S335M::DescriptiveFrameworkObject DescriptiveFrameworkObject_type;
        typedef ::xsd::cxx::tree::optional< DescriptiveFrameworkObject_type > DescriptiveFrameworkObject_optional;
        typedef ::xsd::cxx::tree::traits< DescriptiveFrameworkObject_type, char > DescriptiveFrameworkObject_traits;

        const DescriptiveFrameworkObject_optional&
        DescriptiveFrameworkObject () const;

        DescriptiveFrameworkObject_optional&
        DescriptiveFrameworkObject ();

        void
        DescriptiveFrameworkObject (const DescriptiveFrameworkObject_type& x);

        void
        DescriptiveFrameworkObject (const DescriptiveFrameworkObject_optional& x);

        void
        DescriptiveFrameworkObject (::std::auto_ptr< DescriptiveFrameworkObject_type > p);

        // Constructors.
        //
        DescriptiveMarkerType (const InstanceID_type&,
                               const ComponentDataDefinition_type&);

        DescriptiveMarkerType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

        DescriptiveMarkerType (const DescriptiveMarkerType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

        virtual DescriptiveMarkerType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~DescriptiveMarkerType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        DescribedTrackIDs_optional DescribedTrackIDs_;
        DescriptiveFrameworkObject_optional DescriptiveFrameworkObject_;
      };

      class SourceClipType: public ::st434::s377m::groups::SourceReferenceType
      {
        public:
        // StartPosition
        // 
        typedef ::st434::s377m::types::Position StartPosition_type;
        typedef ::xsd::cxx::tree::traits< StartPosition_type, char > StartPosition_traits;

        const StartPosition_type&
        StartPosition () const;

        StartPosition_type&
        StartPosition ();

        void
        StartPosition (const StartPosition_type& x);

        void
        StartPosition (::std::auto_ptr< StartPosition_type > p);

        // Constructors.
        //
        SourceClipType (const InstanceID_type&,
                        const ComponentDataDefinition_type&,
                        const SourcePackageID_type&,
                        const SourceTrackID_type&,
                        const StartPosition_type&);

        SourceClipType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        SourceClipType (const SourceClipType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        virtual SourceClipType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~SourceClipType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< StartPosition_type > StartPosition_;
      };

      class DescriptiveClipType: public ::st434::s377m::groups::SegmentType
      {
        public:
        // SourcePackageID
        // 
        typedef ::st434::s377m::types::UMID32 SourcePackageID_type;
        typedef ::xsd::cxx::tree::traits< SourcePackageID_type, char > SourcePackageID_traits;

        const SourcePackageID_type&
        SourcePackageID () const;

        SourcePackageID_type&
        SourcePackageID ();

        void
        SourcePackageID (const SourcePackageID_type& x);

        void
        SourcePackageID (::std::auto_ptr< SourcePackageID_type > p);

        // SourceTrackID
        // 
        typedef ::st434::s377m::types::UInt32 SourceTrackID_type;
        typedef ::xsd::cxx::tree::optional< SourceTrackID_type > SourceTrackID_optional;
        typedef ::xsd::cxx::tree::traits< SourceTrackID_type, char > SourceTrackID_traits;

        const SourceTrackID_optional&
        SourceTrackID () const;

        SourceTrackID_optional&
        SourceTrackID ();

        void
        SourceTrackID (const SourceTrackID_type& x);

        void
        SourceTrackID (const SourceTrackID_optional& x);

        void
        SourceTrackID (::std::auto_ptr< SourceTrackID_type > p);

        // StartPosition
        // 
        typedef ::st434::s377m::types::Position StartPosition_type;
        typedef ::xsd::cxx::tree::traits< StartPosition_type, char > StartPosition_traits;

        const StartPosition_type&
        StartPosition () const;

        StartPosition_type&
        StartPosition ();

        void
        StartPosition (const StartPosition_type& x);

        void
        StartPosition (::std::auto_ptr< StartPosition_type > p);

        // DescriptiveClipDescribedTrackIDs
        // 
        typedef ::properties::S335M::DescriptiveClipDescribedTrackIDs DescriptiveClipDescribedTrackIDs_type;
        typedef ::xsd::cxx::tree::optional< DescriptiveClipDescribedTrackIDs_type > DescriptiveClipDescribedTrackIDs_optional;
        typedef ::xsd::cxx::tree::traits< DescriptiveClipDescribedTrackIDs_type, char > DescriptiveClipDescribedTrackIDs_traits;

        const DescriptiveClipDescribedTrackIDs_optional&
        DescriptiveClipDescribedTrackIDs () const;

        DescriptiveClipDescribedTrackIDs_optional&
        DescriptiveClipDescribedTrackIDs ();

        void
        DescriptiveClipDescribedTrackIDs (const DescriptiveClipDescribedTrackIDs_type& x);

        void
        DescriptiveClipDescribedTrackIDs (const DescriptiveClipDescribedTrackIDs_optional& x);

        void
        DescriptiveClipDescribedTrackIDs (::std::auto_ptr< DescriptiveClipDescribedTrackIDs_type > p);

        // Constructors.
        //
        DescriptiveClipType (const InstanceID_type&,
                             const ComponentDataDefinition_type&,
                             const SourcePackageID_type&,
                             const StartPosition_type&);

        DescriptiveClipType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

        DescriptiveClipType (const DescriptiveClipType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

        virtual DescriptiveClipType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~DescriptiveClipType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< SourcePackageID_type > SourcePackageID_;
        SourceTrackID_optional SourceTrackID_;
        ::xsd::cxx::tree::one< StartPosition_type > StartPosition_;
        DescriptiveClipDescribedTrackIDs_optional DescriptiveClipDescribedTrackIDs_;
      };

      class MaterialPackageType: public ::st434::s377m::groups::PackageType
      {
        public:
        // Constructors.
        //
        MaterialPackageType (const InstanceID_type&,
                             const PackageID_type&,
                             const CreationTime_type&,
                             const PackageLastModified_type&,
                             const PackageTracks_type&);

        MaterialPackageType (const InstanceID_type&,
                             const PackageID_type&,
                             ::std::auto_ptr< CreationTime_type >&,
                             ::std::auto_ptr< PackageLastModified_type >&,
                             ::std::auto_ptr< PackageTracks_type >&);

        MaterialPackageType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

        MaterialPackageType (const MaterialPackageType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

        virtual MaterialPackageType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~MaterialPackageType ();
      };

      class SourcePackageType: public ::st434::s377m::groups::PackageType
      {
        public:
        // EssenceDescription
        // 
        typedef ::properties::S335M::EssenceDescription EssenceDescription_type;
        typedef ::xsd::cxx::tree::optional< EssenceDescription_type > EssenceDescription_optional;
        typedef ::xsd::cxx::tree::traits< EssenceDescription_type, char > EssenceDescription_traits;

        const EssenceDescription_optional&
        EssenceDescription () const;

        EssenceDescription_optional&
        EssenceDescription ();

        void
        EssenceDescription (const EssenceDescription_type& x);

        void
        EssenceDescription (const EssenceDescription_optional& x);

        void
        EssenceDescription (::std::auto_ptr< EssenceDescription_type > p);

        // Constructors.
        //
        SourcePackageType (const InstanceID_type&,
                           const PackageID_type&,
                           const CreationTime_type&,
                           const PackageLastModified_type&,
                           const PackageTracks_type&);

        SourcePackageType (const InstanceID_type&,
                           const PackageID_type&,
                           ::std::auto_ptr< CreationTime_type >&,
                           ::std::auto_ptr< PackageLastModified_type >&,
                           ::std::auto_ptr< PackageTracks_type >&);

        SourcePackageType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        SourcePackageType (const SourcePackageType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        virtual SourcePackageType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~SourcePackageType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        EssenceDescription_optional EssenceDescription_;
      };

      class FileDescriptorType: public ::st434::s377m::groups::GenericDescriptorType
      {
        public:
        // LinkedTrackID
        // 
        typedef ::st434::s377m::types::UInt32 LinkedTrackID_type;
        typedef ::xsd::cxx::tree::optional< LinkedTrackID_type > LinkedTrackID_optional;
        typedef ::xsd::cxx::tree::traits< LinkedTrackID_type, char > LinkedTrackID_traits;

        const LinkedTrackID_optional&
        LinkedTrackID () const;

        LinkedTrackID_optional&
        LinkedTrackID ();

        void
        LinkedTrackID (const LinkedTrackID_type& x);

        void
        LinkedTrackID (const LinkedTrackID_optional& x);

        void
        LinkedTrackID (::std::auto_ptr< LinkedTrackID_type > p);

        // SampleRate
        // 
        typedef ::st434::s377m::types::Rational SampleRate_type;
        typedef ::xsd::cxx::tree::traits< SampleRate_type, char > SampleRate_traits;

        const SampleRate_type&
        SampleRate () const;

        SampleRate_type&
        SampleRate ();

        void
        SampleRate (const SampleRate_type& x);

        void
        SampleRate (::std::auto_ptr< SampleRate_type > p);

        // EssenceLength
        // 
        typedef ::st434::s377m::types::Length EssenceLength_type;
        typedef ::xsd::cxx::tree::optional< EssenceLength_type > EssenceLength_optional;
        typedef ::xsd::cxx::tree::traits< EssenceLength_type, char > EssenceLength_traits;

        const EssenceLength_optional&
        EssenceLength () const;

        EssenceLength_optional&
        EssenceLength ();

        void
        EssenceLength (const EssenceLength_type& x);

        void
        EssenceLength (const EssenceLength_optional& x);

        void
        EssenceLength (::std::auto_ptr< EssenceLength_type > p);

        // ContainerFormat
        // 
        typedef ::st434::s377m::types::UL ContainerFormat_type;
        typedef ::xsd::cxx::tree::traits< ContainerFormat_type, char > ContainerFormat_traits;

        const ContainerFormat_type&
        ContainerFormat () const;

        ContainerFormat_type&
        ContainerFormat ();

        void
        ContainerFormat (const ContainerFormat_type& x);

        void
        ContainerFormat (::std::auto_ptr< ContainerFormat_type > p);

        // Codec
        // 
        typedef ::st434::s377m::types::UL Codec_type;
        typedef ::xsd::cxx::tree::optional< Codec_type > Codec_optional;
        typedef ::xsd::cxx::tree::traits< Codec_type, char > Codec_traits;

        const Codec_optional&
        Codec () const;

        Codec_optional&
        Codec ();

        void
        Codec (const Codec_type& x);

        void
        Codec (const Codec_optional& x);

        void
        Codec (::std::auto_ptr< Codec_type > p);

        // Constructors.
        //
        FileDescriptorType (const InstanceID_type&,
                            const SampleRate_type&,
                            const ContainerFormat_type&);

        FileDescriptorType (const InstanceID_type&,
                            ::std::auto_ptr< SampleRate_type >&,
                            const ContainerFormat_type&);

        FileDescriptorType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        FileDescriptorType (const FileDescriptorType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        virtual FileDescriptorType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~FileDescriptorType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        LinkedTrackID_optional LinkedTrackID_;
        ::xsd::cxx::tree::one< SampleRate_type > SampleRate_;
        EssenceLength_optional EssenceLength_;
        ::xsd::cxx::tree::one< ContainerFormat_type > ContainerFormat_;
        Codec_optional Codec_;
      };

      class PictureDescriptorType: public ::st434::s377m::groups::FileDescriptorType
      {
        public:
        // SignalStandard
        // 
        typedef ::st434::s377m::types::SignalStandard SignalStandard_type;
        typedef ::xsd::cxx::tree::optional< SignalStandard_type > SignalStandard_optional;
        typedef ::xsd::cxx::tree::traits< SignalStandard_type, char > SignalStandard_traits;

        const SignalStandard_optional&
        SignalStandard () const;

        SignalStandard_optional&
        SignalStandard ();

        void
        SignalStandard (const SignalStandard_type& x);

        void
        SignalStandard (const SignalStandard_optional& x);

        void
        SignalStandard (::std::auto_ptr< SignalStandard_type > p);

        static SignalStandard_type
        SignalStandard_default_value ();

        // FrameLayout
        // 
        typedef ::st434::s377m::types::UInt8 FrameLayout_type;
        typedef ::xsd::cxx::tree::optional< FrameLayout_type > FrameLayout_optional;
        typedef ::xsd::cxx::tree::traits< FrameLayout_type, char > FrameLayout_traits;

        const FrameLayout_optional&
        FrameLayout () const;

        FrameLayout_optional&
        FrameLayout ();

        void
        FrameLayout (const FrameLayout_type& x);

        void
        FrameLayout (const FrameLayout_optional& x);

        void
        FrameLayout (::std::auto_ptr< FrameLayout_type > p);

        // StoredWidth
        // 
        typedef ::st434::s377m::types::UInt32 StoredWidth_type;
        typedef ::xsd::cxx::tree::optional< StoredWidth_type > StoredWidth_optional;
        typedef ::xsd::cxx::tree::traits< StoredWidth_type, char > StoredWidth_traits;

        const StoredWidth_optional&
        StoredWidth () const;

        StoredWidth_optional&
        StoredWidth ();

        void
        StoredWidth (const StoredWidth_type& x);

        void
        StoredWidth (const StoredWidth_optional& x);

        void
        StoredWidth (::std::auto_ptr< StoredWidth_type > p);

        // StoredHeight
        // 
        typedef ::st434::s377m::types::UInt32 StoredHeight_type;
        typedef ::xsd::cxx::tree::optional< StoredHeight_type > StoredHeight_optional;
        typedef ::xsd::cxx::tree::traits< StoredHeight_type, char > StoredHeight_traits;

        const StoredHeight_optional&
        StoredHeight () const;

        StoredHeight_optional&
        StoredHeight ();

        void
        StoredHeight (const StoredHeight_type& x);

        void
        StoredHeight (const StoredHeight_optional& x);

        void
        StoredHeight (::std::auto_ptr< StoredHeight_type > p);

        // StoredF2Offset
        // 
        typedef ::st434::s377m::types::Int32 StoredF2Offset_type;
        typedef ::xsd::cxx::tree::optional< StoredF2Offset_type > StoredF2Offset_optional;
        typedef ::xsd::cxx::tree::traits< StoredF2Offset_type, char > StoredF2Offset_traits;

        const StoredF2Offset_optional&
        StoredF2Offset () const;

        StoredF2Offset_optional&
        StoredF2Offset ();

        void
        StoredF2Offset (const StoredF2Offset_type& x);

        void
        StoredF2Offset (const StoredF2Offset_optional& x);

        void
        StoredF2Offset (::std::auto_ptr< StoredF2Offset_type > p);

        static StoredF2Offset_type
        StoredF2Offset_default_value ();

        // SampledWidth
        // 
        typedef ::st434::s377m::types::UInt32 SampledWidth_type;
        typedef ::xsd::cxx::tree::optional< SampledWidth_type > SampledWidth_optional;
        typedef ::xsd::cxx::tree::traits< SampledWidth_type, char > SampledWidth_traits;

        const SampledWidth_optional&
        SampledWidth () const;

        SampledWidth_optional&
        SampledWidth ();

        void
        SampledWidth (const SampledWidth_type& x);

        void
        SampledWidth (const SampledWidth_optional& x);

        void
        SampledWidth (::std::auto_ptr< SampledWidth_type > p);

        // SampledHeight
        // 
        typedef ::st434::s377m::types::UInt32 SampledHeight_type;
        typedef ::xsd::cxx::tree::optional< SampledHeight_type > SampledHeight_optional;
        typedef ::xsd::cxx::tree::traits< SampledHeight_type, char > SampledHeight_traits;

        const SampledHeight_optional&
        SampledHeight () const;

        SampledHeight_optional&
        SampledHeight ();

        void
        SampledHeight (const SampledHeight_type& x);

        void
        SampledHeight (const SampledHeight_optional& x);

        void
        SampledHeight (::std::auto_ptr< SampledHeight_type > p);

        // SampledXOffset
        // 
        typedef ::st434::s377m::types::Int32 SampledXOffset_type;
        typedef ::xsd::cxx::tree::optional< SampledXOffset_type > SampledXOffset_optional;
        typedef ::xsd::cxx::tree::traits< SampledXOffset_type, char > SampledXOffset_traits;

        const SampledXOffset_optional&
        SampledXOffset () const;

        SampledXOffset_optional&
        SampledXOffset ();

        void
        SampledXOffset (const SampledXOffset_type& x);

        void
        SampledXOffset (const SampledXOffset_optional& x);

        void
        SampledXOffset (::std::auto_ptr< SampledXOffset_type > p);

        static SampledXOffset_type
        SampledXOffset_default_value ();

        // SampledYOffset
        // 
        typedef ::st434::s377m::types::Int32 SampledYOffset_type;
        typedef ::xsd::cxx::tree::optional< SampledYOffset_type > SampledYOffset_optional;
        typedef ::xsd::cxx::tree::traits< SampledYOffset_type, char > SampledYOffset_traits;

        const SampledYOffset_optional&
        SampledYOffset () const;

        SampledYOffset_optional&
        SampledYOffset ();

        void
        SampledYOffset (const SampledYOffset_type& x);

        void
        SampledYOffset (const SampledYOffset_optional& x);

        void
        SampledYOffset (::std::auto_ptr< SampledYOffset_type > p);

        static SampledYOffset_type
        SampledYOffset_default_value ();

        // DisplayHeight
        // 
        typedef ::st434::s377m::types::UInt32 DisplayHeight_type;
        typedef ::xsd::cxx::tree::optional< DisplayHeight_type > DisplayHeight_optional;
        typedef ::xsd::cxx::tree::traits< DisplayHeight_type, char > DisplayHeight_traits;

        const DisplayHeight_optional&
        DisplayHeight () const;

        DisplayHeight_optional&
        DisplayHeight ();

        void
        DisplayHeight (const DisplayHeight_type& x);

        void
        DisplayHeight (const DisplayHeight_optional& x);

        void
        DisplayHeight (::std::auto_ptr< DisplayHeight_type > p);

        // DisplayWidth
        // 
        typedef ::st434::s377m::types::UInt32 DisplayWidth_type;
        typedef ::xsd::cxx::tree::optional< DisplayWidth_type > DisplayWidth_optional;
        typedef ::xsd::cxx::tree::traits< DisplayWidth_type, char > DisplayWidth_traits;

        const DisplayWidth_optional&
        DisplayWidth () const;

        DisplayWidth_optional&
        DisplayWidth ();

        void
        DisplayWidth (const DisplayWidth_type& x);

        void
        DisplayWidth (const DisplayWidth_optional& x);

        void
        DisplayWidth (::std::auto_ptr< DisplayWidth_type > p);

        // DisplayXOffset
        // 
        typedef ::st434::s377m::types::Int32 DisplayXOffset_type;
        typedef ::xsd::cxx::tree::optional< DisplayXOffset_type > DisplayXOffset_optional;
        typedef ::xsd::cxx::tree::traits< DisplayXOffset_type, char > DisplayXOffset_traits;

        const DisplayXOffset_optional&
        DisplayXOffset () const;

        DisplayXOffset_optional&
        DisplayXOffset ();

        void
        DisplayXOffset (const DisplayXOffset_type& x);

        void
        DisplayXOffset (const DisplayXOffset_optional& x);

        void
        DisplayXOffset (::std::auto_ptr< DisplayXOffset_type > p);

        // DisplayYOffset
        // 
        typedef ::st434::s377m::types::Int32 DisplayYOffset_type;
        typedef ::xsd::cxx::tree::optional< DisplayYOffset_type > DisplayYOffset_optional;
        typedef ::xsd::cxx::tree::traits< DisplayYOffset_type, char > DisplayYOffset_traits;

        const DisplayYOffset_optional&
        DisplayYOffset () const;

        DisplayYOffset_optional&
        DisplayYOffset ();

        void
        DisplayYOffset (const DisplayYOffset_type& x);

        void
        DisplayYOffset (const DisplayYOffset_optional& x);

        void
        DisplayYOffset (::std::auto_ptr< DisplayYOffset_type > p);

        // DisplayF2Offset
        // 
        typedef ::st434::s377m::types::Int32 DisplayF2Offset_type;
        typedef ::xsd::cxx::tree::optional< DisplayF2Offset_type > DisplayF2Offset_optional;
        typedef ::xsd::cxx::tree::traits< DisplayF2Offset_type, char > DisplayF2Offset_traits;

        const DisplayF2Offset_optional&
        DisplayF2Offset () const;

        DisplayF2Offset_optional&
        DisplayF2Offset ();

        void
        DisplayF2Offset (const DisplayF2Offset_type& x);

        void
        DisplayF2Offset (const DisplayF2Offset_optional& x);

        void
        DisplayF2Offset (::std::auto_ptr< DisplayF2Offset_type > p);

        static DisplayF2Offset_type
        DisplayF2Offset_default_value ();

        // ImageAspectRatio
        // 
        typedef ::st434::s377m::types::Rational ImageAspectRatio_type;
        typedef ::xsd::cxx::tree::optional< ImageAspectRatio_type > ImageAspectRatio_optional;
        typedef ::xsd::cxx::tree::traits< ImageAspectRatio_type, char > ImageAspectRatio_traits;

        const ImageAspectRatio_optional&
        ImageAspectRatio () const;

        ImageAspectRatio_optional&
        ImageAspectRatio ();

        void
        ImageAspectRatio (const ImageAspectRatio_type& x);

        void
        ImageAspectRatio (const ImageAspectRatio_optional& x);

        void
        ImageAspectRatio (::std::auto_ptr< ImageAspectRatio_type > p);

        // ActiveFormatDescriptor
        // 
        typedef ::st434::s377m::types::UInt8 ActiveFormatDescriptor_type;
        typedef ::xsd::cxx::tree::optional< ActiveFormatDescriptor_type > ActiveFormatDescriptor_optional;
        typedef ::xsd::cxx::tree::traits< ActiveFormatDescriptor_type, char > ActiveFormatDescriptor_traits;

        const ActiveFormatDescriptor_optional&
        ActiveFormatDescriptor () const;

        ActiveFormatDescriptor_optional&
        ActiveFormatDescriptor ();

        void
        ActiveFormatDescriptor (const ActiveFormatDescriptor_type& x);

        void
        ActiveFormatDescriptor (const ActiveFormatDescriptor_optional& x);

        void
        ActiveFormatDescriptor (::std::auto_ptr< ActiveFormatDescriptor_type > p);

        // VideoLineMap
        // 
        typedef ::properties::S335M::VideoLineMap VideoLineMap_type;
        typedef ::xsd::cxx::tree::optional< VideoLineMap_type > VideoLineMap_optional;
        typedef ::xsd::cxx::tree::traits< VideoLineMap_type, char > VideoLineMap_traits;

        const VideoLineMap_optional&
        VideoLineMap () const;

        VideoLineMap_optional&
        VideoLineMap ();

        void
        VideoLineMap (const VideoLineMap_type& x);

        void
        VideoLineMap (const VideoLineMap_optional& x);

        void
        VideoLineMap (::std::auto_ptr< VideoLineMap_type > p);

        // AlphaTransparency
        // 
        typedef ::st434::s377m::types::UInt8 AlphaTransparency_type;
        typedef ::xsd::cxx::tree::optional< AlphaTransparency_type > AlphaTransparency_optional;
        typedef ::xsd::cxx::tree::traits< AlphaTransparency_type, char > AlphaTransparency_traits;

        const AlphaTransparency_optional&
        AlphaTransparency () const;

        AlphaTransparency_optional&
        AlphaTransparency ();

        void
        AlphaTransparency (const AlphaTransparency_type& x);

        void
        AlphaTransparency (const AlphaTransparency_optional& x);

        void
        AlphaTransparency (::std::auto_ptr< AlphaTransparency_type > p);

        static AlphaTransparency_type
        AlphaTransparency_default_value ();

        // TransferCharacteristic
        // 
        typedef ::st434::s377m::types::UL TransferCharacteristic_type;
        typedef ::xsd::cxx::tree::optional< TransferCharacteristic_type > TransferCharacteristic_optional;
        typedef ::xsd::cxx::tree::traits< TransferCharacteristic_type, char > TransferCharacteristic_traits;

        const TransferCharacteristic_optional&
        TransferCharacteristic () const;

        TransferCharacteristic_optional&
        TransferCharacteristic ();

        void
        TransferCharacteristic (const TransferCharacteristic_type& x);

        void
        TransferCharacteristic (const TransferCharacteristic_optional& x);

        void
        TransferCharacteristic (::std::auto_ptr< TransferCharacteristic_type > p);

        // ImageAlignmentFactor
        // 
        typedef ::st434::s377m::types::UInt32 ImageAlignmentFactor_type;
        typedef ::xsd::cxx::tree::optional< ImageAlignmentFactor_type > ImageAlignmentFactor_optional;
        typedef ::xsd::cxx::tree::traits< ImageAlignmentFactor_type, char > ImageAlignmentFactor_traits;

        const ImageAlignmentFactor_optional&
        ImageAlignmentFactor () const;

        ImageAlignmentFactor_optional&
        ImageAlignmentFactor ();

        void
        ImageAlignmentFactor (const ImageAlignmentFactor_type& x);

        void
        ImageAlignmentFactor (const ImageAlignmentFactor_optional& x);

        void
        ImageAlignmentFactor (::std::auto_ptr< ImageAlignmentFactor_type > p);

        static ImageAlignmentFactor_type
        ImageAlignmentFactor_default_value ();

        // ImageStartOffset
        // 
        typedef ::st434::s377m::types::UInt32 ImageStartOffset_type;
        typedef ::xsd::cxx::tree::optional< ImageStartOffset_type > ImageStartOffset_optional;
        typedef ::xsd::cxx::tree::traits< ImageStartOffset_type, char > ImageStartOffset_traits;

        const ImageStartOffset_optional&
        ImageStartOffset () const;

        ImageStartOffset_optional&
        ImageStartOffset ();

        void
        ImageStartOffset (const ImageStartOffset_type& x);

        void
        ImageStartOffset (const ImageStartOffset_optional& x);

        void
        ImageStartOffset (::std::auto_ptr< ImageStartOffset_type > p);

        // ImageEndOffset
        // 
        typedef ::st434::s377m::types::UInt32 ImageEndOffset_type;
        typedef ::xsd::cxx::tree::optional< ImageEndOffset_type > ImageEndOffset_optional;
        typedef ::xsd::cxx::tree::traits< ImageEndOffset_type, char > ImageEndOffset_traits;

        const ImageEndOffset_optional&
        ImageEndOffset () const;

        ImageEndOffset_optional&
        ImageEndOffset ();

        void
        ImageEndOffset (const ImageEndOffset_type& x);

        void
        ImageEndOffset (const ImageEndOffset_optional& x);

        void
        ImageEndOffset (::std::auto_ptr< ImageEndOffset_type > p);

        // FieldDominance
        // 
        typedef ::st434::s377m::types::UInt8 FieldDominance_type;
        typedef ::xsd::cxx::tree::optional< FieldDominance_type > FieldDominance_optional;
        typedef ::xsd::cxx::tree::traits< FieldDominance_type, char > FieldDominance_traits;

        const FieldDominance_optional&
        FieldDominance () const;

        FieldDominance_optional&
        FieldDominance ();

        void
        FieldDominance (const FieldDominance_type& x);

        void
        FieldDominance (const FieldDominance_optional& x);

        void
        FieldDominance (::std::auto_ptr< FieldDominance_type > p);

        // PictureCompression
        // 
        typedef ::st434::s377m::types::UL PictureCompression_type;
        typedef ::xsd::cxx::tree::optional< PictureCompression_type > PictureCompression_optional;
        typedef ::xsd::cxx::tree::traits< PictureCompression_type, char > PictureCompression_traits;

        const PictureCompression_optional&
        PictureCompression () const;

        PictureCompression_optional&
        PictureCompression ();

        void
        PictureCompression (const PictureCompression_type& x);

        void
        PictureCompression (const PictureCompression_optional& x);

        void
        PictureCompression (::std::auto_ptr< PictureCompression_type > p);

        // Constructors.
        //
        PictureDescriptorType (const InstanceID_type&,
                               const SampleRate_type&,
                               const ContainerFormat_type&);

        PictureDescriptorType (const InstanceID_type&,
                               ::std::auto_ptr< SampleRate_type >&,
                               const ContainerFormat_type&);

        PictureDescriptorType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

        PictureDescriptorType (const PictureDescriptorType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

        virtual PictureDescriptorType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~PictureDescriptorType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SignalStandard_optional SignalStandard_;
        FrameLayout_optional FrameLayout_;
        StoredWidth_optional StoredWidth_;
        StoredHeight_optional StoredHeight_;
        StoredF2Offset_optional StoredF2Offset_;
        SampledWidth_optional SampledWidth_;
        SampledHeight_optional SampledHeight_;
        SampledXOffset_optional SampledXOffset_;
        SampledYOffset_optional SampledYOffset_;
        DisplayHeight_optional DisplayHeight_;
        DisplayWidth_optional DisplayWidth_;
        DisplayXOffset_optional DisplayXOffset_;
        DisplayYOffset_optional DisplayYOffset_;
        DisplayF2Offset_optional DisplayF2Offset_;
        ImageAspectRatio_optional ImageAspectRatio_;
        ActiveFormatDescriptor_optional ActiveFormatDescriptor_;
        VideoLineMap_optional VideoLineMap_;
        AlphaTransparency_optional AlphaTransparency_;
        TransferCharacteristic_optional TransferCharacteristic_;
        ImageAlignmentFactor_optional ImageAlignmentFactor_;
        ImageStartOffset_optional ImageStartOffset_;
        ImageEndOffset_optional ImageEndOffset_;
        FieldDominance_optional FieldDominance_;
        PictureCompression_optional PictureCompression_;
      };

      class CDCIDescriptorType: public ::st434::s377m::groups::PictureDescriptorType
      {
        public:
        // ComponentDepth
        // 
        typedef ::st434::s377m::types::UInt32 ComponentDepth_type;
        typedef ::xsd::cxx::tree::optional< ComponentDepth_type > ComponentDepth_optional;
        typedef ::xsd::cxx::tree::traits< ComponentDepth_type, char > ComponentDepth_traits;

        const ComponentDepth_optional&
        ComponentDepth () const;

        ComponentDepth_optional&
        ComponentDepth ();

        void
        ComponentDepth (const ComponentDepth_type& x);

        void
        ComponentDepth (const ComponentDepth_optional& x);

        void
        ComponentDepth (::std::auto_ptr< ComponentDepth_type > p);

        // HorizontalSubsampling
        // 
        typedef ::st434::s377m::types::UInt32 HorizontalSubsampling_type;
        typedef ::xsd::cxx::tree::optional< HorizontalSubsampling_type > HorizontalSubsampling_optional;
        typedef ::xsd::cxx::tree::traits< HorizontalSubsampling_type, char > HorizontalSubsampling_traits;

        const HorizontalSubsampling_optional&
        HorizontalSubsampling () const;

        HorizontalSubsampling_optional&
        HorizontalSubsampling ();

        void
        HorizontalSubsampling (const HorizontalSubsampling_type& x);

        void
        HorizontalSubsampling (const HorizontalSubsampling_optional& x);

        void
        HorizontalSubsampling (::std::auto_ptr< HorizontalSubsampling_type > p);

        // VerticalSubsampling
        // 
        typedef ::st434::s377m::types::UInt32 VerticalSubsampling_type;
        typedef ::xsd::cxx::tree::optional< VerticalSubsampling_type > VerticalSubsampling_optional;
        typedef ::xsd::cxx::tree::traits< VerticalSubsampling_type, char > VerticalSubsampling_traits;

        const VerticalSubsampling_optional&
        VerticalSubsampling () const;

        VerticalSubsampling_optional&
        VerticalSubsampling ();

        void
        VerticalSubsampling (const VerticalSubsampling_type& x);

        void
        VerticalSubsampling (const VerticalSubsampling_optional& x);

        void
        VerticalSubsampling (::std::auto_ptr< VerticalSubsampling_type > p);

        // ColorSiting
        // 
        typedef ::st434::s377m::types::UInt8 ColorSiting_type;
        typedef ::xsd::cxx::tree::optional< ColorSiting_type > ColorSiting_optional;
        typedef ::xsd::cxx::tree::traits< ColorSiting_type, char > ColorSiting_traits;

        const ColorSiting_optional&
        ColorSiting () const;

        ColorSiting_optional&
        ColorSiting ();

        void
        ColorSiting (const ColorSiting_type& x);

        void
        ColorSiting (const ColorSiting_optional& x);

        void
        ColorSiting (::std::auto_ptr< ColorSiting_type > p);

        // ReversedByteOrder
        // 
        typedef ::st434::s377m::types::Boolean ReversedByteOrder_type;
        typedef ::xsd::cxx::tree::optional< ReversedByteOrder_type > ReversedByteOrder_optional;
        typedef ::xsd::cxx::tree::traits< ReversedByteOrder_type, char > ReversedByteOrder_traits;

        const ReversedByteOrder_optional&
        ReversedByteOrder () const;

        ReversedByteOrder_optional&
        ReversedByteOrder ();

        void
        ReversedByteOrder (const ReversedByteOrder_type& x);

        void
        ReversedByteOrder (const ReversedByteOrder_optional& x);

        void
        ReversedByteOrder (::std::auto_ptr< ReversedByteOrder_type > p);

        // PaddingBits
        // 
        typedef ::st434::s377m::types::Int16 PaddingBits_type;
        typedef ::xsd::cxx::tree::optional< PaddingBits_type > PaddingBits_optional;
        typedef ::xsd::cxx::tree::traits< PaddingBits_type, char > PaddingBits_traits;

        const PaddingBits_optional&
        PaddingBits () const;

        PaddingBits_optional&
        PaddingBits ();

        void
        PaddingBits (const PaddingBits_type& x);

        void
        PaddingBits (const PaddingBits_optional& x);

        void
        PaddingBits (::std::auto_ptr< PaddingBits_type > p);

        // AlphaSampleDepth
        // 
        typedef ::st434::s377m::types::UInt32 AlphaSampleDepth_type;
        typedef ::xsd::cxx::tree::optional< AlphaSampleDepth_type > AlphaSampleDepth_optional;
        typedef ::xsd::cxx::tree::traits< AlphaSampleDepth_type, char > AlphaSampleDepth_traits;

        const AlphaSampleDepth_optional&
        AlphaSampleDepth () const;

        AlphaSampleDepth_optional&
        AlphaSampleDepth ();

        void
        AlphaSampleDepth (const AlphaSampleDepth_type& x);

        void
        AlphaSampleDepth (const AlphaSampleDepth_optional& x);

        void
        AlphaSampleDepth (::std::auto_ptr< AlphaSampleDepth_type > p);

        // BlackRefLevel
        // 
        typedef ::st434::s377m::types::UInt32 BlackRefLevel_type;
        typedef ::xsd::cxx::tree::optional< BlackRefLevel_type > BlackRefLevel_optional;
        typedef ::xsd::cxx::tree::traits< BlackRefLevel_type, char > BlackRefLevel_traits;

        const BlackRefLevel_optional&
        BlackRefLevel () const;

        BlackRefLevel_optional&
        BlackRefLevel ();

        void
        BlackRefLevel (const BlackRefLevel_type& x);

        void
        BlackRefLevel (const BlackRefLevel_optional& x);

        void
        BlackRefLevel (::std::auto_ptr< BlackRefLevel_type > p);

        // WhiteRefLevel
        // 
        typedef ::st434::s377m::types::UInt32 WhiteRefLevel_type;
        typedef ::xsd::cxx::tree::optional< WhiteRefLevel_type > WhiteRefLevel_optional;
        typedef ::xsd::cxx::tree::traits< WhiteRefLevel_type, char > WhiteRefLevel_traits;

        const WhiteRefLevel_optional&
        WhiteRefLevel () const;

        WhiteRefLevel_optional&
        WhiteRefLevel ();

        void
        WhiteRefLevel (const WhiteRefLevel_type& x);

        void
        WhiteRefLevel (const WhiteRefLevel_optional& x);

        void
        WhiteRefLevel (::std::auto_ptr< WhiteRefLevel_type > p);

        // ColorRange
        // 
        typedef ::st434::s377m::types::UInt32 ColorRange_type;
        typedef ::xsd::cxx::tree::optional< ColorRange_type > ColorRange_optional;
        typedef ::xsd::cxx::tree::traits< ColorRange_type, char > ColorRange_traits;

        const ColorRange_optional&
        ColorRange () const;

        ColorRange_optional&
        ColorRange ();

        void
        ColorRange (const ColorRange_type& x);

        void
        ColorRange (const ColorRange_optional& x);

        void
        ColorRange (::std::auto_ptr< ColorRange_type > p);

        // Constructors.
        //
        CDCIDescriptorType (const InstanceID_type&,
                            const SampleRate_type&,
                            const ContainerFormat_type&);

        CDCIDescriptorType (const InstanceID_type&,
                            ::std::auto_ptr< SampleRate_type >&,
                            const ContainerFormat_type&);

        CDCIDescriptorType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        CDCIDescriptorType (const CDCIDescriptorType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        virtual CDCIDescriptorType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~CDCIDescriptorType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ComponentDepth_optional ComponentDepth_;
        HorizontalSubsampling_optional HorizontalSubsampling_;
        VerticalSubsampling_optional VerticalSubsampling_;
        ColorSiting_optional ColorSiting_;
        ReversedByteOrder_optional ReversedByteOrder_;
        PaddingBits_optional PaddingBits_;
        AlphaSampleDepth_optional AlphaSampleDepth_;
        BlackRefLevel_optional BlackRefLevel_;
        WhiteRefLevel_optional WhiteRefLevel_;
        ColorRange_optional ColorRange_;
      };

      class RGBADescriptorType: public ::st434::s377m::groups::PictureDescriptorType
      {
        public:
        // ComponentMaxRef
        // 
        typedef ::st434::s377m::types::UInt32 ComponentMaxRef_type;
        typedef ::xsd::cxx::tree::optional< ComponentMaxRef_type > ComponentMaxRef_optional;
        typedef ::xsd::cxx::tree::traits< ComponentMaxRef_type, char > ComponentMaxRef_traits;

        const ComponentMaxRef_optional&
        ComponentMaxRef () const;

        ComponentMaxRef_optional&
        ComponentMaxRef ();

        void
        ComponentMaxRef (const ComponentMaxRef_type& x);

        void
        ComponentMaxRef (const ComponentMaxRef_optional& x);

        void
        ComponentMaxRef (::std::auto_ptr< ComponentMaxRef_type > p);

        static ComponentMaxRef_type
        ComponentMaxRef_default_value ();

        // ComponentMinRef
        // 
        typedef ::st434::s377m::types::UInt32 ComponentMinRef_type;
        typedef ::xsd::cxx::tree::optional< ComponentMinRef_type > ComponentMinRef_optional;
        typedef ::xsd::cxx::tree::traits< ComponentMinRef_type, char > ComponentMinRef_traits;

        const ComponentMinRef_optional&
        ComponentMinRef () const;

        ComponentMinRef_optional&
        ComponentMinRef ();

        void
        ComponentMinRef (const ComponentMinRef_type& x);

        void
        ComponentMinRef (const ComponentMinRef_optional& x);

        void
        ComponentMinRef (::std::auto_ptr< ComponentMinRef_type > p);

        static ComponentMinRef_type
        ComponentMinRef_default_value ();

        // AlphaMaxRef
        // 
        typedef ::st434::s377m::types::UInt32 AlphaMaxRef_type;
        typedef ::xsd::cxx::tree::optional< AlphaMaxRef_type > AlphaMaxRef_optional;
        typedef ::xsd::cxx::tree::traits< AlphaMaxRef_type, char > AlphaMaxRef_traits;

        const AlphaMaxRef_optional&
        AlphaMaxRef () const;

        AlphaMaxRef_optional&
        AlphaMaxRef ();

        void
        AlphaMaxRef (const AlphaMaxRef_type& x);

        void
        AlphaMaxRef (const AlphaMaxRef_optional& x);

        void
        AlphaMaxRef (::std::auto_ptr< AlphaMaxRef_type > p);

        static AlphaMaxRef_type
        AlphaMaxRef_default_value ();

        // AlphaMinRef
        // 
        typedef ::st434::s377m::types::UInt32 AlphaMinRef_type;
        typedef ::xsd::cxx::tree::optional< AlphaMinRef_type > AlphaMinRef_optional;
        typedef ::xsd::cxx::tree::traits< AlphaMinRef_type, char > AlphaMinRef_traits;

        const AlphaMinRef_optional&
        AlphaMinRef () const;

        AlphaMinRef_optional&
        AlphaMinRef ();

        void
        AlphaMinRef (const AlphaMinRef_type& x);

        void
        AlphaMinRef (const AlphaMinRef_optional& x);

        void
        AlphaMinRef (::std::auto_ptr< AlphaMinRef_type > p);

        static AlphaMinRef_type
        AlphaMinRef_default_value ();

        // ScanningDirection
        // 
        typedef ::st434::s377m::types::Orientation ScanningDirection_type;
        typedef ::xsd::cxx::tree::optional< ScanningDirection_type > ScanningDirection_optional;
        typedef ::xsd::cxx::tree::traits< ScanningDirection_type, char > ScanningDirection_traits;

        const ScanningDirection_optional&
        ScanningDirection () const;

        ScanningDirection_optional&
        ScanningDirection ();

        void
        ScanningDirection (const ScanningDirection_type& x);

        void
        ScanningDirection (const ScanningDirection_optional& x);

        void
        ScanningDirection (::std::auto_ptr< ScanningDirection_type > p);

        // PixelLayout
        // 
        typedef ::st434::s377m::types::RGBALayout PixelLayout_type;
        typedef ::xsd::cxx::tree::optional< PixelLayout_type > PixelLayout_optional;
        typedef ::xsd::cxx::tree::traits< PixelLayout_type, char > PixelLayout_traits;

        const PixelLayout_optional&
        PixelLayout () const;

        PixelLayout_optional&
        PixelLayout ();

        void
        PixelLayout (const PixelLayout_type& x);

        void
        PixelLayout (const PixelLayout_optional& x);

        void
        PixelLayout (::std::auto_ptr< PixelLayout_type > p);

        // Palette
        // 
        typedef ::st434::s377m::types::DataStream Palette_type;
        typedef ::xsd::cxx::tree::optional< Palette_type > Palette_optional;
        typedef ::xsd::cxx::tree::traits< Palette_type, char > Palette_traits;

        const Palette_optional&
        Palette () const;

        Palette_optional&
        Palette ();

        void
        Palette (const Palette_type& x);

        void
        Palette (const Palette_optional& x);

        void
        Palette (::std::auto_ptr< Palette_type > p);

        // PaletteLayout
        // 
        typedef ::st434::s377m::types::RGBALayout PaletteLayout_type;
        typedef ::xsd::cxx::tree::optional< PaletteLayout_type > PaletteLayout_optional;
        typedef ::xsd::cxx::tree::traits< PaletteLayout_type, char > PaletteLayout_traits;

        const PaletteLayout_optional&
        PaletteLayout () const;

        PaletteLayout_optional&
        PaletteLayout ();

        void
        PaletteLayout (const PaletteLayout_type& x);

        void
        PaletteLayout (const PaletteLayout_optional& x);

        void
        PaletteLayout (::std::auto_ptr< PaletteLayout_type > p);

        // Constructors.
        //
        RGBADescriptorType (const InstanceID_type&,
                            const SampleRate_type&,
                            const ContainerFormat_type&);

        RGBADescriptorType (const InstanceID_type&,
                            ::std::auto_ptr< SampleRate_type >&,
                            const ContainerFormat_type&);

        RGBADescriptorType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        RGBADescriptorType (const RGBADescriptorType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        virtual RGBADescriptorType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~RGBADescriptorType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ComponentMaxRef_optional ComponentMaxRef_;
        ComponentMinRef_optional ComponentMinRef_;
        AlphaMaxRef_optional AlphaMaxRef_;
        AlphaMinRef_optional AlphaMinRef_;
        ScanningDirection_optional ScanningDirection_;
        PixelLayout_optional PixelLayout_;
        Palette_optional Palette_;
        PaletteLayout_optional PaletteLayout_;
      };

      class SoundDescriptorType: public ::st434::s377m::groups::FileDescriptorType
      {
        public:
        // AudioSampleRate
        // 
        typedef ::st434::s377m::types::Rational AudioSampleRate_type;
        typedef ::xsd::cxx::tree::optional< AudioSampleRate_type > AudioSampleRate_optional;
        typedef ::xsd::cxx::tree::traits< AudioSampleRate_type, char > AudioSampleRate_traits;

        const AudioSampleRate_optional&
        AudioSampleRate () const;

        AudioSampleRate_optional&
        AudioSampleRate ();

        void
        AudioSampleRate (const AudioSampleRate_type& x);

        void
        AudioSampleRate (const AudioSampleRate_optional& x);

        void
        AudioSampleRate (::std::auto_ptr< AudioSampleRate_type > p);

        // Locked
        // 
        typedef ::st434::s377m::types::Boolean Locked_type;
        typedef ::xsd::cxx::tree::optional< Locked_type > Locked_optional;
        typedef ::xsd::cxx::tree::traits< Locked_type, char > Locked_traits;

        const Locked_optional&
        Locked () const;

        Locked_optional&
        Locked ();

        void
        Locked (const Locked_type& x);

        void
        Locked (const Locked_optional& x);

        void
        Locked (::std::auto_ptr< Locked_type > p);

        // AudioReferenceLevel
        // 
        typedef ::st434::s377m::types::Int8 AudioReferenceLevel_type;
        typedef ::xsd::cxx::tree::optional< AudioReferenceLevel_type > AudioReferenceLevel_optional;
        typedef ::xsd::cxx::tree::traits< AudioReferenceLevel_type, char > AudioReferenceLevel_traits;

        const AudioReferenceLevel_optional&
        AudioReferenceLevel () const;

        AudioReferenceLevel_optional&
        AudioReferenceLevel ();

        void
        AudioReferenceLevel (const AudioReferenceLevel_type& x);

        void
        AudioReferenceLevel (const AudioReferenceLevel_optional& x);

        void
        AudioReferenceLevel (::std::auto_ptr< AudioReferenceLevel_type > p);

        // ElectrospatialFormulation
        // 
        typedef ::properties::S335M::ElectrospatialFormulation ElectrospatialFormulation_type;
        typedef ::xsd::cxx::tree::optional< ElectrospatialFormulation_type > ElectrospatialFormulation_optional;
        typedef ::xsd::cxx::tree::traits< ElectrospatialFormulation_type, char > ElectrospatialFormulation_traits;

        const ElectrospatialFormulation_optional&
        ElectrospatialFormulation () const;

        ElectrospatialFormulation_optional&
        ElectrospatialFormulation ();

        void
        ElectrospatialFormulation (const ElectrospatialFormulation_type& x);

        void
        ElectrospatialFormulation (const ElectrospatialFormulation_optional& x);

        void
        ElectrospatialFormulation (::std::auto_ptr< ElectrospatialFormulation_type > p);

        // ChannelCount
        // 
        typedef ::st434::s377m::types::UInt32 ChannelCount_type;
        typedef ::xsd::cxx::tree::optional< ChannelCount_type > ChannelCount_optional;
        typedef ::xsd::cxx::tree::traits< ChannelCount_type, char > ChannelCount_traits;

        const ChannelCount_optional&
        ChannelCount () const;

        ChannelCount_optional&
        ChannelCount ();

        void
        ChannelCount (const ChannelCount_type& x);

        void
        ChannelCount (const ChannelCount_optional& x);

        void
        ChannelCount (::std::auto_ptr< ChannelCount_type > p);

        // QuantizationBits
        // 
        typedef ::st434::s377m::types::UInt32 QuantizationBits_type;
        typedef ::xsd::cxx::tree::optional< QuantizationBits_type > QuantizationBits_optional;
        typedef ::xsd::cxx::tree::traits< QuantizationBits_type, char > QuantizationBits_traits;

        const QuantizationBits_optional&
        QuantizationBits () const;

        QuantizationBits_optional&
        QuantizationBits ();

        void
        QuantizationBits (const QuantizationBits_type& x);

        void
        QuantizationBits (const QuantizationBits_optional& x);

        void
        QuantizationBits (::std::auto_ptr< QuantizationBits_type > p);

        // DialNorm
        // 
        typedef ::st434::s377m::types::Int8 DialNorm_type;
        typedef ::xsd::cxx::tree::optional< DialNorm_type > DialNorm_optional;
        typedef ::xsd::cxx::tree::traits< DialNorm_type, char > DialNorm_traits;

        const DialNorm_optional&
        DialNorm () const;

        DialNorm_optional&
        DialNorm ();

        void
        DialNorm (const DialNorm_type& x);

        void
        DialNorm (const DialNorm_optional& x);

        void
        DialNorm (::std::auto_ptr< DialNorm_type > p);

        // SoundCompression
        // 
        typedef ::st434::s377m::types::UL SoundCompression_type;
        typedef ::xsd::cxx::tree::optional< SoundCompression_type > SoundCompression_optional;
        typedef ::xsd::cxx::tree::traits< SoundCompression_type, char > SoundCompression_traits;

        const SoundCompression_optional&
        SoundCompression () const;

        SoundCompression_optional&
        SoundCompression ();

        void
        SoundCompression (const SoundCompression_type& x);

        void
        SoundCompression (const SoundCompression_optional& x);

        void
        SoundCompression (::std::auto_ptr< SoundCompression_type > p);

        // Constructors.
        //
        SoundDescriptorType (const InstanceID_type&,
                             const SampleRate_type&,
                             const ContainerFormat_type&);

        SoundDescriptorType (const InstanceID_type&,
                             ::std::auto_ptr< SampleRate_type >&,
                             const ContainerFormat_type&);

        SoundDescriptorType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

        SoundDescriptorType (const SoundDescriptorType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

        virtual SoundDescriptorType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~SoundDescriptorType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        AudioSampleRate_optional AudioSampleRate_;
        Locked_optional Locked_;
        AudioReferenceLevel_optional AudioReferenceLevel_;
        ElectrospatialFormulation_optional ElectrospatialFormulation_;
        ChannelCount_optional ChannelCount_;
        QuantizationBits_optional QuantizationBits_;
        DialNorm_optional DialNorm_;
        SoundCompression_optional SoundCompression_;
      };

      class DataEssenceDescriptorType: public ::st434::s377m::groups::FileDescriptorType
      {
        public:
        // DataEssenceCoding
        // 
        typedef ::st434::s377m::types::UL DataEssenceCoding_type;
        typedef ::xsd::cxx::tree::optional< DataEssenceCoding_type > DataEssenceCoding_optional;
        typedef ::xsd::cxx::tree::traits< DataEssenceCoding_type, char > DataEssenceCoding_traits;

        const DataEssenceCoding_optional&
        DataEssenceCoding () const;

        DataEssenceCoding_optional&
        DataEssenceCoding ();

        void
        DataEssenceCoding (const DataEssenceCoding_type& x);

        void
        DataEssenceCoding (const DataEssenceCoding_optional& x);

        void
        DataEssenceCoding (::std::auto_ptr< DataEssenceCoding_type > p);

        // Constructors.
        //
        DataEssenceDescriptorType (const InstanceID_type&,
                                   const SampleRate_type&,
                                   const ContainerFormat_type&);

        DataEssenceDescriptorType (const InstanceID_type&,
                                   ::std::auto_ptr< SampleRate_type >&,
                                   const ContainerFormat_type&);

        DataEssenceDescriptorType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

        DataEssenceDescriptorType (const DataEssenceDescriptorType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

        virtual DataEssenceDescriptorType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~DataEssenceDescriptorType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        DataEssenceCoding_optional DataEssenceCoding_;
      };

      class MultipleDescriptorType: public ::st434::s377m::groups::FileDescriptorType
      {
        public:
        // FileDescriptors
        // 
        typedef ::properties::S335M::FileDescriptors FileDescriptors_type;
        typedef ::xsd::cxx::tree::traits< FileDescriptors_type, char > FileDescriptors_traits;

        const FileDescriptors_type&
        FileDescriptors () const;

        FileDescriptors_type&
        FileDescriptors ();

        void
        FileDescriptors (const FileDescriptors_type& x);

        void
        FileDescriptors (::std::auto_ptr< FileDescriptors_type > p);

        // Constructors.
        //
        MultipleDescriptorType (const InstanceID_type&,
                                const SampleRate_type&,
                                const ContainerFormat_type&,
                                const FileDescriptors_type&);

        MultipleDescriptorType (const InstanceID_type&,
                                ::std::auto_ptr< SampleRate_type >&,
                                const ContainerFormat_type&,
                                ::std::auto_ptr< FileDescriptors_type >&);

        MultipleDescriptorType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

        MultipleDescriptorType (const MultipleDescriptorType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

        virtual MultipleDescriptorType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~MultipleDescriptorType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< FileDescriptors_type > FileDescriptors_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (const ::std::string& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (const ::std::string& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (::xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (::xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (const ::std::string& uri,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (const ::std::string& uri,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (::std::istream& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (::std::istream& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (::std::istream& is,
                                 const ::std::string& id,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (::xercesc::InputSource& is,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (::xercesc::InputSource& is,
                                 ::xml_schema::error_handler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                 ::xml_schema::flags f = 0,
                                 const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (const ::std::string& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (const ::std::string& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (::std::istream& is,
                             const ::std::string& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse a URI or a local file.
      //

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse std::istream.
      //

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::InputSource.
      //

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      // Parse xercesc::DOMDocument.
      //

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      // Serialize to std::ostream.
      //

      void
      AbstractSet (::std::ostream& os,
                   const ::st434::s377m::groups::AbstractSetType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      AbstractSet (::std::ostream& os,
                   const ::st434::s377m::groups::AbstractSetType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      AbstractSet (::std::ostream& os,
                   const ::st434::s377m::groups::AbstractSetType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      AbstractSet (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::groups::AbstractSetType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      AbstractSet (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::groups::AbstractSetType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      AbstractSet (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::groups::AbstractSetType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      AbstractSet (::xercesc::DOMDocument& d,
                   const ::st434::s377m::groups::AbstractSetType& x,
                   ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      AbstractSet (const ::st434::s377m::groups::AbstractSetType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const AbstractSetType&);

      // Serialize to std::ostream.
      //

      void
      InterchangeObject (::std::ostream& os,
                         const ::st434::s377m::groups::InterchangeObjectType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      InterchangeObject (::std::ostream& os,
                         const ::st434::s377m::groups::InterchangeObjectType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      InterchangeObject (::std::ostream& os,
                         const ::st434::s377m::groups::InterchangeObjectType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      InterchangeObject (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::groups::InterchangeObjectType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      InterchangeObject (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::groups::InterchangeObjectType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      InterchangeObject (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::groups::InterchangeObjectType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      InterchangeObject (::xercesc::DOMDocument& d,
                         const ::st434::s377m::groups::InterchangeObjectType& x,
                         ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      InterchangeObject (const ::st434::s377m::groups::InterchangeObjectType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const InterchangeObjectType&);

      // Serialize to std::ostream.
      //

      void
      SubDescriptors (::std::ostream& os,
                      const ::st434::s377m::groups::SubDescriptorsType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      SubDescriptors (::std::ostream& os,
                      const ::st434::s377m::groups::SubDescriptorsType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      SubDescriptors (::std::ostream& os,
                      const ::st434::s377m::groups::SubDescriptorsType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      SubDescriptors (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::groups::SubDescriptorsType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      SubDescriptors (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::groups::SubDescriptorsType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      SubDescriptors (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::groups::SubDescriptorsType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      SubDescriptors (::xercesc::DOMDocument& d,
                      const ::st434::s377m::groups::SubDescriptorsType& x,
                      ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SubDescriptors (const ::st434::s377m::groups::SubDescriptorsType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const SubDescriptorsType&);

      // Serialize to std::ostream.
      //

      void
      DescriptiveFramework (::std::ostream& os,
                            const ::st434::s377m::groups::DescriptiveFrameworkType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

      void
      DescriptiveFramework (::std::ostream& os,
                            const ::st434::s377m::groups::DescriptiveFrameworkType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

      void
      DescriptiveFramework (::std::ostream& os,
                            const ::st434::s377m::groups::DescriptiveFrameworkType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      DescriptiveFramework (::xercesc::XMLFormatTarget& ft,
                            const ::st434::s377m::groups::DescriptiveFrameworkType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

      void
      DescriptiveFramework (::xercesc::XMLFormatTarget& ft,
                            const ::st434::s377m::groups::DescriptiveFrameworkType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

      void
      DescriptiveFramework (::xercesc::XMLFormatTarget& ft,
                            const ::st434::s377m::groups::DescriptiveFrameworkType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      DescriptiveFramework (::xercesc::DOMDocument& d,
                            const ::st434::s377m::groups::DescriptiveFrameworkType& x,
                            ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DescriptiveFramework (const ::st434::s377m::groups::DescriptiveFrameworkType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const DescriptiveFrameworkType&);

      // Serialize to std::ostream.
      //

      void
      DescriptiveObject (::std::ostream& os,
                         const ::st434::s377m::groups::DescriptiveObjectType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      DescriptiveObject (::std::ostream& os,
                         const ::st434::s377m::groups::DescriptiveObjectType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      DescriptiveObject (::std::ostream& os,
                         const ::st434::s377m::groups::DescriptiveObjectType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      DescriptiveObject (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::groups::DescriptiveObjectType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      DescriptiveObject (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::groups::DescriptiveObjectType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      DescriptiveObject (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::groups::DescriptiveObjectType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      DescriptiveObject (::xercesc::DOMDocument& d,
                         const ::st434::s377m::groups::DescriptiveObjectType& x,
                         ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DescriptiveObject (const ::st434::s377m::groups::DescriptiveObjectType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const DescriptiveObjectType&);

      // Serialize to std::ostream.
      //

      void
      Track (::std::ostream& os,
             const ::st434::s377m::groups::TrackType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

      void
      Track (::std::ostream& os,
             const ::st434::s377m::groups::TrackType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

      void
      Track (::std::ostream& os,
             const ::st434::s377m::groups::TrackType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Track (::xercesc::XMLFormatTarget& ft,
             const ::st434::s377m::groups::TrackType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

      void
      Track (::xercesc::XMLFormatTarget& ft,
             const ::st434::s377m::groups::TrackType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

      void
      Track (::xercesc::XMLFormatTarget& ft,
             const ::st434::s377m::groups::TrackType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Track (::xercesc::DOMDocument& d,
             const ::st434::s377m::groups::TrackType& x,
             ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Track (const ::st434::s377m::groups::TrackType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const TrackType&);

      // Serialize to std::ostream.
      //

      void
      Package (::std::ostream& os,
               const ::st434::s377m::groups::PackageType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Package (::std::ostream& os,
               const ::st434::s377m::groups::PackageType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Package (::std::ostream& os,
               const ::st434::s377m::groups::PackageType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Package (::xercesc::XMLFormatTarget& ft,
               const ::st434::s377m::groups::PackageType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Package (::xercesc::XMLFormatTarget& ft,
               const ::st434::s377m::groups::PackageType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Package (::xercesc::XMLFormatTarget& ft,
               const ::st434::s377m::groups::PackageType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Package (::xercesc::DOMDocument& d,
               const ::st434::s377m::groups::PackageType& x,
               ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Package (const ::st434::s377m::groups::PackageType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const PackageType&);

      // Serialize to std::ostream.
      //

      void
      Component (::std::ostream& os,
                 const ::st434::s377m::groups::ComponentType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      Component (::std::ostream& os,
                 const ::st434::s377m::groups::ComponentType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      Component (::std::ostream& os,
                 const ::st434::s377m::groups::ComponentType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Component (::xercesc::XMLFormatTarget& ft,
                 const ::st434::s377m::groups::ComponentType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      Component (::xercesc::XMLFormatTarget& ft,
                 const ::st434::s377m::groups::ComponentType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      Component (::xercesc::XMLFormatTarget& ft,
                 const ::st434::s377m::groups::ComponentType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Component (::xercesc::DOMDocument& d,
                 const ::st434::s377m::groups::ComponentType& x,
                 ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Component (const ::st434::s377m::groups::ComponentType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const ComponentType&);

      // Serialize to std::ostream.
      //

      void
      Segment (::std::ostream& os,
               const ::st434::s377m::groups::SegmentType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Segment (::std::ostream& os,
               const ::st434::s377m::groups::SegmentType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Segment (::std::ostream& os,
               const ::st434::s377m::groups::SegmentType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Segment (::xercesc::XMLFormatTarget& ft,
               const ::st434::s377m::groups::SegmentType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Segment (::xercesc::XMLFormatTarget& ft,
               const ::st434::s377m::groups::SegmentType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Segment (::xercesc::XMLFormatTarget& ft,
               const ::st434::s377m::groups::SegmentType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Segment (::xercesc::DOMDocument& d,
               const ::st434::s377m::groups::SegmentType& x,
               ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Segment (const ::st434::s377m::groups::SegmentType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const SegmentType&);

      // Serialize to std::ostream.
      //

      void
      SourceReference (::std::ostream& os,
                       const ::st434::s377m::groups::SourceReferenceType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      SourceReference (::std::ostream& os,
                       const ::st434::s377m::groups::SourceReferenceType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      SourceReference (::std::ostream& os,
                       const ::st434::s377m::groups::SourceReferenceType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      SourceReference (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::groups::SourceReferenceType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      SourceReference (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::groups::SourceReferenceType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      SourceReference (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::groups::SourceReferenceType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      SourceReference (::xercesc::DOMDocument& d,
                       const ::st434::s377m::groups::SourceReferenceType& x,
                       ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SourceReference (const ::st434::s377m::groups::SourceReferenceType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const SourceReferenceType&);

      // Serialize to std::ostream.
      //

      void
      DMS1Event (::std::ostream& os,
                 const ::st434::s377m::groups::DMS1EventType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      DMS1Event (::std::ostream& os,
                 const ::st434::s377m::groups::DMS1EventType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      DMS1Event (::std::ostream& os,
                 const ::st434::s377m::groups::DMS1EventType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      DMS1Event (::xercesc::XMLFormatTarget& ft,
                 const ::st434::s377m::groups::DMS1EventType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      DMS1Event (::xercesc::XMLFormatTarget& ft,
                 const ::st434::s377m::groups::DMS1EventType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      void
      DMS1Event (::xercesc::XMLFormatTarget& ft,
                 const ::st434::s377m::groups::DMS1EventType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      DMS1Event (::xercesc::DOMDocument& d,
                 const ::st434::s377m::groups::DMS1EventType& x,
                 ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DMS1Event (const ::st434::s377m::groups::DMS1EventType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const DMS1EventType&);

      // Serialize to std::ostream.
      //

      void
      CommentMarker (::std::ostream& os,
                     const ::st434::s377m::groups::CommentMarkerType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      CommentMarker (::std::ostream& os,
                     const ::st434::s377m::groups::CommentMarkerType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      CommentMarker (::std::ostream& os,
                     const ::st434::s377m::groups::CommentMarkerType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      CommentMarker (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s377m::groups::CommentMarkerType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      CommentMarker (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s377m::groups::CommentMarkerType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      CommentMarker (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s377m::groups::CommentMarkerType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      CommentMarker (::xercesc::DOMDocument& d,
                     const ::st434::s377m::groups::CommentMarkerType& x,
                     ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      CommentMarker (const ::st434::s377m::groups::CommentMarkerType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const CommentMarkerType&);

      // Serialize to std::ostream.
      //

      void
      GenericDescriptor (::std::ostream& os,
                         const ::st434::s377m::groups::GenericDescriptorType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      GenericDescriptor (::std::ostream& os,
                         const ::st434::s377m::groups::GenericDescriptorType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      GenericDescriptor (::std::ostream& os,
                         const ::st434::s377m::groups::GenericDescriptorType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      GenericDescriptor (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::groups::GenericDescriptorType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      GenericDescriptor (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::groups::GenericDescriptorType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      GenericDescriptor (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::groups::GenericDescriptorType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      GenericDescriptor (::xercesc::DOMDocument& d,
                         const ::st434::s377m::groups::GenericDescriptorType& x,
                         ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      GenericDescriptor (const ::st434::s377m::groups::GenericDescriptorType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const GenericDescriptorType&);

      // Serialize to std::ostream.
      //

      void
      PhysicalDescriptor (::std::ostream& os,
                          const ::st434::s377m::groups::PhysicalDescriptorType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      PhysicalDescriptor (::std::ostream& os,
                          const ::st434::s377m::groups::PhysicalDescriptorType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      PhysicalDescriptor (::std::ostream& os,
                          const ::st434::s377m::groups::PhysicalDescriptorType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      PhysicalDescriptor (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::groups::PhysicalDescriptorType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      PhysicalDescriptor (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::groups::PhysicalDescriptorType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      PhysicalDescriptor (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::groups::PhysicalDescriptorType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      PhysicalDescriptor (::xercesc::DOMDocument& d,
                          const ::st434::s377m::groups::PhysicalDescriptorType& x,
                          ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      PhysicalDescriptor (const ::st434::s377m::groups::PhysicalDescriptorType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const PhysicalDescriptorType&);

      // Serialize to std::ostream.
      //

      void
      Locator (::std::ostream& os,
               const ::st434::s377m::groups::LocatorType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Locator (::std::ostream& os,
               const ::st434::s377m::groups::LocatorType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Locator (::std::ostream& os,
               const ::st434::s377m::groups::LocatorType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Locator (::xercesc::XMLFormatTarget& ft,
               const ::st434::s377m::groups::LocatorType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Locator (::xercesc::XMLFormatTarget& ft,
               const ::st434::s377m::groups::LocatorType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Locator (::xercesc::XMLFormatTarget& ft,
               const ::st434::s377m::groups::LocatorType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Locator (::xercesc::DOMDocument& d,
               const ::st434::s377m::groups::LocatorType& x,
               ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Locator (const ::st434::s377m::groups::LocatorType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const LocatorType&);

      // Serialize to std::ostream.
      //

      void
      Preface_REF (::std::ostream& os,
                   const ::st434::s377m::types::Ref& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      Preface_REF (::std::ostream& os,
                   const ::st434::s377m::types::Ref& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      Preface_REF (::std::ostream& os,
                   const ::st434::s377m::types::Ref& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Preface_REF (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::types::Ref& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      Preface_REF (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::types::Ref& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      Preface_REF (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::types::Ref& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Preface_REF (::xercesc::DOMDocument& d,
                   const ::st434::s377m::types::Ref& x,
                   ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Preface_REF (const ::st434::s377m::types::Ref& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      Preface (::std::ostream& os,
               const ::st434::s377m::groups::PrefaceType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Preface (::std::ostream& os,
               const ::st434::s377m::groups::PrefaceType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Preface (::std::ostream& os,
               const ::st434::s377m::groups::PrefaceType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Preface (::xercesc::XMLFormatTarget& ft,
               const ::st434::s377m::groups::PrefaceType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Preface (::xercesc::XMLFormatTarget& ft,
               const ::st434::s377m::groups::PrefaceType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      void
      Preface (::xercesc::XMLFormatTarget& ft,
               const ::st434::s377m::groups::PrefaceType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Preface (::xercesc::DOMDocument& d,
               const ::st434::s377m::groups::PrefaceType& x,
               ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Preface (const ::st434::s377m::groups::PrefaceType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const PrefaceType&);

      // Serialize to std::ostream.
      //

      void
      Identification_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      Identification_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      Identification_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Identification_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      Identification_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      Identification_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Identification_REF (::xercesc::DOMDocument& d,
                          const ::st434::s377m::types::Ref& x,
                          ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Identification_REF (const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      Identification (::std::ostream& os,
                      const ::st434::s377m::groups::IdentificationType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      Identification (::std::ostream& os,
                      const ::st434::s377m::groups::IdentificationType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      Identification (::std::ostream& os,
                      const ::st434::s377m::groups::IdentificationType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Identification (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::groups::IdentificationType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      Identification (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::groups::IdentificationType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      Identification (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::groups::IdentificationType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Identification (::xercesc::DOMDocument& d,
                      const ::st434::s377m::groups::IdentificationType& x,
                      ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Identification (const ::st434::s377m::groups::IdentificationType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const IdentificationType&);

      // Serialize to std::ostream.
      //

      void
      ContentStorage_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      ContentStorage_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      ContentStorage_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      ContentStorage_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      ContentStorage_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      ContentStorage_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      ContentStorage_REF (::xercesc::DOMDocument& d,
                          const ::st434::s377m::types::Ref& x,
                          ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      ContentStorage_REF (const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      ContentStorage (::std::ostream& os,
                      const ::st434::s377m::groups::ContentStorageType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      ContentStorage (::std::ostream& os,
                      const ::st434::s377m::groups::ContentStorageType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      ContentStorage (::std::ostream& os,
                      const ::st434::s377m::groups::ContentStorageType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      ContentStorage (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::groups::ContentStorageType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      ContentStorage (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::groups::ContentStorageType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      ContentStorage (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::groups::ContentStorageType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      ContentStorage (::xercesc::DOMDocument& d,
                      const ::st434::s377m::groups::ContentStorageType& x,
                      ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      ContentStorage (const ::st434::s377m::groups::ContentStorageType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const ContentStorageType&);

      // Serialize to std::ostream.
      //

      void
      EssenceData_REF (::std::ostream& os,
                       const ::st434::s377m::types::Ref& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      EssenceData_REF (::std::ostream& os,
                       const ::st434::s377m::types::Ref& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      EssenceData_REF (::std::ostream& os,
                       const ::st434::s377m::types::Ref& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      EssenceData_REF (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::types::Ref& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      EssenceData_REF (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::types::Ref& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      EssenceData_REF (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::types::Ref& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      EssenceData_REF (::xercesc::DOMDocument& d,
                       const ::st434::s377m::types::Ref& x,
                       ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      EssenceData_REF (const ::st434::s377m::types::Ref& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      EssenceData (::std::ostream& os,
                   const ::st434::s377m::groups::EssenceDataType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      EssenceData (::std::ostream& os,
                   const ::st434::s377m::groups::EssenceDataType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      EssenceData (::std::ostream& os,
                   const ::st434::s377m::groups::EssenceDataType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      EssenceData (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::groups::EssenceDataType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      EssenceData (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::groups::EssenceDataType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      EssenceData (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::groups::EssenceDataType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      EssenceData (::xercesc::DOMDocument& d,
                   const ::st434::s377m::groups::EssenceDataType& x,
                   ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      EssenceData (const ::st434::s377m::groups::EssenceDataType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const EssenceDataType&);

      // Serialize to std::ostream.
      //

      void
      NetworkLocator_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      NetworkLocator_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      NetworkLocator_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      NetworkLocator_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      NetworkLocator_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      NetworkLocator_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      NetworkLocator_REF (::xercesc::DOMDocument& d,
                          const ::st434::s377m::types::Ref& x,
                          ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      NetworkLocator_REF (const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      NetworkLocator (::std::ostream& os,
                      const ::st434::s377m::groups::NetworkLocatorType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      NetworkLocator (::std::ostream& os,
                      const ::st434::s377m::groups::NetworkLocatorType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      NetworkLocator (::std::ostream& os,
                      const ::st434::s377m::groups::NetworkLocatorType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      NetworkLocator (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::groups::NetworkLocatorType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      NetworkLocator (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::groups::NetworkLocatorType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      NetworkLocator (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::groups::NetworkLocatorType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      NetworkLocator (::xercesc::DOMDocument& d,
                      const ::st434::s377m::groups::NetworkLocatorType& x,
                      ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      NetworkLocator (const ::st434::s377m::groups::NetworkLocatorType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const NetworkLocatorType&);

      // Serialize to std::ostream.
      //

      void
      TextLocator_REF (::std::ostream& os,
                       const ::st434::s377m::types::Ref& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      TextLocator_REF (::std::ostream& os,
                       const ::st434::s377m::types::Ref& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      TextLocator_REF (::std::ostream& os,
                       const ::st434::s377m::types::Ref& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      TextLocator_REF (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::types::Ref& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      TextLocator_REF (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::types::Ref& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      TextLocator_REF (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::types::Ref& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      TextLocator_REF (::xercesc::DOMDocument& d,
                       const ::st434::s377m::types::Ref& x,
                       ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      TextLocator_REF (const ::st434::s377m::types::Ref& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      TextLocator (::std::ostream& os,
                   const ::st434::s377m::groups::TextLocatorType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      TextLocator (::std::ostream& os,
                   const ::st434::s377m::groups::TextLocatorType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      TextLocator (::std::ostream& os,
                   const ::st434::s377m::groups::TextLocatorType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      TextLocator (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::groups::TextLocatorType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      TextLocator (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::groups::TextLocatorType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      TextLocator (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::groups::TextLocatorType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      TextLocator (::xercesc::DOMDocument& d,
                   const ::st434::s377m::groups::TextLocatorType& x,
                   ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      TextLocator (const ::st434::s377m::groups::TextLocatorType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const TextLocatorType&);

      // Serialize to std::ostream.
      //

      void
      TimelineTrack_REF (::std::ostream& os,
                         const ::st434::s377m::types::Ref& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      TimelineTrack_REF (::std::ostream& os,
                         const ::st434::s377m::types::Ref& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      TimelineTrack_REF (::std::ostream& os,
                         const ::st434::s377m::types::Ref& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      TimelineTrack_REF (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::types::Ref& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      TimelineTrack_REF (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::types::Ref& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      TimelineTrack_REF (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::types::Ref& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      TimelineTrack_REF (::xercesc::DOMDocument& d,
                         const ::st434::s377m::types::Ref& x,
                         ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      TimelineTrack_REF (const ::st434::s377m::types::Ref& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      TimelineTrack (::std::ostream& os,
                     const ::st434::s377m::groups::TimelineTrackType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      TimelineTrack (::std::ostream& os,
                     const ::st434::s377m::groups::TimelineTrackType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      TimelineTrack (::std::ostream& os,
                     const ::st434::s377m::groups::TimelineTrackType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      TimelineTrack (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s377m::groups::TimelineTrackType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      TimelineTrack (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s377m::groups::TimelineTrackType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      TimelineTrack (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s377m::groups::TimelineTrackType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      TimelineTrack (::xercesc::DOMDocument& d,
                     const ::st434::s377m::groups::TimelineTrackType& x,
                     ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      TimelineTrack (const ::st434::s377m::groups::TimelineTrackType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const TimelineTrackType&);

      // Serialize to std::ostream.
      //

      void
      EventTrack_REF (::std::ostream& os,
                      const ::st434::s377m::types::Ref& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      EventTrack_REF (::std::ostream& os,
                      const ::st434::s377m::types::Ref& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      EventTrack_REF (::std::ostream& os,
                      const ::st434::s377m::types::Ref& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      EventTrack_REF (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::types::Ref& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      EventTrack_REF (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::types::Ref& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      EventTrack_REF (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::types::Ref& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      EventTrack_REF (::xercesc::DOMDocument& d,
                      const ::st434::s377m::types::Ref& x,
                      ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      EventTrack_REF (const ::st434::s377m::types::Ref& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      EventTrack (::std::ostream& os,
                  const ::st434::s377m::groups::EventTrackType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      EventTrack (::std::ostream& os,
                  const ::st434::s377m::groups::EventTrackType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      EventTrack (::std::ostream& os,
                  const ::st434::s377m::groups::EventTrackType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      EventTrack (::xercesc::XMLFormatTarget& ft,
                  const ::st434::s377m::groups::EventTrackType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      EventTrack (::xercesc::XMLFormatTarget& ft,
                  const ::st434::s377m::groups::EventTrackType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      EventTrack (::xercesc::XMLFormatTarget& ft,
                  const ::st434::s377m::groups::EventTrackType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      EventTrack (::xercesc::DOMDocument& d,
                  const ::st434::s377m::groups::EventTrackType& x,
                  ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      EventTrack (const ::st434::s377m::groups::EventTrackType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const EventTrackType&);

      // Serialize to std::ostream.
      //

      void
      StaticTrack_REF (::std::ostream& os,
                       const ::st434::s377m::types::Ref& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      StaticTrack_REF (::std::ostream& os,
                       const ::st434::s377m::types::Ref& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      StaticTrack_REF (::std::ostream& os,
                       const ::st434::s377m::types::Ref& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      StaticTrack_REF (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::types::Ref& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      StaticTrack_REF (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::types::Ref& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      StaticTrack_REF (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::types::Ref& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      StaticTrack_REF (::xercesc::DOMDocument& d,
                       const ::st434::s377m::types::Ref& x,
                       ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      StaticTrack_REF (const ::st434::s377m::types::Ref& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      StaticTrack (::std::ostream& os,
                   const ::st434::s377m::groups::StaticTrackType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      StaticTrack (::std::ostream& os,
                   const ::st434::s377m::groups::StaticTrackType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      StaticTrack (::std::ostream& os,
                   const ::st434::s377m::groups::StaticTrackType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      StaticTrack (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::groups::StaticTrackType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      StaticTrack (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::groups::StaticTrackType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      void
      StaticTrack (::xercesc::XMLFormatTarget& ft,
                   const ::st434::s377m::groups::StaticTrackType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      StaticTrack (::xercesc::DOMDocument& d,
                   const ::st434::s377m::groups::StaticTrackType& x,
                   ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      StaticTrack (const ::st434::s377m::groups::StaticTrackType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const StaticTrackType&);

      // Serialize to std::ostream.
      //

      void
      Sequence_REF (::std::ostream& os,
                    const ::st434::s377m::types::Ref& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Sequence_REF (::std::ostream& os,
                    const ::st434::s377m::types::Ref& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Sequence_REF (::std::ostream& os,
                    const ::st434::s377m::types::Ref& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Sequence_REF (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s377m::types::Ref& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Sequence_REF (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s377m::types::Ref& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Sequence_REF (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s377m::types::Ref& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Sequence_REF (::xercesc::DOMDocument& d,
                    const ::st434::s377m::types::Ref& x,
                    ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Sequence_REF (const ::st434::s377m::types::Ref& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      Sequence (::std::ostream& os,
                const ::st434::s377m::groups::SequenceType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Sequence (::std::ostream& os,
                const ::st434::s377m::groups::SequenceType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Sequence (::std::ostream& os,
                const ::st434::s377m::groups::SequenceType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Sequence (::xercesc::XMLFormatTarget& ft,
                const ::st434::s377m::groups::SequenceType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Sequence (::xercesc::XMLFormatTarget& ft,
                const ::st434::s377m::groups::SequenceType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Sequence (::xercesc::XMLFormatTarget& ft,
                const ::st434::s377m::groups::SequenceType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Sequence (::xercesc::DOMDocument& d,
                const ::st434::s377m::groups::SequenceType& x,
                ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Sequence (const ::st434::s377m::groups::SequenceType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const SequenceType&);

      // Serialize to std::ostream.
      //

      void
      Timecode_REF (::std::ostream& os,
                    const ::st434::s377m::types::Ref& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Timecode_REF (::std::ostream& os,
                    const ::st434::s377m::types::Ref& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Timecode_REF (::std::ostream& os,
                    const ::st434::s377m::types::Ref& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Timecode_REF (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s377m::types::Ref& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Timecode_REF (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s377m::types::Ref& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      void
      Timecode_REF (::xercesc::XMLFormatTarget& ft,
                    const ::st434::s377m::types::Ref& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Timecode_REF (::xercesc::DOMDocument& d,
                    const ::st434::s377m::types::Ref& x,
                    ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Timecode_REF (const ::st434::s377m::types::Ref& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      Timecode (::std::ostream& os,
                const ::st434::s377m::groups::TimecodeType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Timecode (::std::ostream& os,
                const ::st434::s377m::groups::TimecodeType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Timecode (::std::ostream& os,
                const ::st434::s377m::groups::TimecodeType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      Timecode (::xercesc::XMLFormatTarget& ft,
                const ::st434::s377m::groups::TimecodeType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Timecode (::xercesc::XMLFormatTarget& ft,
                const ::st434::s377m::groups::TimecodeType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      void
      Timecode (::xercesc::XMLFormatTarget& ft,
                const ::st434::s377m::groups::TimecodeType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      Timecode (::xercesc::DOMDocument& d,
                const ::st434::s377m::groups::TimecodeType& x,
                ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Timecode (const ::st434::s377m::groups::TimecodeType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const TimecodeType&);

      // Serialize to std::ostream.
      //

      void
      DescriptiveMarker_REF (::std::ostream& os,
                             const ::st434::s377m::types::Ref& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      void
      DescriptiveMarker_REF (::std::ostream& os,
                             const ::st434::s377m::types::Ref& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      void
      DescriptiveMarker_REF (::std::ostream& os,
                             const ::st434::s377m::types::Ref& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      DescriptiveMarker_REF (::xercesc::XMLFormatTarget& ft,
                             const ::st434::s377m::types::Ref& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      void
      DescriptiveMarker_REF (::xercesc::XMLFormatTarget& ft,
                             const ::st434::s377m::types::Ref& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      void
      DescriptiveMarker_REF (::xercesc::XMLFormatTarget& ft,
                             const ::st434::s377m::types::Ref& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      DescriptiveMarker_REF (::xercesc::DOMDocument& d,
                             const ::st434::s377m::types::Ref& x,
                             ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DescriptiveMarker_REF (const ::st434::s377m::types::Ref& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      DescriptiveMarker (::std::ostream& os,
                         const ::st434::s377m::groups::DescriptiveMarkerType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      DescriptiveMarker (::std::ostream& os,
                         const ::st434::s377m::groups::DescriptiveMarkerType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      DescriptiveMarker (::std::ostream& os,
                         const ::st434::s377m::groups::DescriptiveMarkerType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      DescriptiveMarker (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::groups::DescriptiveMarkerType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      DescriptiveMarker (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::groups::DescriptiveMarkerType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      DescriptiveMarker (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::groups::DescriptiveMarkerType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      DescriptiveMarker (::xercesc::DOMDocument& d,
                         const ::st434::s377m::groups::DescriptiveMarkerType& x,
                         ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DescriptiveMarker (const ::st434::s377m::groups::DescriptiveMarkerType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const DescriptiveMarkerType&);

      // Serialize to std::ostream.
      //

      void
      SourceClip_REF (::std::ostream& os,
                      const ::st434::s377m::types::Ref& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      SourceClip_REF (::std::ostream& os,
                      const ::st434::s377m::types::Ref& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      SourceClip_REF (::std::ostream& os,
                      const ::st434::s377m::types::Ref& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      SourceClip_REF (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::types::Ref& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      SourceClip_REF (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::types::Ref& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      SourceClip_REF (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::types::Ref& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      SourceClip_REF (::xercesc::DOMDocument& d,
                      const ::st434::s377m::types::Ref& x,
                      ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SourceClip_REF (const ::st434::s377m::types::Ref& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      SourceClip (::std::ostream& os,
                  const ::st434::s377m::groups::SourceClipType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      SourceClip (::std::ostream& os,
                  const ::st434::s377m::groups::SourceClipType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      SourceClip (::std::ostream& os,
                  const ::st434::s377m::groups::SourceClipType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      SourceClip (::xercesc::XMLFormatTarget& ft,
                  const ::st434::s377m::groups::SourceClipType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      SourceClip (::xercesc::XMLFormatTarget& ft,
                  const ::st434::s377m::groups::SourceClipType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      void
      SourceClip (::xercesc::XMLFormatTarget& ft,
                  const ::st434::s377m::groups::SourceClipType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      SourceClip (::xercesc::DOMDocument& d,
                  const ::st434::s377m::groups::SourceClipType& x,
                  ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SourceClip (const ::st434::s377m::groups::SourceClipType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const SourceClipType&);

      // Serialize to std::ostream.
      //

      void
      DescriptiveClip_REF (::std::ostream& os,
                           const ::st434::s377m::types::Ref& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      void
      DescriptiveClip_REF (::std::ostream& os,
                           const ::st434::s377m::types::Ref& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      void
      DescriptiveClip_REF (::std::ostream& os,
                           const ::st434::s377m::types::Ref& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      DescriptiveClip_REF (::xercesc::XMLFormatTarget& ft,
                           const ::st434::s377m::types::Ref& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      void
      DescriptiveClip_REF (::xercesc::XMLFormatTarget& ft,
                           const ::st434::s377m::types::Ref& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      void
      DescriptiveClip_REF (::xercesc::XMLFormatTarget& ft,
                           const ::st434::s377m::types::Ref& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      DescriptiveClip_REF (::xercesc::DOMDocument& d,
                           const ::st434::s377m::types::Ref& x,
                           ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DescriptiveClip_REF (const ::st434::s377m::types::Ref& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      DescriptiveClip (::std::ostream& os,
                       const ::st434::s377m::groups::DescriptiveClipType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      DescriptiveClip (::std::ostream& os,
                       const ::st434::s377m::groups::DescriptiveClipType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      DescriptiveClip (::std::ostream& os,
                       const ::st434::s377m::groups::DescriptiveClipType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      DescriptiveClip (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::groups::DescriptiveClipType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      DescriptiveClip (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::groups::DescriptiveClipType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      DescriptiveClip (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::groups::DescriptiveClipType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      DescriptiveClip (::xercesc::DOMDocument& d,
                       const ::st434::s377m::groups::DescriptiveClipType& x,
                       ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DescriptiveClip (const ::st434::s377m::groups::DescriptiveClipType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const DescriptiveClipType&);

      // Serialize to std::ostream.
      //

      void
      MaterialPackage_REF (::std::ostream& os,
                           const ::st434::s377m::types::Ref& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      void
      MaterialPackage_REF (::std::ostream& os,
                           const ::st434::s377m::types::Ref& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      void
      MaterialPackage_REF (::std::ostream& os,
                           const ::st434::s377m::types::Ref& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      MaterialPackage_REF (::xercesc::XMLFormatTarget& ft,
                           const ::st434::s377m::types::Ref& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      void
      MaterialPackage_REF (::xercesc::XMLFormatTarget& ft,
                           const ::st434::s377m::types::Ref& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      void
      MaterialPackage_REF (::xercesc::XMLFormatTarget& ft,
                           const ::st434::s377m::types::Ref& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      MaterialPackage_REF (::xercesc::DOMDocument& d,
                           const ::st434::s377m::types::Ref& x,
                           ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      MaterialPackage_REF (const ::st434::s377m::types::Ref& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      MaterialPackage (::std::ostream& os,
                       const ::st434::s377m::groups::MaterialPackageType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      MaterialPackage (::std::ostream& os,
                       const ::st434::s377m::groups::MaterialPackageType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      MaterialPackage (::std::ostream& os,
                       const ::st434::s377m::groups::MaterialPackageType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      MaterialPackage (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::groups::MaterialPackageType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      MaterialPackage (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::groups::MaterialPackageType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      MaterialPackage (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::groups::MaterialPackageType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      MaterialPackage (::xercesc::DOMDocument& d,
                       const ::st434::s377m::groups::MaterialPackageType& x,
                       ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      MaterialPackage (const ::st434::s377m::groups::MaterialPackageType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const MaterialPackageType&);

      // Serialize to std::ostream.
      //

      void
      SourcePackage_REF (::std::ostream& os,
                         const ::st434::s377m::types::Ref& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      SourcePackage_REF (::std::ostream& os,
                         const ::st434::s377m::types::Ref& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      SourcePackage_REF (::std::ostream& os,
                         const ::st434::s377m::types::Ref& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      SourcePackage_REF (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::types::Ref& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      SourcePackage_REF (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::types::Ref& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      SourcePackage_REF (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::types::Ref& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      SourcePackage_REF (::xercesc::DOMDocument& d,
                         const ::st434::s377m::types::Ref& x,
                         ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SourcePackage_REF (const ::st434::s377m::types::Ref& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      SourcePackage (::std::ostream& os,
                     const ::st434::s377m::groups::SourcePackageType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      SourcePackage (::std::ostream& os,
                     const ::st434::s377m::groups::SourcePackageType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      SourcePackage (::std::ostream& os,
                     const ::st434::s377m::groups::SourcePackageType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      SourcePackage (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s377m::groups::SourcePackageType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      SourcePackage (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s377m::groups::SourcePackageType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      void
      SourcePackage (::xercesc::XMLFormatTarget& ft,
                     const ::st434::s377m::groups::SourcePackageType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      SourcePackage (::xercesc::DOMDocument& d,
                     const ::st434::s377m::groups::SourcePackageType& x,
                     ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SourcePackage (const ::st434::s377m::groups::SourcePackageType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const SourcePackageType&);

      // Serialize to std::ostream.
      //

      void
      FileDescriptor_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      FileDescriptor_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      FileDescriptor_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      FileDescriptor_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      FileDescriptor_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      FileDescriptor_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      FileDescriptor_REF (::xercesc::DOMDocument& d,
                          const ::st434::s377m::types::Ref& x,
                          ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      FileDescriptor_REF (const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      FileDescriptor (::std::ostream& os,
                      const ::st434::s377m::groups::FileDescriptorType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      FileDescriptor (::std::ostream& os,
                      const ::st434::s377m::groups::FileDescriptorType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      FileDescriptor (::std::ostream& os,
                      const ::st434::s377m::groups::FileDescriptorType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      FileDescriptor (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::groups::FileDescriptorType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      FileDescriptor (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::groups::FileDescriptorType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      FileDescriptor (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::groups::FileDescriptorType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      FileDescriptor (::xercesc::DOMDocument& d,
                      const ::st434::s377m::groups::FileDescriptorType& x,
                      ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      FileDescriptor (const ::st434::s377m::groups::FileDescriptorType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const FileDescriptorType&);

      // Serialize to std::ostream.
      //

      void
      PictureDescriptor_REF (::std::ostream& os,
                             const ::st434::s377m::types::Ref& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      void
      PictureDescriptor_REF (::std::ostream& os,
                             const ::st434::s377m::types::Ref& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      void
      PictureDescriptor_REF (::std::ostream& os,
                             const ::st434::s377m::types::Ref& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      PictureDescriptor_REF (::xercesc::XMLFormatTarget& ft,
                             const ::st434::s377m::types::Ref& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      void
      PictureDescriptor_REF (::xercesc::XMLFormatTarget& ft,
                             const ::st434::s377m::types::Ref& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      void
      PictureDescriptor_REF (::xercesc::XMLFormatTarget& ft,
                             const ::st434::s377m::types::Ref& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      PictureDescriptor_REF (::xercesc::DOMDocument& d,
                             const ::st434::s377m::types::Ref& x,
                             ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      PictureDescriptor_REF (const ::st434::s377m::types::Ref& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      PictureDescriptor (::std::ostream& os,
                         const ::st434::s377m::groups::PictureDescriptorType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      PictureDescriptor (::std::ostream& os,
                         const ::st434::s377m::groups::PictureDescriptorType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      PictureDescriptor (::std::ostream& os,
                         const ::st434::s377m::groups::PictureDescriptorType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      PictureDescriptor (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::groups::PictureDescriptorType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      PictureDescriptor (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::groups::PictureDescriptorType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      void
      PictureDescriptor (::xercesc::XMLFormatTarget& ft,
                         const ::st434::s377m::groups::PictureDescriptorType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::string& e = "UTF-8",
                         ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      PictureDescriptor (::xercesc::DOMDocument& d,
                         const ::st434::s377m::groups::PictureDescriptorType& x,
                         ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      PictureDescriptor (const ::st434::s377m::groups::PictureDescriptorType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const PictureDescriptorType&);

      // Serialize to std::ostream.
      //

      void
      CDCIDescriptor_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      CDCIDescriptor_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      CDCIDescriptor_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      CDCIDescriptor_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      CDCIDescriptor_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      CDCIDescriptor_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      CDCIDescriptor_REF (::xercesc::DOMDocument& d,
                          const ::st434::s377m::types::Ref& x,
                          ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      CDCIDescriptor_REF (const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      CDCIDescriptor (::std::ostream& os,
                      const ::st434::s377m::groups::CDCIDescriptorType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      CDCIDescriptor (::std::ostream& os,
                      const ::st434::s377m::groups::CDCIDescriptorType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      CDCIDescriptor (::std::ostream& os,
                      const ::st434::s377m::groups::CDCIDescriptorType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      CDCIDescriptor (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::groups::CDCIDescriptorType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      CDCIDescriptor (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::groups::CDCIDescriptorType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      CDCIDescriptor (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::groups::CDCIDescriptorType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      CDCIDescriptor (::xercesc::DOMDocument& d,
                      const ::st434::s377m::groups::CDCIDescriptorType& x,
                      ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      CDCIDescriptor (const ::st434::s377m::groups::CDCIDescriptorType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const CDCIDescriptorType&);

      // Serialize to std::ostream.
      //

      void
      RGBADescriptor_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      RGBADescriptor_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      RGBADescriptor_REF (::std::ostream& os,
                          const ::st434::s377m::types::Ref& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      RGBADescriptor_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      RGBADescriptor_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      RGBADescriptor_REF (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::types::Ref& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      RGBADescriptor_REF (::xercesc::DOMDocument& d,
                          const ::st434::s377m::types::Ref& x,
                          ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      RGBADescriptor_REF (const ::st434::s377m::types::Ref& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      RGBADescriptor (::std::ostream& os,
                      const ::st434::s377m::groups::RGBADescriptorType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      RGBADescriptor (::std::ostream& os,
                      const ::st434::s377m::groups::RGBADescriptorType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      RGBADescriptor (::std::ostream& os,
                      const ::st434::s377m::groups::RGBADescriptorType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      RGBADescriptor (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::groups::RGBADescriptorType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      RGBADescriptor (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::groups::RGBADescriptorType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      void
      RGBADescriptor (::xercesc::XMLFormatTarget& ft,
                      const ::st434::s377m::groups::RGBADescriptorType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      RGBADescriptor (::xercesc::DOMDocument& d,
                      const ::st434::s377m::groups::RGBADescriptorType& x,
                      ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      RGBADescriptor (const ::st434::s377m::groups::RGBADescriptorType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const RGBADescriptorType&);

      // Serialize to std::ostream.
      //

      void
      SoundDescriptor_REF (::std::ostream& os,
                           const ::st434::s377m::types::Ref& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      void
      SoundDescriptor_REF (::std::ostream& os,
                           const ::st434::s377m::types::Ref& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      void
      SoundDescriptor_REF (::std::ostream& os,
                           const ::st434::s377m::types::Ref& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      SoundDescriptor_REF (::xercesc::XMLFormatTarget& ft,
                           const ::st434::s377m::types::Ref& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      void
      SoundDescriptor_REF (::xercesc::XMLFormatTarget& ft,
                           const ::st434::s377m::types::Ref& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      void
      SoundDescriptor_REF (::xercesc::XMLFormatTarget& ft,
                           const ::st434::s377m::types::Ref& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      SoundDescriptor_REF (::xercesc::DOMDocument& d,
                           const ::st434::s377m::types::Ref& x,
                           ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SoundDescriptor_REF (const ::st434::s377m::types::Ref& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      SoundDescriptor (::std::ostream& os,
                       const ::st434::s377m::groups::SoundDescriptorType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      SoundDescriptor (::std::ostream& os,
                       const ::st434::s377m::groups::SoundDescriptorType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      SoundDescriptor (::std::ostream& os,
                       const ::st434::s377m::groups::SoundDescriptorType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      SoundDescriptor (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::groups::SoundDescriptorType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      SoundDescriptor (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::groups::SoundDescriptorType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      void
      SoundDescriptor (::xercesc::XMLFormatTarget& ft,
                       const ::st434::s377m::groups::SoundDescriptorType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      SoundDescriptor (::xercesc::DOMDocument& d,
                       const ::st434::s377m::groups::SoundDescriptorType& x,
                       ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SoundDescriptor (const ::st434::s377m::groups::SoundDescriptorType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const SoundDescriptorType&);

      // Serialize to std::ostream.
      //

      void
      DataEssenceDescriptor_REF (::std::ostream& os,
                                 const ::st434::s377m::types::Ref& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

      void
      DataEssenceDescriptor_REF (::std::ostream& os,
                                 const ::st434::s377m::types::Ref& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

      void
      DataEssenceDescriptor_REF (::std::ostream& os,
                                 const ::st434::s377m::types::Ref& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      DataEssenceDescriptor_REF (::xercesc::XMLFormatTarget& ft,
                                 const ::st434::s377m::types::Ref& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

      void
      DataEssenceDescriptor_REF (::xercesc::XMLFormatTarget& ft,
                                 const ::st434::s377m::types::Ref& x, 
                                 ::xml_schema::error_handler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

      void
      DataEssenceDescriptor_REF (::xercesc::XMLFormatTarget& ft,
                                 const ::st434::s377m::types::Ref& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      DataEssenceDescriptor_REF (::xercesc::DOMDocument& d,
                                 const ::st434::s377m::types::Ref& x,
                                 ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DataEssenceDescriptor_REF (const ::st434::s377m::types::Ref& x, 
                                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                 ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      DataEssenceDescriptor (::std::ostream& os,
                             const ::st434::s377m::groups::DataEssenceDescriptorType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      void
      DataEssenceDescriptor (::std::ostream& os,
                             const ::st434::s377m::groups::DataEssenceDescriptorType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      void
      DataEssenceDescriptor (::std::ostream& os,
                             const ::st434::s377m::groups::DataEssenceDescriptorType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      DataEssenceDescriptor (::xercesc::XMLFormatTarget& ft,
                             const ::st434::s377m::groups::DataEssenceDescriptorType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      void
      DataEssenceDescriptor (::xercesc::XMLFormatTarget& ft,
                             const ::st434::s377m::groups::DataEssenceDescriptorType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      void
      DataEssenceDescriptor (::xercesc::XMLFormatTarget& ft,
                             const ::st434::s377m::groups::DataEssenceDescriptorType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::string& e = "UTF-8",
                             ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      DataEssenceDescriptor (::xercesc::DOMDocument& d,
                             const ::st434::s377m::groups::DataEssenceDescriptorType& x,
                             ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DataEssenceDescriptor (const ::st434::s377m::groups::DataEssenceDescriptorType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const DataEssenceDescriptorType&);

      // Serialize to std::ostream.
      //

      void
      MultipleDescriptor_REF (::std::ostream& os,
                              const ::st434::s377m::types::Ref& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

      void
      MultipleDescriptor_REF (::std::ostream& os,
                              const ::st434::s377m::types::Ref& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

      void
      MultipleDescriptor_REF (::std::ostream& os,
                              const ::st434::s377m::types::Ref& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      MultipleDescriptor_REF (::xercesc::XMLFormatTarget& ft,
                              const ::st434::s377m::types::Ref& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

      void
      MultipleDescriptor_REF (::xercesc::XMLFormatTarget& ft,
                              const ::st434::s377m::types::Ref& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

      void
      MultipleDescriptor_REF (::xercesc::XMLFormatTarget& ft,
                              const ::st434::s377m::types::Ref& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      MultipleDescriptor_REF (::xercesc::DOMDocument& d,
                              const ::st434::s377m::types::Ref& x,
                              ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      MultipleDescriptor_REF (const ::st434::s377m::types::Ref& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

      // Serialize to std::ostream.
      //

      void
      MultipleDescriptor (::std::ostream& os,
                          const ::st434::s377m::groups::MultipleDescriptorType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      MultipleDescriptor (::std::ostream& os,
                          const ::st434::s377m::groups::MultipleDescriptorType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      MultipleDescriptor (::std::ostream& os,
                          const ::st434::s377m::groups::MultipleDescriptorType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to xercesc::XMLFormatTarget.
      //

      void
      MultipleDescriptor (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::groups::MultipleDescriptorType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      MultipleDescriptor (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::groups::MultipleDescriptorType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      void
      MultipleDescriptor (::xercesc::XMLFormatTarget& ft,
                          const ::st434::s377m::groups::MultipleDescriptorType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

      // Serialize to an existing xercesc::DOMDocument.
      //

      void
      MultipleDescriptor (::xercesc::DOMDocument& d,
                          const ::st434::s377m::groups::MultipleDescriptorType& x,
                          ::xml_schema::flags f = 0);

      // Serialize to a new xercesc::DOMDocument.
      //

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      MultipleDescriptor (const ::st434::s377m::groups::MultipleDescriptorType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

      void
      operator<< (::xercesc::DOMElement&, const MultipleDescriptorType&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // GROUPS_S377M_METADATA_HXX
