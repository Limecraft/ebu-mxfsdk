// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef DATA_TYPES_S422M_TYPES_HXX
#define DATA_TYPES_S422M_TYPES_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace st434
{
  namespace s422m
  {
    namespace types
    {
      class J2KPictureComponentType;
      class J2KCodingStyleDefault;
      class J2KQuantisationDefault;
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "dataTypes/s377m_types.hxx"

namespace st434
{
  namespace s422m
  {
    namespace types
    {
      class J2KPictureComponentType: public ::xml_schema::type
      {
        public:
        // Ssizi
        // 
        typedef ::st434::s377m::types::UInt8 Ssizi_type;
        typedef ::xsd::cxx::tree::traits< Ssizi_type, char > Ssizi_traits;

        const Ssizi_type&
        Ssizi () const;

        Ssizi_type&
        Ssizi ();

        void
        Ssizi (const Ssizi_type& x);

        void
        Ssizi (::std::auto_ptr< Ssizi_type > p);

        // XRSizi
        // 
        typedef ::st434::s377m::types::UInt8 XRSizi_type;
        typedef ::xsd::cxx::tree::traits< XRSizi_type, char > XRSizi_traits;

        const XRSizi_type&
        XRSizi () const;

        XRSizi_type&
        XRSizi ();

        void
        XRSizi (const XRSizi_type& x);

        void
        XRSizi (::std::auto_ptr< XRSizi_type > p);

        // YRSizi
        // 
        typedef ::st434::s377m::types::UInt8 YRSizi_type;
        typedef ::xsd::cxx::tree::traits< YRSizi_type, char > YRSizi_traits;

        const YRSizi_type&
        YRSizi () const;

        YRSizi_type&
        YRSizi ();

        void
        YRSizi (const YRSizi_type& x);

        void
        YRSizi (::std::auto_ptr< YRSizi_type > p);

        // Constructors.
        //
        J2KPictureComponentType (const Ssizi_type&,
                                 const XRSizi_type&,
                                 const YRSizi_type&);

        J2KPictureComponentType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

        J2KPictureComponentType (const J2KPictureComponentType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

        virtual J2KPictureComponentType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~J2KPictureComponentType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< Ssizi_type > Ssizi_;
        ::xsd::cxx::tree::one< XRSizi_type > XRSizi_;
        ::xsd::cxx::tree::one< YRSizi_type > YRSizi_;
      };

      class J2KCodingStyleDefault: public ::xml_schema::type
      {
        public:
        // Scod
        // 
        typedef ::st434::s377m::types::UInt8 Scod_type;
        typedef ::xsd::cxx::tree::traits< Scod_type, char > Scod_traits;

        const Scod_type&
        Scod () const;

        Scod_type&
        Scod ();

        void
        Scod (const Scod_type& x);

        void
        Scod (::std::auto_ptr< Scod_type > p);

        // SGcod
        // 
        typedef ::st434::s377m::types::UInt32 SGcod_type;
        typedef ::xsd::cxx::tree::traits< SGcod_type, char > SGcod_traits;

        const SGcod_type&
        SGcod () const;

        SGcod_type&
        SGcod ();

        void
        SGcod (const SGcod_type& x);

        void
        SGcod (::std::auto_ptr< SGcod_type > p);

        // SPcod
        // 
        typedef ::st434::s377m::types::DataStream SPcod_type;
        typedef ::xsd::cxx::tree::traits< SPcod_type, char > SPcod_traits;

        const SPcod_type&
        SPcod () const;

        SPcod_type&
        SPcod ();

        void
        SPcod (const SPcod_type& x);

        void
        SPcod (::std::auto_ptr< SPcod_type > p);

        // Constructors.
        //
        J2KCodingStyleDefault (const Scod_type&,
                               const SGcod_type&,
                               const SPcod_type&);

        J2KCodingStyleDefault (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

        J2KCodingStyleDefault (const J2KCodingStyleDefault& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

        virtual J2KCodingStyleDefault*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~J2KCodingStyleDefault ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< Scod_type > Scod_;
        ::xsd::cxx::tree::one< SGcod_type > SGcod_;
        ::xsd::cxx::tree::one< SPcod_type > SPcod_;
      };

      class J2KQuantisationDefault: public ::xml_schema::type
      {
        public:
        // Sqcd
        // 
        typedef ::st434::s377m::types::UInt8 Sqcd_type;
        typedef ::xsd::cxx::tree::traits< Sqcd_type, char > Sqcd_traits;

        const Sqcd_type&
        Sqcd () const;

        Sqcd_type&
        Sqcd ();

        void
        Sqcd (const Sqcd_type& x);

        void
        Sqcd (::std::auto_ptr< Sqcd_type > p);

        // SPgcd
        // 
        typedef ::st434::s377m::types::DataStream SPgcd_type;
        typedef ::xsd::cxx::tree::traits< SPgcd_type, char > SPgcd_traits;

        const SPgcd_type&
        SPgcd () const;

        SPgcd_type&
        SPgcd ();

        void
        SPgcd (const SPgcd_type& x);

        void
        SPgcd (::std::auto_ptr< SPgcd_type > p);

        // Constructors.
        //
        J2KQuantisationDefault (const Sqcd_type&,
                                const SPgcd_type&);

        J2KQuantisationDefault (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

        J2KQuantisationDefault (const J2KQuantisationDefault& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

        virtual J2KQuantisationDefault*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~J2KQuantisationDefault ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< Sqcd_type > Sqcd_;
        ::xsd::cxx::tree::one< SPgcd_type > SPgcd_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace st434
{
  namespace s422m
  {
    namespace types
    {
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace st434
{
  namespace s422m
  {
    namespace types
    {
      void
      operator<< (::xercesc::DOMElement&, const J2KPictureComponentType&);

      void
      operator<< (::xercesc::DOMElement&, const J2KCodingStyleDefault&);

      void
      operator<< (::xercesc::DOMElement&, const J2KQuantisationDefault&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // DATA_TYPES_S422M_TYPES_HXX
