// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef DATA_TYPES_S377M_TYPES_HXX
#define DATA_TYPES_S377M_TYPES_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace st434
{
  namespace s377m
  {
    namespace types
    {
      class Boolean;
      class Float;
      class Int8;
      class Int16;
      class Int32;
      class Int64;
      class Length;
      class Position;
      class UInt8;
      class UInt16;
      class UInt32;
      class UInt64;
      class UID;
      class LocalTag;
      class UL;
      class UMID32;
      class UMID64;
      class UUID;
      class KLVKey;
      class VersionType;
      class Collection;
      class Array;
      class Batch;
      class DataStream;
      class Rational;
      class EditRate;
      class ISO7bitCharString;
      class UTF16CharString;
      class TimestampType;
      class ProductVersionType;
      class RGBAComponentType;
      class RGBALayout;
      class Orientation;
      class SignalStandard;
      class Ref;
      class StrongRefHolder;
      class WeakRefHolder;
      class StrongRefArray;
      class StrongRefBatch;
      class StrongRefCollection;
      class WeakRefArray;
      class WeakRefBatch;
      class WeakRefCollection;
      class Year;
      class Month;
      class Day;
      class Hour;
      class Minute;
      class Second;
      class mSec4;
      class Release;
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace st434
{
  namespace s377m
  {
    namespace types
    {
      class Boolean: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::boolean, char, ::xml_schema::simple_type >
      {
        public:
        // Constructors.
        //
        Boolean (const ::xml_schema::boolean&);

        Boolean (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

        Boolean (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

        Boolean (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

        Boolean (const Boolean& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

        virtual Boolean*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~Boolean ();
      };

      class Float: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >
      {
        public:
        // Constructors.
        //
        Float (const ::xml_schema::double_&);

        Float (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        Float (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        Float (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        Float (const Float& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        virtual Float*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~Float ();
      };

      class Int8: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::byte, char, ::xml_schema::simple_type >
      {
        public:
        // Constructors.
        //
        Int8 (const ::xml_schema::byte&);

        Int8 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

        Int8 (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

        Int8 (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

        Int8 (const Int8& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

        virtual Int8*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~Int8 ();
      };

      class Int16: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::short_, char, ::xml_schema::simple_type >
      {
        public:
        // Constructors.
        //
        Int16 (const ::xml_schema::short_&);

        Int16 (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        Int16 (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        Int16 (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        Int16 (const Int16& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        virtual Int16*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~Int16 ();
      };

      class Int32: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
      {
        public:
        // Constructors.
        //
        Int32 (const ::xml_schema::integer&);

        Int32 (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        Int32 (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        Int32 (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        Int32 (const Int32& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        virtual Int32*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~Int32 ();
      };

      class Int64: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >
      {
        public:
        // Constructors.
        //
        Int64 (const ::xml_schema::long_&);

        Int64 (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        Int64 (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        Int64 (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        Int64 (const Int64& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        virtual Int64*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~Int64 ();
      };

      class Length: public ::st434::s377m::types::Int64
      {
        public:
        // Constructors.
        //
        Length (const ::xml_schema::long_&);

        Length (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        Length (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        Length (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        Length (const Length& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        virtual Length*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~Length ();
      };

      class Position: public ::st434::s377m::types::Int64
      {
        public:
        // Constructors.
        //
        Position (const ::xml_schema::long_&);

        Position (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

        Position (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

        Position (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

        Position (const Position& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

        virtual Position*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~Position ();
      };

      class UInt8: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, char, ::xml_schema::simple_type >
      {
        public:
        // Constructors.
        //
        UInt8 (const ::xml_schema::unsigned_byte&);

        UInt8 (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        UInt8 (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        UInt8 (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        UInt8 (const UInt8& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        virtual UInt8*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~UInt8 ();
      };

      class UInt16: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type >
      {
        public:
        // Constructors.
        //
        UInt16 (const ::xml_schema::unsigned_short&);

        UInt16 (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        UInt16 (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        UInt16 (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        UInt16 (const UInt16& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        virtual UInt16*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~UInt16 ();
      };

      class UInt32: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, char, ::xml_schema::simple_type >
      {
        public:
        // Constructors.
        //
        UInt32 (const ::xml_schema::unsigned_int&);

        UInt32 (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        UInt32 (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        UInt32 (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        UInt32 (const UInt32& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        virtual UInt32*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~UInt32 ();
      };

      class UInt64: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_long, char, ::xml_schema::simple_type >
      {
        public:
        // Constructors.
        //
        UInt64 (const ::xml_schema::unsigned_long&);

        UInt64 (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        UInt64 (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        UInt64 (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        UInt64 (const UInt64& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        virtual UInt64*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~UInt64 ();
      };

      class UID: public ::xml_schema::string
      {
        public:
        // Constructors.
        //
        UID ();

        UID (const char*);

        UID (const ::std::string&);

        UID (const ::xml_schema::string&);

        UID (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

        UID (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

        UID (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

        UID (const UID& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

        virtual UID*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~UID ();
      };

      class LocalTag: public ::xml_schema::string
      {
        public:
        // Constructors.
        //
        LocalTag ();

        LocalTag (const char*);

        LocalTag (const ::std::string&);

        LocalTag (const ::xml_schema::string&);

        LocalTag (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

        LocalTag (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

        LocalTag (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

        LocalTag (const LocalTag& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

        virtual LocalTag*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~LocalTag ();
      };

      class UL: public ::st434::s377m::types::UID
      {
        public:
        // Constructors.
        //
        UL ();

        UL (const char*);

        UL (const ::std::string&);

        UL (const ::xml_schema::string&);

        UL (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

        UL (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

        UL (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

        UL (const UL& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

        virtual UL*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~UL ();
      };

      class UMID32: public ::st434::s377m::types::UID
      {
        public:
        // Constructors.
        //
        UMID32 ();

        UMID32 (const char*);

        UMID32 (const ::std::string&);

        UMID32 (const ::xml_schema::string&);

        UMID32 (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        UMID32 (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        UMID32 (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        UMID32 (const UMID32& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        virtual UMID32*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~UMID32 ();
      };

      class UMID64: public ::st434::s377m::types::UID
      {
        public:
        // Constructors.
        //
        UMID64 ();

        UMID64 (const char*);

        UMID64 (const ::std::string&);

        UMID64 (const ::xml_schema::string&);

        UMID64 (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        UMID64 (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        UMID64 (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        UMID64 (const UMID64& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        virtual UMID64*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~UMID64 ();
      };

      class UUID: public ::st434::s377m::types::UID
      {
        public:
        // Constructors.
        //
        UUID ();

        UUID (const char*);

        UUID (const ::std::string&);

        UUID (const ::xml_schema::string&);

        UUID (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

        UUID (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

        UUID (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

        UUID (const UUID& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

        virtual UUID*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~UUID ();
      };

      class KLVKey: public ::st434::s377m::types::UID
      {
        public:
        // Constructors.
        //
        KLVKey ();

        KLVKey (const char*);

        KLVKey (const ::std::string&);

        KLVKey (const ::xml_schema::string&);

        KLVKey (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        KLVKey (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        KLVKey (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        KLVKey (const KLVKey& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        virtual KLVKey*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~KLVKey ();
      };

      class VersionType: public ::st434::s377m::types::UInt16
      {
        public:
        // Constructors.
        //
        VersionType (const ::xml_schema::unsigned_short&);

        VersionType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

        VersionType (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

        VersionType (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

        VersionType (const VersionType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

        virtual VersionType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~VersionType ();
      };

      class Collection: public ::xml_schema::type
      {
        public:
        // Constructors.
        //
        Collection ();

        Collection (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

        Collection (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

        Collection (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

        Collection (const Collection& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

        virtual Collection*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~Collection ();
      };

      class Array: public ::st434::s377m::types::Collection
      {
        public:
        // Constructors.
        //
        Array ();

        Array (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        Array (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        Array (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        Array (const Array& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        virtual Array*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~Array ();
      };

      class Batch: public ::st434::s377m::types::Collection
      {
        public:
        // Constructors.
        //
        Batch ();

        Batch (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        Batch (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        Batch (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        Batch (const Batch& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        virtual Batch*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~Batch ();
      };

      class DataStream: public ::xml_schema::hex_binary
      {
        public:
        // Constructors.
        //
        DataStream ();

        DataStream (const ::xml_schema::hex_binary&);

        DataStream (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

        DataStream (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

        DataStream (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

        DataStream (const DataStream& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

        virtual DataStream*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~DataStream ();
      };

      class Rational: public ::xml_schema::type
      {
        public:
        // Numerator
        // 
        typedef ::st434::s377m::types::Int32 Numerator_type;
        typedef ::xsd::cxx::tree::traits< Numerator_type, char > Numerator_traits;

        const Numerator_type&
        Numerator () const;

        Numerator_type&
        Numerator ();

        void
        Numerator (const Numerator_type& x);

        void
        Numerator (::std::auto_ptr< Numerator_type > p);

        // Denominator
        // 
        typedef ::st434::s377m::types::Int32 Denominator_type;
        typedef ::xsd::cxx::tree::traits< Denominator_type, char > Denominator_traits;

        const Denominator_type&
        Denominator () const;

        Denominator_type&
        Denominator ();

        void
        Denominator (const Denominator_type& x);

        void
        Denominator (::std::auto_ptr< Denominator_type > p);

        // Constructors.
        //
        Rational (const Numerator_type&,
                  const Denominator_type&);

        Rational (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

        Rational (const Rational& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

        virtual Rational*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~Rational ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< Numerator_type > Numerator_;
        ::xsd::cxx::tree::one< Denominator_type > Denominator_;
      };

      class EditRate: public ::st434::s377m::types::Rational
      {
        public:
        // Constructors.
        //
        EditRate (const Numerator_type&,
                  const Denominator_type&);

        EditRate (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

        EditRate (const EditRate& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

        virtual EditRate*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~EditRate ();
      };

      class ISO7bitCharString: public ::xml_schema::string
      {
        public:
        // Constructors.
        //
        ISO7bitCharString ();

        ISO7bitCharString (const char*);

        ISO7bitCharString (const ::std::string&);

        ISO7bitCharString (const ::xml_schema::string&);

        ISO7bitCharString (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        ISO7bitCharString (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        ISO7bitCharString (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        ISO7bitCharString (const ISO7bitCharString& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        virtual ISO7bitCharString*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~ISO7bitCharString ();
      };

      class UTF16CharString: public ::xml_schema::string
      {
        public:
        // Constructors.
        //
        UTF16CharString ();

        UTF16CharString (const char*);

        UTF16CharString (const ::std::string&);

        UTF16CharString (const ::xml_schema::string&);

        UTF16CharString (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        UTF16CharString (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        UTF16CharString (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        UTF16CharString (const UTF16CharString& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        virtual UTF16CharString*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~UTF16CharString ();
      };

      class TimestampType: public ::xml_schema::type
      {
        public:
        // Year
        // 
        typedef ::st434::s377m::types::Year Year_type;
        typedef ::xsd::cxx::tree::traits< Year_type, char > Year_traits;

        const Year_type&
        Year () const;

        Year_type&
        Year ();

        void
        Year (const Year_type& x);

        void
        Year (::std::auto_ptr< Year_type > p);

        // Month
        // 
        typedef ::st434::s377m::types::Month Month_type;
        typedef ::xsd::cxx::tree::traits< Month_type, char > Month_traits;

        const Month_type&
        Month () const;

        Month_type&
        Month ();

        void
        Month (const Month_type& x);

        void
        Month (::std::auto_ptr< Month_type > p);

        // Day
        // 
        typedef ::st434::s377m::types::Day Day_type;
        typedef ::xsd::cxx::tree::traits< Day_type, char > Day_traits;

        const Day_type&
        Day () const;

        Day_type&
        Day ();

        void
        Day (const Day_type& x);

        void
        Day (::std::auto_ptr< Day_type > p);

        // Hour
        // 
        typedef ::st434::s377m::types::Hour Hour_type;
        typedef ::xsd::cxx::tree::traits< Hour_type, char > Hour_traits;

        const Hour_type&
        Hour () const;

        Hour_type&
        Hour ();

        void
        Hour (const Hour_type& x);

        void
        Hour (::std::auto_ptr< Hour_type > p);

        // Minute
        // 
        typedef ::st434::s377m::types::Minute Minute_type;
        typedef ::xsd::cxx::tree::traits< Minute_type, char > Minute_traits;

        const Minute_type&
        Minute () const;

        Minute_type&
        Minute ();

        void
        Minute (const Minute_type& x);

        void
        Minute (::std::auto_ptr< Minute_type > p);

        // Second
        // 
        typedef ::st434::s377m::types::Second Second_type;
        typedef ::xsd::cxx::tree::traits< Second_type, char > Second_traits;

        const Second_type&
        Second () const;

        Second_type&
        Second ();

        void
        Second (const Second_type& x);

        void
        Second (::std::auto_ptr< Second_type > p);

        // mSec4
        // 
        typedef ::st434::s377m::types::mSec4 mSec4_type;
        typedef ::xsd::cxx::tree::traits< mSec4_type, char > mSec4_traits;

        const mSec4_type&
        mSec4 () const;

        mSec4_type&
        mSec4 ();

        void
        mSec4 (const mSec4_type& x);

        void
        mSec4 (::std::auto_ptr< mSec4_type > p);

        // Constructors.
        //
        TimestampType (const Year_type&,
                       const Month_type&,
                       const Day_type&,
                       const Hour_type&,
                       const Minute_type&,
                       const Second_type&,
                       const mSec4_type&);

        TimestampType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

        TimestampType (const TimestampType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

        virtual TimestampType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~TimestampType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< Year_type > Year_;
        ::xsd::cxx::tree::one< Month_type > Month_;
        ::xsd::cxx::tree::one< Day_type > Day_;
        ::xsd::cxx::tree::one< Hour_type > Hour_;
        ::xsd::cxx::tree::one< Minute_type > Minute_;
        ::xsd::cxx::tree::one< Second_type > Second_;
        ::xsd::cxx::tree::one< mSec4_type > mSec4_;
      };

      class ProductVersionType: public ::xml_schema::type
      {
        public:
        // Major
        // 
        typedef ::st434::s377m::types::UInt8 Major_type;
        typedef ::xsd::cxx::tree::traits< Major_type, char > Major_traits;

        const Major_type&
        Major () const;

        Major_type&
        Major ();

        void
        Major (const Major_type& x);

        void
        Major (::std::auto_ptr< Major_type > p);

        // Minor
        // 
        typedef ::st434::s377m::types::UInt8 Minor_type;
        typedef ::xsd::cxx::tree::traits< Minor_type, char > Minor_traits;

        const Minor_type&
        Minor () const;

        Minor_type&
        Minor ();

        void
        Minor (const Minor_type& x);

        void
        Minor (::std::auto_ptr< Minor_type > p);

        // Patch
        // 
        typedef ::st434::s377m::types::UInt8 Patch_type;
        typedef ::xsd::cxx::tree::traits< Patch_type, char > Patch_traits;

        const Patch_type&
        Patch () const;

        Patch_type&
        Patch ();

        void
        Patch (const Patch_type& x);

        void
        Patch (::std::auto_ptr< Patch_type > p);

        // Build
        // 
        typedef ::st434::s377m::types::UInt8 Build_type;
        typedef ::xsd::cxx::tree::traits< Build_type, char > Build_traits;

        const Build_type&
        Build () const;

        Build_type&
        Build ();

        void
        Build (const Build_type& x);

        void
        Build (::std::auto_ptr< Build_type > p);

        // Release
        // 
        typedef ::st434::s377m::types::Release Release_type;
        typedef ::xsd::cxx::tree::traits< Release_type, char > Release_traits;

        const Release_type&
        Release () const;

        Release_type&
        Release ();

        void
        Release (const Release_type& x);

        void
        Release (::std::auto_ptr< Release_type > p);

        // Constructors.
        //
        ProductVersionType (const Major_type&,
                            const Minor_type&,
                            const Patch_type&,
                            const Build_type&,
                            const Release_type&);

        ProductVersionType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        ProductVersionType (const ProductVersionType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

        virtual ProductVersionType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~ProductVersionType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< Major_type > Major_;
        ::xsd::cxx::tree::one< Minor_type > Minor_;
        ::xsd::cxx::tree::one< Patch_type > Patch_;
        ::xsd::cxx::tree::one< Build_type > Build_;
        ::xsd::cxx::tree::one< Release_type > Release_;
      };

      class RGBAComponentType: public ::xml_schema::type
      {
        public:
        // Code
        // 
        typedef ::st434::s377m::types::UInt8 Code_type;
        typedef ::xsd::cxx::tree::traits< Code_type, char > Code_traits;

        const Code_type&
        Code () const;

        Code_type&
        Code ();

        void
        Code (const Code_type& x);

        void
        Code (::std::auto_ptr< Code_type > p);

        // Depth
        // 
        typedef ::st434::s377m::types::UInt8 Depth_type;
        typedef ::xsd::cxx::tree::traits< Depth_type, char > Depth_traits;

        const Depth_type&
        Depth () const;

        Depth_type&
        Depth ();

        void
        Depth (const Depth_type& x);

        void
        Depth (::std::auto_ptr< Depth_type > p);

        // Constructors.
        //
        RGBAComponentType (const Code_type&,
                           const Depth_type&);

        RGBAComponentType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        RGBAComponentType (const RGBAComponentType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        virtual RGBAComponentType*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~RGBAComponentType ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< Code_type > Code_;
        ::xsd::cxx::tree::one< Depth_type > Depth_;
      };

      class RGBALayout: public ::xml_schema::type
      {
        public:
        // RGBAComponent
        // 
        typedef ::st434::s377m::types::RGBAComponentType RGBAComponent_type;
        typedef ::xsd::cxx::tree::sequence< RGBAComponent_type > RGBAComponent_sequence;
        typedef RGBAComponent_sequence::iterator RGBAComponent_iterator;
        typedef RGBAComponent_sequence::const_iterator RGBAComponent_const_iterator;
        typedef ::xsd::cxx::tree::traits< RGBAComponent_type, char > RGBAComponent_traits;

        const RGBAComponent_sequence&
        RGBAComponent () const;

        RGBAComponent_sequence&
        RGBAComponent ();

        void
        RGBAComponent (const RGBAComponent_sequence& s);

        // Constructors.
        //
        RGBALayout ();

        RGBALayout (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

        RGBALayout (const RGBALayout& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

        virtual RGBALayout*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~RGBALayout ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        RGBAComponent_sequence RGBAComponent_;
      };

      class Orientation: public ::st434::s377m::types::UInt8
      {
        public:
        // Constructors.
        //
        Orientation (const ::xml_schema::unsigned_byte&);

        Orientation (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

        Orientation (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

        Orientation (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

        Orientation (const Orientation& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

        virtual Orientation*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~Orientation ();
      };

      class SignalStandard: public ::st434::s377m::types::UInt8
      {
        public:
        // Constructors.
        //
        SignalStandard (const ::xml_schema::unsigned_byte&);

        SignalStandard (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        SignalStandard (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        SignalStandard (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        SignalStandard (const SignalStandard& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        virtual SignalStandard*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~SignalStandard ();
      };

      class Ref: public ::xml_schema::type
      {
        public:
        // TargetInstance
        // 
        typedef ::st434::s377m::types::UUID TargetInstance_type;
        typedef ::xsd::cxx::tree::traits< TargetInstance_type, char > TargetInstance_traits;

        const TargetInstance_type&
        TargetInstance () const;

        TargetInstance_type&
        TargetInstance ();

        void
        TargetInstance (const TargetInstance_type& x);

        void
        TargetInstance (::std::auto_ptr< TargetInstance_type > p);

        // Constructors.
        //
        Ref (const TargetInstance_type&);

        Ref (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

        Ref (const Ref& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

        virtual Ref*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~Ref ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ::xsd::cxx::tree::one< TargetInstance_type > TargetInstance_;
      };

      class StrongRefHolder: public ::xml_schema::type
      {
        public:
        // Constructors.
        //
        StrongRefHolder ();

        StrongRefHolder (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        StrongRefHolder (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        StrongRefHolder (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        StrongRefHolder (const StrongRefHolder& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

        virtual StrongRefHolder*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~StrongRefHolder ();
      };

      class WeakRefHolder: public ::xml_schema::type
      {
        public:
        // Constructors.
        //
        WeakRefHolder ();

        WeakRefHolder (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

        WeakRefHolder (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

        WeakRefHolder (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

        WeakRefHolder (const WeakRefHolder& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

        virtual WeakRefHolder*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~WeakRefHolder ();
      };

      class StrongRefArray: public ::xml_schema::type
      {
        public:
        // Constructors.
        //
        StrongRefArray ();

        StrongRefArray (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        StrongRefArray (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        StrongRefArray (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        StrongRefArray (const StrongRefArray& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        virtual StrongRefArray*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~StrongRefArray ();
      };

      class StrongRefBatch: public ::xml_schema::type
      {
        public:
        // Constructors.
        //
        StrongRefBatch ();

        StrongRefBatch (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        StrongRefBatch (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        StrongRefBatch (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        StrongRefBatch (const StrongRefBatch& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        virtual StrongRefBatch*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~StrongRefBatch ();
      };

      class StrongRefCollection: public ::xml_schema::type
      {
        public:
        // Constructors.
        //
        StrongRefCollection ();

        StrongRefCollection (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

        StrongRefCollection (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

        StrongRefCollection (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

        StrongRefCollection (const StrongRefCollection& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

        virtual StrongRefCollection*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~StrongRefCollection ();
      };

      class WeakRefArray: public ::xml_schema::type
      {
        public:
        // Constructors.
        //
        WeakRefArray ();

        WeakRefArray (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        WeakRefArray (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        WeakRefArray (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        WeakRefArray (const WeakRefArray& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        virtual WeakRefArray*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~WeakRefArray ();
      };

      class WeakRefBatch: public ::xml_schema::type
      {
        public:
        // Constructors.
        //
        WeakRefBatch ();

        WeakRefBatch (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        WeakRefBatch (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        WeakRefBatch (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        WeakRefBatch (const WeakRefBatch& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

        virtual WeakRefBatch*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~WeakRefBatch ();
      };

      class WeakRefCollection: public ::xml_schema::type
      {
        public:
        // Constructors.
        //
        WeakRefCollection ();

        WeakRefCollection (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        WeakRefCollection (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        WeakRefCollection (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        WeakRefCollection (const WeakRefCollection& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        virtual WeakRefCollection*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~WeakRefCollection ();
      };

      class Year: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type >
      {
        public:
        // Constructors.
        //
        Year (const ::xml_schema::unsigned_short&);

        Year (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

        Year (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

        Year (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

        Year (const Year& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

        virtual Year*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~Year ();
      };

      class Month: public ::st434::s377m::types::UInt8
      {
        public:
        // Constructors.
        //
        Month (const ::xml_schema::unsigned_byte&);

        Month (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        Month (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        Month (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        Month (const Month& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        virtual Month*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~Month ();
      };

      class Day: public ::st434::s377m::types::UInt8
      {
        public:
        // Constructors.
        //
        Day (const ::xml_schema::unsigned_byte&);

        Day (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

        Day (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

        Day (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

        Day (const Day& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

        virtual Day*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~Day ();
      };

      class Hour: public ::st434::s377m::types::UInt8
      {
        public:
        // Constructors.
        //
        Hour (const ::xml_schema::unsigned_byte&);

        Hour (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

        Hour (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

        Hour (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

        Hour (const Hour& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

        virtual Hour*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~Hour ();
      };

      class Minute: public ::st434::s377m::types::UInt8
      {
        public:
        // Constructors.
        //
        Minute (const ::xml_schema::unsigned_byte&);

        Minute (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        Minute (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        Minute (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        Minute (const Minute& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        virtual Minute*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~Minute ();
      };

      class Second: public ::st434::s377m::types::UInt8
      {
        public:
        // Constructors.
        //
        Second (const ::xml_schema::unsigned_byte&);

        Second (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        Second (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        Second (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        Second (const Second& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

        virtual Second*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~Second ();
      };

      class mSec4: public ::st434::s377m::types::UInt8
      {
        public:
        // Constructors.
        //
        mSec4 (const ::xml_schema::unsigned_byte&);

        mSec4 (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        mSec4 (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        mSec4 (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        mSec4 (const mSec4& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

        virtual mSec4*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        virtual 
        ~mSec4 ();
      };

      class Release: public ::st434::s377m::types::UInt8
      {
        public:
        Release (::xml_schema::unsigned_byte v);

        Release (const ::st434::s377m::types::UInt8& v);

        Release (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

        Release (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

        Release (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

        Release (const Release& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

        virtual Release*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace st434
{
  namespace s377m
  {
    namespace types
    {
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace st434
{
  namespace s377m
  {
    namespace types
    {
      void
      operator<< (::xercesc::DOMElement&, const Boolean&);

      void
      operator<< (::xercesc::DOMAttr&, const Boolean&);

      void
      operator<< (::xml_schema::list_stream&,
                  const Boolean&);

      void
      operator<< (::xercesc::DOMElement&, const Float&);

      void
      operator<< (::xercesc::DOMAttr&, const Float&);

      void
      operator<< (::xml_schema::list_stream&,
                  const Float&);

      void
      operator<< (::xercesc::DOMElement&, const Int8&);

      void
      operator<< (::xercesc::DOMAttr&, const Int8&);

      void
      operator<< (::xml_schema::list_stream&,
                  const Int8&);

      void
      operator<< (::xercesc::DOMElement&, const Int16&);

      void
      operator<< (::xercesc::DOMAttr&, const Int16&);

      void
      operator<< (::xml_schema::list_stream&,
                  const Int16&);

      void
      operator<< (::xercesc::DOMElement&, const Int32&);

      void
      operator<< (::xercesc::DOMAttr&, const Int32&);

      void
      operator<< (::xml_schema::list_stream&,
                  const Int32&);

      void
      operator<< (::xercesc::DOMElement&, const Int64&);

      void
      operator<< (::xercesc::DOMAttr&, const Int64&);

      void
      operator<< (::xml_schema::list_stream&,
                  const Int64&);

      void
      operator<< (::xercesc::DOMElement&, const Length&);

      void
      operator<< (::xercesc::DOMAttr&, const Length&);

      void
      operator<< (::xml_schema::list_stream&,
                  const Length&);

      void
      operator<< (::xercesc::DOMElement&, const Position&);

      void
      operator<< (::xercesc::DOMAttr&, const Position&);

      void
      operator<< (::xml_schema::list_stream&,
                  const Position&);

      void
      operator<< (::xercesc::DOMElement&, const UInt8&);

      void
      operator<< (::xercesc::DOMAttr&, const UInt8&);

      void
      operator<< (::xml_schema::list_stream&,
                  const UInt8&);

      void
      operator<< (::xercesc::DOMElement&, const UInt16&);

      void
      operator<< (::xercesc::DOMAttr&, const UInt16&);

      void
      operator<< (::xml_schema::list_stream&,
                  const UInt16&);

      void
      operator<< (::xercesc::DOMElement&, const UInt32&);

      void
      operator<< (::xercesc::DOMAttr&, const UInt32&);

      void
      operator<< (::xml_schema::list_stream&,
                  const UInt32&);

      void
      operator<< (::xercesc::DOMElement&, const UInt64&);

      void
      operator<< (::xercesc::DOMAttr&, const UInt64&);

      void
      operator<< (::xml_schema::list_stream&,
                  const UInt64&);

      void
      operator<< (::xercesc::DOMElement&, const UID&);

      void
      operator<< (::xercesc::DOMAttr&, const UID&);

      void
      operator<< (::xml_schema::list_stream&,
                  const UID&);

      void
      operator<< (::xercesc::DOMElement&, const LocalTag&);

      void
      operator<< (::xercesc::DOMAttr&, const LocalTag&);

      void
      operator<< (::xml_schema::list_stream&,
                  const LocalTag&);

      void
      operator<< (::xercesc::DOMElement&, const UL&);

      void
      operator<< (::xercesc::DOMAttr&, const UL&);

      void
      operator<< (::xml_schema::list_stream&,
                  const UL&);

      void
      operator<< (::xercesc::DOMElement&, const UMID32&);

      void
      operator<< (::xercesc::DOMAttr&, const UMID32&);

      void
      operator<< (::xml_schema::list_stream&,
                  const UMID32&);

      void
      operator<< (::xercesc::DOMElement&, const UMID64&);

      void
      operator<< (::xercesc::DOMAttr&, const UMID64&);

      void
      operator<< (::xml_schema::list_stream&,
                  const UMID64&);

      void
      operator<< (::xercesc::DOMElement&, const UUID&);

      void
      operator<< (::xercesc::DOMAttr&, const UUID&);

      void
      operator<< (::xml_schema::list_stream&,
                  const UUID&);

      void
      operator<< (::xercesc::DOMElement&, const KLVKey&);

      void
      operator<< (::xercesc::DOMAttr&, const KLVKey&);

      void
      operator<< (::xml_schema::list_stream&,
                  const KLVKey&);

      void
      operator<< (::xercesc::DOMElement&, const VersionType&);

      void
      operator<< (::xercesc::DOMAttr&, const VersionType&);

      void
      operator<< (::xml_schema::list_stream&,
                  const VersionType&);

      void
      operator<< (::xercesc::DOMElement&, const Collection&);

      void
      operator<< (::xercesc::DOMAttr&, const Collection&);

      void
      operator<< (::xml_schema::list_stream&,
                  const Collection&);

      void
      operator<< (::xercesc::DOMElement&, const Array&);

      void
      operator<< (::xercesc::DOMAttr&, const Array&);

      void
      operator<< (::xml_schema::list_stream&,
                  const Array&);

      void
      operator<< (::xercesc::DOMElement&, const Batch&);

      void
      operator<< (::xercesc::DOMAttr&, const Batch&);

      void
      operator<< (::xml_schema::list_stream&,
                  const Batch&);

      void
      operator<< (::xercesc::DOMElement&, const DataStream&);

      void
      operator<< (::xercesc::DOMAttr&, const DataStream&);

      void
      operator<< (::xml_schema::list_stream&,
                  const DataStream&);

      void
      operator<< (::xercesc::DOMElement&, const Rational&);

      void
      operator<< (::xercesc::DOMElement&, const EditRate&);

      void
      operator<< (::xercesc::DOMElement&, const ISO7bitCharString&);

      void
      operator<< (::xercesc::DOMAttr&, const ISO7bitCharString&);

      void
      operator<< (::xml_schema::list_stream&,
                  const ISO7bitCharString&);

      void
      operator<< (::xercesc::DOMElement&, const UTF16CharString&);

      void
      operator<< (::xercesc::DOMAttr&, const UTF16CharString&);

      void
      operator<< (::xml_schema::list_stream&,
                  const UTF16CharString&);

      void
      operator<< (::xercesc::DOMElement&, const TimestampType&);

      void
      operator<< (::xercesc::DOMElement&, const ProductVersionType&);

      void
      operator<< (::xercesc::DOMElement&, const RGBAComponentType&);

      void
      operator<< (::xercesc::DOMElement&, const RGBALayout&);

      void
      operator<< (::xercesc::DOMElement&, const Orientation&);

      void
      operator<< (::xercesc::DOMAttr&, const Orientation&);

      void
      operator<< (::xml_schema::list_stream&,
                  const Orientation&);

      void
      operator<< (::xercesc::DOMElement&, const SignalStandard&);

      void
      operator<< (::xercesc::DOMAttr&, const SignalStandard&);

      void
      operator<< (::xml_schema::list_stream&,
                  const SignalStandard&);

      void
      operator<< (::xercesc::DOMElement&, const Ref&);

      void
      operator<< (::xercesc::DOMElement&, const StrongRefHolder&);

      void
      operator<< (::xercesc::DOMAttr&, const StrongRefHolder&);

      void
      operator<< (::xml_schema::list_stream&,
                  const StrongRefHolder&);

      void
      operator<< (::xercesc::DOMElement&, const WeakRefHolder&);

      void
      operator<< (::xercesc::DOMAttr&, const WeakRefHolder&);

      void
      operator<< (::xml_schema::list_stream&,
                  const WeakRefHolder&);

      void
      operator<< (::xercesc::DOMElement&, const StrongRefArray&);

      void
      operator<< (::xercesc::DOMAttr&, const StrongRefArray&);

      void
      operator<< (::xml_schema::list_stream&,
                  const StrongRefArray&);

      void
      operator<< (::xercesc::DOMElement&, const StrongRefBatch&);

      void
      operator<< (::xercesc::DOMAttr&, const StrongRefBatch&);

      void
      operator<< (::xml_schema::list_stream&,
                  const StrongRefBatch&);

      void
      operator<< (::xercesc::DOMElement&, const StrongRefCollection&);

      void
      operator<< (::xercesc::DOMAttr&, const StrongRefCollection&);

      void
      operator<< (::xml_schema::list_stream&,
                  const StrongRefCollection&);

      void
      operator<< (::xercesc::DOMElement&, const WeakRefArray&);

      void
      operator<< (::xercesc::DOMAttr&, const WeakRefArray&);

      void
      operator<< (::xml_schema::list_stream&,
                  const WeakRefArray&);

      void
      operator<< (::xercesc::DOMElement&, const WeakRefBatch&);

      void
      operator<< (::xercesc::DOMAttr&, const WeakRefBatch&);

      void
      operator<< (::xml_schema::list_stream&,
                  const WeakRefBatch&);

      void
      operator<< (::xercesc::DOMElement&, const WeakRefCollection&);

      void
      operator<< (::xercesc::DOMAttr&, const WeakRefCollection&);

      void
      operator<< (::xml_schema::list_stream&,
                  const WeakRefCollection&);

      void
      operator<< (::xercesc::DOMElement&, const Year&);

      void
      operator<< (::xercesc::DOMAttr&, const Year&);

      void
      operator<< (::xml_schema::list_stream&,
                  const Year&);

      void
      operator<< (::xercesc::DOMElement&, const Month&);

      void
      operator<< (::xercesc::DOMAttr&, const Month&);

      void
      operator<< (::xml_schema::list_stream&,
                  const Month&);

      void
      operator<< (::xercesc::DOMElement&, const Day&);

      void
      operator<< (::xercesc::DOMAttr&, const Day&);

      void
      operator<< (::xml_schema::list_stream&,
                  const Day&);

      void
      operator<< (::xercesc::DOMElement&, const Hour&);

      void
      operator<< (::xercesc::DOMAttr&, const Hour&);

      void
      operator<< (::xml_schema::list_stream&,
                  const Hour&);

      void
      operator<< (::xercesc::DOMElement&, const Minute&);

      void
      operator<< (::xercesc::DOMAttr&, const Minute&);

      void
      operator<< (::xml_schema::list_stream&,
                  const Minute&);

      void
      operator<< (::xercesc::DOMElement&, const Second&);

      void
      operator<< (::xercesc::DOMAttr&, const Second&);

      void
      operator<< (::xml_schema::list_stream&,
                  const Second&);

      void
      operator<< (::xercesc::DOMElement&, const mSec4&);

      void
      operator<< (::xercesc::DOMAttr&, const mSec4&);

      void
      operator<< (::xml_schema::list_stream&,
                  const mSec4&);

      void
      operator<< (::xercesc::DOMElement&, const Release&);

      void
      operator<< (::xercesc::DOMAttr&, const Release&);

      void
      operator<< (::xml_schema::list_stream&,
                  const Release&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // DATA_TYPES_S377M_TYPES_HXX
