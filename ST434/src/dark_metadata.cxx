// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "groups/dark_metadata.hxx"

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      // ExtensionProperties
      // 

      const ExtensionProperties::DarkProperty_sequence& ExtensionProperties::
      DarkProperty () const
      {
        return this->DarkProperty_;
      }

      ExtensionProperties::DarkProperty_sequence& ExtensionProperties::
      DarkProperty ()
      {
        return this->DarkProperty_;
      }

      void ExtensionProperties::
      DarkProperty (const DarkProperty_sequence& s)
      {
        this->DarkProperty_ = s;
      }


      // DarkProperty
      // 

      const DarkProperty::UniversalLabel_optional& DarkProperty::
      UniversalLabel () const
      {
        return this->UniversalLabel_;
      }

      DarkProperty::UniversalLabel_optional& DarkProperty::
      UniversalLabel ()
      {
        return this->UniversalLabel_;
      }

      void DarkProperty::
      UniversalLabel (const UniversalLabel_type& x)
      {
        this->UniversalLabel_.set (x);
      }

      void DarkProperty::
      UniversalLabel (const UniversalLabel_optional& x)
      {
        this->UniversalLabel_ = x;
      }

      void DarkProperty::
      UniversalLabel (::std::auto_ptr< UniversalLabel_type > x)
      {
        this->UniversalLabel_.set (x);
      }

      const DarkProperty::LocalTag_optional& DarkProperty::
      LocalTag () const
      {
        return this->LocalTag_;
      }

      DarkProperty::LocalTag_optional& DarkProperty::
      LocalTag ()
      {
        return this->LocalTag_;
      }

      void DarkProperty::
      LocalTag (const LocalTag_type& x)
      {
        this->LocalTag_.set (x);
      }

      void DarkProperty::
      LocalTag (const LocalTag_optional& x)
      {
        this->LocalTag_ = x;
      }

      void DarkProperty::
      LocalTag (::std::auto_ptr< LocalTag_type > x)
      {
        this->LocalTag_.set (x);
      }


      // UnparsedDarkGroup
      // 

      const UnparsedDarkGroup::Key_optional& UnparsedDarkGroup::
      Key () const
      {
        return this->Key_;
      }

      UnparsedDarkGroup::Key_optional& UnparsedDarkGroup::
      Key ()
      {
        return this->Key_;
      }

      void UnparsedDarkGroup::
      Key (const Key_type& x)
      {
        this->Key_.set (x);
      }

      void UnparsedDarkGroup::
      Key (const Key_optional& x)
      {
        this->Key_ = x;
      }

      void UnparsedDarkGroup::
      Key (::std::auto_ptr< Key_type > x)
      {
        this->Key_.set (x);
      }

      const UnparsedDarkGroup::BEROctetCount_optional& UnparsedDarkGroup::
      BEROctetCount () const
      {
        return this->BEROctetCount_;
      }

      UnparsedDarkGroup::BEROctetCount_optional& UnparsedDarkGroup::
      BEROctetCount ()
      {
        return this->BEROctetCount_;
      }

      void UnparsedDarkGroup::
      BEROctetCount (const BEROctetCount_type& x)
      {
        this->BEROctetCount_.set (x);
      }

      void UnparsedDarkGroup::
      BEROctetCount (const BEROctetCount_optional& x)
      {
        this->BEROctetCount_ = x;
      }


      // ParsedDarkSet
      // 

      const ParsedDarkSet::DarkProperty_sequence& ParsedDarkSet::
      DarkProperty () const
      {
        return this->DarkProperty_;
      }

      ParsedDarkSet::DarkProperty_sequence& ParsedDarkSet::
      DarkProperty ()
      {
        return this->DarkProperty_;
      }

      void ParsedDarkSet::
      DarkProperty (const DarkProperty_sequence& s)
      {
        this->DarkProperty_ = s;
      }

      const ParsedDarkSet::Key_optional& ParsedDarkSet::
      Key () const
      {
        return this->Key_;
      }

      ParsedDarkSet::Key_optional& ParsedDarkSet::
      Key ()
      {
        return this->Key_;
      }

      void ParsedDarkSet::
      Key (const Key_type& x)
      {
        this->Key_.set (x);
      }

      void ParsedDarkSet::
      Key (const Key_optional& x)
      {
        this->Key_ = x;
      }

      void ParsedDarkSet::
      Key (::std::auto_ptr< Key_type > x)
      {
        this->Key_.set (x);
      }

      const ParsedDarkSet::BEROctetCount_optional& ParsedDarkSet::
      BEROctetCount () const
      {
        return this->BEROctetCount_;
      }

      ParsedDarkSet::BEROctetCount_optional& ParsedDarkSet::
      BEROctetCount ()
      {
        return this->BEROctetCount_;
      }

      void ParsedDarkSet::
      BEROctetCount (const BEROctetCount_type& x)
      {
        this->BEROctetCount_.set (x);
      }

      void ParsedDarkSet::
      BEROctetCount (const BEROctetCount_optional& x)
      {
        this->BEROctetCount_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      // ExtensionProperties
      //

      ExtensionProperties::
      ExtensionProperties ()
      : ::xml_schema::type (),
        DarkProperty_ (::xml_schema::flags (), this)
      {
      }

      ExtensionProperties::
      ExtensionProperties (const ExtensionProperties& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        DarkProperty_ (x.DarkProperty_, f, this)
      {
      }

      ExtensionProperties::
      ExtensionProperties (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        DarkProperty_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ExtensionProperties::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // DarkProperty
          //
          if (n.name () == "DarkProperty" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            ::std::auto_ptr< DarkProperty_type > r (
              DarkProperty_traits::create (i, f, this));

            this->DarkProperty_.push_back (r);
            continue;
          }

          break;
        }
      }

      ExtensionProperties* ExtensionProperties::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class ExtensionProperties (*this, f, c);
      }

      ExtensionProperties::
      ~ExtensionProperties ()
      {
      }

      // DarkProperty
      //

      DarkProperty::
      DarkProperty ()
      : ::xml_schema::hex_binary (),
        UniversalLabel_ (::xml_schema::flags (), this),
        LocalTag_ (::xml_schema::flags (), this)
      {
      }

      DarkProperty::
      DarkProperty (const ::xml_schema::hex_binary& _xsd_hex_binary_base)
      : ::xml_schema::hex_binary (_xsd_hex_binary_base),
        UniversalLabel_ (::xml_schema::flags (), this),
        LocalTag_ (::xml_schema::flags (), this)
      {
      }

      DarkProperty::
      DarkProperty (const DarkProperty& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::xml_schema::hex_binary (x, f, c),
        UniversalLabel_ (x.UniversalLabel_, f, this),
        LocalTag_ (x.LocalTag_, f, this)
      {
      }

      DarkProperty::
      DarkProperty (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::xml_schema::hex_binary (e, f | ::xml_schema::flags::base, c),
        UniversalLabel_ (f, this),
        LocalTag_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
          this->parse (p, f);
        }
      }

      void DarkProperty::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "UniversalLabel" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            ::std::auto_ptr< UniversalLabel_type > r (
              UniversalLabel_traits::create (i, f, this));

            this->UniversalLabel_.set (r);
            continue;
          }

          if (n.name () == "LocalTag" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            ::std::auto_ptr< LocalTag_type > r (
              LocalTag_traits::create (i, f, this));

            this->LocalTag_.set (r);
            continue;
          }
        }
      }

      DarkProperty* DarkProperty::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class DarkProperty (*this, f, c);
      }

      DarkProperty::
      ~DarkProperty ()
      {
      }

      // UnparsedDarkGroup
      //

      UnparsedDarkGroup::
      UnparsedDarkGroup ()
      : ::xml_schema::hex_binary (),
        Key_ (::xml_schema::flags (), this),
        BEROctetCount_ (::xml_schema::flags (), this)
      {
      }

      UnparsedDarkGroup::
      UnparsedDarkGroup (const ::xml_schema::hex_binary& _xsd_hex_binary_base)
      : ::xml_schema::hex_binary (_xsd_hex_binary_base),
        Key_ (::xml_schema::flags (), this),
        BEROctetCount_ (::xml_schema::flags (), this)
      {
      }

      UnparsedDarkGroup::
      UnparsedDarkGroup (const UnparsedDarkGroup& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::xml_schema::hex_binary (x, f, c),
        Key_ (x.Key_, f, this),
        BEROctetCount_ (x.BEROctetCount_, f, this)
      {
      }

      UnparsedDarkGroup::
      UnparsedDarkGroup (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::xml_schema::hex_binary (e, f | ::xml_schema::flags::base, c),
        Key_ (f, this),
        BEROctetCount_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
          this->parse (p, f);
        }
      }

      void UnparsedDarkGroup::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "Key" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            ::std::auto_ptr< Key_type > r (
              Key_traits::create (i, f, this));

            this->Key_.set (r);
            continue;
          }

          if (n.name () == "BEROctetCount" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            this->BEROctetCount_.set (BEROctetCount_traits::create (i, f, this));
            continue;
          }
        }
      }

      UnparsedDarkGroup* UnparsedDarkGroup::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class UnparsedDarkGroup (*this, f, c);
      }

      UnparsedDarkGroup::
      ~UnparsedDarkGroup ()
      {
      }

      // ParsedDarkSet
      //

      ParsedDarkSet::
      ParsedDarkSet ()
      : ::xml_schema::type (),
        DarkProperty_ (::xml_schema::flags (), this),
        Key_ (::xml_schema::flags (), this),
        BEROctetCount_ (::xml_schema::flags (), this)
      {
      }

      ParsedDarkSet::
      ParsedDarkSet (const ParsedDarkSet& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        DarkProperty_ (x.DarkProperty_, f, this),
        Key_ (x.Key_, f, this),
        BEROctetCount_ (x.BEROctetCount_, f, this)
      {
      }

      ParsedDarkSet::
      ParsedDarkSet (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        DarkProperty_ (f, this),
        Key_ (f, this),
        BEROctetCount_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void ParsedDarkSet::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // DarkProperty
          //
          if (n.name () == "DarkProperty" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            ::std::auto_ptr< DarkProperty_type > r (
              DarkProperty_traits::create (i, f, this));

            this->DarkProperty_.push_back (r);
            continue;
          }

          break;
        }

        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "Key" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            ::std::auto_ptr< Key_type > r (
              Key_traits::create (i, f, this));

            this->Key_.set (r);
            continue;
          }

          if (n.name () == "BEROctetCount" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            this->BEROctetCount_.set (BEROctetCount_traits::create (i, f, this));
            continue;
          }
        }
      }

      ParsedDarkSet* ParsedDarkSet::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class ParsedDarkSet (*this, f, c);
      }

      ParsedDarkSet::
      ~ParsedDarkSet ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties >
      ExtensionProperties_ (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties > r (
          ::st434::s377m::groups::ExtensionProperties_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties >
      ExtensionProperties_ (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties > r (
          ::st434::s377m::groups::ExtensionProperties_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties >
      ExtensionProperties_ (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties > r (
          ::st434::s377m::groups::ExtensionProperties_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties >
      ExtensionProperties_ (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::ExtensionProperties_ (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties >
      ExtensionProperties_ (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::ExtensionProperties_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties >
      ExtensionProperties_ (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::ExtensionProperties_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties >
      ExtensionProperties_ (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::ExtensionProperties_ (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties >
      ExtensionProperties_ (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::ExtensionProperties_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties >
      ExtensionProperties_ (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::ExtensionProperties_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties >
      ExtensionProperties_ (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties > r (
          ::st434::s377m::groups::ExtensionProperties_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties >
      ExtensionProperties_ (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties > r (
          ::st434::s377m::groups::ExtensionProperties_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties >
      ExtensionProperties_ (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties > r (
          ::st434::s377m::groups::ExtensionProperties_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties >
      ExtensionProperties_ (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties > r (
            ::st434::s377m::groups::ExtensionProperties_ (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ExtensionProperties" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::ExtensionProperties, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ExtensionProperties",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties >
      ExtensionProperties_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ExtensionProperties" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::ExtensionProperties > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::ExtensionProperties, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ExtensionProperties",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::DarkProperty >
      DarkProperty_ (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::DarkProperty > r (
          ::st434::s377m::groups::DarkProperty_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DarkProperty >
      DarkProperty_ (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DarkProperty > r (
          ::st434::s377m::groups::DarkProperty_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DarkProperty >
      DarkProperty_ (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DarkProperty > r (
          ::st434::s377m::groups::DarkProperty_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DarkProperty >
      DarkProperty_ (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DarkProperty_ (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DarkProperty >
      DarkProperty_ (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DarkProperty_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DarkProperty >
      DarkProperty_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DarkProperty_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DarkProperty >
      DarkProperty_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DarkProperty_ (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DarkProperty >
      DarkProperty_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DarkProperty_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DarkProperty >
      DarkProperty_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DarkProperty_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DarkProperty >
      DarkProperty_ (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::DarkProperty > r (
          ::st434::s377m::groups::DarkProperty_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DarkProperty >
      DarkProperty_ (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DarkProperty > r (
          ::st434::s377m::groups::DarkProperty_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DarkProperty >
      DarkProperty_ (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DarkProperty > r (
          ::st434::s377m::groups::DarkProperty_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DarkProperty >
      DarkProperty_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::DarkProperty > r (
            ::st434::s377m::groups::DarkProperty_ (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DarkProperty" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::DarkProperty > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::DarkProperty, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DarkProperty",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::DarkProperty >
      DarkProperty_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DarkProperty" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::DarkProperty > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::DarkProperty, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DarkProperty",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DarkGroup_REF (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DarkGroup_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DarkGroup_REF (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DarkGroup_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DarkGroup_REF (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DarkGroup_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DarkGroup_REF (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DarkGroup_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DarkGroup_REF (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DarkGroup_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DarkGroup_REF (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DarkGroup_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DarkGroup_REF (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DarkGroup_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DarkGroup_REF (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DarkGroup_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DarkGroup_REF (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DarkGroup_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DarkGroup_REF (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DarkGroup_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DarkGroup_REF (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DarkGroup_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DarkGroup_REF (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DarkGroup_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DarkGroup_REF (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::DarkGroup_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DarkGroup_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DarkGroup_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DarkGroup_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DarkGroup_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DarkGroup_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup >
      UnparsedDarkGroup_ (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup > r (
          ::st434::s377m::groups::UnparsedDarkGroup_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup >
      UnparsedDarkGroup_ (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup > r (
          ::st434::s377m::groups::UnparsedDarkGroup_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup >
      UnparsedDarkGroup_ (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup > r (
          ::st434::s377m::groups::UnparsedDarkGroup_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup >
      UnparsedDarkGroup_ (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::UnparsedDarkGroup_ (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup >
      UnparsedDarkGroup_ (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::UnparsedDarkGroup_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup >
      UnparsedDarkGroup_ (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::UnparsedDarkGroup_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup >
      UnparsedDarkGroup_ (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::UnparsedDarkGroup_ (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup >
      UnparsedDarkGroup_ (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::UnparsedDarkGroup_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup >
      UnparsedDarkGroup_ (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::UnparsedDarkGroup_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup >
      UnparsedDarkGroup_ (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup > r (
          ::st434::s377m::groups::UnparsedDarkGroup_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup >
      UnparsedDarkGroup_ (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup > r (
          ::st434::s377m::groups::UnparsedDarkGroup_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup >
      UnparsedDarkGroup_ (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup > r (
          ::st434::s377m::groups::UnparsedDarkGroup_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup >
      UnparsedDarkGroup_ (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup > r (
            ::st434::s377m::groups::UnparsedDarkGroup_ (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "UnparsedDarkGroup" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::UnparsedDarkGroup, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "UnparsedDarkGroup",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup >
      UnparsedDarkGroup_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "UnparsedDarkGroup" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::UnparsedDarkGroup > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::UnparsedDarkGroup, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "UnparsedDarkGroup",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet >
      ParsedDarkSet_ (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet > r (
          ::st434::s377m::groups::ParsedDarkSet_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet >
      ParsedDarkSet_ (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet > r (
          ::st434::s377m::groups::ParsedDarkSet_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet >
      ParsedDarkSet_ (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet > r (
          ::st434::s377m::groups::ParsedDarkSet_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet >
      ParsedDarkSet_ (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::ParsedDarkSet_ (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet >
      ParsedDarkSet_ (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::ParsedDarkSet_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet >
      ParsedDarkSet_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::ParsedDarkSet_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet >
      ParsedDarkSet_ (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::ParsedDarkSet_ (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet >
      ParsedDarkSet_ (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::ParsedDarkSet_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet >
      ParsedDarkSet_ (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::ParsedDarkSet_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet >
      ParsedDarkSet_ (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet > r (
          ::st434::s377m::groups::ParsedDarkSet_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet >
      ParsedDarkSet_ (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet > r (
          ::st434::s377m::groups::ParsedDarkSet_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet >
      ParsedDarkSet_ (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet > r (
          ::st434::s377m::groups::ParsedDarkSet_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet >
      ParsedDarkSet_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet > r (
            ::st434::s377m::groups::ParsedDarkSet_ (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ParsedDarkSet" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::ParsedDarkSet, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ParsedDarkSet",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet >
      ParsedDarkSet_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ParsedDarkSet" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::ParsedDarkSet > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::ParsedDarkSet, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ParsedDarkSet",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      void
      ExtensionProperties_ (::std::ostream& o,
                            const ::st434::s377m::groups::ExtensionProperties& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ExtensionProperties_ (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      ExtensionProperties_ (::std::ostream& o,
                            const ::st434::s377m::groups::ExtensionProperties& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ExtensionProperties_ (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ExtensionProperties_ (::std::ostream& o,
                            const ::st434::s377m::groups::ExtensionProperties& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ExtensionProperties_ (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ExtensionProperties_ (::xercesc::XMLFormatTarget& t,
                            const ::st434::s377m::groups::ExtensionProperties& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ExtensionProperties_ (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      ExtensionProperties_ (::xercesc::XMLFormatTarget& t,
                            const ::st434::s377m::groups::ExtensionProperties& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ExtensionProperties_ (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ExtensionProperties_ (::xercesc::XMLFormatTarget& t,
                            const ::st434::s377m::groups::ExtensionProperties& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ExtensionProperties_ (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ExtensionProperties_ (::xercesc::DOMDocument& d,
                            const ::st434::s377m::groups::ExtensionProperties& s,
                            ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ExtensionProperties" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ExtensionProperties",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      ExtensionProperties_ (const ::st434::s377m::groups::ExtensionProperties& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "ExtensionProperties",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::ExtensionProperties_ (*d, s, f);
        return d;
      }

      void
      DarkProperty_ (::std::ostream& o,
                     const ::st434::s377m::groups::DarkProperty& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DarkProperty_ (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DarkProperty_ (::std::ostream& o,
                     const ::st434::s377m::groups::DarkProperty& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DarkProperty_ (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DarkProperty_ (::std::ostream& o,
                     const ::st434::s377m::groups::DarkProperty& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DarkProperty_ (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DarkProperty_ (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::groups::DarkProperty& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DarkProperty_ (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DarkProperty_ (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::groups::DarkProperty& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DarkProperty_ (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DarkProperty_ (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::groups::DarkProperty& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DarkProperty_ (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DarkProperty_ (::xercesc::DOMDocument& d,
                     const ::st434::s377m::groups::DarkProperty& s,
                     ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DarkProperty" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DarkProperty",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DarkProperty_ (const ::st434::s377m::groups::DarkProperty& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "DarkProperty",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::DarkProperty_ (*d, s, f);
        return d;
      }

      void
      DarkGroup_REF (::std::ostream& o,
                     const ::st434::s377m::types::Ref& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DarkGroup_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DarkGroup_REF (::std::ostream& o,
                     const ::st434::s377m::types::Ref& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DarkGroup_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DarkGroup_REF (::std::ostream& o,
                     const ::st434::s377m::types::Ref& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DarkGroup_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DarkGroup_REF (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::types::Ref& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DarkGroup_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DarkGroup_REF (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::types::Ref& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DarkGroup_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DarkGroup_REF (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::types::Ref& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DarkGroup_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DarkGroup_REF (::xercesc::DOMDocument& d,
                     const ::st434::s377m::types::Ref& s,
                     ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DarkGroup_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DarkGroup_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DarkGroup_REF (const ::st434::s377m::types::Ref& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "DarkGroup_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::DarkGroup_REF (*d, s, f);
        return d;
      }

      void
      UnparsedDarkGroup_ (::std::ostream& o,
                          const ::st434::s377m::groups::UnparsedDarkGroup& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::UnparsedDarkGroup_ (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      UnparsedDarkGroup_ (::std::ostream& o,
                          const ::st434::s377m::groups::UnparsedDarkGroup& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::UnparsedDarkGroup_ (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      UnparsedDarkGroup_ (::std::ostream& o,
                          const ::st434::s377m::groups::UnparsedDarkGroup& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::UnparsedDarkGroup_ (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      UnparsedDarkGroup_ (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::groups::UnparsedDarkGroup& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::UnparsedDarkGroup_ (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      UnparsedDarkGroup_ (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::groups::UnparsedDarkGroup& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::UnparsedDarkGroup_ (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      UnparsedDarkGroup_ (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::groups::UnparsedDarkGroup& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::UnparsedDarkGroup_ (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      UnparsedDarkGroup_ (::xercesc::DOMDocument& d,
                          const ::st434::s377m::groups::UnparsedDarkGroup& s,
                          ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "UnparsedDarkGroup" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "UnparsedDarkGroup",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      UnparsedDarkGroup_ (const ::st434::s377m::groups::UnparsedDarkGroup& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "UnparsedDarkGroup",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::UnparsedDarkGroup_ (*d, s, f);
        return d;
      }

      void
      ParsedDarkSet_ (::std::ostream& o,
                      const ::st434::s377m::groups::ParsedDarkSet& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ParsedDarkSet_ (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      ParsedDarkSet_ (::std::ostream& o,
                      const ::st434::s377m::groups::ParsedDarkSet& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ParsedDarkSet_ (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ParsedDarkSet_ (::std::ostream& o,
                      const ::st434::s377m::groups::ParsedDarkSet& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ParsedDarkSet_ (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ParsedDarkSet_ (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::ParsedDarkSet& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ParsedDarkSet_ (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      ParsedDarkSet_ (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::ParsedDarkSet& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ParsedDarkSet_ (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ParsedDarkSet_ (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::ParsedDarkSet& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ParsedDarkSet_ (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ParsedDarkSet_ (::xercesc::DOMDocument& d,
                      const ::st434::s377m::groups::ParsedDarkSet& s,
                      ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ParsedDarkSet" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ParsedDarkSet",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      ParsedDarkSet_ (const ::st434::s377m::groups::ParsedDarkSet& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "ParsedDarkSet",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::ParsedDarkSet_ (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const ExtensionProperties& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // DarkProperty
        //
        for (ExtensionProperties::DarkProperty_const_iterator
             b (i.DarkProperty ().begin ()), n (i.DarkProperty ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DarkProperty",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          s << *b;
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const DarkProperty& i)
      {
        e << static_cast< const ::xml_schema::hex_binary& > (i);

        // UniversalLabel
        //
        if (i.UniversalLabel ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "UniversalLabel",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          a << *i.UniversalLabel ();
        }

        // LocalTag
        //
        if (i.LocalTag ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "LocalTag",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          a << *i.LocalTag ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const UnparsedDarkGroup& i)
      {
        e << static_cast< const ::xml_schema::hex_binary& > (i);

        // Key
        //
        if (i.Key ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "Key",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          a << *i.Key ();
        }

        // BEROctetCount
        //
        if (i.BEROctetCount ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "BEROctetCount",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          a << *i.BEROctetCount ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ParsedDarkSet& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // DarkProperty
        //
        for (ParsedDarkSet::DarkProperty_const_iterator
             b (i.DarkProperty ().begin ()), n (i.DarkProperty ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DarkProperty",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          s << *b;
        }

        // Key
        //
        if (i.Key ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "Key",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          a << *i.Key ();
        }

        // BEROctetCount
        //
        if (i.BEROctetCount ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "BEROctetCount",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          a << *i.BEROctetCount ();
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

