// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "dataTypes/s422m_types.hxx"

namespace st434
{
  namespace s422m
  {
    namespace types
    {
      // J2KPictureComponentType
      // 

      const J2KPictureComponentType::Ssizi_type& J2KPictureComponentType::
      Ssizi () const
      {
        return this->Ssizi_.get ();
      }

      J2KPictureComponentType::Ssizi_type& J2KPictureComponentType::
      Ssizi ()
      {
        return this->Ssizi_.get ();
      }

      void J2KPictureComponentType::
      Ssizi (const Ssizi_type& x)
      {
        this->Ssizi_.set (x);
      }

      void J2KPictureComponentType::
      Ssizi (::std::auto_ptr< Ssizi_type > x)
      {
        this->Ssizi_.set (x);
      }

      const J2KPictureComponentType::XRSizi_type& J2KPictureComponentType::
      XRSizi () const
      {
        return this->XRSizi_.get ();
      }

      J2KPictureComponentType::XRSizi_type& J2KPictureComponentType::
      XRSizi ()
      {
        return this->XRSizi_.get ();
      }

      void J2KPictureComponentType::
      XRSizi (const XRSizi_type& x)
      {
        this->XRSizi_.set (x);
      }

      void J2KPictureComponentType::
      XRSizi (::std::auto_ptr< XRSizi_type > x)
      {
        this->XRSizi_.set (x);
      }

      const J2KPictureComponentType::YRSizi_type& J2KPictureComponentType::
      YRSizi () const
      {
        return this->YRSizi_.get ();
      }

      J2KPictureComponentType::YRSizi_type& J2KPictureComponentType::
      YRSizi ()
      {
        return this->YRSizi_.get ();
      }

      void J2KPictureComponentType::
      YRSizi (const YRSizi_type& x)
      {
        this->YRSizi_.set (x);
      }

      void J2KPictureComponentType::
      YRSizi (::std::auto_ptr< YRSizi_type > x)
      {
        this->YRSizi_.set (x);
      }


      // J2KCodingStyleDefault
      // 

      const J2KCodingStyleDefault::Scod_type& J2KCodingStyleDefault::
      Scod () const
      {
        return this->Scod_.get ();
      }

      J2KCodingStyleDefault::Scod_type& J2KCodingStyleDefault::
      Scod ()
      {
        return this->Scod_.get ();
      }

      void J2KCodingStyleDefault::
      Scod (const Scod_type& x)
      {
        this->Scod_.set (x);
      }

      void J2KCodingStyleDefault::
      Scod (::std::auto_ptr< Scod_type > x)
      {
        this->Scod_.set (x);
      }

      const J2KCodingStyleDefault::SGcod_type& J2KCodingStyleDefault::
      SGcod () const
      {
        return this->SGcod_.get ();
      }

      J2KCodingStyleDefault::SGcod_type& J2KCodingStyleDefault::
      SGcod ()
      {
        return this->SGcod_.get ();
      }

      void J2KCodingStyleDefault::
      SGcod (const SGcod_type& x)
      {
        this->SGcod_.set (x);
      }

      void J2KCodingStyleDefault::
      SGcod (::std::auto_ptr< SGcod_type > x)
      {
        this->SGcod_.set (x);
      }

      const J2KCodingStyleDefault::SPcod_type& J2KCodingStyleDefault::
      SPcod () const
      {
        return this->SPcod_.get ();
      }

      J2KCodingStyleDefault::SPcod_type& J2KCodingStyleDefault::
      SPcod ()
      {
        return this->SPcod_.get ();
      }

      void J2KCodingStyleDefault::
      SPcod (const SPcod_type& x)
      {
        this->SPcod_.set (x);
      }

      void J2KCodingStyleDefault::
      SPcod (::std::auto_ptr< SPcod_type > x)
      {
        this->SPcod_.set (x);
      }


      // J2KQuantisationDefault
      // 

      const J2KQuantisationDefault::Sqcd_type& J2KQuantisationDefault::
      Sqcd () const
      {
        return this->Sqcd_.get ();
      }

      J2KQuantisationDefault::Sqcd_type& J2KQuantisationDefault::
      Sqcd ()
      {
        return this->Sqcd_.get ();
      }

      void J2KQuantisationDefault::
      Sqcd (const Sqcd_type& x)
      {
        this->Sqcd_.set (x);
      }

      void J2KQuantisationDefault::
      Sqcd (::std::auto_ptr< Sqcd_type > x)
      {
        this->Sqcd_.set (x);
      }

      const J2KQuantisationDefault::SPgcd_type& J2KQuantisationDefault::
      SPgcd () const
      {
        return this->SPgcd_.get ();
      }

      J2KQuantisationDefault::SPgcd_type& J2KQuantisationDefault::
      SPgcd ()
      {
        return this->SPgcd_.get ();
      }

      void J2KQuantisationDefault::
      SPgcd (const SPgcd_type& x)
      {
        this->SPgcd_.set (x);
      }

      void J2KQuantisationDefault::
      SPgcd (::std::auto_ptr< SPgcd_type > x)
      {
        this->SPgcd_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace st434
{
  namespace s422m
  {
    namespace types
    {
      // J2KPictureComponentType
      //

      J2KPictureComponentType::
      J2KPictureComponentType (const Ssizi_type& Ssizi,
                               const XRSizi_type& XRSizi,
                               const YRSizi_type& YRSizi)
      : ::xml_schema::type (),
        Ssizi_ (Ssizi, ::xml_schema::flags (), this),
        XRSizi_ (XRSizi, ::xml_schema::flags (), this),
        YRSizi_ (YRSizi, ::xml_schema::flags (), this)
      {
      }

      J2KPictureComponentType::
      J2KPictureComponentType (const J2KPictureComponentType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        Ssizi_ (x.Ssizi_, f, this),
        XRSizi_ (x.XRSizi_, f, this),
        YRSizi_ (x.YRSizi_, f, this)
      {
      }

      J2KPictureComponentType::
      J2KPictureComponentType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        Ssizi_ (f, this),
        XRSizi_ (f, this),
        YRSizi_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void J2KPictureComponentType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Ssizi
          //
          if (n.name () == "Ssizi" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006")
          {
            ::std::auto_ptr< Ssizi_type > r (
              Ssizi_traits::create (i, f, this));

            if (!Ssizi_.present ())
            {
              this->Ssizi_.set (r);
              continue;
            }
          }

          // XRSizi
          //
          if (n.name () == "XRSizi" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006")
          {
            ::std::auto_ptr< XRSizi_type > r (
              XRSizi_traits::create (i, f, this));

            if (!XRSizi_.present ())
            {
              this->XRSizi_.set (r);
              continue;
            }
          }

          // YRSizi
          //
          if (n.name () == "YRSizi" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006")
          {
            ::std::auto_ptr< YRSizi_type > r (
              YRSizi_traits::create (i, f, this));

            if (!YRSizi_.present ())
            {
              this->YRSizi_.set (r);
              continue;
            }
          }

          break;
        }

        if (!Ssizi_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Ssizi",
            "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006");
        }

        if (!XRSizi_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "XRSizi",
            "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006");
        }

        if (!YRSizi_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "YRSizi",
            "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006");
        }
      }

      J2KPictureComponentType* J2KPictureComponentType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class J2KPictureComponentType (*this, f, c);
      }

      J2KPictureComponentType::
      ~J2KPictureComponentType ()
      {
      }

      // J2KCodingStyleDefault
      //

      J2KCodingStyleDefault::
      J2KCodingStyleDefault (const Scod_type& Scod,
                             const SGcod_type& SGcod,
                             const SPcod_type& SPcod)
      : ::xml_schema::type (),
        Scod_ (Scod, ::xml_schema::flags (), this),
        SGcod_ (SGcod, ::xml_schema::flags (), this),
        SPcod_ (SPcod, ::xml_schema::flags (), this)
      {
      }

      J2KCodingStyleDefault::
      J2KCodingStyleDefault (const J2KCodingStyleDefault& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        Scod_ (x.Scod_, f, this),
        SGcod_ (x.SGcod_, f, this),
        SPcod_ (x.SPcod_, f, this)
      {
      }

      J2KCodingStyleDefault::
      J2KCodingStyleDefault (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        Scod_ (f, this),
        SGcod_ (f, this),
        SPcod_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void J2KCodingStyleDefault::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Scod
          //
          if (n.name () == "Scod" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006")
          {
            ::std::auto_ptr< Scod_type > r (
              Scod_traits::create (i, f, this));

            if (!Scod_.present ())
            {
              this->Scod_.set (r);
              continue;
            }
          }

          // SGcod
          //
          if (n.name () == "SGcod" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006")
          {
            ::std::auto_ptr< SGcod_type > r (
              SGcod_traits::create (i, f, this));

            if (!SGcod_.present ())
            {
              this->SGcod_.set (r);
              continue;
            }
          }

          // SPcod
          //
          if (n.name () == "SPcod" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006")
          {
            ::std::auto_ptr< SPcod_type > r (
              SPcod_traits::create (i, f, this));

            if (!SPcod_.present ())
            {
              this->SPcod_.set (r);
              continue;
            }
          }

          break;
        }

        if (!Scod_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Scod",
            "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006");
        }

        if (!SGcod_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SGcod",
            "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006");
        }

        if (!SPcod_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SPcod",
            "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006");
        }
      }

      J2KCodingStyleDefault* J2KCodingStyleDefault::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class J2KCodingStyleDefault (*this, f, c);
      }

      J2KCodingStyleDefault::
      ~J2KCodingStyleDefault ()
      {
      }

      // J2KQuantisationDefault
      //

      J2KQuantisationDefault::
      J2KQuantisationDefault (const Sqcd_type& Sqcd,
                              const SPgcd_type& SPgcd)
      : ::xml_schema::type (),
        Sqcd_ (Sqcd, ::xml_schema::flags (), this),
        SPgcd_ (SPgcd, ::xml_schema::flags (), this)
      {
      }

      J2KQuantisationDefault::
      J2KQuantisationDefault (const J2KQuantisationDefault& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        Sqcd_ (x.Sqcd_, f, this),
        SPgcd_ (x.SPgcd_, f, this)
      {
      }

      J2KQuantisationDefault::
      J2KQuantisationDefault (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        Sqcd_ (f, this),
        SPgcd_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void J2KQuantisationDefault::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Sqcd
          //
          if (n.name () == "Sqcd" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006")
          {
            ::std::auto_ptr< Sqcd_type > r (
              Sqcd_traits::create (i, f, this));

            if (!Sqcd_.present ())
            {
              this->Sqcd_.set (r);
              continue;
            }
          }

          // SPgcd
          //
          if (n.name () == "SPgcd" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006")
          {
            ::std::auto_ptr< SPgcd_type > r (
              SPgcd_traits::create (i, f, this));

            if (!SPgcd_.present ())
            {
              this->SPgcd_.set (r);
              continue;
            }
          }

          break;
        }

        if (!Sqcd_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Sqcd",
            "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006");
        }

        if (!SPgcd_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SPgcd",
            "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006");
        }
      }

      J2KQuantisationDefault* J2KQuantisationDefault::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class J2KQuantisationDefault (*this, f, c);
      }

      J2KQuantisationDefault::
      ~J2KQuantisationDefault ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace st434
{
  namespace s422m
  {
    namespace types
    {
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace st434
{
  namespace s422m
  {
    namespace types
    {
      void
      operator<< (::xercesc::DOMElement& e, const J2KPictureComponentType& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // Ssizi
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Ssizi",
              "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006",
              e));

          s << i.Ssizi ();
        }

        // XRSizi
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "XRSizi",
              "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006",
              e));

          s << i.XRSizi ();
        }

        // YRSizi
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "YRSizi",
              "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006",
              e));

          s << i.YRSizi ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const J2KCodingStyleDefault& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // Scod
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Scod",
              "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006",
              e));

          s << i.Scod ();
        }

        // SGcod
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SGcod",
              "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006",
              e));

          s << i.SGcod ();
        }

        // SPcod
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SPcod",
              "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006",
              e));

          s << i.SPcod ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const J2KQuantisationDefault& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // Sqcd
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Sqcd",
              "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006",
              e));

          s << i.Sqcd ();
        }

        // SPgcd
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SPgcd",
              "http://www.smpte-ra.org/schemas/434/2006/types/S422M/2006",
              e));

          s << i.SPgcd ();
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

