// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "mxf/file.hxx"

namespace st434
{
  namespace s377m
  {
    namespace multiplex
    {
      // MXFFile
      // 

      const MXFFile::RunIn_optional& MXFFile::
      RunIn () const
      {
        return this->RunIn_;
      }

      MXFFile::RunIn_optional& MXFFile::
      RunIn ()
      {
        return this->RunIn_;
      }

      void MXFFile::
      RunIn (const RunIn_type& x)
      {
        this->RunIn_.set (x);
      }

      void MXFFile::
      RunIn (const RunIn_optional& x)
      {
        this->RunIn_ = x;
      }

      void MXFFile::
      RunIn (::std::auto_ptr< RunIn_type > x)
      {
        this->RunIn_.set (x);
      }

      const MXFFile::HeaderPartition_type& MXFFile::
      HeaderPartition () const
      {
        return this->HeaderPartition_.get ();
      }

      MXFFile::HeaderPartition_type& MXFFile::
      HeaderPartition ()
      {
        return this->HeaderPartition_.get ();
      }

      void MXFFile::
      HeaderPartition (const HeaderPartition_type& x)
      {
        this->HeaderPartition_.set (x);
      }

      void MXFFile::
      HeaderPartition (::std::auto_ptr< HeaderPartition_type > x)
      {
        this->HeaderPartition_.set (x);
      }

      const MXFFile::BodyPartition_sequence& MXFFile::
      BodyPartition () const
      {
        return this->BodyPartition_;
      }

      MXFFile::BodyPartition_sequence& MXFFile::
      BodyPartition ()
      {
        return this->BodyPartition_;
      }

      void MXFFile::
      BodyPartition (const BodyPartition_sequence& s)
      {
        this->BodyPartition_ = s;
      }

      const MXFFile::FooterPartition_optional& MXFFile::
      FooterPartition () const
      {
        return this->FooterPartition_;
      }

      MXFFile::FooterPartition_optional& MXFFile::
      FooterPartition ()
      {
        return this->FooterPartition_;
      }

      void MXFFile::
      FooterPartition (const FooterPartition_type& x)
      {
        this->FooterPartition_.set (x);
      }

      void MXFFile::
      FooterPartition (const FooterPartition_optional& x)
      {
        this->FooterPartition_ = x;
      }

      void MXFFile::
      FooterPartition (::std::auto_ptr< FooterPartition_type > x)
      {
        this->FooterPartition_.set (x);
      }

      const MXFFile::RandomIndexPack_optional& MXFFile::
      RandomIndexPack () const
      {
        return this->RandomIndexPack_;
      }

      MXFFile::RandomIndexPack_optional& MXFFile::
      RandomIndexPack ()
      {
        return this->RandomIndexPack_;
      }

      void MXFFile::
      RandomIndexPack (const RandomIndexPack_type& x)
      {
        this->RandomIndexPack_.set (x);
      }

      void MXFFile::
      RandomIndexPack (const RandomIndexPack_optional& x)
      {
        this->RandomIndexPack_ = x;
      }

      void MXFFile::
      RandomIndexPack (::std::auto_ptr< RandomIndexPack_type > x)
      {
        this->RandomIndexPack_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace st434
{
  namespace s377m
  {
    namespace multiplex
    {
      // MXFFile
      //

      MXFFile::
      MXFFile (const HeaderPartition_type& HeaderPartition)
      : ::xml_schema::type (),
        RunIn_ (::xml_schema::flags (), this),
        HeaderPartition_ (HeaderPartition, ::xml_schema::flags (), this),
        BodyPartition_ (::xml_schema::flags (), this),
        FooterPartition_ (::xml_schema::flags (), this),
        RandomIndexPack_ (::xml_schema::flags (), this)
      {
      }

      MXFFile::
      MXFFile (::std::auto_ptr< HeaderPartition_type >& HeaderPartition)
      : ::xml_schema::type (),
        RunIn_ (::xml_schema::flags (), this),
        HeaderPartition_ (HeaderPartition, ::xml_schema::flags (), this),
        BodyPartition_ (::xml_schema::flags (), this),
        FooterPartition_ (::xml_schema::flags (), this),
        RandomIndexPack_ (::xml_schema::flags (), this)
      {
      }

      MXFFile::
      MXFFile (const MXFFile& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        RunIn_ (x.RunIn_, f, this),
        HeaderPartition_ (x.HeaderPartition_, f, this),
        BodyPartition_ (x.BodyPartition_, f, this),
        FooterPartition_ (x.FooterPartition_, f, this),
        RandomIndexPack_ (x.RandomIndexPack_, f, this)
      {
      }

      MXFFile::
      MXFFile (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        RunIn_ (f, this),
        HeaderPartition_ (f, this),
        BodyPartition_ (f, this),
        FooterPartition_ (f, this),
        RandomIndexPack_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void MXFFile::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // RunIn
          //
          if (n.name () == "RunIn" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
          {
            ::std::auto_ptr< RunIn_type > r (
              RunIn_traits::create (i, f, this));

            if (!this->RunIn_)
            {
              this->RunIn_.set (r);
              continue;
            }
          }

          // HeaderPartition
          //
          if (n.name () == "HeaderPartition" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
          {
            ::std::auto_ptr< HeaderPartition_type > r (
              HeaderPartition_traits::create (i, f, this));

            if (!HeaderPartition_.present ())
            {
              this->HeaderPartition_.set (r);
              continue;
            }
          }

          // BodyPartition
          //
          if (n.name () == "BodyPartition" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
          {
            ::std::auto_ptr< BodyPartition_type > r (
              BodyPartition_traits::create (i, f, this));

            this->BodyPartition_.push_back (r);
            continue;
          }

          // FooterPartition
          //
          if (n.name () == "FooterPartition" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
          {
            ::std::auto_ptr< FooterPartition_type > r (
              FooterPartition_traits::create (i, f, this));

            if (!this->FooterPartition_)
            {
              this->FooterPartition_.set (r);
              continue;
            }
          }

          // RandomIndexPack
          //
          if (n.name () == "RandomIndexPack" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            ::std::auto_ptr< RandomIndexPack_type > r (
              RandomIndexPack_traits::create (i, f, this));

            if (!this->RandomIndexPack_)
            {
              this->RandomIndexPack_.set (r);
              continue;
            }
          }

          break;
        }

        if (!HeaderPartition_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HeaderPartition",
            "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004");
        }
      }

      MXFFile* MXFFile::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class MXFFile (*this, f, c);
      }

      MXFFile::
      ~MXFFile ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace st434
{
  namespace s377m
  {
    namespace multiplex
    {
      ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile >
      MXFFile_ (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile > r (
          ::st434::s377m::multiplex::MXFFile_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile >
      MXFFile_ (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile > r (
          ::st434::s377m::multiplex::MXFFile_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile >
      MXFFile_ (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile > r (
          ::st434::s377m::multiplex::MXFFile_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile >
      MXFFile_ (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::multiplex::MXFFile_ (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile >
      MXFFile_ (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::multiplex::MXFFile_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile >
      MXFFile_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::multiplex::MXFFile_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile >
      MXFFile_ (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::multiplex::MXFFile_ (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile >
      MXFFile_ (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::multiplex::MXFFile_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile >
      MXFFile_ (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::multiplex::MXFFile_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile >
      MXFFile_ (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile > r (
          ::st434::s377m::multiplex::MXFFile_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile >
      MXFFile_ (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile > r (
          ::st434::s377m::multiplex::MXFFile_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile >
      MXFFile_ (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile > r (
          ::st434::s377m::multiplex::MXFFile_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile >
      MXFFile_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile > r (
            ::st434::s377m::multiplex::MXFFile_ (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "MXFFile" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::multiplex::MXFFile, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MXFFile",
          "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile >
      MXFFile_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "MXFFile" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::multiplex::MXFFile > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::multiplex::MXFFile, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MXFFile",
          "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace st434
{
  namespace s377m
  {
    namespace multiplex
    {
      void
      MXFFile_ (::std::ostream& o,
                const ::st434::s377m::multiplex::MXFFile& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::MXFFile_ (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      MXFFile_ (::std::ostream& o,
                const ::st434::s377m::multiplex::MXFFile& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::MXFFile_ (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MXFFile_ (::std::ostream& o,
                const ::st434::s377m::multiplex::MXFFile& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::MXFFile_ (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MXFFile_ (::xercesc::XMLFormatTarget& t,
                const ::st434::s377m::multiplex::MXFFile& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::MXFFile_ (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      MXFFile_ (::xercesc::XMLFormatTarget& t,
                const ::st434::s377m::multiplex::MXFFile& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::MXFFile_ (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MXFFile_ (::xercesc::XMLFormatTarget& t,
                const ::st434::s377m::multiplex::MXFFile& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::MXFFile_ (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MXFFile_ (::xercesc::DOMDocument& d,
                const ::st434::s377m::multiplex::MXFFile& s,
                ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "MXFFile" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "MXFFile",
            "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      MXFFile_ (const ::st434::s377m::multiplex::MXFFile& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "MXFFile",
            "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004",
            m, f));

        ::st434::s377m::multiplex::MXFFile_ (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const MXFFile& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // RunIn
        //
        if (i.RunIn ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RunIn",
              "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004",
              e));

          s << *i.RunIn ();
        }

        // HeaderPartition
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HeaderPartition",
              "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004",
              e));

          s << i.HeaderPartition ();
        }

        // BodyPartition
        //
        for (MXFFile::BodyPartition_const_iterator
             b (i.BodyPartition ().begin ()), n (i.BodyPartition ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BodyPartition",
              "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004",
              e));

          s << *b;
        }

        // FooterPartition
        //
        if (i.FooterPartition ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FooterPartition",
              "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004",
              e));

          s << *i.FooterPartition ();
        }

        // RandomIndexPack
        //
        if (i.RandomIndexPack ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RandomIndexPack",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          s << *i.RandomIndexPack ();
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

