// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "groups/s377m_indexTables.hxx"

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      // IndexTableSegmentType
      // 

      const IndexTableSegmentType::IndexEditRate_type& IndexTableSegmentType::
      IndexEditRate () const
      {
        return this->IndexEditRate_.get ();
      }

      IndexTableSegmentType::IndexEditRate_type& IndexTableSegmentType::
      IndexEditRate ()
      {
        return this->IndexEditRate_.get ();
      }

      void IndexTableSegmentType::
      IndexEditRate (const IndexEditRate_type& x)
      {
        this->IndexEditRate_.set (x);
      }

      void IndexTableSegmentType::
      IndexEditRate (::std::auto_ptr< IndexEditRate_type > x)
      {
        this->IndexEditRate_.set (x);
      }

      const IndexTableSegmentType::IndexStartPosition_type& IndexTableSegmentType::
      IndexStartPosition () const
      {
        return this->IndexStartPosition_.get ();
      }

      IndexTableSegmentType::IndexStartPosition_type& IndexTableSegmentType::
      IndexStartPosition ()
      {
        return this->IndexStartPosition_.get ();
      }

      void IndexTableSegmentType::
      IndexStartPosition (const IndexStartPosition_type& x)
      {
        this->IndexStartPosition_.set (x);
      }

      void IndexTableSegmentType::
      IndexStartPosition (::std::auto_ptr< IndexStartPosition_type > x)
      {
        this->IndexStartPosition_.set (x);
      }

      const IndexTableSegmentType::IndexDuration_type& IndexTableSegmentType::
      IndexDuration () const
      {
        return this->IndexDuration_.get ();
      }

      IndexTableSegmentType::IndexDuration_type& IndexTableSegmentType::
      IndexDuration ()
      {
        return this->IndexDuration_.get ();
      }

      void IndexTableSegmentType::
      IndexDuration (const IndexDuration_type& x)
      {
        this->IndexDuration_.set (x);
      }

      void IndexTableSegmentType::
      IndexDuration (::std::auto_ptr< IndexDuration_type > x)
      {
        this->IndexDuration_.set (x);
      }

      const IndexTableSegmentType::EditUnitByteCount_optional& IndexTableSegmentType::
      EditUnitByteCount () const
      {
        return this->EditUnitByteCount_;
      }

      IndexTableSegmentType::EditUnitByteCount_optional& IndexTableSegmentType::
      EditUnitByteCount ()
      {
        return this->EditUnitByteCount_;
      }

      void IndexTableSegmentType::
      EditUnitByteCount (const EditUnitByteCount_type& x)
      {
        this->EditUnitByteCount_.set (x);
      }

      void IndexTableSegmentType::
      EditUnitByteCount (const EditUnitByteCount_optional& x)
      {
        this->EditUnitByteCount_ = x;
      }

      void IndexTableSegmentType::
      EditUnitByteCount (::std::auto_ptr< EditUnitByteCount_type > x)
      {
        this->EditUnitByteCount_.set (x);
      }

      IndexTableSegmentType::EditUnitByteCount_type IndexTableSegmentType::
      EditUnitByteCount_default_value ()
      {
        return EditUnitByteCount_type (0);
      }

      const IndexTableSegmentType::IndexStreamID_optional& IndexTableSegmentType::
      IndexStreamID () const
      {
        return this->IndexStreamID_;
      }

      IndexTableSegmentType::IndexStreamID_optional& IndexTableSegmentType::
      IndexStreamID ()
      {
        return this->IndexStreamID_;
      }

      void IndexTableSegmentType::
      IndexStreamID (const IndexStreamID_type& x)
      {
        this->IndexStreamID_.set (x);
      }

      void IndexTableSegmentType::
      IndexStreamID (const IndexStreamID_optional& x)
      {
        this->IndexStreamID_ = x;
      }

      void IndexTableSegmentType::
      IndexStreamID (::std::auto_ptr< IndexStreamID_type > x)
      {
        this->IndexStreamID_.set (x);
      }

      IndexTableSegmentType::IndexStreamID_type IndexTableSegmentType::
      IndexStreamID_default_value ()
      {
        return IndexStreamID_type (0);
      }

      const IndexTableSegmentType::EssenceStreamID_type& IndexTableSegmentType::
      EssenceStreamID () const
      {
        return this->EssenceStreamID_.get ();
      }

      IndexTableSegmentType::EssenceStreamID_type& IndexTableSegmentType::
      EssenceStreamID ()
      {
        return this->EssenceStreamID_.get ();
      }

      void IndexTableSegmentType::
      EssenceStreamID (const EssenceStreamID_type& x)
      {
        this->EssenceStreamID_.set (x);
      }

      void IndexTableSegmentType::
      EssenceStreamID (::std::auto_ptr< EssenceStreamID_type > x)
      {
        this->EssenceStreamID_.set (x);
      }

      IndexTableSegmentType::EssenceStreamID_type IndexTableSegmentType::
      EssenceStreamID_default_value ()
      {
        return EssenceStreamID_type (0);
      }

      const IndexTableSegmentType::SliceCount_optional& IndexTableSegmentType::
      SliceCount () const
      {
        return this->SliceCount_;
      }

      IndexTableSegmentType::SliceCount_optional& IndexTableSegmentType::
      SliceCount ()
      {
        return this->SliceCount_;
      }

      void IndexTableSegmentType::
      SliceCount (const SliceCount_type& x)
      {
        this->SliceCount_.set (x);
      }

      void IndexTableSegmentType::
      SliceCount (const SliceCount_optional& x)
      {
        this->SliceCount_ = x;
      }

      void IndexTableSegmentType::
      SliceCount (::std::auto_ptr< SliceCount_type > x)
      {
        this->SliceCount_.set (x);
      }

      IndexTableSegmentType::SliceCount_type IndexTableSegmentType::
      SliceCount_default_value ()
      {
        return SliceCount_type (0);
      }

      const IndexTableSegmentType::PositionTableCount_optional& IndexTableSegmentType::
      PositionTableCount () const
      {
        return this->PositionTableCount_;
      }

      IndexTableSegmentType::PositionTableCount_optional& IndexTableSegmentType::
      PositionTableCount ()
      {
        return this->PositionTableCount_;
      }

      void IndexTableSegmentType::
      PositionTableCount (const PositionTableCount_type& x)
      {
        this->PositionTableCount_.set (x);
      }

      void IndexTableSegmentType::
      PositionTableCount (const PositionTableCount_optional& x)
      {
        this->PositionTableCount_ = x;
      }

      void IndexTableSegmentType::
      PositionTableCount (::std::auto_ptr< PositionTableCount_type > x)
      {
        this->PositionTableCount_.set (x);
      }

      const IndexTableSegmentType::DeltaEntryArray_optional& IndexTableSegmentType::
      DeltaEntryArray () const
      {
        return this->DeltaEntryArray_;
      }

      IndexTableSegmentType::DeltaEntryArray_optional& IndexTableSegmentType::
      DeltaEntryArray ()
      {
        return this->DeltaEntryArray_;
      }

      void IndexTableSegmentType::
      DeltaEntryArray (const DeltaEntryArray_type& x)
      {
        this->DeltaEntryArray_.set (x);
      }

      void IndexTableSegmentType::
      DeltaEntryArray (const DeltaEntryArray_optional& x)
      {
        this->DeltaEntryArray_ = x;
      }

      void IndexTableSegmentType::
      DeltaEntryArray (::std::auto_ptr< DeltaEntryArray_type > x)
      {
        this->DeltaEntryArray_.set (x);
      }

      const IndexTableSegmentType::IndexEntryArray_optional& IndexTableSegmentType::
      IndexEntryArray () const
      {
        return this->IndexEntryArray_;
      }

      IndexTableSegmentType::IndexEntryArray_optional& IndexTableSegmentType::
      IndexEntryArray ()
      {
        return this->IndexEntryArray_;
      }

      void IndexTableSegmentType::
      IndexEntryArray (const IndexEntryArray_type& x)
      {
        this->IndexEntryArray_.set (x);
      }

      void IndexTableSegmentType::
      IndexEntryArray (const IndexEntryArray_optional& x)
      {
        this->IndexEntryArray_ = x;
      }

      void IndexTableSegmentType::
      IndexEntryArray (::std::auto_ptr< IndexEntryArray_type > x)
      {
        this->IndexEntryArray_.set (x);
      }


      // IndexTable
      // 

      const IndexTable::IndexTableSegment_sequence& IndexTable::
      IndexTableSegment () const
      {
        return this->IndexTableSegment_;
      }

      IndexTable::IndexTableSegment_sequence& IndexTable::
      IndexTableSegment ()
      {
        return this->IndexTableSegment_;
      }

      void IndexTable::
      IndexTableSegment (const IndexTableSegment_sequence& s)
      {
        this->IndexTableSegment_ = s;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      // IndexTableSegmentType
      //

      IndexTableSegmentType::
      IndexTableSegmentType (const InstanceID_type& InstanceID,
                             const IndexEditRate_type& IndexEditRate,
                             const IndexStartPosition_type& IndexStartPosition,
                             const IndexDuration_type& IndexDuration,
                             const EssenceStreamID_type& EssenceStreamID)
      : ::st434::s377m::groups::AbstractSetType (InstanceID),
        IndexEditRate_ (IndexEditRate, ::xml_schema::flags (), this),
        IndexStartPosition_ (IndexStartPosition, ::xml_schema::flags (), this),
        IndexDuration_ (IndexDuration, ::xml_schema::flags (), this),
        EditUnitByteCount_ (::xml_schema::flags (), this),
        IndexStreamID_ (::xml_schema::flags (), this),
        EssenceStreamID_ (EssenceStreamID, ::xml_schema::flags (), this),
        SliceCount_ (::xml_schema::flags (), this),
        PositionTableCount_ (::xml_schema::flags (), this),
        DeltaEntryArray_ (::xml_schema::flags (), this),
        IndexEntryArray_ (::xml_schema::flags (), this)
      {
      }

      IndexTableSegmentType::
      IndexTableSegmentType (const InstanceID_type& InstanceID,
                             ::std::auto_ptr< IndexEditRate_type >& IndexEditRate,
                             const IndexStartPosition_type& IndexStartPosition,
                             const IndexDuration_type& IndexDuration,
                             const EssenceStreamID_type& EssenceStreamID)
      : ::st434::s377m::groups::AbstractSetType (InstanceID),
        IndexEditRate_ (IndexEditRate, ::xml_schema::flags (), this),
        IndexStartPosition_ (IndexStartPosition, ::xml_schema::flags (), this),
        IndexDuration_ (IndexDuration, ::xml_schema::flags (), this),
        EditUnitByteCount_ (::xml_schema::flags (), this),
        IndexStreamID_ (::xml_schema::flags (), this),
        EssenceStreamID_ (EssenceStreamID, ::xml_schema::flags (), this),
        SliceCount_ (::xml_schema::flags (), this),
        PositionTableCount_ (::xml_schema::flags (), this),
        DeltaEntryArray_ (::xml_schema::flags (), this),
        IndexEntryArray_ (::xml_schema::flags (), this)
      {
      }

      IndexTableSegmentType::
      IndexTableSegmentType (const IndexTableSegmentType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
      : ::st434::s377m::groups::AbstractSetType (x, f, c),
        IndexEditRate_ (x.IndexEditRate_, f, this),
        IndexStartPosition_ (x.IndexStartPosition_, f, this),
        IndexDuration_ (x.IndexDuration_, f, this),
        EditUnitByteCount_ (x.EditUnitByteCount_, f, this),
        IndexStreamID_ (x.IndexStreamID_, f, this),
        EssenceStreamID_ (x.EssenceStreamID_, f, this),
        SliceCount_ (x.SliceCount_, f, this),
        PositionTableCount_ (x.PositionTableCount_, f, this),
        DeltaEntryArray_ (x.DeltaEntryArray_, f, this),
        IndexEntryArray_ (x.IndexEntryArray_, f, this)
      {
      }

      IndexTableSegmentType::
      IndexTableSegmentType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
      : ::st434::s377m::groups::AbstractSetType (e, f | ::xml_schema::flags::base, c),
        IndexEditRate_ (f, this),
        IndexStartPosition_ (f, this),
        IndexDuration_ (f, this),
        EditUnitByteCount_ (f, this),
        IndexStreamID_ (f, this),
        EssenceStreamID_ (f, this),
        SliceCount_ (f, this),
        PositionTableCount_ (f, this),
        DeltaEntryArray_ (f, this),
        IndexEntryArray_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void IndexTableSegmentType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::AbstractSetType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // IndexEditRate
          //
          if (n.name () == "IndexEditRate" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< IndexEditRate_type > r (
              IndexEditRate_traits::create (i, f, this));

            if (!IndexEditRate_.present ())
            {
              this->IndexEditRate_.set (r);
              continue;
            }
          }

          // IndexStartPosition
          //
          if (n.name () == "IndexStartPosition" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< IndexStartPosition_type > r (
              IndexStartPosition_traits::create (i, f, this));

            if (!IndexStartPosition_.present ())
            {
              this->IndexStartPosition_.set (r);
              continue;
            }
          }

          // IndexDuration
          //
          if (n.name () == "IndexDuration" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< IndexDuration_type > r (
              IndexDuration_traits::create (i, f, this));

            if (!IndexDuration_.present ())
            {
              this->IndexDuration_.set (r);
              continue;
            }
          }

          // EditUnitByteCount
          //
          if (n.name () == "EditUnitByteCount" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EditUnitByteCount_type > r (
              EditUnitByteCount_traits::create (i, f, this));

            if (!this->EditUnitByteCount_)
            {
              this->EditUnitByteCount_.set (r);
              continue;
            }
          }

          // IndexStreamID
          //
          if (n.name () == "IndexStreamID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< IndexStreamID_type > r (
              IndexStreamID_traits::create (i, f, this));

            if (!this->IndexStreamID_)
            {
              this->IndexStreamID_.set (r);
              continue;
            }
          }

          // EssenceStreamID
          //
          if (n.name () == "EssenceStreamID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EssenceStreamID_type > r (
              EssenceStreamID_traits::create (i, f, this));

            if (!EssenceStreamID_.present ())
            {
              this->EssenceStreamID_.set (r);
              continue;
            }
          }

          // SliceCount
          //
          if (n.name () == "SliceCount" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SliceCount_type > r (
              SliceCount_traits::create (i, f, this));

            if (!this->SliceCount_)
            {
              this->SliceCount_.set (r);
              continue;
            }
          }

          // PositionTableCount
          //
          if (n.name () == "PositionTableCount" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PositionTableCount_type > r (
              PositionTableCount_traits::create (i, f, this));

            if (!this->PositionTableCount_)
            {
              this->PositionTableCount_.set (r);
              continue;
            }
          }

          // DeltaEntryArray
          //
          if (n.name () == "DeltaEntryArray" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DeltaEntryArray_type > r (
              DeltaEntryArray_traits::create (i, f, this));

            if (!this->DeltaEntryArray_)
            {
              this->DeltaEntryArray_.set (r);
              continue;
            }
          }

          // IndexEntryArray
          //
          if (n.name () == "IndexEntryArray" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< IndexEntryArray_type > r (
              IndexEntryArray_traits::create (i, f, this));

            if (!this->IndexEntryArray_)
            {
              this->IndexEntryArray_.set (r);
              continue;
            }
          }

          break;
        }

        if (!IndexEditRate_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "IndexEditRate",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!IndexStartPosition_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "IndexStartPosition",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!IndexDuration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "IndexDuration",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!EssenceStreamID_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EssenceStreamID",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      IndexTableSegmentType* IndexTableSegmentType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class IndexTableSegmentType (*this, f, c);
      }

      IndexTableSegmentType::
      ~IndexTableSegmentType ()
      {
      }

      // IndexTable
      //

      IndexTable::
      IndexTable ()
      : ::xml_schema::type (),
        IndexTableSegment_ (::xml_schema::flags (), this)
      {
      }

      IndexTable::
      IndexTable (const IndexTable& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        IndexTableSegment_ (x.IndexTableSegment_, f, this)
      {
      }

      IndexTable::
      IndexTable (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        IndexTableSegment_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void IndexTable::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // IndexTableSegment
          //
          if (n.name () == "IndexTableSegment" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            ::std::auto_ptr< IndexTableSegment_type > r (
              IndexTableSegment_traits::create (i, f, this));

            this->IndexTableSegment_.push_back (r);
            continue;
          }

          break;
        }
      }

      IndexTable* IndexTable::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class IndexTable (*this, f, c);
      }

      IndexTable::
      ~IndexTable ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType > r (
          ::st434::s377m::groups::IndexTableSegment (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType > r (
          ::st434::s377m::groups::IndexTableSegment (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType > r (
          ::st434::s377m::groups::IndexTableSegment (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::IndexTableSegment (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::IndexTableSegment (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::IndexTableSegment (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::IndexTableSegment (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::IndexTableSegment (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::IndexTableSegment (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType > r (
          ::st434::s377m::groups::IndexTableSegment (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType > r (
          ::st434::s377m::groups::IndexTableSegment (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType > r (
          ::st434::s377m::groups::IndexTableSegment (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType > r (
            ::st434::s377m::groups::IndexTableSegment (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "IndexTableSegment" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::IndexTableSegmentType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "IndexTableSegment",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType >
      IndexTableSegment (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "IndexTableSegment" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::IndexTableSegmentType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::IndexTableSegmentType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "IndexTableSegment",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::IndexTable > r (
          ::st434::s377m::groups::IndexTable_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::IndexTable > r (
          ::st434::s377m::groups::IndexTable_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::IndexTable > r (
          ::st434::s377m::groups::IndexTable_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::IndexTable_ (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::IndexTable_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::IndexTable_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::IndexTable_ (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::IndexTable_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::IndexTable_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::IndexTable > r (
          ::st434::s377m::groups::IndexTable_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::IndexTable > r (
          ::st434::s377m::groups::IndexTable_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::IndexTable > r (
          ::st434::s377m::groups::IndexTable_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::IndexTable > r (
            ::st434::s377m::groups::IndexTable_ (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "IndexTable" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::IndexTable > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::IndexTable, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "IndexTable",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::IndexTable >
      IndexTable_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "IndexTable" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::IndexTable > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::IndexTable, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "IndexTable",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      void
      IndexTableSegment (::std::ostream& o,
                         const ::st434::s377m::groups::IndexTableSegmentType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::IndexTableSegment (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      IndexTableSegment (::std::ostream& o,
                         const ::st434::s377m::groups::IndexTableSegmentType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::IndexTableSegment (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      IndexTableSegment (::std::ostream& o,
                         const ::st434::s377m::groups::IndexTableSegmentType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::IndexTableSegment (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      IndexTableSegment (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::groups::IndexTableSegmentType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::IndexTableSegment (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      IndexTableSegment (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::groups::IndexTableSegmentType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::IndexTableSegment (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      IndexTableSegment (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::groups::IndexTableSegmentType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::IndexTableSegment (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      IndexTableSegment (::xercesc::DOMDocument& d,
                         const ::st434::s377m::groups::IndexTableSegmentType& s,
                         ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "IndexTableSegment" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "IndexTableSegment",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      IndexTableSegment (const ::st434::s377m::groups::IndexTableSegmentType& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "IndexTableSegment",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::IndexTableSegment (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const IndexTableSegmentType& i)
      {
        e << static_cast< const ::st434::s377m::groups::AbstractSetType& > (i);

        // IndexEditRate
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IndexEditRate",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.IndexEditRate ();
        }

        // IndexStartPosition
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IndexStartPosition",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.IndexStartPosition ();
        }

        // IndexDuration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IndexDuration",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.IndexDuration ();
        }

        // EditUnitByteCount
        //
        if (i.EditUnitByteCount ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EditUnitByteCount",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.EditUnitByteCount ();
        }

        // IndexStreamID
        //
        if (i.IndexStreamID ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IndexStreamID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.IndexStreamID ();
        }

        // EssenceStreamID
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EssenceStreamID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.EssenceStreamID ();
        }

        // SliceCount
        //
        if (i.SliceCount ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SliceCount",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.SliceCount ();
        }

        // PositionTableCount
        //
        if (i.PositionTableCount ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PositionTableCount",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.PositionTableCount ();
        }

        // DeltaEntryArray
        //
        if (i.DeltaEntryArray ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DeltaEntryArray",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DeltaEntryArray ();
        }

        // IndexEntryArray
        //
        if (i.IndexEntryArray ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IndexEntryArray",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.IndexEntryArray ();
        }
      }

      void
      IndexTable_ (::std::ostream& o,
                   const ::st434::s377m::groups::IndexTable& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::IndexTable_ (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      IndexTable_ (::std::ostream& o,
                   const ::st434::s377m::groups::IndexTable& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::IndexTable_ (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      IndexTable_ (::std::ostream& o,
                   const ::st434::s377m::groups::IndexTable& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::IndexTable_ (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      IndexTable_ (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::groups::IndexTable& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::IndexTable_ (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      IndexTable_ (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::groups::IndexTable& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::IndexTable_ (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      IndexTable_ (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::groups::IndexTable& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::IndexTable_ (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      IndexTable_ (::xercesc::DOMDocument& d,
                   const ::st434::s377m::groups::IndexTable& s,
                   ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "IndexTable" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "IndexTable",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      IndexTable_ (const ::st434::s377m::groups::IndexTable& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "IndexTable",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::IndexTable_ (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const IndexTable& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // IndexTableSegment
        //
        for (IndexTable::IndexTableSegment_const_iterator
             b (i.IndexTableSegment ().begin ()), n (i.IndexTableSegment ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IndexTableSegment",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          s << *b;
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

