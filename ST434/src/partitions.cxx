// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "mxf/partitions.hxx"

namespace st434
{
  namespace s377m
  {
    namespace multiplex
    {
      // HeaderPartition
      // 

      const HeaderPartition::PartitionPack_type& HeaderPartition::
      PartitionPack () const
      {
        return this->PartitionPack_.get ();
      }

      HeaderPartition::PartitionPack_type& HeaderPartition::
      PartitionPack ()
      {
        return this->PartitionPack_.get ();
      }

      void HeaderPartition::
      PartitionPack (const PartitionPack_type& x)
      {
        this->PartitionPack_.set (x);
      }

      void HeaderPartition::
      PartitionPack (::std::auto_ptr< PartitionPack_type > x)
      {
        this->PartitionPack_.set (x);
      }

      const HeaderPartition::HeaderMetadata_type& HeaderPartition::
      HeaderMetadata () const
      {
        return this->HeaderMetadata_.get ();
      }

      HeaderPartition::HeaderMetadata_type& HeaderPartition::
      HeaderMetadata ()
      {
        return this->HeaderMetadata_.get ();
      }

      void HeaderPartition::
      HeaderMetadata (const HeaderMetadata_type& x)
      {
        this->HeaderMetadata_.set (x);
      }

      void HeaderPartition::
      HeaderMetadata (::std::auto_ptr< HeaderMetadata_type > x)
      {
        this->HeaderMetadata_.set (x);
      }

      const HeaderPartition::IndexTable_optional& HeaderPartition::
      IndexTable () const
      {
        return this->IndexTable_;
      }

      HeaderPartition::IndexTable_optional& HeaderPartition::
      IndexTable ()
      {
        return this->IndexTable_;
      }

      void HeaderPartition::
      IndexTable (const IndexTable_type& x)
      {
        this->IndexTable_.set (x);
      }

      void HeaderPartition::
      IndexTable (const IndexTable_optional& x)
      {
        this->IndexTable_ = x;
      }

      void HeaderPartition::
      IndexTable (::std::auto_ptr< IndexTable_type > x)
      {
        this->IndexTable_.set (x);
      }


      // BodyPartition
      // 

      const BodyPartition::PartitionPack_type& BodyPartition::
      PartitionPack () const
      {
        return this->PartitionPack_.get ();
      }

      BodyPartition::PartitionPack_type& BodyPartition::
      PartitionPack ()
      {
        return this->PartitionPack_.get ();
      }

      void BodyPartition::
      PartitionPack (const PartitionPack_type& x)
      {
        this->PartitionPack_.set (x);
      }

      void BodyPartition::
      PartitionPack (::std::auto_ptr< PartitionPack_type > x)
      {
        this->PartitionPack_.set (x);
      }

      const BodyPartition::HeaderMetadata_optional& BodyPartition::
      HeaderMetadata () const
      {
        return this->HeaderMetadata_;
      }

      BodyPartition::HeaderMetadata_optional& BodyPartition::
      HeaderMetadata ()
      {
        return this->HeaderMetadata_;
      }

      void BodyPartition::
      HeaderMetadata (const HeaderMetadata_type& x)
      {
        this->HeaderMetadata_.set (x);
      }

      void BodyPartition::
      HeaderMetadata (const HeaderMetadata_optional& x)
      {
        this->HeaderMetadata_ = x;
      }

      void BodyPartition::
      HeaderMetadata (::std::auto_ptr< HeaderMetadata_type > x)
      {
        this->HeaderMetadata_.set (x);
      }

      const BodyPartition::IndexTable_optional& BodyPartition::
      IndexTable () const
      {
        return this->IndexTable_;
      }

      BodyPartition::IndexTable_optional& BodyPartition::
      IndexTable ()
      {
        return this->IndexTable_;
      }

      void BodyPartition::
      IndexTable (const IndexTable_type& x)
      {
        this->IndexTable_.set (x);
      }

      void BodyPartition::
      IndexTable (const IndexTable_optional& x)
      {
        this->IndexTable_ = x;
      }

      void BodyPartition::
      IndexTable (::std::auto_ptr< IndexTable_type > x)
      {
        this->IndexTable_.set (x);
      }


      // FooterPartition
      // 

      const FooterPartition::PartitionPack_type& FooterPartition::
      PartitionPack () const
      {
        return this->PartitionPack_.get ();
      }

      FooterPartition::PartitionPack_type& FooterPartition::
      PartitionPack ()
      {
        return this->PartitionPack_.get ();
      }

      void FooterPartition::
      PartitionPack (const PartitionPack_type& x)
      {
        this->PartitionPack_.set (x);
      }

      void FooterPartition::
      PartitionPack (::std::auto_ptr< PartitionPack_type > x)
      {
        this->PartitionPack_.set (x);
      }

      const FooterPartition::HeaderMetadata_optional& FooterPartition::
      HeaderMetadata () const
      {
        return this->HeaderMetadata_;
      }

      FooterPartition::HeaderMetadata_optional& FooterPartition::
      HeaderMetadata ()
      {
        return this->HeaderMetadata_;
      }

      void FooterPartition::
      HeaderMetadata (const HeaderMetadata_type& x)
      {
        this->HeaderMetadata_.set (x);
      }

      void FooterPartition::
      HeaderMetadata (const HeaderMetadata_optional& x)
      {
        this->HeaderMetadata_ = x;
      }

      void FooterPartition::
      HeaderMetadata (::std::auto_ptr< HeaderMetadata_type > x)
      {
        this->HeaderMetadata_.set (x);
      }

      const FooterPartition::IndexTable_optional& FooterPartition::
      IndexTable () const
      {
        return this->IndexTable_;
      }

      FooterPartition::IndexTable_optional& FooterPartition::
      IndexTable ()
      {
        return this->IndexTable_;
      }

      void FooterPartition::
      IndexTable (const IndexTable_type& x)
      {
        this->IndexTable_.set (x);
      }

      void FooterPartition::
      IndexTable (const IndexTable_optional& x)
      {
        this->IndexTable_ = x;
      }

      void FooterPartition::
      IndexTable (::std::auto_ptr< IndexTable_type > x)
      {
        this->IndexTable_.set (x);
      }


      // HeaderMetadata
      // 

      const HeaderMetadata::PrimerPack_type& HeaderMetadata::
      PrimerPack () const
      {
        return this->PrimerPack_.get ();
      }

      HeaderMetadata::PrimerPack_type& HeaderMetadata::
      PrimerPack ()
      {
        return this->PrimerPack_.get ();
      }

      void HeaderMetadata::
      PrimerPack (const PrimerPack_type& x)
      {
        this->PrimerPack_.set (x);
      }

      void HeaderMetadata::
      PrimerPack (::std::auto_ptr< PrimerPack_type > x)
      {
        this->PrimerPack_.set (x);
      }

      const HeaderMetadata::MetadataSets_type& HeaderMetadata::
      MetadataSets () const
      {
        return this->MetadataSets_.get ();
      }

      HeaderMetadata::MetadataSets_type& HeaderMetadata::
      MetadataSets ()
      {
        return this->MetadataSets_.get ();
      }

      void HeaderMetadata::
      MetadataSets (const MetadataSets_type& x)
      {
        this->MetadataSets_.set (x);
      }

      void HeaderMetadata::
      MetadataSets (::std::auto_ptr< MetadataSets_type > x)
      {
        this->MetadataSets_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace st434
{
  namespace s377m
  {
    namespace multiplex
    {
      // HeaderPartition
      //

      HeaderPartition::
      HeaderPartition (const PartitionPack_type& PartitionPack,
                       const HeaderMetadata_type& HeaderMetadata)
      : ::xml_schema::type (),
        PartitionPack_ (PartitionPack, ::xml_schema::flags (), this),
        HeaderMetadata_ (HeaderMetadata, ::xml_schema::flags (), this),
        IndexTable_ (::xml_schema::flags (), this)
      {
      }

      HeaderPartition::
      HeaderPartition (::std::auto_ptr< PartitionPack_type >& PartitionPack,
                       ::std::auto_ptr< HeaderMetadata_type >& HeaderMetadata)
      : ::xml_schema::type (),
        PartitionPack_ (PartitionPack, ::xml_schema::flags (), this),
        HeaderMetadata_ (HeaderMetadata, ::xml_schema::flags (), this),
        IndexTable_ (::xml_schema::flags (), this)
      {
      }

      HeaderPartition::
      HeaderPartition (const HeaderPartition& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        PartitionPack_ (x.PartitionPack_, f, this),
        HeaderMetadata_ (x.HeaderMetadata_, f, this),
        IndexTable_ (x.IndexTable_, f, this)
      {
      }

      HeaderPartition::
      HeaderPartition (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        PartitionPack_ (f, this),
        HeaderMetadata_ (f, this),
        IndexTable_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void HeaderPartition::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PartitionPack
          //
          if (n.name () == "PartitionPack" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            ::std::auto_ptr< PartitionPack_type > r (
              PartitionPack_traits::create (i, f, this));

            if (!PartitionPack_.present ())
            {
              this->PartitionPack_.set (r);
              continue;
            }
          }

          // HeaderMetadata
          //
          if (n.name () == "HeaderMetadata" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
          {
            ::std::auto_ptr< HeaderMetadata_type > r (
              HeaderMetadata_traits::create (i, f, this));

            if (!HeaderMetadata_.present ())
            {
              this->HeaderMetadata_.set (r);
              continue;
            }
          }

          // IndexTable
          //
          if (n.name () == "IndexTable" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            ::std::auto_ptr< IndexTable_type > r (
              IndexTable_traits::create (i, f, this));

            if (!this->IndexTable_)
            {
              this->IndexTable_.set (r);
              continue;
            }
          }

          break;
        }

        if (!PartitionPack_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PartitionPack",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }

        if (!HeaderMetadata_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HeaderMetadata",
            "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004");
        }
      }

      HeaderPartition* HeaderPartition::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class HeaderPartition (*this, f, c);
      }

      HeaderPartition::
      ~HeaderPartition ()
      {
      }

      // BodyPartition
      //

      BodyPartition::
      BodyPartition (const PartitionPack_type& PartitionPack)
      : ::xml_schema::type (),
        PartitionPack_ (PartitionPack, ::xml_schema::flags (), this),
        HeaderMetadata_ (::xml_schema::flags (), this),
        IndexTable_ (::xml_schema::flags (), this)
      {
      }

      BodyPartition::
      BodyPartition (::std::auto_ptr< PartitionPack_type >& PartitionPack)
      : ::xml_schema::type (),
        PartitionPack_ (PartitionPack, ::xml_schema::flags (), this),
        HeaderMetadata_ (::xml_schema::flags (), this),
        IndexTable_ (::xml_schema::flags (), this)
      {
      }

      BodyPartition::
      BodyPartition (const BodyPartition& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        PartitionPack_ (x.PartitionPack_, f, this),
        HeaderMetadata_ (x.HeaderMetadata_, f, this),
        IndexTable_ (x.IndexTable_, f, this)
      {
      }

      BodyPartition::
      BodyPartition (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        PartitionPack_ (f, this),
        HeaderMetadata_ (f, this),
        IndexTable_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void BodyPartition::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PartitionPack
          //
          if (n.name () == "PartitionPack" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            ::std::auto_ptr< PartitionPack_type > r (
              PartitionPack_traits::create (i, f, this));

            if (!PartitionPack_.present ())
            {
              this->PartitionPack_.set (r);
              continue;
            }
          }

          // HeaderMetadata
          //
          if (n.name () == "HeaderMetadata" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
          {
            ::std::auto_ptr< HeaderMetadata_type > r (
              HeaderMetadata_traits::create (i, f, this));

            if (!this->HeaderMetadata_)
            {
              this->HeaderMetadata_.set (r);
              continue;
            }
          }

          // IndexTable
          //
          if (n.name () == "IndexTable" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            ::std::auto_ptr< IndexTable_type > r (
              IndexTable_traits::create (i, f, this));

            if (!this->IndexTable_)
            {
              this->IndexTable_.set (r);
              continue;
            }
          }

          break;
        }

        if (!PartitionPack_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PartitionPack",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      BodyPartition* BodyPartition::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class BodyPartition (*this, f, c);
      }

      BodyPartition::
      ~BodyPartition ()
      {
      }

      // FooterPartition
      //

      FooterPartition::
      FooterPartition (const PartitionPack_type& PartitionPack)
      : ::xml_schema::type (),
        PartitionPack_ (PartitionPack, ::xml_schema::flags (), this),
        HeaderMetadata_ (::xml_schema::flags (), this),
        IndexTable_ (::xml_schema::flags (), this)
      {
      }

      FooterPartition::
      FooterPartition (::std::auto_ptr< PartitionPack_type >& PartitionPack)
      : ::xml_schema::type (),
        PartitionPack_ (PartitionPack, ::xml_schema::flags (), this),
        HeaderMetadata_ (::xml_schema::flags (), this),
        IndexTable_ (::xml_schema::flags (), this)
      {
      }

      FooterPartition::
      FooterPartition (const FooterPartition& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        PartitionPack_ (x.PartitionPack_, f, this),
        HeaderMetadata_ (x.HeaderMetadata_, f, this),
        IndexTable_ (x.IndexTable_, f, this)
      {
      }

      FooterPartition::
      FooterPartition (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        PartitionPack_ (f, this),
        HeaderMetadata_ (f, this),
        IndexTable_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void FooterPartition::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PartitionPack
          //
          if (n.name () == "PartitionPack" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            ::std::auto_ptr< PartitionPack_type > r (
              PartitionPack_traits::create (i, f, this));

            if (!PartitionPack_.present ())
            {
              this->PartitionPack_.set (r);
              continue;
            }
          }

          // HeaderMetadata
          //
          if (n.name () == "HeaderMetadata" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
          {
            ::std::auto_ptr< HeaderMetadata_type > r (
              HeaderMetadata_traits::create (i, f, this));

            if (!this->HeaderMetadata_)
            {
              this->HeaderMetadata_.set (r);
              continue;
            }
          }

          // IndexTable
          //
          if (n.name () == "IndexTable" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            ::std::auto_ptr< IndexTable_type > r (
              IndexTable_traits::create (i, f, this));

            if (!this->IndexTable_)
            {
              this->IndexTable_.set (r);
              continue;
            }
          }

          break;
        }

        if (!PartitionPack_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PartitionPack",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      FooterPartition* FooterPartition::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class FooterPartition (*this, f, c);
      }

      FooterPartition::
      ~FooterPartition ()
      {
      }

      // HeaderMetadata
      //

      HeaderMetadata::
      HeaderMetadata (const PrimerPack_type& PrimerPack,
                      const MetadataSets_type& MetadataSets)
      : ::xml_schema::type (),
        PrimerPack_ (PrimerPack, ::xml_schema::flags (), this),
        MetadataSets_ (MetadataSets, ::xml_schema::flags (), this)
      {
      }

      HeaderMetadata::
      HeaderMetadata (::std::auto_ptr< PrimerPack_type >& PrimerPack,
                      ::std::auto_ptr< MetadataSets_type >& MetadataSets)
      : ::xml_schema::type (),
        PrimerPack_ (PrimerPack, ::xml_schema::flags (), this),
        MetadataSets_ (MetadataSets, ::xml_schema::flags (), this)
      {
      }

      HeaderMetadata::
      HeaderMetadata (const HeaderMetadata& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        PrimerPack_ (x.PrimerPack_, f, this),
        MetadataSets_ (x.MetadataSets_, f, this)
      {
      }

      HeaderMetadata::
      HeaderMetadata (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        PrimerPack_ (f, this),
        MetadataSets_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void HeaderMetadata::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PrimerPack
          //
          if (n.name () == "PrimerPack" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            ::std::auto_ptr< PrimerPack_type > r (
              PrimerPack_traits::create (i, f, this));

            if (!PrimerPack_.present ())
            {
              this->PrimerPack_.set (r);
              continue;
            }
          }

          // MetadataSets
          //
          if (n.name () == "MetadataSets" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
          {
            ::std::auto_ptr< MetadataSets_type > r (
              MetadataSets_traits::create (i, f, this));

            if (!MetadataSets_.present ())
            {
              this->MetadataSets_.set (r);
              continue;
            }
          }

          break;
        }

        if (!PrimerPack_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PrimerPack",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }

        if (!MetadataSets_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MetadataSets",
            "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004");
        }
      }

      HeaderMetadata* HeaderMetadata::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class HeaderMetadata (*this, f, c);
      }

      HeaderMetadata::
      ~HeaderMetadata ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace st434
{
  namespace s377m
  {
    namespace multiplex
    {
      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition > r (
          ::st434::s377m::multiplex::HeaderPartition_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition > r (
          ::st434::s377m::multiplex::HeaderPartition_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition > r (
          ::st434::s377m::multiplex::HeaderPartition_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::multiplex::HeaderPartition_ (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::multiplex::HeaderPartition_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::multiplex::HeaderPartition_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::multiplex::HeaderPartition_ (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::multiplex::HeaderPartition_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::multiplex::HeaderPartition_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition > r (
          ::st434::s377m::multiplex::HeaderPartition_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition > r (
          ::st434::s377m::multiplex::HeaderPartition_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition > r (
          ::st434::s377m::multiplex::HeaderPartition_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition > r (
            ::st434::s377m::multiplex::HeaderPartition_ (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "HeaderPartition" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::multiplex::HeaderPartition, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "HeaderPartition",
          "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition >
      HeaderPartition_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "HeaderPartition" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::multiplex::HeaderPartition > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::multiplex::HeaderPartition, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "HeaderPartition",
          "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition > r (
          ::st434::s377m::multiplex::BodyPartition_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition > r (
          ::st434::s377m::multiplex::BodyPartition_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition > r (
          ::st434::s377m::multiplex::BodyPartition_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::multiplex::BodyPartition_ (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::multiplex::BodyPartition_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::multiplex::BodyPartition_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::multiplex::BodyPartition_ (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::multiplex::BodyPartition_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::multiplex::BodyPartition_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition > r (
          ::st434::s377m::multiplex::BodyPartition_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition > r (
          ::st434::s377m::multiplex::BodyPartition_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition > r (
          ::st434::s377m::multiplex::BodyPartition_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition > r (
            ::st434::s377m::multiplex::BodyPartition_ (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "BodyPartition" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::multiplex::BodyPartition, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "BodyPartition",
          "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition >
      BodyPartition_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "BodyPartition" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::multiplex::BodyPartition > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::multiplex::BodyPartition, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "BodyPartition",
          "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition > r (
          ::st434::s377m::multiplex::FooterPartition_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition > r (
          ::st434::s377m::multiplex::FooterPartition_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition > r (
          ::st434::s377m::multiplex::FooterPartition_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::multiplex::FooterPartition_ (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::multiplex::FooterPartition_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::multiplex::FooterPartition_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::multiplex::FooterPartition_ (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::multiplex::FooterPartition_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::multiplex::FooterPartition_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition > r (
          ::st434::s377m::multiplex::FooterPartition_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition > r (
          ::st434::s377m::multiplex::FooterPartition_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition > r (
          ::st434::s377m::multiplex::FooterPartition_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition > r (
            ::st434::s377m::multiplex::FooterPartition_ (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "FooterPartition" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::multiplex::FooterPartition, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FooterPartition",
          "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition >
      FooterPartition_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "FooterPartition" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::multiplex::FooterPartition > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::multiplex::FooterPartition, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FooterPartition",
          "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata > r (
          ::st434::s377m::multiplex::HeaderMetadata_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata > r (
          ::st434::s377m::multiplex::HeaderMetadata_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata > r (
          ::st434::s377m::multiplex::HeaderMetadata_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::multiplex::HeaderMetadata_ (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::multiplex::HeaderMetadata_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::multiplex::HeaderMetadata_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::multiplex::HeaderMetadata_ (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::multiplex::HeaderMetadata_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::multiplex::HeaderMetadata_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata > r (
          ::st434::s377m::multiplex::HeaderMetadata_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata > r (
          ::st434::s377m::multiplex::HeaderMetadata_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata > r (
          ::st434::s377m::multiplex::HeaderMetadata_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata > r (
            ::st434::s377m::multiplex::HeaderMetadata_ (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "HeaderMetadata" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::multiplex::HeaderMetadata, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "HeaderMetadata",
          "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata >
      HeaderMetadata_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "HeaderMetadata" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::multiplex::HeaderMetadata > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::multiplex::HeaderMetadata, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "HeaderMetadata",
          "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace st434
{
  namespace s377m
  {
    namespace multiplex
    {
      void
      HeaderPartition_ (::std::ostream& o,
                        const ::st434::s377m::multiplex::HeaderPartition& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::HeaderPartition_ (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      HeaderPartition_ (::std::ostream& o,
                        const ::st434::s377m::multiplex::HeaderPartition& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::HeaderPartition_ (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      HeaderPartition_ (::std::ostream& o,
                        const ::st434::s377m::multiplex::HeaderPartition& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::HeaderPartition_ (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      HeaderPartition_ (::xercesc::XMLFormatTarget& t,
                        const ::st434::s377m::multiplex::HeaderPartition& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::HeaderPartition_ (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      HeaderPartition_ (::xercesc::XMLFormatTarget& t,
                        const ::st434::s377m::multiplex::HeaderPartition& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::HeaderPartition_ (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      HeaderPartition_ (::xercesc::XMLFormatTarget& t,
                        const ::st434::s377m::multiplex::HeaderPartition& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::HeaderPartition_ (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      HeaderPartition_ (::xercesc::DOMDocument& d,
                        const ::st434::s377m::multiplex::HeaderPartition& s,
                        ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "HeaderPartition" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "HeaderPartition",
            "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      HeaderPartition_ (const ::st434::s377m::multiplex::HeaderPartition& s,
                        const ::xml_schema::namespace_infomap& m,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "HeaderPartition",
            "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004",
            m, f));

        ::st434::s377m::multiplex::HeaderPartition_ (*d, s, f);
        return d;
      }

      void
      BodyPartition_ (::std::ostream& o,
                      const ::st434::s377m::multiplex::BodyPartition& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::BodyPartition_ (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      BodyPartition_ (::std::ostream& o,
                      const ::st434::s377m::multiplex::BodyPartition& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::BodyPartition_ (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      BodyPartition_ (::std::ostream& o,
                      const ::st434::s377m::multiplex::BodyPartition& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::BodyPartition_ (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      BodyPartition_ (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::multiplex::BodyPartition& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::BodyPartition_ (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      BodyPartition_ (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::multiplex::BodyPartition& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::BodyPartition_ (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      BodyPartition_ (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::multiplex::BodyPartition& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::BodyPartition_ (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      BodyPartition_ (::xercesc::DOMDocument& d,
                      const ::st434::s377m::multiplex::BodyPartition& s,
                      ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "BodyPartition" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "BodyPartition",
            "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      BodyPartition_ (const ::st434::s377m::multiplex::BodyPartition& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "BodyPartition",
            "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004",
            m, f));

        ::st434::s377m::multiplex::BodyPartition_ (*d, s, f);
        return d;
      }

      void
      FooterPartition_ (::std::ostream& o,
                        const ::st434::s377m::multiplex::FooterPartition& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::FooterPartition_ (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      FooterPartition_ (::std::ostream& o,
                        const ::st434::s377m::multiplex::FooterPartition& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::FooterPartition_ (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      FooterPartition_ (::std::ostream& o,
                        const ::st434::s377m::multiplex::FooterPartition& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::FooterPartition_ (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      FooterPartition_ (::xercesc::XMLFormatTarget& t,
                        const ::st434::s377m::multiplex::FooterPartition& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::FooterPartition_ (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      FooterPartition_ (::xercesc::XMLFormatTarget& t,
                        const ::st434::s377m::multiplex::FooterPartition& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::FooterPartition_ (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      FooterPartition_ (::xercesc::XMLFormatTarget& t,
                        const ::st434::s377m::multiplex::FooterPartition& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::FooterPartition_ (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      FooterPartition_ (::xercesc::DOMDocument& d,
                        const ::st434::s377m::multiplex::FooterPartition& s,
                        ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "FooterPartition" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "FooterPartition",
            "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      FooterPartition_ (const ::st434::s377m::multiplex::FooterPartition& s,
                        const ::xml_schema::namespace_infomap& m,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "FooterPartition",
            "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004",
            m, f));

        ::st434::s377m::multiplex::FooterPartition_ (*d, s, f);
        return d;
      }

      void
      HeaderMetadata_ (::std::ostream& o,
                       const ::st434::s377m::multiplex::HeaderMetadata& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::HeaderMetadata_ (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      HeaderMetadata_ (::std::ostream& o,
                       const ::st434::s377m::multiplex::HeaderMetadata& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::HeaderMetadata_ (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      HeaderMetadata_ (::std::ostream& o,
                       const ::st434::s377m::multiplex::HeaderMetadata& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::HeaderMetadata_ (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      HeaderMetadata_ (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::multiplex::HeaderMetadata& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::HeaderMetadata_ (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      HeaderMetadata_ (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::multiplex::HeaderMetadata& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::HeaderMetadata_ (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      HeaderMetadata_ (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::multiplex::HeaderMetadata& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::HeaderMetadata_ (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      HeaderMetadata_ (::xercesc::DOMDocument& d,
                       const ::st434::s377m::multiplex::HeaderMetadata& s,
                       ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "HeaderMetadata" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "HeaderMetadata",
            "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      HeaderMetadata_ (const ::st434::s377m::multiplex::HeaderMetadata& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "HeaderMetadata",
            "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004",
            m, f));

        ::st434::s377m::multiplex::HeaderMetadata_ (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const HeaderPartition& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // PartitionPack
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PartitionPack",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          s << i.PartitionPack ();
        }

        // HeaderMetadata
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HeaderMetadata",
              "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004",
              e));

          s << i.HeaderMetadata ();
        }

        // IndexTable
        //
        if (i.IndexTable ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IndexTable",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          s << *i.IndexTable ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const BodyPartition& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // PartitionPack
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PartitionPack",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          s << i.PartitionPack ();
        }

        // HeaderMetadata
        //
        if (i.HeaderMetadata ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HeaderMetadata",
              "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004",
              e));

          s << *i.HeaderMetadata ();
        }

        // IndexTable
        //
        if (i.IndexTable ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IndexTable",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          s << *i.IndexTable ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const FooterPartition& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // PartitionPack
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PartitionPack",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          s << i.PartitionPack ();
        }

        // HeaderMetadata
        //
        if (i.HeaderMetadata ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HeaderMetadata",
              "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004",
              e));

          s << *i.HeaderMetadata ();
        }

        // IndexTable
        //
        if (i.IndexTable ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IndexTable",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          s << *i.IndexTable ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const HeaderMetadata& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // PrimerPack
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PrimerPack",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          s << i.PrimerPack ();
        }

        // MetadataSets
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MetadataSets",
              "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004",
              e));

          s << i.MetadataSets ();
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

