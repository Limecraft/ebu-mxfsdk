// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "groups/s422m_metadata.hxx"

namespace st434
{
  namespace s422m
  {
    namespace groups
    {
      // JPEG2000SubDescriptorType
      // 

      const JPEG2000SubDescriptorType::Rsiz_type& JPEG2000SubDescriptorType::
      Rsiz () const
      {
        return this->Rsiz_.get ();
      }

      JPEG2000SubDescriptorType::Rsiz_type& JPEG2000SubDescriptorType::
      Rsiz ()
      {
        return this->Rsiz_.get ();
      }

      void JPEG2000SubDescriptorType::
      Rsiz (const Rsiz_type& x)
      {
        this->Rsiz_.set (x);
      }

      void JPEG2000SubDescriptorType::
      Rsiz (::std::auto_ptr< Rsiz_type > x)
      {
        this->Rsiz_.set (x);
      }

      const JPEG2000SubDescriptorType::Xsiz_type& JPEG2000SubDescriptorType::
      Xsiz () const
      {
        return this->Xsiz_.get ();
      }

      JPEG2000SubDescriptorType::Xsiz_type& JPEG2000SubDescriptorType::
      Xsiz ()
      {
        return this->Xsiz_.get ();
      }

      void JPEG2000SubDescriptorType::
      Xsiz (const Xsiz_type& x)
      {
        this->Xsiz_.set (x);
      }

      void JPEG2000SubDescriptorType::
      Xsiz (::std::auto_ptr< Xsiz_type > x)
      {
        this->Xsiz_.set (x);
      }

      const JPEG2000SubDescriptorType::Ysiz_type& JPEG2000SubDescriptorType::
      Ysiz () const
      {
        return this->Ysiz_.get ();
      }

      JPEG2000SubDescriptorType::Ysiz_type& JPEG2000SubDescriptorType::
      Ysiz ()
      {
        return this->Ysiz_.get ();
      }

      void JPEG2000SubDescriptorType::
      Ysiz (const Ysiz_type& x)
      {
        this->Ysiz_.set (x);
      }

      void JPEG2000SubDescriptorType::
      Ysiz (::std::auto_ptr< Ysiz_type > x)
      {
        this->Ysiz_.set (x);
      }

      const JPEG2000SubDescriptorType::XOsiz_type& JPEG2000SubDescriptorType::
      XOsiz () const
      {
        return this->XOsiz_.get ();
      }

      JPEG2000SubDescriptorType::XOsiz_type& JPEG2000SubDescriptorType::
      XOsiz ()
      {
        return this->XOsiz_.get ();
      }

      void JPEG2000SubDescriptorType::
      XOsiz (const XOsiz_type& x)
      {
        this->XOsiz_.set (x);
      }

      void JPEG2000SubDescriptorType::
      XOsiz (::std::auto_ptr< XOsiz_type > x)
      {
        this->XOsiz_.set (x);
      }

      const JPEG2000SubDescriptorType::YOsiz_type& JPEG2000SubDescriptorType::
      YOsiz () const
      {
        return this->YOsiz_.get ();
      }

      JPEG2000SubDescriptorType::YOsiz_type& JPEG2000SubDescriptorType::
      YOsiz ()
      {
        return this->YOsiz_.get ();
      }

      void JPEG2000SubDescriptorType::
      YOsiz (const YOsiz_type& x)
      {
        this->YOsiz_.set (x);
      }

      void JPEG2000SubDescriptorType::
      YOsiz (::std::auto_ptr< YOsiz_type > x)
      {
        this->YOsiz_.set (x);
      }

      const JPEG2000SubDescriptorType::XTsiz_type& JPEG2000SubDescriptorType::
      XTsiz () const
      {
        return this->XTsiz_.get ();
      }

      JPEG2000SubDescriptorType::XTsiz_type& JPEG2000SubDescriptorType::
      XTsiz ()
      {
        return this->XTsiz_.get ();
      }

      void JPEG2000SubDescriptorType::
      XTsiz (const XTsiz_type& x)
      {
        this->XTsiz_.set (x);
      }

      void JPEG2000SubDescriptorType::
      XTsiz (::std::auto_ptr< XTsiz_type > x)
      {
        this->XTsiz_.set (x);
      }

      const JPEG2000SubDescriptorType::YTsiz_type& JPEG2000SubDescriptorType::
      YTsiz () const
      {
        return this->YTsiz_.get ();
      }

      JPEG2000SubDescriptorType::YTsiz_type& JPEG2000SubDescriptorType::
      YTsiz ()
      {
        return this->YTsiz_.get ();
      }

      void JPEG2000SubDescriptorType::
      YTsiz (const YTsiz_type& x)
      {
        this->YTsiz_.set (x);
      }

      void JPEG2000SubDescriptorType::
      YTsiz (::std::auto_ptr< YTsiz_type > x)
      {
        this->YTsiz_.set (x);
      }

      const JPEG2000SubDescriptorType::XTOsiz_type& JPEG2000SubDescriptorType::
      XTOsiz () const
      {
        return this->XTOsiz_.get ();
      }

      JPEG2000SubDescriptorType::XTOsiz_type& JPEG2000SubDescriptorType::
      XTOsiz ()
      {
        return this->XTOsiz_.get ();
      }

      void JPEG2000SubDescriptorType::
      XTOsiz (const XTOsiz_type& x)
      {
        this->XTOsiz_.set (x);
      }

      void JPEG2000SubDescriptorType::
      XTOsiz (::std::auto_ptr< XTOsiz_type > x)
      {
        this->XTOsiz_.set (x);
      }

      const JPEG2000SubDescriptorType::YTOsiz_type& JPEG2000SubDescriptorType::
      YTOsiz () const
      {
        return this->YTOsiz_.get ();
      }

      JPEG2000SubDescriptorType::YTOsiz_type& JPEG2000SubDescriptorType::
      YTOsiz ()
      {
        return this->YTOsiz_.get ();
      }

      void JPEG2000SubDescriptorType::
      YTOsiz (const YTOsiz_type& x)
      {
        this->YTOsiz_.set (x);
      }

      void JPEG2000SubDescriptorType::
      YTOsiz (::std::auto_ptr< YTOsiz_type > x)
      {
        this->YTOsiz_.set (x);
      }

      const JPEG2000SubDescriptorType::Csiz_type& JPEG2000SubDescriptorType::
      Csiz () const
      {
        return this->Csiz_.get ();
      }

      JPEG2000SubDescriptorType::Csiz_type& JPEG2000SubDescriptorType::
      Csiz ()
      {
        return this->Csiz_.get ();
      }

      void JPEG2000SubDescriptorType::
      Csiz (const Csiz_type& x)
      {
        this->Csiz_.set (x);
      }

      void JPEG2000SubDescriptorType::
      Csiz (::std::auto_ptr< Csiz_type > x)
      {
        this->Csiz_.set (x);
      }

      const JPEG2000SubDescriptorType::PictureComponentSizing_type& JPEG2000SubDescriptorType::
      PictureComponentSizing () const
      {
        return this->PictureComponentSizing_.get ();
      }

      JPEG2000SubDescriptorType::PictureComponentSizing_type& JPEG2000SubDescriptorType::
      PictureComponentSizing ()
      {
        return this->PictureComponentSizing_.get ();
      }

      void JPEG2000SubDescriptorType::
      PictureComponentSizing (const PictureComponentSizing_type& x)
      {
        this->PictureComponentSizing_.set (x);
      }

      void JPEG2000SubDescriptorType::
      PictureComponentSizing (::std::auto_ptr< PictureComponentSizing_type > x)
      {
        this->PictureComponentSizing_.set (x);
      }

      const JPEG2000SubDescriptorType::CodingStyleDefault_optional& JPEG2000SubDescriptorType::
      CodingStyleDefault () const
      {
        return this->CodingStyleDefault_;
      }

      JPEG2000SubDescriptorType::CodingStyleDefault_optional& JPEG2000SubDescriptorType::
      CodingStyleDefault ()
      {
        return this->CodingStyleDefault_;
      }

      void JPEG2000SubDescriptorType::
      CodingStyleDefault (const CodingStyleDefault_type& x)
      {
        this->CodingStyleDefault_.set (x);
      }

      void JPEG2000SubDescriptorType::
      CodingStyleDefault (const CodingStyleDefault_optional& x)
      {
        this->CodingStyleDefault_ = x;
      }

      void JPEG2000SubDescriptorType::
      CodingStyleDefault (::std::auto_ptr< CodingStyleDefault_type > x)
      {
        this->CodingStyleDefault_.set (x);
      }

      const JPEG2000SubDescriptorType::QuantizationDefault_optional& JPEG2000SubDescriptorType::
      QuantizationDefault () const
      {
        return this->QuantizationDefault_;
      }

      JPEG2000SubDescriptorType::QuantizationDefault_optional& JPEG2000SubDescriptorType::
      QuantizationDefault ()
      {
        return this->QuantizationDefault_;
      }

      void JPEG2000SubDescriptorType::
      QuantizationDefault (const QuantizationDefault_type& x)
      {
        this->QuantizationDefault_.set (x);
      }

      void JPEG2000SubDescriptorType::
      QuantizationDefault (const QuantizationDefault_optional& x)
      {
        this->QuantizationDefault_ = x;
      }

      void JPEG2000SubDescriptorType::
      QuantizationDefault (::std::auto_ptr< QuantizationDefault_type > x)
      {
        this->QuantizationDefault_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace st434
{
  namespace s422m
  {
    namespace groups
    {
      // JPEG2000SubDescriptorType
      //

      JPEG2000SubDescriptorType::
      JPEG2000SubDescriptorType (const InstanceID_type& InstanceID,
                                 const Rsiz_type& Rsiz,
                                 const Xsiz_type& Xsiz,
                                 const Ysiz_type& Ysiz,
                                 const XOsiz_type& XOsiz,
                                 const YOsiz_type& YOsiz,
                                 const XTsiz_type& XTsiz,
                                 const YTsiz_type& YTsiz,
                                 const XTOsiz_type& XTOsiz,
                                 const YTOsiz_type& YTOsiz,
                                 const Csiz_type& Csiz,
                                 const PictureComponentSizing_type& PictureComponentSizing)
      : ::st434::s377m::groups::SubDescriptorsType (InstanceID),
        Rsiz_ (Rsiz, ::xml_schema::flags (), this),
        Xsiz_ (Xsiz, ::xml_schema::flags (), this),
        Ysiz_ (Ysiz, ::xml_schema::flags (), this),
        XOsiz_ (XOsiz, ::xml_schema::flags (), this),
        YOsiz_ (YOsiz, ::xml_schema::flags (), this),
        XTsiz_ (XTsiz, ::xml_schema::flags (), this),
        YTsiz_ (YTsiz, ::xml_schema::flags (), this),
        XTOsiz_ (XTOsiz, ::xml_schema::flags (), this),
        YTOsiz_ (YTOsiz, ::xml_schema::flags (), this),
        Csiz_ (Csiz, ::xml_schema::flags (), this),
        PictureComponentSizing_ (PictureComponentSizing, ::xml_schema::flags (), this),
        CodingStyleDefault_ (::xml_schema::flags (), this),
        QuantizationDefault_ (::xml_schema::flags (), this)
      {
      }

      JPEG2000SubDescriptorType::
      JPEG2000SubDescriptorType (const InstanceID_type& InstanceID,
                                 const Rsiz_type& Rsiz,
                                 const Xsiz_type& Xsiz,
                                 const Ysiz_type& Ysiz,
                                 const XOsiz_type& XOsiz,
                                 const YOsiz_type& YOsiz,
                                 const XTsiz_type& XTsiz,
                                 const YTsiz_type& YTsiz,
                                 const XTOsiz_type& XTOsiz,
                                 const YTOsiz_type& YTOsiz,
                                 const Csiz_type& Csiz,
                                 ::std::auto_ptr< PictureComponentSizing_type >& PictureComponentSizing)
      : ::st434::s377m::groups::SubDescriptorsType (InstanceID),
        Rsiz_ (Rsiz, ::xml_schema::flags (), this),
        Xsiz_ (Xsiz, ::xml_schema::flags (), this),
        Ysiz_ (Ysiz, ::xml_schema::flags (), this),
        XOsiz_ (XOsiz, ::xml_schema::flags (), this),
        YOsiz_ (YOsiz, ::xml_schema::flags (), this),
        XTsiz_ (XTsiz, ::xml_schema::flags (), this),
        YTsiz_ (YTsiz, ::xml_schema::flags (), this),
        XTOsiz_ (XTOsiz, ::xml_schema::flags (), this),
        YTOsiz_ (YTOsiz, ::xml_schema::flags (), this),
        Csiz_ (Csiz, ::xml_schema::flags (), this),
        PictureComponentSizing_ (PictureComponentSizing, ::xml_schema::flags (), this),
        CodingStyleDefault_ (::xml_schema::flags (), this),
        QuantizationDefault_ (::xml_schema::flags (), this)
      {
      }

      JPEG2000SubDescriptorType::
      JPEG2000SubDescriptorType (const JPEG2000SubDescriptorType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
      : ::st434::s377m::groups::SubDescriptorsType (x, f, c),
        Rsiz_ (x.Rsiz_, f, this),
        Xsiz_ (x.Xsiz_, f, this),
        Ysiz_ (x.Ysiz_, f, this),
        XOsiz_ (x.XOsiz_, f, this),
        YOsiz_ (x.YOsiz_, f, this),
        XTsiz_ (x.XTsiz_, f, this),
        YTsiz_ (x.YTsiz_, f, this),
        XTOsiz_ (x.XTOsiz_, f, this),
        YTOsiz_ (x.YTOsiz_, f, this),
        Csiz_ (x.Csiz_, f, this),
        PictureComponentSizing_ (x.PictureComponentSizing_, f, this),
        CodingStyleDefault_ (x.CodingStyleDefault_, f, this),
        QuantizationDefault_ (x.QuantizationDefault_, f, this)
      {
      }

      JPEG2000SubDescriptorType::
      JPEG2000SubDescriptorType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
      : ::st434::s377m::groups::SubDescriptorsType (e, f | ::xml_schema::flags::base, c),
        Rsiz_ (f, this),
        Xsiz_ (f, this),
        Ysiz_ (f, this),
        XOsiz_ (f, this),
        YOsiz_ (f, this),
        XTsiz_ (f, this),
        YTsiz_ (f, this),
        XTOsiz_ (f, this),
        YTOsiz_ (f, this),
        Csiz_ (f, this),
        PictureComponentSizing_ (f, this),
        CodingStyleDefault_ (f, this),
        QuantizationDefault_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void JPEG2000SubDescriptorType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::SubDescriptorsType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Rsiz
          //
          if (n.name () == "Rsiz" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< Rsiz_type > r (
              Rsiz_traits::create (i, f, this));

            if (!Rsiz_.present ())
            {
              this->Rsiz_.set (r);
              continue;
            }
          }

          // Xsiz
          //
          if (n.name () == "Xsiz" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< Xsiz_type > r (
              Xsiz_traits::create (i, f, this));

            if (!Xsiz_.present ())
            {
              this->Xsiz_.set (r);
              continue;
            }
          }

          // Ysiz
          //
          if (n.name () == "Ysiz" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< Ysiz_type > r (
              Ysiz_traits::create (i, f, this));

            if (!Ysiz_.present ())
            {
              this->Ysiz_.set (r);
              continue;
            }
          }

          // XOsiz
          //
          if (n.name () == "XOsiz" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< XOsiz_type > r (
              XOsiz_traits::create (i, f, this));

            if (!XOsiz_.present ())
            {
              this->XOsiz_.set (r);
              continue;
            }
          }

          // YOsiz
          //
          if (n.name () == "YOsiz" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< YOsiz_type > r (
              YOsiz_traits::create (i, f, this));

            if (!YOsiz_.present ())
            {
              this->YOsiz_.set (r);
              continue;
            }
          }

          // XTsiz
          //
          if (n.name () == "XTsiz" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< XTsiz_type > r (
              XTsiz_traits::create (i, f, this));

            if (!XTsiz_.present ())
            {
              this->XTsiz_.set (r);
              continue;
            }
          }

          // YTsiz
          //
          if (n.name () == "YTsiz" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< YTsiz_type > r (
              YTsiz_traits::create (i, f, this));

            if (!YTsiz_.present ())
            {
              this->YTsiz_.set (r);
              continue;
            }
          }

          // XTOsiz
          //
          if (n.name () == "XTOsiz" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< XTOsiz_type > r (
              XTOsiz_traits::create (i, f, this));

            if (!XTOsiz_.present ())
            {
              this->XTOsiz_.set (r);
              continue;
            }
          }

          // YTOsiz
          //
          if (n.name () == "YTOsiz" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< YTOsiz_type > r (
              YTOsiz_traits::create (i, f, this));

            if (!YTOsiz_.present ())
            {
              this->YTOsiz_.set (r);
              continue;
            }
          }

          // Csiz
          //
          if (n.name () == "Csiz" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< Csiz_type > r (
              Csiz_traits::create (i, f, this));

            if (!Csiz_.present ())
            {
              this->Csiz_.set (r);
              continue;
            }
          }

          // PictureComponentSizing
          //
          if (n.name () == "PictureComponentSizing" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PictureComponentSizing_type > r (
              PictureComponentSizing_traits::create (i, f, this));

            if (!PictureComponentSizing_.present ())
            {
              this->PictureComponentSizing_.set (r);
              continue;
            }
          }

          // CodingStyleDefault
          //
          if (n.name () == "CodingStyleDefault" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< CodingStyleDefault_type > r (
              CodingStyleDefault_traits::create (i, f, this));

            if (!this->CodingStyleDefault_)
            {
              this->CodingStyleDefault_.set (r);
              continue;
            }
          }

          // QuantizationDefault
          //
          if (n.name () == "QuantizationDefault" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< QuantizationDefault_type > r (
              QuantizationDefault_traits::create (i, f, this));

            if (!this->QuantizationDefault_)
            {
              this->QuantizationDefault_.set (r);
              continue;
            }
          }

          break;
        }

        if (!Rsiz_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Rsiz",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!Xsiz_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Xsiz",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!Ysiz_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Ysiz",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!XOsiz_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "XOsiz",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!YOsiz_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "YOsiz",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!XTsiz_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "XTsiz",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!YTsiz_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "YTsiz",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!XTOsiz_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "XTOsiz",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!YTOsiz_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "YTOsiz",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!Csiz_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Csiz",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!PictureComponentSizing_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PictureComponentSizing",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      JPEG2000SubDescriptorType* JPEG2000SubDescriptorType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class JPEG2000SubDescriptorType (*this, f, c);
      }

      JPEG2000SubDescriptorType::
      ~JPEG2000SubDescriptorType ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace st434
{
  namespace s422m
  {
    namespace groups
    {
      ::std::auto_ptr< ::st434::s377m::types::Ref >
      JPEG2000SubDescriptor_REF (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s422m::groups::JPEG2000SubDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      JPEG2000SubDescriptor_REF (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s422m::groups::JPEG2000SubDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      JPEG2000SubDescriptor_REF (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s422m::groups::JPEG2000SubDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      JPEG2000SubDescriptor_REF (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s422m::groups::JPEG2000SubDescriptor_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      JPEG2000SubDescriptor_REF (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s422m::groups::JPEG2000SubDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      JPEG2000SubDescriptor_REF (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s422m::groups::JPEG2000SubDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      JPEG2000SubDescriptor_REF (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s422m::groups::JPEG2000SubDescriptor_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      JPEG2000SubDescriptor_REF (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s422m::groups::JPEG2000SubDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      JPEG2000SubDescriptor_REF (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s422m::groups::JPEG2000SubDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      JPEG2000SubDescriptor_REF (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s422m::groups::JPEG2000SubDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      JPEG2000SubDescriptor_REF (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s422m::groups::JPEG2000SubDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      JPEG2000SubDescriptor_REF (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s422m::groups::JPEG2000SubDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      JPEG2000SubDescriptor_REF (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s422m::groups::JPEG2000SubDescriptor_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "JPEG2000SubDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S422M/2006")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "JPEG2000SubDescriptor_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S422M/2006");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      JPEG2000SubDescriptor_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "JPEG2000SubDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S422M/2006")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "JPEG2000SubDescriptor_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S422M/2006");
      }

      ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType >
      JPEG2000SubDescriptor (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType > r (
          ::st434::s422m::groups::JPEG2000SubDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType >
      JPEG2000SubDescriptor (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType > r (
          ::st434::s422m::groups::JPEG2000SubDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType >
      JPEG2000SubDescriptor (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType > r (
          ::st434::s422m::groups::JPEG2000SubDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType >
      JPEG2000SubDescriptor (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s422m::groups::JPEG2000SubDescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType >
      JPEG2000SubDescriptor (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s422m::groups::JPEG2000SubDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType >
      JPEG2000SubDescriptor (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s422m::groups::JPEG2000SubDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType >
      JPEG2000SubDescriptor (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s422m::groups::JPEG2000SubDescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType >
      JPEG2000SubDescriptor (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s422m::groups::JPEG2000SubDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType >
      JPEG2000SubDescriptor (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s422m::groups::JPEG2000SubDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType >
      JPEG2000SubDescriptor (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType > r (
          ::st434::s422m::groups::JPEG2000SubDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType >
      JPEG2000SubDescriptor (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType > r (
          ::st434::s422m::groups::JPEG2000SubDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType >
      JPEG2000SubDescriptor (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType > r (
          ::st434::s422m::groups::JPEG2000SubDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType >
      JPEG2000SubDescriptor (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType > r (
            ::st434::s422m::groups::JPEG2000SubDescriptor (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "JPEG2000SubDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S422M/2006")
        {
          ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s422m::groups::JPEG2000SubDescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "JPEG2000SubDescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S422M/2006");
      }

      ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType >
      JPEG2000SubDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "JPEG2000SubDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S422M/2006")
        {
          ::std::auto_ptr< ::st434::s422m::groups::JPEG2000SubDescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s422m::groups::JPEG2000SubDescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "JPEG2000SubDescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S422M/2006");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace st434
{
  namespace s422m
  {
    namespace groups
    {
      void
      JPEG2000SubDescriptor_REF (::std::ostream& o,
                                 const ::st434::s377m::types::Ref& s,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s422m::groups::JPEG2000SubDescriptor_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      JPEG2000SubDescriptor_REF (::std::ostream& o,
                                 const ::st434::s377m::types::Ref& s,
                                 ::xml_schema::error_handler& h,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s422m::groups::JPEG2000SubDescriptor_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      JPEG2000SubDescriptor_REF (::std::ostream& o,
                                 const ::st434::s377m::types::Ref& s,
                                 ::xercesc::DOMErrorHandler& h,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s422m::groups::JPEG2000SubDescriptor_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      JPEG2000SubDescriptor_REF (::xercesc::XMLFormatTarget& t,
                                 const ::st434::s377m::types::Ref& s,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s422m::groups::JPEG2000SubDescriptor_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      JPEG2000SubDescriptor_REF (::xercesc::XMLFormatTarget& t,
                                 const ::st434::s377m::types::Ref& s,
                                 ::xml_schema::error_handler& h,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s422m::groups::JPEG2000SubDescriptor_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      JPEG2000SubDescriptor_REF (::xercesc::XMLFormatTarget& t,
                                 const ::st434::s377m::types::Ref& s,
                                 ::xercesc::DOMErrorHandler& h,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s422m::groups::JPEG2000SubDescriptor_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      JPEG2000SubDescriptor_REF (::xercesc::DOMDocument& d,
                                 const ::st434::s377m::types::Ref& s,
                                 ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "JPEG2000SubDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S422M/2006")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "JPEG2000SubDescriptor_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S422M/2006");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      JPEG2000SubDescriptor_REF (const ::st434::s377m::types::Ref& s,
                                 const ::xml_schema::namespace_infomap& m,
                                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "JPEG2000SubDescriptor_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S422M/2006",
            m, f));

        ::st434::s422m::groups::JPEG2000SubDescriptor_REF (*d, s, f);
        return d;
      }

      void
      JPEG2000SubDescriptor (::std::ostream& o,
                             const ::st434::s422m::groups::JPEG2000SubDescriptorType& s,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s422m::groups::JPEG2000SubDescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      JPEG2000SubDescriptor (::std::ostream& o,
                             const ::st434::s422m::groups::JPEG2000SubDescriptorType& s,
                             ::xml_schema::error_handler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s422m::groups::JPEG2000SubDescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      JPEG2000SubDescriptor (::std::ostream& o,
                             const ::st434::s422m::groups::JPEG2000SubDescriptorType& s,
                             ::xercesc::DOMErrorHandler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s422m::groups::JPEG2000SubDescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      JPEG2000SubDescriptor (::xercesc::XMLFormatTarget& t,
                             const ::st434::s422m::groups::JPEG2000SubDescriptorType& s,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s422m::groups::JPEG2000SubDescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      JPEG2000SubDescriptor (::xercesc::XMLFormatTarget& t,
                             const ::st434::s422m::groups::JPEG2000SubDescriptorType& s,
                             ::xml_schema::error_handler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s422m::groups::JPEG2000SubDescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      JPEG2000SubDescriptor (::xercesc::XMLFormatTarget& t,
                             const ::st434::s422m::groups::JPEG2000SubDescriptorType& s,
                             ::xercesc::DOMErrorHandler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s422m::groups::JPEG2000SubDescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      JPEG2000SubDescriptor (::xercesc::DOMDocument& d,
                             const ::st434::s422m::groups::JPEG2000SubDescriptorType& s,
                             ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "JPEG2000SubDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S422M/2006")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "JPEG2000SubDescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S422M/2006");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      JPEG2000SubDescriptor (const ::st434::s422m::groups::JPEG2000SubDescriptorType& s,
                             const ::xml_schema::namespace_infomap& m,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "JPEG2000SubDescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S422M/2006",
            m, f));

        ::st434::s422m::groups::JPEG2000SubDescriptor (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const JPEG2000SubDescriptorType& i)
      {
        e << static_cast< const ::st434::s377m::groups::SubDescriptorsType& > (i);

        // Rsiz
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Rsiz",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.Rsiz ();
        }

        // Xsiz
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Xsiz",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.Xsiz ();
        }

        // Ysiz
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Ysiz",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.Ysiz ();
        }

        // XOsiz
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "XOsiz",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.XOsiz ();
        }

        // YOsiz
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "YOsiz",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.YOsiz ();
        }

        // XTsiz
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "XTsiz",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.XTsiz ();
        }

        // YTsiz
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "YTsiz",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.YTsiz ();
        }

        // XTOsiz
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "XTOsiz",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.XTOsiz ();
        }

        // YTOsiz
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "YTOsiz",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.YTOsiz ();
        }

        // Csiz
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Csiz",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.Csiz ();
        }

        // PictureComponentSizing
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PictureComponentSizing",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.PictureComponentSizing ();
        }

        // CodingStyleDefault
        //
        if (i.CodingStyleDefault ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CodingStyleDefault",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.CodingStyleDefault ();
        }

        // QuantizationDefault
        //
        if (i.QuantizationDefault ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "QuantizationDefault",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.QuantizationDefault ();
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

