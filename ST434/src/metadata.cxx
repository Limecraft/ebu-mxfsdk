// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "mxf/metadata.hxx"

namespace st434
{
  namespace s377m
  {
    namespace multiplex
    {
      // MetadataSets
      // 

      const MetadataSets::Preface_optional& MetadataSets::
      Preface () const
      {
        return this->Preface_;
      }

      MetadataSets::Preface_optional& MetadataSets::
      Preface ()
      {
        return this->Preface_;
      }

      void MetadataSets::
      Preface (const Preface_type& x)
      {
        this->Preface_.set (x);
      }

      void MetadataSets::
      Preface (const Preface_optional& x)
      {
        this->Preface_ = x;
      }

      void MetadataSets::
      Preface (::std::auto_ptr< Preface_type > x)
      {
        this->Preface_.set (x);
      }

      const MetadataSets::Preface_REF_optional& MetadataSets::
      Preface_REF () const
      {
        return this->Preface_REF_;
      }

      MetadataSets::Preface_REF_optional& MetadataSets::
      Preface_REF ()
      {
        return this->Preface_REF_;
      }

      void MetadataSets::
      Preface_REF (const Preface_REF_type& x)
      {
        this->Preface_REF_.set (x);
      }

      void MetadataSets::
      Preface_REF (const Preface_REF_optional& x)
      {
        this->Preface_REF_ = x;
      }

      void MetadataSets::
      Preface_REF (::std::auto_ptr< Preface_REF_type > x)
      {
        this->Preface_REF_.set (x);
      }

      const MetadataSets::FloatingMetadataGroups_optional& MetadataSets::
      FloatingMetadataGroups () const
      {
        return this->FloatingMetadataGroups_;
      }

      MetadataSets::FloatingMetadataGroups_optional& MetadataSets::
      FloatingMetadataGroups ()
      {
        return this->FloatingMetadataGroups_;
      }

      void MetadataSets::
      FloatingMetadataGroups (const FloatingMetadataGroups_type& x)
      {
        this->FloatingMetadataGroups_.set (x);
      }

      void MetadataSets::
      FloatingMetadataGroups (const FloatingMetadataGroups_optional& x)
      {
        this->FloatingMetadataGroups_ = x;
      }

      void MetadataSets::
      FloatingMetadataGroups (::std::auto_ptr< FloatingMetadataGroups_type > x)
      {
        this->FloatingMetadataGroups_.set (x);
      }


      // FloatingMetadataGroups
      // 
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace st434
{
  namespace s377m
  {
    namespace multiplex
    {
      // MetadataSets
      //

      MetadataSets::
      MetadataSets ()
      : ::xml_schema::type (),
        Preface_ (::xml_schema::flags (), this),
        Preface_REF_ (::xml_schema::flags (), this),
        FloatingMetadataGroups_ (::xml_schema::flags (), this)
      {
      }

      MetadataSets::
      MetadataSets (const MetadataSets& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        Preface_ (x.Preface_, f, this),
        Preface_REF_ (x.Preface_REF_, f, this),
        FloatingMetadataGroups_ (x.FloatingMetadataGroups_, f, this)
      {
      }

      MetadataSets::
      MetadataSets (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        Preface_ (f, this),
        Preface_REF_ (f, this),
        FloatingMetadataGroups_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void MetadataSets::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Preface
          //
          if (n.name () == "Preface" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            ::std::auto_ptr< Preface_type > r (
              Preface_traits::create (i, f, this));

            if (!this->Preface_)
            {
              this->Preface_.set (r);
              continue;
            }
          }

          // Preface_REF
          //
          if (n.name () == "Preface_REF" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            ::std::auto_ptr< Preface_REF_type > r (
              Preface_REF_traits::create (i, f, this));

            if (!this->Preface_REF_)
            {
              this->Preface_REF_.set (r);
              continue;
            }
          }

          // FloatingMetadataGroups
          //
          if (n.name () == "FloatingMetadataGroups" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
          {
            ::std::auto_ptr< FloatingMetadataGroups_type > r (
              FloatingMetadataGroups_traits::create (i, f, this));

            if (!this->FloatingMetadataGroups_)
            {
              this->FloatingMetadataGroups_.set (r);
              continue;
            }
          }

          break;
        }
      }

      MetadataSets* MetadataSets::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class MetadataSets (*this, f, c);
      }

      MetadataSets::
      ~MetadataSets ()
      {
      }

      // FloatingMetadataGroups
      //

      FloatingMetadataGroups::
      FloatingMetadataGroups ()
      : ::xml_schema::type ()
      {
      }

      FloatingMetadataGroups::
      FloatingMetadataGroups (const FloatingMetadataGroups& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c)
      {
      }

      FloatingMetadataGroups::
      FloatingMetadataGroups (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void FloatingMetadataGroups::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          break;
        }
      }

      FloatingMetadataGroups* FloatingMetadataGroups::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class FloatingMetadataGroups (*this, f, c);
      }

      FloatingMetadataGroups::
      ~FloatingMetadataGroups ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace st434
{
  namespace s377m
  {
    namespace multiplex
    {
      ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets >
      MetadataSets_ (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets > r (
          ::st434::s377m::multiplex::MetadataSets_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets >
      MetadataSets_ (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets > r (
          ::st434::s377m::multiplex::MetadataSets_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets >
      MetadataSets_ (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets > r (
          ::st434::s377m::multiplex::MetadataSets_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets >
      MetadataSets_ (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::multiplex::MetadataSets_ (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets >
      MetadataSets_ (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::multiplex::MetadataSets_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets >
      MetadataSets_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::multiplex::MetadataSets_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets >
      MetadataSets_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::multiplex::MetadataSets_ (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets >
      MetadataSets_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::multiplex::MetadataSets_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets >
      MetadataSets_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::multiplex::MetadataSets_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets >
      MetadataSets_ (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets > r (
          ::st434::s377m::multiplex::MetadataSets_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets >
      MetadataSets_ (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets > r (
          ::st434::s377m::multiplex::MetadataSets_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets >
      MetadataSets_ (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets > r (
          ::st434::s377m::multiplex::MetadataSets_ (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets >
      MetadataSets_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets > r (
            ::st434::s377m::multiplex::MetadataSets_ (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "MetadataSets" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::multiplex::MetadataSets, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MetadataSets",
          "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets >
      MetadataSets_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "MetadataSets" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::multiplex::MetadataSets > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::multiplex::MetadataSets, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MetadataSets",
          "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace st434
{
  namespace s377m
  {
    namespace multiplex
    {
      void
      MetadataSets_ (::std::ostream& o,
                     const ::st434::s377m::multiplex::MetadataSets& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::MetadataSets_ (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      MetadataSets_ (::std::ostream& o,
                     const ::st434::s377m::multiplex::MetadataSets& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::MetadataSets_ (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MetadataSets_ (::std::ostream& o,
                     const ::st434::s377m::multiplex::MetadataSets& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::MetadataSets_ (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MetadataSets_ (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::multiplex::MetadataSets& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::MetadataSets_ (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      MetadataSets_ (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::multiplex::MetadataSets& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::MetadataSets_ (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MetadataSets_ (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::multiplex::MetadataSets& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::multiplex::MetadataSets_ (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MetadataSets_ (::xercesc::DOMDocument& d,
                     const ::st434::s377m::multiplex::MetadataSets& s,
                     ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "MetadataSets" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "MetadataSets",
            "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      MetadataSets_ (const ::st434::s377m::multiplex::MetadataSets& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "MetadataSets",
            "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004",
            m, f));

        ::st434::s377m::multiplex::MetadataSets_ (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const MetadataSets& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // Preface
        //
        if (i.Preface ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Preface",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          s << *i.Preface ();
        }

        // Preface_REF
        //
        if (i.Preface_REF ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Preface_REF",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          s << *i.Preface_REF ();
        }

        // FloatingMetadataGroups
        //
        if (i.FloatingMetadataGroups ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FloatingMetadataGroups",
              "http://www.smpte-ra.org/schemas/434/2006/multiplex/S377M/2004",
              e));

          s << *i.FloatingMetadataGroups ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const FloatingMetadataGroups& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

