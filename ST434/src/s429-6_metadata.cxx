// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "groups/s429-6_metadata.hxx"

namespace st434
{
  namespace s429_6
  {
    namespace groups
    {
      // CryptographicFrameworkType
      // 

      const CryptographicFrameworkType::CryptographicContextObject_type& CryptographicFrameworkType::
      CryptographicContextObject () const
      {
        return this->CryptographicContextObject_.get ();
      }

      CryptographicFrameworkType::CryptographicContextObject_type& CryptographicFrameworkType::
      CryptographicContextObject ()
      {
        return this->CryptographicContextObject_.get ();
      }

      void CryptographicFrameworkType::
      CryptographicContextObject (const CryptographicContextObject_type& x)
      {
        this->CryptographicContextObject_.set (x);
      }

      void CryptographicFrameworkType::
      CryptographicContextObject (::std::auto_ptr< CryptographicContextObject_type > x)
      {
        this->CryptographicContextObject_.set (x);
      }


      // CryptographicContextType
      // 

      const CryptographicContextType::CryptographicContextID_type& CryptographicContextType::
      CryptographicContextID () const
      {
        return this->CryptographicContextID_.get ();
      }

      CryptographicContextType::CryptographicContextID_type& CryptographicContextType::
      CryptographicContextID ()
      {
        return this->CryptographicContextID_.get ();
      }

      void CryptographicContextType::
      CryptographicContextID (const CryptographicContextID_type& x)
      {
        this->CryptographicContextID_.set (x);
      }

      void CryptographicContextType::
      CryptographicContextID (::std::auto_ptr< CryptographicContextID_type > x)
      {
        this->CryptographicContextID_.set (x);
      }

      const CryptographicContextType::SourceContainerFormat_type& CryptographicContextType::
      SourceContainerFormat () const
      {
        return this->SourceContainerFormat_.get ();
      }

      CryptographicContextType::SourceContainerFormat_type& CryptographicContextType::
      SourceContainerFormat ()
      {
        return this->SourceContainerFormat_.get ();
      }

      void CryptographicContextType::
      SourceContainerFormat (const SourceContainerFormat_type& x)
      {
        this->SourceContainerFormat_.set (x);
      }

      void CryptographicContextType::
      SourceContainerFormat (::std::auto_ptr< SourceContainerFormat_type > x)
      {
        this->SourceContainerFormat_.set (x);
      }

      const CryptographicContextType::CipherAlgorithm_type& CryptographicContextType::
      CipherAlgorithm () const
      {
        return this->CipherAlgorithm_.get ();
      }

      CryptographicContextType::CipherAlgorithm_type& CryptographicContextType::
      CipherAlgorithm ()
      {
        return this->CipherAlgorithm_.get ();
      }

      void CryptographicContextType::
      CipherAlgorithm (const CipherAlgorithm_type& x)
      {
        this->CipherAlgorithm_.set (x);
      }

      void CryptographicContextType::
      CipherAlgorithm (::std::auto_ptr< CipherAlgorithm_type > x)
      {
        this->CipherAlgorithm_.set (x);
      }

      const CryptographicContextType::MICAlgorithm_type& CryptographicContextType::
      MICAlgorithm () const
      {
        return this->MICAlgorithm_.get ();
      }

      CryptographicContextType::MICAlgorithm_type& CryptographicContextType::
      MICAlgorithm ()
      {
        return this->MICAlgorithm_.get ();
      }

      void CryptographicContextType::
      MICAlgorithm (const MICAlgorithm_type& x)
      {
        this->MICAlgorithm_.set (x);
      }

      void CryptographicContextType::
      MICAlgorithm (::std::auto_ptr< MICAlgorithm_type > x)
      {
        this->MICAlgorithm_.set (x);
      }

      const CryptographicContextType::CryptographicKeyID_type& CryptographicContextType::
      CryptographicKeyID () const
      {
        return this->CryptographicKeyID_.get ();
      }

      CryptographicContextType::CryptographicKeyID_type& CryptographicContextType::
      CryptographicKeyID ()
      {
        return this->CryptographicKeyID_.get ();
      }

      void CryptographicContextType::
      CryptographicKeyID (const CryptographicKeyID_type& x)
      {
        this->CryptographicKeyID_.set (x);
      }

      void CryptographicContextType::
      CryptographicKeyID (::std::auto_ptr< CryptographicKeyID_type > x)
      {
        this->CryptographicKeyID_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace st434
{
  namespace s429_6
  {
    namespace groups
    {
      // CryptographicFrameworkType
      //

      CryptographicFrameworkType::
      CryptographicFrameworkType (const InstanceID_type& InstanceID,
                                  const CryptographicContextObject_type& CryptographicContextObject)
      : ::st434::s377m::groups::DescriptiveFrameworkType (InstanceID),
        CryptographicContextObject_ (CryptographicContextObject, ::xml_schema::flags (), this)
      {
      }

      CryptographicFrameworkType::
      CryptographicFrameworkType (const InstanceID_type& InstanceID,
                                  ::std::auto_ptr< CryptographicContextObject_type >& CryptographicContextObject)
      : ::st434::s377m::groups::DescriptiveFrameworkType (InstanceID),
        CryptographicContextObject_ (CryptographicContextObject, ::xml_schema::flags (), this)
      {
      }

      CryptographicFrameworkType::
      CryptographicFrameworkType (const CryptographicFrameworkType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
      : ::st434::s377m::groups::DescriptiveFrameworkType (x, f, c),
        CryptographicContextObject_ (x.CryptographicContextObject_, f, this)
      {
      }

      CryptographicFrameworkType::
      CryptographicFrameworkType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
      : ::st434::s377m::groups::DescriptiveFrameworkType (e, f | ::xml_schema::flags::base, c),
        CryptographicContextObject_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void CryptographicFrameworkType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::DescriptiveFrameworkType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // CryptographicContextObject
          //
          if (n.name () == "CryptographicContextObject" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< CryptographicContextObject_type > r (
              CryptographicContextObject_traits::create (i, f, this));

            if (!CryptographicContextObject_.present ())
            {
              this->CryptographicContextObject_.set (r);
              continue;
            }
          }

          break;
        }

        if (!CryptographicContextObject_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CryptographicContextObject",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      CryptographicFrameworkType* CryptographicFrameworkType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class CryptographicFrameworkType (*this, f, c);
      }

      CryptographicFrameworkType::
      ~CryptographicFrameworkType ()
      {
      }

      // CryptographicContextType
      //

      CryptographicContextType::
      CryptographicContextType (const InstanceID_type& InstanceID,
                                const CryptographicContextID_type& CryptographicContextID,
                                const SourceContainerFormat_type& SourceContainerFormat,
                                const CipherAlgorithm_type& CipherAlgorithm,
                                const MICAlgorithm_type& MICAlgorithm,
                                const CryptographicKeyID_type& CryptographicKeyID)
      : ::st434::s377m::groups::DescriptiveObjectType (InstanceID),
        CryptographicContextID_ (CryptographicContextID, ::xml_schema::flags (), this),
        SourceContainerFormat_ (SourceContainerFormat, ::xml_schema::flags (), this),
        CipherAlgorithm_ (CipherAlgorithm, ::xml_schema::flags (), this),
        MICAlgorithm_ (MICAlgorithm, ::xml_schema::flags (), this),
        CryptographicKeyID_ (CryptographicKeyID, ::xml_schema::flags (), this)
      {
      }

      CryptographicContextType::
      CryptographicContextType (const CryptographicContextType& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
      : ::st434::s377m::groups::DescriptiveObjectType (x, f, c),
        CryptographicContextID_ (x.CryptographicContextID_, f, this),
        SourceContainerFormat_ (x.SourceContainerFormat_, f, this),
        CipherAlgorithm_ (x.CipherAlgorithm_, f, this),
        MICAlgorithm_ (x.MICAlgorithm_, f, this),
        CryptographicKeyID_ (x.CryptographicKeyID_, f, this)
      {
      }

      CryptographicContextType::
      CryptographicContextType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
      : ::st434::s377m::groups::DescriptiveObjectType (e, f | ::xml_schema::flags::base, c),
        CryptographicContextID_ (f, this),
        SourceContainerFormat_ (f, this),
        CipherAlgorithm_ (f, this),
        MICAlgorithm_ (f, this),
        CryptographicKeyID_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void CryptographicContextType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::DescriptiveObjectType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // CryptographicContextID
          //
          if (n.name () == "CryptographicContextID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< CryptographicContextID_type > r (
              CryptographicContextID_traits::create (i, f, this));

            if (!CryptographicContextID_.present ())
            {
              this->CryptographicContextID_.set (r);
              continue;
            }
          }

          // SourceContainerFormat
          //
          if (n.name () == "SourceContainerFormat" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SourceContainerFormat_type > r (
              SourceContainerFormat_traits::create (i, f, this));

            if (!SourceContainerFormat_.present ())
            {
              this->SourceContainerFormat_.set (r);
              continue;
            }
          }

          // CipherAlgorithm
          //
          if (n.name () == "CipherAlgorithm" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< CipherAlgorithm_type > r (
              CipherAlgorithm_traits::create (i, f, this));

            if (!CipherAlgorithm_.present ())
            {
              this->CipherAlgorithm_.set (r);
              continue;
            }
          }

          // MICAlgorithm
          //
          if (n.name () == "MICAlgorithm" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< MICAlgorithm_type > r (
              MICAlgorithm_traits::create (i, f, this));

            if (!MICAlgorithm_.present ())
            {
              this->MICAlgorithm_.set (r);
              continue;
            }
          }

          // CryptographicKeyID
          //
          if (n.name () == "CryptographicKeyID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< CryptographicKeyID_type > r (
              CryptographicKeyID_traits::create (i, f, this));

            if (!CryptographicKeyID_.present ())
            {
              this->CryptographicKeyID_.set (r);
              continue;
            }
          }

          break;
        }

        if (!CryptographicContextID_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CryptographicContextID",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!SourceContainerFormat_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SourceContainerFormat",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!CipherAlgorithm_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CipherAlgorithm",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!MICAlgorithm_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MICAlgorithm",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!CryptographicKeyID_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CryptographicKeyID",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      CryptographicContextType* CryptographicContextType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class CryptographicContextType (*this, f, c);
      }

      CryptographicContextType::
      ~CryptographicContextType ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace st434
{
  namespace s429_6
  {
    namespace groups
    {
      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s429_6::groups::CryptographicFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s429_6::groups::CryptographicFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s429_6::groups::CryptographicFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s429_6::groups::CryptographicFramework_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s429_6::groups::CryptographicFramework_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s429_6::groups::CryptographicFramework_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s429_6::groups::CryptographicFramework_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s429_6::groups::CryptographicFramework_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s429_6::groups::CryptographicFramework_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s429_6::groups::CryptographicFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s429_6::groups::CryptographicFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s429_6::groups::CryptographicFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s429_6::groups::CryptographicFramework_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CryptographicFramework_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CryptographicFramework_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicFramework_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "CryptographicFramework_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CryptographicFramework_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006");
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType > r (
          ::st434::s429_6::groups::CryptographicFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType > r (
          ::st434::s429_6::groups::CryptographicFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType > r (
          ::st434::s429_6::groups::CryptographicFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s429_6::groups::CryptographicFramework (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s429_6::groups::CryptographicFramework (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s429_6::groups::CryptographicFramework (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s429_6::groups::CryptographicFramework (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s429_6::groups::CryptographicFramework (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s429_6::groups::CryptographicFramework (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType > r (
          ::st434::s429_6::groups::CryptographicFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType > r (
          ::st434::s429_6::groups::CryptographicFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType > r (
          ::st434::s429_6::groups::CryptographicFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType > r (
            ::st434::s429_6::groups::CryptographicFramework (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CryptographicFramework" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006")
        {
          ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType > r (
            ::xsd::cxx::tree::traits< ::st434::s429_6::groups::CryptographicFrameworkType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CryptographicFramework",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006");
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType >
      CryptographicFramework (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "CryptographicFramework" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006")
        {
          ::std::auto_ptr< ::st434::s429_6::groups::CryptographicFrameworkType > r (
            ::xsd::cxx::tree::traits< ::st434::s429_6::groups::CryptographicFrameworkType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CryptographicFramework",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s429_6::groups::CryptographicContext_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s429_6::groups::CryptographicContext_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s429_6::groups::CryptographicContext_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s429_6::groups::CryptographicContext_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s429_6::groups::CryptographicContext_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s429_6::groups::CryptographicContext_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s429_6::groups::CryptographicContext_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s429_6::groups::CryptographicContext_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s429_6::groups::CryptographicContext_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s429_6::groups::CryptographicContext_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s429_6::groups::CryptographicContext_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s429_6::groups::CryptographicContext_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s429_6::groups::CryptographicContext_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CryptographicContext_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CryptographicContext_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CryptographicContext_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "CryptographicContext_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CryptographicContext_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006");
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType > r (
          ::st434::s429_6::groups::CryptographicContext (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType > r (
          ::st434::s429_6::groups::CryptographicContext (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType > r (
          ::st434::s429_6::groups::CryptographicContext (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s429_6::groups::CryptographicContext (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s429_6::groups::CryptographicContext (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s429_6::groups::CryptographicContext (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s429_6::groups::CryptographicContext (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s429_6::groups::CryptographicContext (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s429_6::groups::CryptographicContext (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType > r (
          ::st434::s429_6::groups::CryptographicContext (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType > r (
          ::st434::s429_6::groups::CryptographicContext (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType > r (
          ::st434::s429_6::groups::CryptographicContext (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType > r (
            ::st434::s429_6::groups::CryptographicContext (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CryptographicContext" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006")
        {
          ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType > r (
            ::xsd::cxx::tree::traits< ::st434::s429_6::groups::CryptographicContextType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CryptographicContext",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006");
      }

      ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType >
      CryptographicContext (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "CryptographicContext" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006")
        {
          ::std::auto_ptr< ::st434::s429_6::groups::CryptographicContextType > r (
            ::xsd::cxx::tree::traits< ::st434::s429_6::groups::CryptographicContextType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CryptographicContext",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace st434
{
  namespace s429_6
  {
    namespace groups
    {
      void
      CryptographicFramework_REF (::std::ostream& o,
                                  const ::st434::s377m::types::Ref& s,
                                  const ::xml_schema::namespace_infomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicFramework_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      CryptographicFramework_REF (::std::ostream& o,
                                  const ::st434::s377m::types::Ref& s,
                                  ::xml_schema::error_handler& h,
                                  const ::xml_schema::namespace_infomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicFramework_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CryptographicFramework_REF (::std::ostream& o,
                                  const ::st434::s377m::types::Ref& s,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::xml_schema::namespace_infomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicFramework_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CryptographicFramework_REF (::xercesc::XMLFormatTarget& t,
                                  const ::st434::s377m::types::Ref& s,
                                  const ::xml_schema::namespace_infomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicFramework_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      CryptographicFramework_REF (::xercesc::XMLFormatTarget& t,
                                  const ::st434::s377m::types::Ref& s,
                                  ::xml_schema::error_handler& h,
                                  const ::xml_schema::namespace_infomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicFramework_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CryptographicFramework_REF (::xercesc::XMLFormatTarget& t,
                                  const ::st434::s377m::types::Ref& s,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::xml_schema::namespace_infomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicFramework_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CryptographicFramework_REF (::xercesc::DOMDocument& d,
                                  const ::st434::s377m::types::Ref& s,
                                  ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CryptographicFramework_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "CryptographicFramework_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      CryptographicFramework_REF (const ::st434::s377m::types::Ref& s,
                                  const ::xml_schema::namespace_infomap& m,
                                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "CryptographicFramework_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006",
            m, f));

        ::st434::s429_6::groups::CryptographicFramework_REF (*d, s, f);
        return d;
      }

      void
      CryptographicFramework (::std::ostream& o,
                              const ::st434::s429_6::groups::CryptographicFrameworkType& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicFramework (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      CryptographicFramework (::std::ostream& o,
                              const ::st434::s429_6::groups::CryptographicFrameworkType& s,
                              ::xml_schema::error_handler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicFramework (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CryptographicFramework (::std::ostream& o,
                              const ::st434::s429_6::groups::CryptographicFrameworkType& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicFramework (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CryptographicFramework (::xercesc::XMLFormatTarget& t,
                              const ::st434::s429_6::groups::CryptographicFrameworkType& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicFramework (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      CryptographicFramework (::xercesc::XMLFormatTarget& t,
                              const ::st434::s429_6::groups::CryptographicFrameworkType& s,
                              ::xml_schema::error_handler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicFramework (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CryptographicFramework (::xercesc::XMLFormatTarget& t,
                              const ::st434::s429_6::groups::CryptographicFrameworkType& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicFramework (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CryptographicFramework (::xercesc::DOMDocument& d,
                              const ::st434::s429_6::groups::CryptographicFrameworkType& s,
                              ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CryptographicFramework" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "CryptographicFramework",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      CryptographicFramework (const ::st434::s429_6::groups::CryptographicFrameworkType& s,
                              const ::xml_schema::namespace_infomap& m,
                              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "CryptographicFramework",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006",
            m, f));

        ::st434::s429_6::groups::CryptographicFramework (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const CryptographicFrameworkType& i)
      {
        e << static_cast< const ::st434::s377m::groups::DescriptiveFrameworkType& > (i);

        // CryptographicContextObject
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CryptographicContextObject",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.CryptographicContextObject ();
        }
      }

      void
      CryptographicContext_REF (::std::ostream& o,
                                const ::st434::s377m::types::Ref& s,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::string& e,
                                ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicContext_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      CryptographicContext_REF (::std::ostream& o,
                                const ::st434::s377m::types::Ref& s,
                                ::xml_schema::error_handler& h,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::string& e,
                                ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicContext_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CryptographicContext_REF (::std::ostream& o,
                                const ::st434::s377m::types::Ref& s,
                                ::xercesc::DOMErrorHandler& h,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::string& e,
                                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicContext_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CryptographicContext_REF (::xercesc::XMLFormatTarget& t,
                                const ::st434::s377m::types::Ref& s,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::string& e,
                                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicContext_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      CryptographicContext_REF (::xercesc::XMLFormatTarget& t,
                                const ::st434::s377m::types::Ref& s,
                                ::xml_schema::error_handler& h,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::string& e,
                                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicContext_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CryptographicContext_REF (::xercesc::XMLFormatTarget& t,
                                const ::st434::s377m::types::Ref& s,
                                ::xercesc::DOMErrorHandler& h,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::string& e,
                                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicContext_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CryptographicContext_REF (::xercesc::DOMDocument& d,
                                const ::st434::s377m::types::Ref& s,
                                ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CryptographicContext_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "CryptographicContext_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      CryptographicContext_REF (const ::st434::s377m::types::Ref& s,
                                const ::xml_schema::namespace_infomap& m,
                                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "CryptographicContext_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006",
            m, f));

        ::st434::s429_6::groups::CryptographicContext_REF (*d, s, f);
        return d;
      }

      void
      CryptographicContext (::std::ostream& o,
                            const ::st434::s429_6::groups::CryptographicContextType& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicContext (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      CryptographicContext (::std::ostream& o,
                            const ::st434::s429_6::groups::CryptographicContextType& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicContext (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CryptographicContext (::std::ostream& o,
                            const ::st434::s429_6::groups::CryptographicContextType& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicContext (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CryptographicContext (::xercesc::XMLFormatTarget& t,
                            const ::st434::s429_6::groups::CryptographicContextType& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicContext (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      CryptographicContext (::xercesc::XMLFormatTarget& t,
                            const ::st434::s429_6::groups::CryptographicContextType& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicContext (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CryptographicContext (::xercesc::XMLFormatTarget& t,
                            const ::st434::s429_6::groups::CryptographicContextType& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s429_6::groups::CryptographicContext (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CryptographicContext (::xercesc::DOMDocument& d,
                            const ::st434::s429_6::groups::CryptographicContextType& s,
                            ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CryptographicContext" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "CryptographicContext",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      CryptographicContext (const ::st434::s429_6::groups::CryptographicContextType& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "CryptographicContext",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S429-6/2006",
            m, f));

        ::st434::s429_6::groups::CryptographicContext (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const CryptographicContextType& i)
      {
        e << static_cast< const ::st434::s377m::groups::DescriptiveObjectType& > (i);

        // CryptographicContextID
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CryptographicContextID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.CryptographicContextID ();
        }

        // SourceContainerFormat
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SourceContainerFormat",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.SourceContainerFormat ();
        }

        // CipherAlgorithm
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CipherAlgorithm",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.CipherAlgorithm ();
        }

        // MICAlgorithm
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MICAlgorithm",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.MICAlgorithm ();
        }

        // CryptographicKeyID
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CryptographicKeyID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.CryptographicKeyID ();
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

