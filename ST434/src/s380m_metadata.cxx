// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "groups/s380m_metadata.hxx"

namespace st434
{
  namespace s380m
  {
    namespace groups
    {
      // DMS1ObjectType
      // 


      // DMS1FrameworkType
      // 

      const DMS1FrameworkType::FrameworkExtendedTextLanguageCode_type& DMS1FrameworkType::
      FrameworkExtendedTextLanguageCode () const
      {
        return this->FrameworkExtendedTextLanguageCode_.get ();
      }

      DMS1FrameworkType::FrameworkExtendedTextLanguageCode_type& DMS1FrameworkType::
      FrameworkExtendedTextLanguageCode ()
      {
        return this->FrameworkExtendedTextLanguageCode_.get ();
      }

      void DMS1FrameworkType::
      FrameworkExtendedTextLanguageCode (const FrameworkExtendedTextLanguageCode_type& x)
      {
        this->FrameworkExtendedTextLanguageCode_.set (x);
      }

      void DMS1FrameworkType::
      FrameworkExtendedTextLanguageCode (::std::auto_ptr< FrameworkExtendedTextLanguageCode_type > x)
      {
        this->FrameworkExtendedTextLanguageCode_.set (x);
      }

      const DMS1FrameworkType::FrameworkThesaurusName_optional& DMS1FrameworkType::
      FrameworkThesaurusName () const
      {
        return this->FrameworkThesaurusName_;
      }

      DMS1FrameworkType::FrameworkThesaurusName_optional& DMS1FrameworkType::
      FrameworkThesaurusName ()
      {
        return this->FrameworkThesaurusName_;
      }

      void DMS1FrameworkType::
      FrameworkThesaurusName (const FrameworkThesaurusName_type& x)
      {
        this->FrameworkThesaurusName_.set (x);
      }

      void DMS1FrameworkType::
      FrameworkThesaurusName (const FrameworkThesaurusName_optional& x)
      {
        this->FrameworkThesaurusName_ = x;
      }

      void DMS1FrameworkType::
      FrameworkThesaurusName (::std::auto_ptr< FrameworkThesaurusName_type > x)
      {
        this->FrameworkThesaurusName_.set (x);
      }

      const DMS1FrameworkType::FrameworkTitle_optional& DMS1FrameworkType::
      FrameworkTitle () const
      {
        return this->FrameworkTitle_;
      }

      DMS1FrameworkType::FrameworkTitle_optional& DMS1FrameworkType::
      FrameworkTitle ()
      {
        return this->FrameworkTitle_;
      }

      void DMS1FrameworkType::
      FrameworkTitle (const FrameworkTitle_type& x)
      {
        this->FrameworkTitle_.set (x);
      }

      void DMS1FrameworkType::
      FrameworkTitle (const FrameworkTitle_optional& x)
      {
        this->FrameworkTitle_ = x;
      }

      void DMS1FrameworkType::
      FrameworkTitle (::std::auto_ptr< FrameworkTitle_type > x)
      {
        this->FrameworkTitle_.set (x);
      }

      const DMS1FrameworkType::PrimaryExtendedSpokenLanguageCode_optional& DMS1FrameworkType::
      PrimaryExtendedSpokenLanguageCode () const
      {
        return this->PrimaryExtendedSpokenLanguageCode_;
      }

      DMS1FrameworkType::PrimaryExtendedSpokenLanguageCode_optional& DMS1FrameworkType::
      PrimaryExtendedSpokenLanguageCode ()
      {
        return this->PrimaryExtendedSpokenLanguageCode_;
      }

      void DMS1FrameworkType::
      PrimaryExtendedSpokenLanguageCode (const PrimaryExtendedSpokenLanguageCode_type& x)
      {
        this->PrimaryExtendedSpokenLanguageCode_.set (x);
      }

      void DMS1FrameworkType::
      PrimaryExtendedSpokenLanguageCode (const PrimaryExtendedSpokenLanguageCode_optional& x)
      {
        this->PrimaryExtendedSpokenLanguageCode_ = x;
      }

      void DMS1FrameworkType::
      PrimaryExtendedSpokenLanguageCode (::std::auto_ptr< PrimaryExtendedSpokenLanguageCode_type > x)
      {
        this->PrimaryExtendedSpokenLanguageCode_.set (x);
      }

      const DMS1FrameworkType::SecondaryExtendedSpokenLanguageCode_optional& DMS1FrameworkType::
      SecondaryExtendedSpokenLanguageCode () const
      {
        return this->SecondaryExtendedSpokenLanguageCode_;
      }

      DMS1FrameworkType::SecondaryExtendedSpokenLanguageCode_optional& DMS1FrameworkType::
      SecondaryExtendedSpokenLanguageCode ()
      {
        return this->SecondaryExtendedSpokenLanguageCode_;
      }

      void DMS1FrameworkType::
      SecondaryExtendedSpokenLanguageCode (const SecondaryExtendedSpokenLanguageCode_type& x)
      {
        this->SecondaryExtendedSpokenLanguageCode_.set (x);
      }

      void DMS1FrameworkType::
      SecondaryExtendedSpokenLanguageCode (const SecondaryExtendedSpokenLanguageCode_optional& x)
      {
        this->SecondaryExtendedSpokenLanguageCode_ = x;
      }

      void DMS1FrameworkType::
      SecondaryExtendedSpokenLanguageCode (::std::auto_ptr< SecondaryExtendedSpokenLanguageCode_type > x)
      {
        this->SecondaryExtendedSpokenLanguageCode_.set (x);
      }

      const DMS1FrameworkType::OriginalExtendedSpokenLanguageCode_optional& DMS1FrameworkType::
      OriginalExtendedSpokenLanguageCode () const
      {
        return this->OriginalExtendedSpokenLanguageCode_;
      }

      DMS1FrameworkType::OriginalExtendedSpokenLanguageCode_optional& DMS1FrameworkType::
      OriginalExtendedSpokenLanguageCode ()
      {
        return this->OriginalExtendedSpokenLanguageCode_;
      }

      void DMS1FrameworkType::
      OriginalExtendedSpokenLanguageCode (const OriginalExtendedSpokenLanguageCode_type& x)
      {
        this->OriginalExtendedSpokenLanguageCode_.set (x);
      }

      void DMS1FrameworkType::
      OriginalExtendedSpokenLanguageCode (const OriginalExtendedSpokenLanguageCode_optional& x)
      {
        this->OriginalExtendedSpokenLanguageCode_ = x;
      }

      void DMS1FrameworkType::
      OriginalExtendedSpokenLanguageCode (::std::auto_ptr< OriginalExtendedSpokenLanguageCode_type > x)
      {
        this->OriginalExtendedSpokenLanguageCode_.set (x);
      }

      const DMS1FrameworkType::MetadataServerLocators_optional& DMS1FrameworkType::
      MetadataServerLocators () const
      {
        return this->MetadataServerLocators_;
      }

      DMS1FrameworkType::MetadataServerLocators_optional& DMS1FrameworkType::
      MetadataServerLocators ()
      {
        return this->MetadataServerLocators_;
      }

      void DMS1FrameworkType::
      MetadataServerLocators (const MetadataServerLocators_type& x)
      {
        this->MetadataServerLocators_.set (x);
      }

      void DMS1FrameworkType::
      MetadataServerLocators (const MetadataServerLocators_optional& x)
      {
        this->MetadataServerLocators_ = x;
      }

      void DMS1FrameworkType::
      MetadataServerLocators (::std::auto_ptr< MetadataServerLocators_type > x)
      {
        this->MetadataServerLocators_.set (x);
      }

      const DMS1FrameworkType::TitlesObjects_optional& DMS1FrameworkType::
      TitlesObjects () const
      {
        return this->TitlesObjects_;
      }

      DMS1FrameworkType::TitlesObjects_optional& DMS1FrameworkType::
      TitlesObjects ()
      {
        return this->TitlesObjects_;
      }

      void DMS1FrameworkType::
      TitlesObjects (const TitlesObjects_type& x)
      {
        this->TitlesObjects_.set (x);
      }

      void DMS1FrameworkType::
      TitlesObjects (const TitlesObjects_optional& x)
      {
        this->TitlesObjects_ = x;
      }

      void DMS1FrameworkType::
      TitlesObjects (::std::auto_ptr< TitlesObjects_type > x)
      {
        this->TitlesObjects_.set (x);
      }

      const DMS1FrameworkType::AnnotationObjects_optional& DMS1FrameworkType::
      AnnotationObjects () const
      {
        return this->AnnotationObjects_;
      }

      DMS1FrameworkType::AnnotationObjects_optional& DMS1FrameworkType::
      AnnotationObjects ()
      {
        return this->AnnotationObjects_;
      }

      void DMS1FrameworkType::
      AnnotationObjects (const AnnotationObjects_type& x)
      {
        this->AnnotationObjects_.set (x);
      }

      void DMS1FrameworkType::
      AnnotationObjects (const AnnotationObjects_optional& x)
      {
        this->AnnotationObjects_ = x;
      }

      void DMS1FrameworkType::
      AnnotationObjects (::std::auto_ptr< AnnotationObjects_type > x)
      {
        this->AnnotationObjects_.set (x);
      }

      const DMS1FrameworkType::ParticipantObjects_optional& DMS1FrameworkType::
      ParticipantObjects () const
      {
        return this->ParticipantObjects_;
      }

      DMS1FrameworkType::ParticipantObjects_optional& DMS1FrameworkType::
      ParticipantObjects ()
      {
        return this->ParticipantObjects_;
      }

      void DMS1FrameworkType::
      ParticipantObjects (const ParticipantObjects_type& x)
      {
        this->ParticipantObjects_.set (x);
      }

      void DMS1FrameworkType::
      ParticipantObjects (const ParticipantObjects_optional& x)
      {
        this->ParticipantObjects_ = x;
      }

      void DMS1FrameworkType::
      ParticipantObjects (::std::auto_ptr< ParticipantObjects_type > x)
      {
        this->ParticipantObjects_.set (x);
      }

      const DMS1FrameworkType::Locations_optional& DMS1FrameworkType::
      Locations () const
      {
        return this->Locations_;
      }

      DMS1FrameworkType::Locations_optional& DMS1FrameworkType::
      Locations ()
      {
        return this->Locations_;
      }

      void DMS1FrameworkType::
      Locations (const Locations_type& x)
      {
        this->Locations_.set (x);
      }

      void DMS1FrameworkType::
      Locations (const Locations_optional& x)
      {
        this->Locations_ = x;
      }

      void DMS1FrameworkType::
      Locations (::std::auto_ptr< Locations_type > x)
      {
        this->Locations_.set (x);
      }

      const DMS1FrameworkType::ContactsListObject_optional& DMS1FrameworkType::
      ContactsListObject () const
      {
        return this->ContactsListObject_;
      }

      DMS1FrameworkType::ContactsListObject_optional& DMS1FrameworkType::
      ContactsListObject ()
      {
        return this->ContactsListObject_;
      }

      void DMS1FrameworkType::
      ContactsListObject (const ContactsListObject_type& x)
      {
        this->ContactsListObject_.set (x);
      }

      void DMS1FrameworkType::
      ContactsListObject (const ContactsListObject_optional& x)
      {
        this->ContactsListObject_ = x;
      }

      void DMS1FrameworkType::
      ContactsListObject (::std::auto_ptr< ContactsListObject_type > x)
      {
        this->ContactsListObject_.set (x);
      }


      // TextLanguageType
      // 

      const TextLanguageType::ExtendedTextLanguageCode_optional& TextLanguageType::
      ExtendedTextLanguageCode () const
      {
        return this->ExtendedTextLanguageCode_;
      }

      TextLanguageType::ExtendedTextLanguageCode_optional& TextLanguageType::
      ExtendedTextLanguageCode ()
      {
        return this->ExtendedTextLanguageCode_;
      }

      void TextLanguageType::
      ExtendedTextLanguageCode (const ExtendedTextLanguageCode_type& x)
      {
        this->ExtendedTextLanguageCode_.set (x);
      }

      void TextLanguageType::
      ExtendedTextLanguageCode (const ExtendedTextLanguageCode_optional& x)
      {
        this->ExtendedTextLanguageCode_ = x;
      }

      void TextLanguageType::
      ExtendedTextLanguageCode (::std::auto_ptr< ExtendedTextLanguageCode_type > x)
      {
        this->ExtendedTextLanguageCode_.set (x);
      }


      // ThesaurusType
      // 

      const ThesaurusType::ThesaurusName_optional& ThesaurusType::
      ThesaurusName () const
      {
        return this->ThesaurusName_;
      }

      ThesaurusType::ThesaurusName_optional& ThesaurusType::
      ThesaurusName ()
      {
        return this->ThesaurusName_;
      }

      void ThesaurusType::
      ThesaurusName (const ThesaurusName_type& x)
      {
        this->ThesaurusName_.set (x);
      }

      void ThesaurusType::
      ThesaurusName (const ThesaurusName_optional& x)
      {
        this->ThesaurusName_ = x;
      }

      void ThesaurusType::
      ThesaurusName (::std::auto_ptr< ThesaurusName_type > x)
      {
        this->ThesaurusName_.set (x);
      }


      // ContactType
      // 

      const ContactType::ContactID_type& ContactType::
      ContactID () const
      {
        return this->ContactID_.get ();
      }

      ContactType::ContactID_type& ContactType::
      ContactID ()
      {
        return this->ContactID_.get ();
      }

      void ContactType::
      ContactID (const ContactID_type& x)
      {
        this->ContactID_.set (x);
      }

      void ContactType::
      ContactID (::std::auto_ptr< ContactID_type > x)
      {
        this->ContactID_.set (x);
      }

      const ContactType::ContactNameValueObjects_optional& ContactType::
      ContactNameValueObjects () const
      {
        return this->ContactNameValueObjects_;
      }

      ContactType::ContactNameValueObjects_optional& ContactType::
      ContactNameValueObjects ()
      {
        return this->ContactNameValueObjects_;
      }

      void ContactType::
      ContactNameValueObjects (const ContactNameValueObjects_type& x)
      {
        this->ContactNameValueObjects_.set (x);
      }

      void ContactType::
      ContactNameValueObjects (const ContactNameValueObjects_optional& x)
      {
        this->ContactNameValueObjects_ = x;
      }

      void ContactType::
      ContactNameValueObjects (::std::auto_ptr< ContactNameValueObjects_type > x)
      {
        this->ContactNameValueObjects_.set (x);
      }

      const ContactType::AddressObjects_optional& ContactType::
      AddressObjects () const
      {
        return this->AddressObjects_;
      }

      ContactType::AddressObjects_optional& ContactType::
      AddressObjects ()
      {
        return this->AddressObjects_;
      }

      void ContactType::
      AddressObjects (const AddressObjects_type& x)
      {
        this->AddressObjects_.set (x);
      }

      void ContactType::
      AddressObjects (const AddressObjects_optional& x)
      {
        this->AddressObjects_ = x;
      }

      void ContactType::
      AddressObjects (::std::auto_ptr< AddressObjects_type > x)
      {
        this->AddressObjects_.set (x);
      }


      // ProductionClipFrameworkType
      // 

      const ProductionClipFrameworkType::CaptionsDescriptionObjects_optional& ProductionClipFrameworkType::
      CaptionsDescriptionObjects () const
      {
        return this->CaptionsDescriptionObjects_;
      }

      ProductionClipFrameworkType::CaptionsDescriptionObjects_optional& ProductionClipFrameworkType::
      CaptionsDescriptionObjects ()
      {
        return this->CaptionsDescriptionObjects_;
      }

      void ProductionClipFrameworkType::
      CaptionsDescriptionObjects (const CaptionsDescriptionObjects_type& x)
      {
        this->CaptionsDescriptionObjects_.set (x);
      }

      void ProductionClipFrameworkType::
      CaptionsDescriptionObjects (const CaptionsDescriptionObjects_optional& x)
      {
        this->CaptionsDescriptionObjects_ = x;
      }

      void ProductionClipFrameworkType::
      CaptionsDescriptionObjects (::std::auto_ptr< CaptionsDescriptionObjects_type > x)
      {
        this->CaptionsDescriptionObjects_.set (x);
      }

      const ProductionClipFrameworkType::ContractObjects_optional& ProductionClipFrameworkType::
      ContractObjects () const
      {
        return this->ContractObjects_;
      }

      ProductionClipFrameworkType::ContractObjects_optional& ProductionClipFrameworkType::
      ContractObjects ()
      {
        return this->ContractObjects_;
      }

      void ProductionClipFrameworkType::
      ContractObjects (const ContractObjects_type& x)
      {
        this->ContractObjects_.set (x);
      }

      void ProductionClipFrameworkType::
      ContractObjects (const ContractObjects_optional& x)
      {
        this->ContractObjects_ = x;
      }

      void ProductionClipFrameworkType::
      ContractObjects (::std::auto_ptr< ContractObjects_type > x)
      {
        this->ContractObjects_.set (x);
      }

      const ProductionClipFrameworkType::PictureFormatObject_optional& ProductionClipFrameworkType::
      PictureFormatObject () const
      {
        return this->PictureFormatObject_;
      }

      ProductionClipFrameworkType::PictureFormatObject_optional& ProductionClipFrameworkType::
      PictureFormatObject ()
      {
        return this->PictureFormatObject_;
      }

      void ProductionClipFrameworkType::
      PictureFormatObject (const PictureFormatObject_type& x)
      {
        this->PictureFormatObject_.set (x);
      }

      void ProductionClipFrameworkType::
      PictureFormatObject (const PictureFormatObject_optional& x)
      {
        this->PictureFormatObject_ = x;
      }

      void ProductionClipFrameworkType::
      PictureFormatObject (::std::auto_ptr< PictureFormatObject_type > x)
      {
        this->PictureFormatObject_.set (x);
      }

      const ProductionClipFrameworkType::ProjectObject_optional& ProductionClipFrameworkType::
      ProjectObject () const
      {
        return this->ProjectObject_;
      }

      ProductionClipFrameworkType::ProjectObject_optional& ProductionClipFrameworkType::
      ProjectObject ()
      {
        return this->ProjectObject_;
      }

      void ProductionClipFrameworkType::
      ProjectObject (const ProjectObject_type& x)
      {
        this->ProjectObject_.set (x);
      }

      void ProductionClipFrameworkType::
      ProjectObject (const ProjectObject_optional& x)
      {
        this->ProjectObject_ = x;
      }

      void ProductionClipFrameworkType::
      ProjectObject (::std::auto_ptr< ProjectObject_type > x)
      {
        this->ProjectObject_.set (x);
      }


      // ProductionFrameworkType
      // 

      const ProductionFrameworkType::IntegrationIndication_optional& ProductionFrameworkType::
      IntegrationIndication () const
      {
        return this->IntegrationIndication_;
      }

      ProductionFrameworkType::IntegrationIndication_optional& ProductionFrameworkType::
      IntegrationIndication ()
      {
        return this->IntegrationIndication_;
      }

      void ProductionFrameworkType::
      IntegrationIndication (const IntegrationIndication_type& x)
      {
        this->IntegrationIndication_.set (x);
      }

      void ProductionFrameworkType::
      IntegrationIndication (const IntegrationIndication_optional& x)
      {
        this->IntegrationIndication_ = x;
      }

      void ProductionFrameworkType::
      IntegrationIndication (::std::auto_ptr< IntegrationIndication_type > x)
      {
        this->IntegrationIndication_.set (x);
      }

      const ProductionFrameworkType::IdentificationObjects_optional& ProductionFrameworkType::
      IdentificationObjects () const
      {
        return this->IdentificationObjects_;
      }

      ProductionFrameworkType::IdentificationObjects_optional& ProductionFrameworkType::
      IdentificationObjects ()
      {
        return this->IdentificationObjects_;
      }

      void ProductionFrameworkType::
      IdentificationObjects (const IdentificationObjects_type& x)
      {
        this->IdentificationObjects_.set (x);
      }

      void ProductionFrameworkType::
      IdentificationObjects (const IdentificationObjects_optional& x)
      {
        this->IdentificationObjects_ = x;
      }

      void ProductionFrameworkType::
      IdentificationObjects (::std::auto_ptr< IdentificationObjects_type > x)
      {
        this->IdentificationObjects_.set (x);
      }

      const ProductionFrameworkType::GroupRelationshipObjects_optional& ProductionFrameworkType::
      GroupRelationshipObjects () const
      {
        return this->GroupRelationshipObjects_;
      }

      ProductionFrameworkType::GroupRelationshipObjects_optional& ProductionFrameworkType::
      GroupRelationshipObjects ()
      {
        return this->GroupRelationshipObjects_;
      }

      void ProductionFrameworkType::
      GroupRelationshipObjects (const GroupRelationshipObjects_type& x)
      {
        this->GroupRelationshipObjects_.set (x);
      }

      void ProductionFrameworkType::
      GroupRelationshipObjects (const GroupRelationshipObjects_optional& x)
      {
        this->GroupRelationshipObjects_ = x;
      }

      void ProductionFrameworkType::
      GroupRelationshipObjects (::std::auto_ptr< GroupRelationshipObjects_type > x)
      {
        this->GroupRelationshipObjects_.set (x);
      }

      const ProductionFrameworkType::BrandingObjects_optional& ProductionFrameworkType::
      BrandingObjects () const
      {
        return this->BrandingObjects_;
      }

      ProductionFrameworkType::BrandingObjects_optional& ProductionFrameworkType::
      BrandingObjects ()
      {
        return this->BrandingObjects_;
      }

      void ProductionFrameworkType::
      BrandingObjects (const BrandingObjects_type& x)
      {
        this->BrandingObjects_.set (x);
      }

      void ProductionFrameworkType::
      BrandingObjects (const BrandingObjects_optional& x)
      {
        this->BrandingObjects_ = x;
      }

      void ProductionFrameworkType::
      BrandingObjects (::std::auto_ptr< BrandingObjects_type > x)
      {
        this->BrandingObjects_.set (x);
      }

      const ProductionFrameworkType::EventObjects_optional& ProductionFrameworkType::
      EventObjects () const
      {
        return this->EventObjects_;
      }

      ProductionFrameworkType::EventObjects_optional& ProductionFrameworkType::
      EventObjects ()
      {
        return this->EventObjects_;
      }

      void ProductionFrameworkType::
      EventObjects (const EventObjects_type& x)
      {
        this->EventObjects_.set (x);
      }

      void ProductionFrameworkType::
      EventObjects (const EventObjects_optional& x)
      {
        this->EventObjects_ = x;
      }

      void ProductionFrameworkType::
      EventObjects (::std::auto_ptr< EventObjects_type > x)
      {
        this->EventObjects_.set (x);
      }

      const ProductionFrameworkType::AwardObjects_optional& ProductionFrameworkType::
      AwardObjects () const
      {
        return this->AwardObjects_;
      }

      ProductionFrameworkType::AwardObjects_optional& ProductionFrameworkType::
      AwardObjects ()
      {
        return this->AwardObjects_;
      }

      void ProductionFrameworkType::
      AwardObjects (const AwardObjects_type& x)
      {
        this->AwardObjects_.set (x);
      }

      void ProductionFrameworkType::
      AwardObjects (const AwardObjects_optional& x)
      {
        this->AwardObjects_ = x;
      }

      void ProductionFrameworkType::
      AwardObjects (::std::auto_ptr< AwardObjects_type > x)
      {
        this->AwardObjects_.set (x);
      }

      const ProductionFrameworkType::ProductionSettingPeriodObjects_optional& ProductionFrameworkType::
      ProductionSettingPeriodObjects () const
      {
        return this->ProductionSettingPeriodObjects_;
      }

      ProductionFrameworkType::ProductionSettingPeriodObjects_optional& ProductionFrameworkType::
      ProductionSettingPeriodObjects ()
      {
        return this->ProductionSettingPeriodObjects_;
      }

      void ProductionFrameworkType::
      ProductionSettingPeriodObjects (const ProductionSettingPeriodObjects_type& x)
      {
        this->ProductionSettingPeriodObjects_.set (x);
      }

      void ProductionFrameworkType::
      ProductionSettingPeriodObjects (const ProductionSettingPeriodObjects_optional& x)
      {
        this->ProductionSettingPeriodObjects_ = x;
      }

      void ProductionFrameworkType::
      ProductionSettingPeriodObjects (::std::auto_ptr< ProductionSettingPeriodObjects_type > x)
      {
        this->ProductionSettingPeriodObjects_.set (x);
      }


      // ClipFrameworkType
      // 

      const ClipFrameworkType::ClipKind_type& ClipFrameworkType::
      ClipKind () const
      {
        return this->ClipKind_.get ();
      }

      ClipFrameworkType::ClipKind_type& ClipFrameworkType::
      ClipKind ()
      {
        return this->ClipKind_.get ();
      }

      void ClipFrameworkType::
      ClipKind (const ClipKind_type& x)
      {
        this->ClipKind_.set (x);
      }

      void ClipFrameworkType::
      ClipKind (::std::auto_ptr< ClipKind_type > x)
      {
        this->ClipKind_.set (x);
      }

      const ClipFrameworkType::ClipNumber_optional& ClipFrameworkType::
      ClipNumber () const
      {
        return this->ClipNumber_;
      }

      ClipFrameworkType::ClipNumber_optional& ClipFrameworkType::
      ClipNumber ()
      {
        return this->ClipNumber_;
      }

      void ClipFrameworkType::
      ClipNumber (const ClipNumber_type& x)
      {
        this->ClipNumber_.set (x);
      }

      void ClipFrameworkType::
      ClipNumber (const ClipNumber_optional& x)
      {
        this->ClipNumber_ = x;
      }

      void ClipFrameworkType::
      ClipNumber (::std::auto_ptr< ClipNumber_type > x)
      {
        this->ClipNumber_.set (x);
      }

      const ClipFrameworkType::ExtendedClipID_optional& ClipFrameworkType::
      ExtendedClipID () const
      {
        return this->ExtendedClipID_;
      }

      ClipFrameworkType::ExtendedClipID_optional& ClipFrameworkType::
      ExtendedClipID ()
      {
        return this->ExtendedClipID_;
      }

      void ClipFrameworkType::
      ExtendedClipID (const ExtendedClipID_type& x)
      {
        this->ExtendedClipID_.set (x);
      }

      void ClipFrameworkType::
      ExtendedClipID (const ExtendedClipID_optional& x)
      {
        this->ExtendedClipID_ = x;
      }

      void ClipFrameworkType::
      ExtendedClipID (::std::auto_ptr< ExtendedClipID_type > x)
      {
        this->ExtendedClipID_.set (x);
      }

      const ClipFrameworkType::ClipCreationDateTime_optional& ClipFrameworkType::
      ClipCreationDateTime () const
      {
        return this->ClipCreationDateTime_;
      }

      ClipFrameworkType::ClipCreationDateTime_optional& ClipFrameworkType::
      ClipCreationDateTime ()
      {
        return this->ClipCreationDateTime_;
      }

      void ClipFrameworkType::
      ClipCreationDateTime (const ClipCreationDateTime_type& x)
      {
        this->ClipCreationDateTime_.set (x);
      }

      void ClipFrameworkType::
      ClipCreationDateTime (const ClipCreationDateTime_optional& x)
      {
        this->ClipCreationDateTime_ = x;
      }

      void ClipFrameworkType::
      ClipCreationDateTime (::std::auto_ptr< ClipCreationDateTime_type > x)
      {
        this->ClipCreationDateTime_.set (x);
      }

      const ClipFrameworkType::TakeNumber_optional& ClipFrameworkType::
      TakeNumber () const
      {
        return this->TakeNumber_;
      }

      ClipFrameworkType::TakeNumber_optional& ClipFrameworkType::
      TakeNumber ()
      {
        return this->TakeNumber_;
      }

      void ClipFrameworkType::
      TakeNumber (const TakeNumber_type& x)
      {
        this->TakeNumber_.set (x);
      }

      void ClipFrameworkType::
      TakeNumber (const TakeNumber_optional& x)
      {
        this->TakeNumber_ = x;
      }

      void ClipFrameworkType::
      TakeNumber (::std::auto_ptr< TakeNumber_type > x)
      {
        this->TakeNumber_.set (x);
      }

      const ClipFrameworkType::SlateInformation_optional& ClipFrameworkType::
      SlateInformation () const
      {
        return this->SlateInformation_;
      }

      ClipFrameworkType::SlateInformation_optional& ClipFrameworkType::
      SlateInformation ()
      {
        return this->SlateInformation_;
      }

      void ClipFrameworkType::
      SlateInformation (const SlateInformation_type& x)
      {
        this->SlateInformation_.set (x);
      }

      void ClipFrameworkType::
      SlateInformation (const SlateInformation_optional& x)
      {
        this->SlateInformation_ = x;
      }

      void ClipFrameworkType::
      SlateInformation (::std::auto_ptr< SlateInformation_type > x)
      {
        this->SlateInformation_.set (x);
      }

      const ClipFrameworkType::ScriptingObjects_optional& ClipFrameworkType::
      ScriptingObjects () const
      {
        return this->ScriptingObjects_;
      }

      ClipFrameworkType::ScriptingObjects_optional& ClipFrameworkType::
      ScriptingObjects ()
      {
        return this->ScriptingObjects_;
      }

      void ClipFrameworkType::
      ScriptingObjects (const ScriptingObjects_type& x)
      {
        this->ScriptingObjects_.set (x);
      }

      void ClipFrameworkType::
      ScriptingObjects (const ScriptingObjects_optional& x)
      {
        this->ScriptingObjects_ = x;
      }

      void ClipFrameworkType::
      ScriptingObjects (::std::auto_ptr< ScriptingObjects_type > x)
      {
        this->ScriptingObjects_.set (x);
      }

      const ClipFrameworkType::ClipShotObjects_optional& ClipFrameworkType::
      ClipShotObjects () const
      {
        return this->ClipShotObjects_;
      }

      ClipFrameworkType::ClipShotObjects_optional& ClipFrameworkType::
      ClipShotObjects ()
      {
        return this->ClipShotObjects_;
      }

      void ClipFrameworkType::
      ClipShotObjects (const ClipShotObjects_type& x)
      {
        this->ClipShotObjects_.set (x);
      }

      void ClipFrameworkType::
      ClipShotObjects (const ClipShotObjects_optional& x)
      {
        this->ClipShotObjects_ = x;
      }

      void ClipFrameworkType::
      ClipShotObjects (::std::auto_ptr< ClipShotObjects_type > x)
      {
        this->ClipShotObjects_.set (x);
      }

      const ClipFrameworkType::DeviceParametersObjects_optional& ClipFrameworkType::
      DeviceParametersObjects () const
      {
        return this->DeviceParametersObjects_;
      }

      ClipFrameworkType::DeviceParametersObjects_optional& ClipFrameworkType::
      DeviceParametersObjects ()
      {
        return this->DeviceParametersObjects_;
      }

      void ClipFrameworkType::
      DeviceParametersObjects (const DeviceParametersObjects_type& x)
      {
        this->DeviceParametersObjects_.set (x);
      }

      void ClipFrameworkType::
      DeviceParametersObjects (const DeviceParametersObjects_optional& x)
      {
        this->DeviceParametersObjects_ = x;
      }

      void ClipFrameworkType::
      DeviceParametersObjects (::std::auto_ptr< DeviceParametersObjects_type > x)
      {
        this->DeviceParametersObjects_.set (x);
      }

      const ClipFrameworkType::ProcessingObject_optional& ClipFrameworkType::
      ProcessingObject () const
      {
        return this->ProcessingObject_;
      }

      ClipFrameworkType::ProcessingObject_optional& ClipFrameworkType::
      ProcessingObject ()
      {
        return this->ProcessingObject_;
      }

      void ClipFrameworkType::
      ProcessingObject (const ProcessingObject_type& x)
      {
        this->ProcessingObject_.set (x);
      }

      void ClipFrameworkType::
      ProcessingObject (const ProcessingObject_optional& x)
      {
        this->ProcessingObject_ = x;
      }

      void ClipFrameworkType::
      ProcessingObject (::std::auto_ptr< ProcessingObject_type > x)
      {
        this->ProcessingObject_.set (x);
      }


      // SceneFrameworkType
      // 

      const SceneFrameworkType::SceneNumber_optional& SceneFrameworkType::
      SceneNumber () const
      {
        return this->SceneNumber_;
      }

      SceneFrameworkType::SceneNumber_optional& SceneFrameworkType::
      SceneNumber ()
      {
        return this->SceneNumber_;
      }

      void SceneFrameworkType::
      SceneNumber (const SceneNumber_type& x)
      {
        this->SceneNumber_.set (x);
      }

      void SceneFrameworkType::
      SceneNumber (const SceneNumber_optional& x)
      {
        this->SceneNumber_ = x;
      }

      void SceneFrameworkType::
      SceneNumber (::std::auto_ptr< SceneNumber_type > x)
      {
        this->SceneNumber_.set (x);
      }

      const SceneFrameworkType::SceneSettingPeriodObjects_optional& SceneFrameworkType::
      SceneSettingPeriodObjects () const
      {
        return this->SceneSettingPeriodObjects_;
      }

      SceneFrameworkType::SceneSettingPeriodObjects_optional& SceneFrameworkType::
      SceneSettingPeriodObjects ()
      {
        return this->SceneSettingPeriodObjects_;
      }

      void SceneFrameworkType::
      SceneSettingPeriodObjects (const SceneSettingPeriodObjects_type& x)
      {
        this->SceneSettingPeriodObjects_.set (x);
      }

      void SceneFrameworkType::
      SceneSettingPeriodObjects (const SceneSettingPeriodObjects_optional& x)
      {
        this->SceneSettingPeriodObjects_ = x;
      }

      void SceneFrameworkType::
      SceneSettingPeriodObjects (::std::auto_ptr< SceneSettingPeriodObjects_type > x)
      {
        this->SceneSettingPeriodObjects_.set (x);
      }

      const SceneFrameworkType::SceneShotObjects_optional& SceneFrameworkType::
      SceneShotObjects () const
      {
        return this->SceneShotObjects_;
      }

      SceneFrameworkType::SceneShotObjects_optional& SceneFrameworkType::
      SceneShotObjects ()
      {
        return this->SceneShotObjects_;
      }

      void SceneFrameworkType::
      SceneShotObjects (const SceneShotObjects_type& x)
      {
        this->SceneShotObjects_.set (x);
      }

      void SceneFrameworkType::
      SceneShotObjects (const SceneShotObjects_optional& x)
      {
        this->SceneShotObjects_ = x;
      }

      void SceneFrameworkType::
      SceneShotObjects (::std::auto_ptr< SceneShotObjects_type > x)
      {
        this->SceneShotObjects_.set (x);
      }


      // TitlesType
      // 

      const TitlesType::MainTitle_optional& TitlesType::
      MainTitle () const
      {
        return this->MainTitle_;
      }

      TitlesType::MainTitle_optional& TitlesType::
      MainTitle ()
      {
        return this->MainTitle_;
      }

      void TitlesType::
      MainTitle (const MainTitle_type& x)
      {
        this->MainTitle_.set (x);
      }

      void TitlesType::
      MainTitle (const MainTitle_optional& x)
      {
        this->MainTitle_ = x;
      }

      void TitlesType::
      MainTitle (::std::auto_ptr< MainTitle_type > x)
      {
        this->MainTitle_.set (x);
      }

      const TitlesType::SecondaryTitle_optional& TitlesType::
      SecondaryTitle () const
      {
        return this->SecondaryTitle_;
      }

      TitlesType::SecondaryTitle_optional& TitlesType::
      SecondaryTitle ()
      {
        return this->SecondaryTitle_;
      }

      void TitlesType::
      SecondaryTitle (const SecondaryTitle_type& x)
      {
        this->SecondaryTitle_.set (x);
      }

      void TitlesType::
      SecondaryTitle (const SecondaryTitle_optional& x)
      {
        this->SecondaryTitle_ = x;
      }

      void TitlesType::
      SecondaryTitle (::std::auto_ptr< SecondaryTitle_type > x)
      {
        this->SecondaryTitle_.set (x);
      }

      const TitlesType::WorkingTitle_optional& TitlesType::
      WorkingTitle () const
      {
        return this->WorkingTitle_;
      }

      TitlesType::WorkingTitle_optional& TitlesType::
      WorkingTitle ()
      {
        return this->WorkingTitle_;
      }

      void TitlesType::
      WorkingTitle (const WorkingTitle_type& x)
      {
        this->WorkingTitle_.set (x);
      }

      void TitlesType::
      WorkingTitle (const WorkingTitle_optional& x)
      {
        this->WorkingTitle_ = x;
      }

      void TitlesType::
      WorkingTitle (::std::auto_ptr< WorkingTitle_type > x)
      {
        this->WorkingTitle_.set (x);
      }

      const TitlesType::OriginalTitle_optional& TitlesType::
      OriginalTitle () const
      {
        return this->OriginalTitle_;
      }

      TitlesType::OriginalTitle_optional& TitlesType::
      OriginalTitle ()
      {
        return this->OriginalTitle_;
      }

      void TitlesType::
      OriginalTitle (const OriginalTitle_type& x)
      {
        this->OriginalTitle_.set (x);
      }

      void TitlesType::
      OriginalTitle (const OriginalTitle_optional& x)
      {
        this->OriginalTitle_ = x;
      }

      void TitlesType::
      OriginalTitle (::std::auto_ptr< OriginalTitle_type > x)
      {
        this->OriginalTitle_.set (x);
      }

      const TitlesType::VersionTitle_optional& TitlesType::
      VersionTitle () const
      {
        return this->VersionTitle_;
      }

      TitlesType::VersionTitle_optional& TitlesType::
      VersionTitle ()
      {
        return this->VersionTitle_;
      }

      void TitlesType::
      VersionTitle (const VersionTitle_type& x)
      {
        this->VersionTitle_.set (x);
      }

      void TitlesType::
      VersionTitle (const VersionTitle_optional& x)
      {
        this->VersionTitle_ = x;
      }

      void TitlesType::
      VersionTitle (::std::auto_ptr< VersionTitle_type > x)
      {
        this->VersionTitle_.set (x);
      }


      // DMS1IdentificationType
      // 

      const DMS1IdentificationType::IdentifierKind_optional& DMS1IdentificationType::
      IdentifierKind () const
      {
        return this->IdentifierKind_;
      }

      DMS1IdentificationType::IdentifierKind_optional& DMS1IdentificationType::
      IdentifierKind ()
      {
        return this->IdentifierKind_;
      }

      void DMS1IdentificationType::
      IdentifierKind (const IdentifierKind_type& x)
      {
        this->IdentifierKind_.set (x);
      }

      void DMS1IdentificationType::
      IdentifierKind (const IdentifierKind_optional& x)
      {
        this->IdentifierKind_ = x;
      }

      void DMS1IdentificationType::
      IdentifierKind (::std::auto_ptr< IdentifierKind_type > x)
      {
        this->IdentifierKind_.set (x);
      }

      const DMS1IdentificationType::IdentifierValue_optional& DMS1IdentificationType::
      IdentifierValue () const
      {
        return this->IdentifierValue_;
      }

      DMS1IdentificationType::IdentifierValue_optional& DMS1IdentificationType::
      IdentifierValue ()
      {
        return this->IdentifierValue_;
      }

      void DMS1IdentificationType::
      IdentifierValue (const IdentifierValue_type& x)
      {
        this->IdentifierValue_.set (x);
      }

      void DMS1IdentificationType::
      IdentifierValue (const IdentifierValue_optional& x)
      {
        this->IdentifierValue_ = x;
      }

      void DMS1IdentificationType::
      IdentifierValue (::std::auto_ptr< IdentifierValue_type > x)
      {
        this->IdentifierValue_.set (x);
      }

      const DMS1IdentificationType::IdentificationLocator_optional& DMS1IdentificationType::
      IdentificationLocator () const
      {
        return this->IdentificationLocator_;
      }

      DMS1IdentificationType::IdentificationLocator_optional& DMS1IdentificationType::
      IdentificationLocator ()
      {
        return this->IdentificationLocator_;
      }

      void DMS1IdentificationType::
      IdentificationLocator (const IdentificationLocator_type& x)
      {
        this->IdentificationLocator_.set (x);
      }

      void DMS1IdentificationType::
      IdentificationLocator (const IdentificationLocator_optional& x)
      {
        this->IdentificationLocator_ = x;
      }

      void DMS1IdentificationType::
      IdentificationLocator (::std::auto_ptr< IdentificationLocator_type > x)
      {
        this->IdentificationLocator_.set (x);
      }

      const DMS1IdentificationType::IdentificationIssuingAuthority_optional& DMS1IdentificationType::
      IdentificationIssuingAuthority () const
      {
        return this->IdentificationIssuingAuthority_;
      }

      DMS1IdentificationType::IdentificationIssuingAuthority_optional& DMS1IdentificationType::
      IdentificationIssuingAuthority ()
      {
        return this->IdentificationIssuingAuthority_;
      }

      void DMS1IdentificationType::
      IdentificationIssuingAuthority (const IdentificationIssuingAuthority_type& x)
      {
        this->IdentificationIssuingAuthority_.set (x);
      }

      void DMS1IdentificationType::
      IdentificationIssuingAuthority (const IdentificationIssuingAuthority_optional& x)
      {
        this->IdentificationIssuingAuthority_ = x;
      }

      void DMS1IdentificationType::
      IdentificationIssuingAuthority (::std::auto_ptr< IdentificationIssuingAuthority_type > x)
      {
        this->IdentificationIssuingAuthority_.set (x);
      }


      // GroupRelationshipType
      // 

      const GroupRelationshipType::ProgrammingGroupKind_optional& GroupRelationshipType::
      ProgrammingGroupKind () const
      {
        return this->ProgrammingGroupKind_;
      }

      GroupRelationshipType::ProgrammingGroupKind_optional& GroupRelationshipType::
      ProgrammingGroupKind ()
      {
        return this->ProgrammingGroupKind_;
      }

      void GroupRelationshipType::
      ProgrammingGroupKind (const ProgrammingGroupKind_type& x)
      {
        this->ProgrammingGroupKind_.set (x);
      }

      void GroupRelationshipType::
      ProgrammingGroupKind (const ProgrammingGroupKind_optional& x)
      {
        this->ProgrammingGroupKind_ = x;
      }

      void GroupRelationshipType::
      ProgrammingGroupKind (::std::auto_ptr< ProgrammingGroupKind_type > x)
      {
        this->ProgrammingGroupKind_.set (x);
      }

      const GroupRelationshipType::ProgrammingGroupTitle_optional& GroupRelationshipType::
      ProgrammingGroupTitle () const
      {
        return this->ProgrammingGroupTitle_;
      }

      GroupRelationshipType::ProgrammingGroupTitle_optional& GroupRelationshipType::
      ProgrammingGroupTitle ()
      {
        return this->ProgrammingGroupTitle_;
      }

      void GroupRelationshipType::
      ProgrammingGroupTitle (const ProgrammingGroupTitle_type& x)
      {
        this->ProgrammingGroupTitle_.set (x);
      }

      void GroupRelationshipType::
      ProgrammingGroupTitle (const ProgrammingGroupTitle_optional& x)
      {
        this->ProgrammingGroupTitle_ = x;
      }

      void GroupRelationshipType::
      ProgrammingGroupTitle (::std::auto_ptr< ProgrammingGroupTitle_type > x)
      {
        this->ProgrammingGroupTitle_.set (x);
      }

      const GroupRelationshipType::GroupSynopsis_optional& GroupRelationshipType::
      GroupSynopsis () const
      {
        return this->GroupSynopsis_;
      }

      GroupRelationshipType::GroupSynopsis_optional& GroupRelationshipType::
      GroupSynopsis ()
      {
        return this->GroupSynopsis_;
      }

      void GroupRelationshipType::
      GroupSynopsis (const GroupSynopsis_type& x)
      {
        this->GroupSynopsis_.set (x);
      }

      void GroupRelationshipType::
      GroupSynopsis (const GroupSynopsis_optional& x)
      {
        this->GroupSynopsis_ = x;
      }

      void GroupRelationshipType::
      GroupSynopsis (::std::auto_ptr< GroupSynopsis_type > x)
      {
        this->GroupSynopsis_.set (x);
      }

      const GroupRelationshipType::PositionInSequence_optional& GroupRelationshipType::
      PositionInSequence () const
      {
        return this->PositionInSequence_;
      }

      GroupRelationshipType::PositionInSequence_optional& GroupRelationshipType::
      PositionInSequence ()
      {
        return this->PositionInSequence_;
      }

      void GroupRelationshipType::
      PositionInSequence (const PositionInSequence_type& x)
      {
        this->PositionInSequence_.set (x);
      }

      void GroupRelationshipType::
      PositionInSequence (const PositionInSequence_optional& x)
      {
        this->PositionInSequence_ = x;
      }

      void GroupRelationshipType::
      PositionInSequence (::std::auto_ptr< PositionInSequence_type > x)
      {
        this->PositionInSequence_.set (x);
      }

      const GroupRelationshipType::TotalNumberInSequence_optional& GroupRelationshipType::
      TotalNumberInSequence () const
      {
        return this->TotalNumberInSequence_;
      }

      GroupRelationshipType::TotalNumberInSequence_optional& GroupRelationshipType::
      TotalNumberInSequence ()
      {
        return this->TotalNumberInSequence_;
      }

      void GroupRelationshipType::
      TotalNumberInSequence (const TotalNumberInSequence_type& x)
      {
        this->TotalNumberInSequence_.set (x);
      }

      void GroupRelationshipType::
      TotalNumberInSequence (const TotalNumberInSequence_optional& x)
      {
        this->TotalNumberInSequence_ = x;
      }

      void GroupRelationshipType::
      TotalNumberInSequence (::std::auto_ptr< TotalNumberInSequence_type > x)
      {
        this->TotalNumberInSequence_.set (x);
      }

      const GroupRelationshipType::EpisodicStartNumber_optional& GroupRelationshipType::
      EpisodicStartNumber () const
      {
        return this->EpisodicStartNumber_;
      }

      GroupRelationshipType::EpisodicStartNumber_optional& GroupRelationshipType::
      EpisodicStartNumber ()
      {
        return this->EpisodicStartNumber_;
      }

      void GroupRelationshipType::
      EpisodicStartNumber (const EpisodicStartNumber_type& x)
      {
        this->EpisodicStartNumber_.set (x);
      }

      void GroupRelationshipType::
      EpisodicStartNumber (const EpisodicStartNumber_optional& x)
      {
        this->EpisodicStartNumber_ = x;
      }

      void GroupRelationshipType::
      EpisodicStartNumber (::std::auto_ptr< EpisodicStartNumber_type > x)
      {
        this->EpisodicStartNumber_.set (x);
      }

      const GroupRelationshipType::EpisodicEndNumber_optional& GroupRelationshipType::
      EpisodicEndNumber () const
      {
        return this->EpisodicEndNumber_;
      }

      GroupRelationshipType::EpisodicEndNumber_optional& GroupRelationshipType::
      EpisodicEndNumber ()
      {
        return this->EpisodicEndNumber_;
      }

      void GroupRelationshipType::
      EpisodicEndNumber (const EpisodicEndNumber_type& x)
      {
        this->EpisodicEndNumber_.set (x);
      }

      void GroupRelationshipType::
      EpisodicEndNumber (const EpisodicEndNumber_optional& x)
      {
        this->EpisodicEndNumber_ = x;
      }

      void GroupRelationshipType::
      EpisodicEndNumber (::std::auto_ptr< EpisodicEndNumber_type > x)
      {
        this->EpisodicEndNumber_.set (x);
      }


      // BrandingType
      // 

      const BrandingType::BrandMainTitle_optional& BrandingType::
      BrandMainTitle () const
      {
        return this->BrandMainTitle_;
      }

      BrandingType::BrandMainTitle_optional& BrandingType::
      BrandMainTitle ()
      {
        return this->BrandMainTitle_;
      }

      void BrandingType::
      BrandMainTitle (const BrandMainTitle_type& x)
      {
        this->BrandMainTitle_.set (x);
      }

      void BrandingType::
      BrandMainTitle (const BrandMainTitle_optional& x)
      {
        this->BrandMainTitle_ = x;
      }

      void BrandingType::
      BrandMainTitle (::std::auto_ptr< BrandMainTitle_type > x)
      {
        this->BrandMainTitle_.set (x);
      }

      const BrandingType::BrandOriginalTitle_optional& BrandingType::
      BrandOriginalTitle () const
      {
        return this->BrandOriginalTitle_;
      }

      BrandingType::BrandOriginalTitle_optional& BrandingType::
      BrandOriginalTitle ()
      {
        return this->BrandOriginalTitle_;
      }

      void BrandingType::
      BrandOriginalTitle (const BrandOriginalTitle_type& x)
      {
        this->BrandOriginalTitle_.set (x);
      }

      void BrandingType::
      BrandOriginalTitle (const BrandOriginalTitle_optional& x)
      {
        this->BrandOriginalTitle_ = x;
      }

      void BrandingType::
      BrandOriginalTitle (::std::auto_ptr< BrandOriginalTitle_type > x)
      {
        this->BrandOriginalTitle_.set (x);
      }


      // DMS1EventType
      // 

      const DMS1EventType::EventIndication_optional& DMS1EventType::
      EventIndication () const
      {
        return this->EventIndication_;
      }

      DMS1EventType::EventIndication_optional& DMS1EventType::
      EventIndication ()
      {
        return this->EventIndication_;
      }

      void DMS1EventType::
      EventIndication (const EventIndication_type& x)
      {
        this->EventIndication_.set (x);
      }

      void DMS1EventType::
      EventIndication (const EventIndication_optional& x)
      {
        this->EventIndication_ = x;
      }

      void DMS1EventType::
      EventIndication (::std::auto_ptr< EventIndication_type > x)
      {
        this->EventIndication_.set (x);
      }

      const DMS1EventType::EventStartDateTime_optional& DMS1EventType::
      EventStartDateTime () const
      {
        return this->EventStartDateTime_;
      }

      DMS1EventType::EventStartDateTime_optional& DMS1EventType::
      EventStartDateTime ()
      {
        return this->EventStartDateTime_;
      }

      void DMS1EventType::
      EventStartDateTime (const EventStartDateTime_type& x)
      {
        this->EventStartDateTime_.set (x);
      }

      void DMS1EventType::
      EventStartDateTime (const EventStartDateTime_optional& x)
      {
        this->EventStartDateTime_ = x;
      }

      void DMS1EventType::
      EventStartDateTime (::std::auto_ptr< EventStartDateTime_type > x)
      {
        this->EventStartDateTime_.set (x);
      }

      const DMS1EventType::EventEndDateTime_optional& DMS1EventType::
      EventEndDateTime () const
      {
        return this->EventEndDateTime_;
      }

      DMS1EventType::EventEndDateTime_optional& DMS1EventType::
      EventEndDateTime ()
      {
        return this->EventEndDateTime_;
      }

      void DMS1EventType::
      EventEndDateTime (const EventEndDateTime_type& x)
      {
        this->EventEndDateTime_.set (x);
      }

      void DMS1EventType::
      EventEndDateTime (const EventEndDateTime_optional& x)
      {
        this->EventEndDateTime_ = x;
      }

      void DMS1EventType::
      EventEndDateTime (::std::auto_ptr< EventEndDateTime_type > x)
      {
        this->EventEndDateTime_.set (x);
      }

      const DMS1EventType::PublicationObjects_optional& DMS1EventType::
      PublicationObjects () const
      {
        return this->PublicationObjects_;
      }

      DMS1EventType::PublicationObjects_optional& DMS1EventType::
      PublicationObjects ()
      {
        return this->PublicationObjects_;
      }

      void DMS1EventType::
      PublicationObjects (const PublicationObjects_type& x)
      {
        this->PublicationObjects_.set (x);
      }

      void DMS1EventType::
      PublicationObjects (const PublicationObjects_optional& x)
      {
        this->PublicationObjects_ = x;
      }

      void DMS1EventType::
      PublicationObjects (::std::auto_ptr< PublicationObjects_type > x)
      {
        this->PublicationObjects_.set (x);
      }

      const DMS1EventType::EventAnnotationObjects_optional& DMS1EventType::
      EventAnnotationObjects () const
      {
        return this->EventAnnotationObjects_;
      }

      DMS1EventType::EventAnnotationObjects_optional& DMS1EventType::
      EventAnnotationObjects ()
      {
        return this->EventAnnotationObjects_;
      }

      void DMS1EventType::
      EventAnnotationObjects (const EventAnnotationObjects_type& x)
      {
        this->EventAnnotationObjects_.set (x);
      }

      void DMS1EventType::
      EventAnnotationObjects (const EventAnnotationObjects_optional& x)
      {
        this->EventAnnotationObjects_ = x;
      }

      void DMS1EventType::
      EventAnnotationObjects (::std::auto_ptr< EventAnnotationObjects_type > x)
      {
        this->EventAnnotationObjects_.set (x);
      }


      // PublicationType
      // 

      const PublicationType::PublishingOrganizationName_optional& PublicationType::
      PublishingOrganizationName () const
      {
        return this->PublishingOrganizationName_;
      }

      PublicationType::PublishingOrganizationName_optional& PublicationType::
      PublishingOrganizationName ()
      {
        return this->PublishingOrganizationName_;
      }

      void PublicationType::
      PublishingOrganizationName (const PublishingOrganizationName_type& x)
      {
        this->PublishingOrganizationName_.set (x);
      }

      void PublicationType::
      PublishingOrganizationName (const PublishingOrganizationName_optional& x)
      {
        this->PublishingOrganizationName_ = x;
      }

      void PublicationType::
      PublishingOrganizationName (::std::auto_ptr< PublishingOrganizationName_type > x)
      {
        this->PublishingOrganizationName_.set (x);
      }

      const PublicationType::PublishingServiceName_optional& PublicationType::
      PublishingServiceName () const
      {
        return this->PublishingServiceName_;
      }

      PublicationType::PublishingServiceName_optional& PublicationType::
      PublishingServiceName ()
      {
        return this->PublishingServiceName_;
      }

      void PublicationType::
      PublishingServiceName (const PublishingServiceName_type& x)
      {
        this->PublishingServiceName_.set (x);
      }

      void PublicationType::
      PublishingServiceName (const PublishingServiceName_optional& x)
      {
        this->PublishingServiceName_ = x;
      }

      void PublicationType::
      PublishingServiceName (::std::auto_ptr< PublishingServiceName_type > x)
      {
        this->PublishingServiceName_.set (x);
      }

      const PublicationType::PublishingMediumName_optional& PublicationType::
      PublishingMediumName () const
      {
        return this->PublishingMediumName_;
      }

      PublicationType::PublishingMediumName_optional& PublicationType::
      PublishingMediumName ()
      {
        return this->PublishingMediumName_;
      }

      void PublicationType::
      PublishingMediumName (const PublishingMediumName_type& x)
      {
        this->PublishingMediumName_.set (x);
      }

      void PublicationType::
      PublishingMediumName (const PublishingMediumName_optional& x)
      {
        this->PublishingMediumName_ = x;
      }

      void PublicationType::
      PublishingMediumName (::std::auto_ptr< PublishingMediumName_type > x)
      {
        this->PublishingMediumName_.set (x);
      }

      const PublicationType::PublishingRegionName_optional& PublicationType::
      PublishingRegionName () const
      {
        return this->PublishingRegionName_;
      }

      PublicationType::PublishingRegionName_optional& PublicationType::
      PublishingRegionName ()
      {
        return this->PublishingRegionName_;
      }

      void PublicationType::
      PublishingRegionName (const PublishingRegionName_type& x)
      {
        this->PublishingRegionName_.set (x);
      }

      void PublicationType::
      PublishingRegionName (const PublishingRegionName_optional& x)
      {
        this->PublishingRegionName_ = x;
      }

      void PublicationType::
      PublishingRegionName (::std::auto_ptr< PublishingRegionName_type > x)
      {
        this->PublishingRegionName_.set (x);
      }


      // AwardType
      // 

      const AwardType::FestivalName_optional& AwardType::
      FestivalName () const
      {
        return this->FestivalName_;
      }

      AwardType::FestivalName_optional& AwardType::
      FestivalName ()
      {
        return this->FestivalName_;
      }

      void AwardType::
      FestivalName (const FestivalName_type& x)
      {
        this->FestivalName_.set (x);
      }

      void AwardType::
      FestivalName (const FestivalName_optional& x)
      {
        this->FestivalName_ = x;
      }

      void AwardType::
      FestivalName (::std::auto_ptr< FestivalName_type > x)
      {
        this->FestivalName_.set (x);
      }

      const AwardType::FestivalDateTime_optional& AwardType::
      FestivalDateTime () const
      {
        return this->FestivalDateTime_;
      }

      AwardType::FestivalDateTime_optional& AwardType::
      FestivalDateTime ()
      {
        return this->FestivalDateTime_;
      }

      void AwardType::
      FestivalDateTime (const FestivalDateTime_type& x)
      {
        this->FestivalDateTime_.set (x);
      }

      void AwardType::
      FestivalDateTime (const FestivalDateTime_optional& x)
      {
        this->FestivalDateTime_ = x;
      }

      void AwardType::
      FestivalDateTime (::std::auto_ptr< FestivalDateTime_type > x)
      {
        this->FestivalDateTime_.set (x);
      }

      const AwardType::AwardName_optional& AwardType::
      AwardName () const
      {
        return this->AwardName_;
      }

      AwardType::AwardName_optional& AwardType::
      AwardName ()
      {
        return this->AwardName_;
      }

      void AwardType::
      AwardName (const AwardName_type& x)
      {
        this->AwardName_.set (x);
      }

      void AwardType::
      AwardName (const AwardName_optional& x)
      {
        this->AwardName_ = x;
      }

      void AwardType::
      AwardName (::std::auto_ptr< AwardName_type > x)
      {
        this->AwardName_.set (x);
      }

      const AwardType::AwardCategory_optional& AwardType::
      AwardCategory () const
      {
        return this->AwardCategory_;
      }

      AwardType::AwardCategory_optional& AwardType::
      AwardCategory ()
      {
        return this->AwardCategory_;
      }

      void AwardType::
      AwardCategory (const AwardCategory_type& x)
      {
        this->AwardCategory_.set (x);
      }

      void AwardType::
      AwardCategory (const AwardCategory_optional& x)
      {
        this->AwardCategory_ = x;
      }

      void AwardType::
      AwardCategory (::std::auto_ptr< AwardCategory_type > x)
      {
        this->AwardCategory_.set (x);
      }

      const AwardType::NominationCategory_optional& AwardType::
      NominationCategory () const
      {
        return this->NominationCategory_;
      }

      AwardType::NominationCategory_optional& AwardType::
      NominationCategory ()
      {
        return this->NominationCategory_;
      }

      void AwardType::
      NominationCategory (const NominationCategory_type& x)
      {
        this->NominationCategory_.set (x);
      }

      void AwardType::
      NominationCategory (const NominationCategory_optional& x)
      {
        this->NominationCategory_ = x;
      }

      void AwardType::
      NominationCategory (::std::auto_ptr< NominationCategory_type > x)
      {
        this->NominationCategory_.set (x);
      }

      const AwardType::AwardParticipants_optional& AwardType::
      AwardParticipants () const
      {
        return this->AwardParticipants_;
      }

      AwardType::AwardParticipants_optional& AwardType::
      AwardParticipants ()
      {
        return this->AwardParticipants_;
      }

      void AwardType::
      AwardParticipants (const AwardParticipants_type& x)
      {
        this->AwardParticipants_.set (x);
      }

      void AwardType::
      AwardParticipants (const AwardParticipants_optional& x)
      {
        this->AwardParticipants_ = x;
      }

      void AwardType::
      AwardParticipants (::std::auto_ptr< AwardParticipants_type > x)
      {
        this->AwardParticipants_.set (x);
      }


      // CaptionsDescriptionType
      // 

      const CaptionsDescriptionType::ExtendedCaptionsLanguageCode_optional& CaptionsDescriptionType::
      ExtendedCaptionsLanguageCode () const
      {
        return this->ExtendedCaptionsLanguageCode_;
      }

      CaptionsDescriptionType::ExtendedCaptionsLanguageCode_optional& CaptionsDescriptionType::
      ExtendedCaptionsLanguageCode ()
      {
        return this->ExtendedCaptionsLanguageCode_;
      }

      void CaptionsDescriptionType::
      ExtendedCaptionsLanguageCode (const ExtendedCaptionsLanguageCode_type& x)
      {
        this->ExtendedCaptionsLanguageCode_.set (x);
      }

      void CaptionsDescriptionType::
      ExtendedCaptionsLanguageCode (const ExtendedCaptionsLanguageCode_optional& x)
      {
        this->ExtendedCaptionsLanguageCode_ = x;
      }

      void CaptionsDescriptionType::
      ExtendedCaptionsLanguageCode (::std::auto_ptr< ExtendedCaptionsLanguageCode_type > x)
      {
        this->ExtendedCaptionsLanguageCode_.set (x);
      }

      const CaptionsDescriptionType::CaptionKind_optional& CaptionsDescriptionType::
      CaptionKind () const
      {
        return this->CaptionKind_;
      }

      CaptionsDescriptionType::CaptionKind_optional& CaptionsDescriptionType::
      CaptionKind ()
      {
        return this->CaptionKind_;
      }

      void CaptionsDescriptionType::
      CaptionKind (const CaptionKind_type& x)
      {
        this->CaptionKind_.set (x);
      }

      void CaptionsDescriptionType::
      CaptionKind (const CaptionKind_optional& x)
      {
        this->CaptionKind_ = x;
      }

      void CaptionsDescriptionType::
      CaptionKind (::std::auto_ptr< CaptionKind_type > x)
      {
        this->CaptionKind_.set (x);
      }


      // DMS1AnnotationType
      // 

      const DMS1AnnotationType::AnnotationKind_optional& DMS1AnnotationType::
      AnnotationKind () const
      {
        return this->AnnotationKind_;
      }

      DMS1AnnotationType::AnnotationKind_optional& DMS1AnnotationType::
      AnnotationKind ()
      {
        return this->AnnotationKind_;
      }

      void DMS1AnnotationType::
      AnnotationKind (const AnnotationKind_type& x)
      {
        this->AnnotationKind_.set (x);
      }

      void DMS1AnnotationType::
      AnnotationKind (const AnnotationKind_optional& x)
      {
        this->AnnotationKind_ = x;
      }

      void DMS1AnnotationType::
      AnnotationKind (::std::auto_ptr< AnnotationKind_type > x)
      {
        this->AnnotationKind_.set (x);
      }

      const DMS1AnnotationType::AnnotationSynopsis_optional& DMS1AnnotationType::
      AnnotationSynopsis () const
      {
        return this->AnnotationSynopsis_;
      }

      DMS1AnnotationType::AnnotationSynopsis_optional& DMS1AnnotationType::
      AnnotationSynopsis ()
      {
        return this->AnnotationSynopsis_;
      }

      void DMS1AnnotationType::
      AnnotationSynopsis (const AnnotationSynopsis_type& x)
      {
        this->AnnotationSynopsis_.set (x);
      }

      void DMS1AnnotationType::
      AnnotationSynopsis (const AnnotationSynopsis_optional& x)
      {
        this->AnnotationSynopsis_ = x;
      }

      void DMS1AnnotationType::
      AnnotationSynopsis (::std::auto_ptr< AnnotationSynopsis_type > x)
      {
        this->AnnotationSynopsis_.set (x);
      }

      const DMS1AnnotationType::AnnotationDescription_optional& DMS1AnnotationType::
      AnnotationDescription () const
      {
        return this->AnnotationDescription_;
      }

      DMS1AnnotationType::AnnotationDescription_optional& DMS1AnnotationType::
      AnnotationDescription ()
      {
        return this->AnnotationDescription_;
      }

      void DMS1AnnotationType::
      AnnotationDescription (const AnnotationDescription_type& x)
      {
        this->AnnotationDescription_.set (x);
      }

      void DMS1AnnotationType::
      AnnotationDescription (const AnnotationDescription_optional& x)
      {
        this->AnnotationDescription_ = x;
      }

      void DMS1AnnotationType::
      AnnotationDescription (::std::auto_ptr< AnnotationDescription_type > x)
      {
        this->AnnotationDescription_.set (x);
      }

      const DMS1AnnotationType::RelatedMaterialDescription_optional& DMS1AnnotationType::
      RelatedMaterialDescription () const
      {
        return this->RelatedMaterialDescription_;
      }

      DMS1AnnotationType::RelatedMaterialDescription_optional& DMS1AnnotationType::
      RelatedMaterialDescription ()
      {
        return this->RelatedMaterialDescription_;
      }

      void DMS1AnnotationType::
      RelatedMaterialDescription (const RelatedMaterialDescription_type& x)
      {
        this->RelatedMaterialDescription_.set (x);
      }

      void DMS1AnnotationType::
      RelatedMaterialDescription (const RelatedMaterialDescription_optional& x)
      {
        this->RelatedMaterialDescription_ = x;
      }

      void DMS1AnnotationType::
      RelatedMaterialDescription (::std::auto_ptr< RelatedMaterialDescription_type > x)
      {
        this->RelatedMaterialDescription_.set (x);
      }

      const DMS1AnnotationType::ClassificationObjects_optional& DMS1AnnotationType::
      ClassificationObjects () const
      {
        return this->ClassificationObjects_;
      }

      DMS1AnnotationType::ClassificationObjects_optional& DMS1AnnotationType::
      ClassificationObjects ()
      {
        return this->ClassificationObjects_;
      }

      void DMS1AnnotationType::
      ClassificationObjects (const ClassificationObjects_type& x)
      {
        this->ClassificationObjects_.set (x);
      }

      void DMS1AnnotationType::
      ClassificationObjects (const ClassificationObjects_optional& x)
      {
        this->ClassificationObjects_ = x;
      }

      void DMS1AnnotationType::
      ClassificationObjects (::std::auto_ptr< ClassificationObjects_type > x)
      {
        this->ClassificationObjects_.set (x);
      }

      const DMS1AnnotationType::AnnotationCueWordsObject_optional& DMS1AnnotationType::
      AnnotationCueWordsObject () const
      {
        return this->AnnotationCueWordsObject_;
      }

      DMS1AnnotationType::AnnotationCueWordsObject_optional& DMS1AnnotationType::
      AnnotationCueWordsObject ()
      {
        return this->AnnotationCueWordsObject_;
      }

      void DMS1AnnotationType::
      AnnotationCueWordsObject (const AnnotationCueWordsObject_type& x)
      {
        this->AnnotationCueWordsObject_.set (x);
      }

      void DMS1AnnotationType::
      AnnotationCueWordsObject (const AnnotationCueWordsObject_optional& x)
      {
        this->AnnotationCueWordsObject_ = x;
      }

      void DMS1AnnotationType::
      AnnotationCueWordsObject (::std::auto_ptr< AnnotationCueWordsObject_type > x)
      {
        this->AnnotationCueWordsObject_.set (x);
      }

      const DMS1AnnotationType::RelatedMaterialLocators_optional& DMS1AnnotationType::
      RelatedMaterialLocators () const
      {
        return this->RelatedMaterialLocators_;
      }

      DMS1AnnotationType::RelatedMaterialLocators_optional& DMS1AnnotationType::
      RelatedMaterialLocators ()
      {
        return this->RelatedMaterialLocators_;
      }

      void DMS1AnnotationType::
      RelatedMaterialLocators (const RelatedMaterialLocators_type& x)
      {
        this->RelatedMaterialLocators_.set (x);
      }

      void DMS1AnnotationType::
      RelatedMaterialLocators (const RelatedMaterialLocators_optional& x)
      {
        this->RelatedMaterialLocators_ = x;
      }

      void DMS1AnnotationType::
      RelatedMaterialLocators (::std::auto_ptr< RelatedMaterialLocators_type > x)
      {
        this->RelatedMaterialLocators_.set (x);
      }

      const DMS1AnnotationType::AnnotationParticipants_optional& DMS1AnnotationType::
      AnnotationParticipants () const
      {
        return this->AnnotationParticipants_;
      }

      DMS1AnnotationType::AnnotationParticipants_optional& DMS1AnnotationType::
      AnnotationParticipants ()
      {
        return this->AnnotationParticipants_;
      }

      void DMS1AnnotationType::
      AnnotationParticipants (const AnnotationParticipants_type& x)
      {
        this->AnnotationParticipants_.set (x);
      }

      void DMS1AnnotationType::
      AnnotationParticipants (const AnnotationParticipants_optional& x)
      {
        this->AnnotationParticipants_ = x;
      }

      void DMS1AnnotationType::
      AnnotationParticipants (::std::auto_ptr< AnnotationParticipants_type > x)
      {
        this->AnnotationParticipants_.set (x);
      }


      // SettingPeriodType
      // 

      const SettingPeriodType::SettingDateTime_optional& SettingPeriodType::
      SettingDateTime () const
      {
        return this->SettingDateTime_;
      }

      SettingPeriodType::SettingDateTime_optional& SettingPeriodType::
      SettingDateTime ()
      {
        return this->SettingDateTime_;
      }

      void SettingPeriodType::
      SettingDateTime (const SettingDateTime_type& x)
      {
        this->SettingDateTime_.set (x);
      }

      void SettingPeriodType::
      SettingDateTime (const SettingDateTime_optional& x)
      {
        this->SettingDateTime_ = x;
      }

      void SettingPeriodType::
      SettingDateTime (::std::auto_ptr< SettingDateTime_type > x)
      {
        this->SettingDateTime_.set (x);
      }

      const SettingPeriodType::TimePeriodKeyword_optional& SettingPeriodType::
      TimePeriodKeyword () const
      {
        return this->TimePeriodKeyword_;
      }

      SettingPeriodType::TimePeriodKeyword_optional& SettingPeriodType::
      TimePeriodKeyword ()
      {
        return this->TimePeriodKeyword_;
      }

      void SettingPeriodType::
      TimePeriodKeyword (const TimePeriodKeyword_type& x)
      {
        this->TimePeriodKeyword_.set (x);
      }

      void SettingPeriodType::
      TimePeriodKeyword (const TimePeriodKeyword_optional& x)
      {
        this->TimePeriodKeyword_ = x;
      }

      void SettingPeriodType::
      TimePeriodKeyword (::std::auto_ptr< TimePeriodKeyword_type > x)
      {
        this->TimePeriodKeyword_.set (x);
      }

      const SettingPeriodType::SettingPeriodDescription_optional& SettingPeriodType::
      SettingPeriodDescription () const
      {
        return this->SettingPeriodDescription_;
      }

      SettingPeriodType::SettingPeriodDescription_optional& SettingPeriodType::
      SettingPeriodDescription ()
      {
        return this->SettingPeriodDescription_;
      }

      void SettingPeriodType::
      SettingPeriodDescription (const SettingPeriodDescription_type& x)
      {
        this->SettingPeriodDescription_.set (x);
      }

      void SettingPeriodType::
      SettingPeriodDescription (const SettingPeriodDescription_optional& x)
      {
        this->SettingPeriodDescription_ = x;
      }

      void SettingPeriodType::
      SettingPeriodDescription (::std::auto_ptr< SettingPeriodDescription_type > x)
      {
        this->SettingPeriodDescription_.set (x);
      }


      // ScriptingType
      // 

      const ScriptingType::ScriptingKind_optional& ScriptingType::
      ScriptingKind () const
      {
        return this->ScriptingKind_;
      }

      ScriptingType::ScriptingKind_optional& ScriptingType::
      ScriptingKind ()
      {
        return this->ScriptingKind_;
      }

      void ScriptingType::
      ScriptingKind (const ScriptingKind_type& x)
      {
        this->ScriptingKind_.set (x);
      }

      void ScriptingType::
      ScriptingKind (const ScriptingKind_optional& x)
      {
        this->ScriptingKind_ = x;
      }

      void ScriptingType::
      ScriptingKind (::std::auto_ptr< ScriptingKind_type > x)
      {
        this->ScriptingKind_.set (x);
      }

      const ScriptingType::ScriptingText_optional& ScriptingType::
      ScriptingText () const
      {
        return this->ScriptingText_;
      }

      ScriptingType::ScriptingText_optional& ScriptingType::
      ScriptingText ()
      {
        return this->ScriptingText_;
      }

      void ScriptingType::
      ScriptingText (const ScriptingText_type& x)
      {
        this->ScriptingText_.set (x);
      }

      void ScriptingType::
      ScriptingText (const ScriptingText_optional& x)
      {
        this->ScriptingText_ = x;
      }

      void ScriptingType::
      ScriptingText (::std::auto_ptr< ScriptingText_type > x)
      {
        this->ScriptingText_.set (x);
      }

      const ScriptingType::ScriptingLocators_optional& ScriptingType::
      ScriptingLocators () const
      {
        return this->ScriptingLocators_;
      }

      ScriptingType::ScriptingLocators_optional& ScriptingType::
      ScriptingLocators ()
      {
        return this->ScriptingLocators_;
      }

      void ScriptingType::
      ScriptingLocators (const ScriptingLocators_type& x)
      {
        this->ScriptingLocators_.set (x);
      }

      void ScriptingType::
      ScriptingLocators (const ScriptingLocators_optional& x)
      {
        this->ScriptingLocators_ = x;
      }

      void ScriptingType::
      ScriptingLocators (::std::auto_ptr< ScriptingLocators_type > x)
      {
        this->ScriptingLocators_.set (x);
      }


      // ClassificationType
      // 

      const ClassificationType::ContentClassification_optional& ClassificationType::
      ContentClassification () const
      {
        return this->ContentClassification_;
      }

      ClassificationType::ContentClassification_optional& ClassificationType::
      ContentClassification ()
      {
        return this->ContentClassification_;
      }

      void ClassificationType::
      ContentClassification (const ContentClassification_type& x)
      {
        this->ContentClassification_.set (x);
      }

      void ClassificationType::
      ContentClassification (const ContentClassification_optional& x)
      {
        this->ContentClassification_ = x;
      }

      void ClassificationType::
      ContentClassification (::std::auto_ptr< ContentClassification_type > x)
      {
        this->ContentClassification_.set (x);
      }

      const ClassificationType::ClassificationNameValueObjects_optional& ClassificationType::
      ClassificationNameValueObjects () const
      {
        return this->ClassificationNameValueObjects_;
      }

      ClassificationType::ClassificationNameValueObjects_optional& ClassificationType::
      ClassificationNameValueObjects ()
      {
        return this->ClassificationNameValueObjects_;
      }

      void ClassificationType::
      ClassificationNameValueObjects (const ClassificationNameValueObjects_type& x)
      {
        this->ClassificationNameValueObjects_.set (x);
      }

      void ClassificationType::
      ClassificationNameValueObjects (const ClassificationNameValueObjects_optional& x)
      {
        this->ClassificationNameValueObjects_ = x;
      }

      void ClassificationType::
      ClassificationNameValueObjects (::std::auto_ptr< ClassificationNameValueObjects_type > x)
      {
        this->ClassificationNameValueObjects_.set (x);
      }


      // ShotType
      // 

      const ShotType::ShotStartPosition_optional& ShotType::
      ShotStartPosition () const
      {
        return this->ShotStartPosition_;
      }

      ShotType::ShotStartPosition_optional& ShotType::
      ShotStartPosition ()
      {
        return this->ShotStartPosition_;
      }

      void ShotType::
      ShotStartPosition (const ShotStartPosition_type& x)
      {
        this->ShotStartPosition_.set (x);
      }

      void ShotType::
      ShotStartPosition (const ShotStartPosition_optional& x)
      {
        this->ShotStartPosition_ = x;
      }

      void ShotType::
      ShotStartPosition (::std::auto_ptr< ShotStartPosition_type > x)
      {
        this->ShotStartPosition_.set (x);
      }

      const ShotType::ShotDuration_optional& ShotType::
      ShotDuration () const
      {
        return this->ShotDuration_;
      }

      ShotType::ShotDuration_optional& ShotType::
      ShotDuration ()
      {
        return this->ShotDuration_;
      }

      void ShotType::
      ShotDuration (const ShotDuration_type& x)
      {
        this->ShotDuration_.set (x);
      }

      void ShotType::
      ShotDuration (const ShotDuration_optional& x)
      {
        this->ShotDuration_ = x;
      }

      void ShotType::
      ShotDuration (::std::auto_ptr< ShotDuration_type > x)
      {
        this->ShotDuration_.set (x);
      }

      const ShotType::ShotTrackIDs_optional& ShotType::
      ShotTrackIDs () const
      {
        return this->ShotTrackIDs_;
      }

      ShotType::ShotTrackIDs_optional& ShotType::
      ShotTrackIDs ()
      {
        return this->ShotTrackIDs_;
      }

      void ShotType::
      ShotTrackIDs (const ShotTrackIDs_type& x)
      {
        this->ShotTrackIDs_.set (x);
      }

      void ShotType::
      ShotTrackIDs (const ShotTrackIDs_optional& x)
      {
        this->ShotTrackIDs_ = x;
      }

      void ShotType::
      ShotTrackIDs (::std::auto_ptr< ShotTrackIDs_type > x)
      {
        this->ShotTrackIDs_.set (x);
      }

      const ShotType::ShotDescription_optional& ShotType::
      ShotDescription () const
      {
        return this->ShotDescription_;
      }

      ShotType::ShotDescription_optional& ShotType::
      ShotDescription ()
      {
        return this->ShotDescription_;
      }

      void ShotType::
      ShotDescription (const ShotDescription_type& x)
      {
        this->ShotDescription_.set (x);
      }

      void ShotType::
      ShotDescription (const ShotDescription_optional& x)
      {
        this->ShotDescription_ = x;
      }

      void ShotType::
      ShotDescription (::std::auto_ptr< ShotDescription_type > x)
      {
        this->ShotDescription_.set (x);
      }

      const ShotType::ShotCommentKind_optional& ShotType::
      ShotCommentKind () const
      {
        return this->ShotCommentKind_;
      }

      ShotType::ShotCommentKind_optional& ShotType::
      ShotCommentKind ()
      {
        return this->ShotCommentKind_;
      }

      void ShotType::
      ShotCommentKind (const ShotCommentKind_type& x)
      {
        this->ShotCommentKind_.set (x);
      }

      void ShotType::
      ShotCommentKind (const ShotCommentKind_optional& x)
      {
        this->ShotCommentKind_ = x;
      }

      void ShotType::
      ShotCommentKind (::std::auto_ptr< ShotCommentKind_type > x)
      {
        this->ShotCommentKind_.set (x);
      }

      const ShotType::ShotComment_optional& ShotType::
      ShotComment () const
      {
        return this->ShotComment_;
      }

      ShotType::ShotComment_optional& ShotType::
      ShotComment ()
      {
        return this->ShotComment_;
      }

      void ShotType::
      ShotComment (const ShotComment_type& x)
      {
        this->ShotComment_.set (x);
      }

      void ShotType::
      ShotComment (const ShotComment_optional& x)
      {
        this->ShotComment_ = x;
      }

      void ShotType::
      ShotComment (::std::auto_ptr< ShotComment_type > x)
      {
        this->ShotComment_.set (x);
      }

      const ShotType::ShotCueWordsObject_optional& ShotType::
      ShotCueWordsObject () const
      {
        return this->ShotCueWordsObject_;
      }

      ShotType::ShotCueWordsObject_optional& ShotType::
      ShotCueWordsObject ()
      {
        return this->ShotCueWordsObject_;
      }

      void ShotType::
      ShotCueWordsObject (const ShotCueWordsObject_type& x)
      {
        this->ShotCueWordsObject_.set (x);
      }

      void ShotType::
      ShotCueWordsObject (const ShotCueWordsObject_optional& x)
      {
        this->ShotCueWordsObject_ = x;
      }

      void ShotType::
      ShotCueWordsObject (::std::auto_ptr< ShotCueWordsObject_type > x)
      {
        this->ShotCueWordsObject_.set (x);
      }

      const ShotType::KeypointObjects_optional& ShotType::
      KeypointObjects () const
      {
        return this->KeypointObjects_;
      }

      ShotType::KeypointObjects_optional& ShotType::
      KeypointObjects ()
      {
        return this->KeypointObjects_;
      }

      void ShotType::
      KeypointObjects (const KeypointObjects_type& x)
      {
        this->KeypointObjects_.set (x);
      }

      void ShotType::
      KeypointObjects (const KeypointObjects_optional& x)
      {
        this->KeypointObjects_ = x;
      }

      void ShotType::
      KeypointObjects (::std::auto_ptr< KeypointObjects_type > x)
      {
        this->KeypointObjects_.set (x);
      }


      // KeypointType
      // 

      const KeypointType::KeypointKind_optional& KeypointType::
      KeypointKind () const
      {
        return this->KeypointKind_;
      }

      KeypointType::KeypointKind_optional& KeypointType::
      KeypointKind ()
      {
        return this->KeypointKind_;
      }

      void KeypointType::
      KeypointKind (const KeypointKind_type& x)
      {
        this->KeypointKind_.set (x);
      }

      void KeypointType::
      KeypointKind (const KeypointKind_optional& x)
      {
        this->KeypointKind_ = x;
      }

      void KeypointType::
      KeypointKind (::std::auto_ptr< KeypointKind_type > x)
      {
        this->KeypointKind_.set (x);
      }

      const KeypointType::KeypointPosition_type& KeypointType::
      KeypointPosition () const
      {
        return this->KeypointPosition_.get ();
      }

      KeypointType::KeypointPosition_type& KeypointType::
      KeypointPosition ()
      {
        return this->KeypointPosition_.get ();
      }

      void KeypointType::
      KeypointPosition (const KeypointPosition_type& x)
      {
        this->KeypointPosition_.set (x);
      }

      void KeypointType::
      KeypointPosition (::std::auto_ptr< KeypointPosition_type > x)
      {
        this->KeypointPosition_.set (x);
      }

      const KeypointType::KeypointValue_optional& KeypointType::
      KeypointValue () const
      {
        return this->KeypointValue_;
      }

      KeypointType::KeypointValue_optional& KeypointType::
      KeypointValue ()
      {
        return this->KeypointValue_;
      }

      void KeypointType::
      KeypointValue (const KeypointValue_type& x)
      {
        this->KeypointValue_.set (x);
      }

      void KeypointType::
      KeypointValue (const KeypointValue_optional& x)
      {
        this->KeypointValue_ = x;
      }

      void KeypointType::
      KeypointValue (::std::auto_ptr< KeypointValue_type > x)
      {
        this->KeypointValue_.set (x);
      }


      // ParticipantType
      // 

      const ParticipantType::ParticipantID_type& ParticipantType::
      ParticipantID () const
      {
        return this->ParticipantID_.get ();
      }

      ParticipantType::ParticipantID_type& ParticipantType::
      ParticipantID ()
      {
        return this->ParticipantID_.get ();
      }

      void ParticipantType::
      ParticipantID (const ParticipantID_type& x)
      {
        this->ParticipantID_.set (x);
      }

      void ParticipantType::
      ParticipantID (::std::auto_ptr< ParticipantID_type > x)
      {
        this->ParticipantID_.set (x);
      }

      const ParticipantType::ContributionStatus_optional& ParticipantType::
      ContributionStatus () const
      {
        return this->ContributionStatus_;
      }

      ParticipantType::ContributionStatus_optional& ParticipantType::
      ContributionStatus ()
      {
        return this->ContributionStatus_;
      }

      void ParticipantType::
      ContributionStatus (const ContributionStatus_type& x)
      {
        this->ContributionStatus_.set (x);
      }

      void ParticipantType::
      ContributionStatus (const ContributionStatus_optional& x)
      {
        this->ContributionStatus_ = x;
      }

      void ParticipantType::
      ContributionStatus (::std::auto_ptr< ContributionStatus_type > x)
      {
        this->ContributionStatus_.set (x);
      }

      const ParticipantType::JobFunction_optional& ParticipantType::
      JobFunction () const
      {
        return this->JobFunction_;
      }

      ParticipantType::JobFunction_optional& ParticipantType::
      JobFunction ()
      {
        return this->JobFunction_;
      }

      void ParticipantType::
      JobFunction (const JobFunction_type& x)
      {
        this->JobFunction_.set (x);
      }

      void ParticipantType::
      JobFunction (const JobFunction_optional& x)
      {
        this->JobFunction_ = x;
      }

      void ParticipantType::
      JobFunction (::std::auto_ptr< JobFunction_type > x)
      {
        this->JobFunction_.set (x);
      }

      const ParticipantType::JobFunctionCode_optional& ParticipantType::
      JobFunctionCode () const
      {
        return this->JobFunctionCode_;
      }

      ParticipantType::JobFunctionCode_optional& ParticipantType::
      JobFunctionCode ()
      {
        return this->JobFunctionCode_;
      }

      void ParticipantType::
      JobFunctionCode (const JobFunctionCode_type& x)
      {
        this->JobFunctionCode_.set (x);
      }

      void ParticipantType::
      JobFunctionCode (const JobFunctionCode_optional& x)
      {
        this->JobFunctionCode_ = x;
      }

      void ParticipantType::
      JobFunctionCode (::std::auto_ptr< JobFunctionCode_type > x)
      {
        this->JobFunctionCode_.set (x);
      }

      const ParticipantType::RoleName_optional& ParticipantType::
      RoleName () const
      {
        return this->RoleName_;
      }

      ParticipantType::RoleName_optional& ParticipantType::
      RoleName ()
      {
        return this->RoleName_;
      }

      void ParticipantType::
      RoleName (const RoleName_type& x)
      {
        this->RoleName_.set (x);
      }

      void ParticipantType::
      RoleName (const RoleName_optional& x)
      {
        this->RoleName_ = x;
      }

      void ParticipantType::
      RoleName (::std::auto_ptr< RoleName_type > x)
      {
        this->RoleName_.set (x);
      }

      const ParticipantType::Persons_optional& ParticipantType::
      Persons () const
      {
        return this->Persons_;
      }

      ParticipantType::Persons_optional& ParticipantType::
      Persons ()
      {
        return this->Persons_;
      }

      void ParticipantType::
      Persons (const Persons_type& x)
      {
        this->Persons_.set (x);
      }

      void ParticipantType::
      Persons (const Persons_optional& x)
      {
        this->Persons_ = x;
      }

      void ParticipantType::
      Persons (::std::auto_ptr< Persons_type > x)
      {
        this->Persons_.set (x);
      }

      const ParticipantType::ParticipantOrganizations_optional& ParticipantType::
      ParticipantOrganizations () const
      {
        return this->ParticipantOrganizations_;
      }

      ParticipantType::ParticipantOrganizations_optional& ParticipantType::
      ParticipantOrganizations ()
      {
        return this->ParticipantOrganizations_;
      }

      void ParticipantType::
      ParticipantOrganizations (const ParticipantOrganizations_type& x)
      {
        this->ParticipantOrganizations_.set (x);
      }

      void ParticipantType::
      ParticipantOrganizations (const ParticipantOrganizations_optional& x)
      {
        this->ParticipantOrganizations_ = x;
      }

      void ParticipantType::
      ParticipantOrganizations (::std::auto_ptr< ParticipantOrganizations_type > x)
      {
        this->ParticipantOrganizations_.set (x);
      }


      // PersonType
      // 

      const PersonType::FamilyName_optional& PersonType::
      FamilyName () const
      {
        return this->FamilyName_;
      }

      PersonType::FamilyName_optional& PersonType::
      FamilyName ()
      {
        return this->FamilyName_;
      }

      void PersonType::
      FamilyName (const FamilyName_type& x)
      {
        this->FamilyName_.set (x);
      }

      void PersonType::
      FamilyName (const FamilyName_optional& x)
      {
        this->FamilyName_ = x;
      }

      void PersonType::
      FamilyName (::std::auto_ptr< FamilyName_type > x)
      {
        this->FamilyName_.set (x);
      }

      const PersonType::FirstGivenName_optional& PersonType::
      FirstGivenName () const
      {
        return this->FirstGivenName_;
      }

      PersonType::FirstGivenName_optional& PersonType::
      FirstGivenName ()
      {
        return this->FirstGivenName_;
      }

      void PersonType::
      FirstGivenName (const FirstGivenName_type& x)
      {
        this->FirstGivenName_.set (x);
      }

      void PersonType::
      FirstGivenName (const FirstGivenName_optional& x)
      {
        this->FirstGivenName_ = x;
      }

      void PersonType::
      FirstGivenName (::std::auto_ptr< FirstGivenName_type > x)
      {
        this->FirstGivenName_.set (x);
      }

      const PersonType::OtherGivenNames_optional& PersonType::
      OtherGivenNames () const
      {
        return this->OtherGivenNames_;
      }

      PersonType::OtherGivenNames_optional& PersonType::
      OtherGivenNames ()
      {
        return this->OtherGivenNames_;
      }

      void PersonType::
      OtherGivenNames (const OtherGivenNames_type& x)
      {
        this->OtherGivenNames_.set (x);
      }

      void PersonType::
      OtherGivenNames (const OtherGivenNames_optional& x)
      {
        this->OtherGivenNames_ = x;
      }

      void PersonType::
      OtherGivenNames (::std::auto_ptr< OtherGivenNames_type > x)
      {
        this->OtherGivenNames_.set (x);
      }

      const PersonType::Salutation_optional& PersonType::
      Salutation () const
      {
        return this->Salutation_;
      }

      PersonType::Salutation_optional& PersonType::
      Salutation ()
      {
        return this->Salutation_;
      }

      void PersonType::
      Salutation (const Salutation_type& x)
      {
        this->Salutation_.set (x);
      }

      void PersonType::
      Salutation (const Salutation_optional& x)
      {
        this->Salutation_ = x;
      }

      void PersonType::
      Salutation (::std::auto_ptr< Salutation_type > x)
      {
        this->Salutation_.set (x);
      }

      const PersonType::HonorsQualifications_optional& PersonType::
      HonorsQualifications () const
      {
        return this->HonorsQualifications_;
      }

      PersonType::HonorsQualifications_optional& PersonType::
      HonorsQualifications ()
      {
        return this->HonorsQualifications_;
      }

      void PersonType::
      HonorsQualifications (const HonorsQualifications_type& x)
      {
        this->HonorsQualifications_.set (x);
      }

      void PersonType::
      HonorsQualifications (const HonorsQualifications_optional& x)
      {
        this->HonorsQualifications_ = x;
      }

      void PersonType::
      HonorsQualifications (::std::auto_ptr< HonorsQualifications_type > x)
      {
        this->HonorsQualifications_.set (x);
      }

      const PersonType::PersonDescription_optional& PersonType::
      PersonDescription () const
      {
        return this->PersonDescription_;
      }

      PersonType::PersonDescription_optional& PersonType::
      PersonDescription ()
      {
        return this->PersonDescription_;
      }

      void PersonType::
      PersonDescription (const PersonDescription_type& x)
      {
        this->PersonDescription_.set (x);
      }

      void PersonType::
      PersonDescription (const PersonDescription_optional& x)
      {
        this->PersonDescription_ = x;
      }

      void PersonType::
      PersonDescription (::std::auto_ptr< PersonDescription_type > x)
      {
        this->PersonDescription_.set (x);
      }

      const PersonType::AlternateName_optional& PersonType::
      AlternateName () const
      {
        return this->AlternateName_;
      }

      PersonType::AlternateName_optional& PersonType::
      AlternateName ()
      {
        return this->AlternateName_;
      }

      void PersonType::
      AlternateName (const AlternateName_type& x)
      {
        this->AlternateName_.set (x);
      }

      void PersonType::
      AlternateName (const AlternateName_optional& x)
      {
        this->AlternateName_ = x;
      }

      void PersonType::
      AlternateName (::std::auto_ptr< AlternateName_type > x)
      {
        this->AlternateName_.set (x);
      }

      const PersonType::LinkingName_optional& PersonType::
      LinkingName () const
      {
        return this->LinkingName_;
      }

      PersonType::LinkingName_optional& PersonType::
      LinkingName ()
      {
        return this->LinkingName_;
      }

      void PersonType::
      LinkingName (const LinkingName_type& x)
      {
        this->LinkingName_.set (x);
      }

      void PersonType::
      LinkingName (const LinkingName_optional& x)
      {
        this->LinkingName_ = x;
      }

      void PersonType::
      LinkingName (::std::auto_ptr< LinkingName_type > x)
      {
        this->LinkingName_.set (x);
      }

      const PersonType::NameSuffix_optional& PersonType::
      NameSuffix () const
      {
        return this->NameSuffix_;
      }

      PersonType::NameSuffix_optional& PersonType::
      NameSuffix ()
      {
        return this->NameSuffix_;
      }

      void PersonType::
      NameSuffix (const NameSuffix_type& x)
      {
        this->NameSuffix_.set (x);
      }

      void PersonType::
      NameSuffix (const NameSuffix_optional& x)
      {
        this->NameSuffix_ = x;
      }

      void PersonType::
      NameSuffix (::std::auto_ptr< NameSuffix_type > x)
      {
        this->NameSuffix_.set (x);
      }

      const PersonType::FormerFamilyName_optional& PersonType::
      FormerFamilyName () const
      {
        return this->FormerFamilyName_;
      }

      PersonType::FormerFamilyName_optional& PersonType::
      FormerFamilyName ()
      {
        return this->FormerFamilyName_;
      }

      void PersonType::
      FormerFamilyName (const FormerFamilyName_type& x)
      {
        this->FormerFamilyName_.set (x);
      }

      void PersonType::
      FormerFamilyName (const FormerFamilyName_optional& x)
      {
        this->FormerFamilyName_ = x;
      }

      void PersonType::
      FormerFamilyName (::std::auto_ptr< FormerFamilyName_type > x)
      {
        this->FormerFamilyName_.set (x);
      }

      const PersonType::Nationality_optional& PersonType::
      Nationality () const
      {
        return this->Nationality_;
      }

      PersonType::Nationality_optional& PersonType::
      Nationality ()
      {
        return this->Nationality_;
      }

      void PersonType::
      Nationality (const Nationality_type& x)
      {
        this->Nationality_.set (x);
      }

      void PersonType::
      Nationality (const Nationality_optional& x)
      {
        this->Nationality_ = x;
      }

      void PersonType::
      Nationality (::std::auto_ptr< Nationality_type > x)
      {
        this->Nationality_.set (x);
      }

      const PersonType::Citizenship_optional& PersonType::
      Citizenship () const
      {
        return this->Citizenship_;
      }

      PersonType::Citizenship_optional& PersonType::
      Citizenship ()
      {
        return this->Citizenship_;
      }

      void PersonType::
      Citizenship (const Citizenship_type& x)
      {
        this->Citizenship_.set (x);
      }

      void PersonType::
      Citizenship (const Citizenship_optional& x)
      {
        this->Citizenship_ = x;
      }

      void PersonType::
      Citizenship (::std::auto_ptr< Citizenship_type > x)
      {
        this->Citizenship_.set (x);
      }

      const PersonType::PersonOrganizations_optional& PersonType::
      PersonOrganizations () const
      {
        return this->PersonOrganizations_;
      }

      PersonType::PersonOrganizations_optional& PersonType::
      PersonOrganizations ()
      {
        return this->PersonOrganizations_;
      }

      void PersonType::
      PersonOrganizations (const PersonOrganizations_type& x)
      {
        this->PersonOrganizations_.set (x);
      }

      void PersonType::
      PersonOrganizations (const PersonOrganizations_optional& x)
      {
        this->PersonOrganizations_ = x;
      }

      void PersonType::
      PersonOrganizations (::std::auto_ptr< PersonOrganizations_type > x)
      {
        this->PersonOrganizations_.set (x);
      }


      // OrganizationType
      // 

      const OrganizationType::OrganizationKind_optional& OrganizationType::
      OrganizationKind () const
      {
        return this->OrganizationKind_;
      }

      OrganizationType::OrganizationKind_optional& OrganizationType::
      OrganizationKind ()
      {
        return this->OrganizationKind_;
      }

      void OrganizationType::
      OrganizationKind (const OrganizationKind_type& x)
      {
        this->OrganizationKind_.set (x);
      }

      void OrganizationType::
      OrganizationKind (const OrganizationKind_optional& x)
      {
        this->OrganizationKind_ = x;
      }

      void OrganizationType::
      OrganizationKind (::std::auto_ptr< OrganizationKind_type > x)
      {
        this->OrganizationKind_.set (x);
      }

      const OrganizationType::OrganizationMainName_optional& OrganizationType::
      OrganizationMainName () const
      {
        return this->OrganizationMainName_;
      }

      OrganizationType::OrganizationMainName_optional& OrganizationType::
      OrganizationMainName ()
      {
        return this->OrganizationMainName_;
      }

      void OrganizationType::
      OrganizationMainName (const OrganizationMainName_type& x)
      {
        this->OrganizationMainName_.set (x);
      }

      void OrganizationType::
      OrganizationMainName (const OrganizationMainName_optional& x)
      {
        this->OrganizationMainName_ = x;
      }

      void OrganizationType::
      OrganizationMainName (::std::auto_ptr< OrganizationMainName_type > x)
      {
        this->OrganizationMainName_.set (x);
      }

      const OrganizationType::OrganizationCode_optional& OrganizationType::
      OrganizationCode () const
      {
        return this->OrganizationCode_;
      }

      OrganizationType::OrganizationCode_optional& OrganizationType::
      OrganizationCode ()
      {
        return this->OrganizationCode_;
      }

      void OrganizationType::
      OrganizationCode (const OrganizationCode_type& x)
      {
        this->OrganizationCode_.set (x);
      }

      void OrganizationType::
      OrganizationCode (const OrganizationCode_optional& x)
      {
        this->OrganizationCode_ = x;
      }

      void OrganizationType::
      OrganizationCode (::std::auto_ptr< OrganizationCode_type > x)
      {
        this->OrganizationCode_.set (x);
      }

      const OrganizationType::ContactDepartment_optional& OrganizationType::
      ContactDepartment () const
      {
        return this->ContactDepartment_;
      }

      OrganizationType::ContactDepartment_optional& OrganizationType::
      ContactDepartment ()
      {
        return this->ContactDepartment_;
      }

      void OrganizationType::
      ContactDepartment (const ContactDepartment_type& x)
      {
        this->ContactDepartment_.set (x);
      }

      void OrganizationType::
      ContactDepartment (const ContactDepartment_optional& x)
      {
        this->ContactDepartment_ = x;
      }

      void OrganizationType::
      ContactDepartment (::std::auto_ptr< ContactDepartment_type > x)
      {
        this->ContactDepartment_.set (x);
      }


      // LocationType
      // 

      const LocationType::LocationKind_optional& LocationType::
      LocationKind () const
      {
        return this->LocationKind_;
      }

      LocationType::LocationKind_optional& LocationType::
      LocationKind ()
      {
        return this->LocationKind_;
      }

      void LocationType::
      LocationKind (const LocationKind_type& x)
      {
        this->LocationKind_.set (x);
      }

      void LocationType::
      LocationKind (const LocationKind_optional& x)
      {
        this->LocationKind_ = x;
      }

      void LocationType::
      LocationKind (::std::auto_ptr< LocationKind_type > x)
      {
        this->LocationKind_.set (x);
      }

      const LocationType::LocationDescription_optional& LocationType::
      LocationDescription () const
      {
        return this->LocationDescription_;
      }

      LocationType::LocationDescription_optional& LocationType::
      LocationDescription ()
      {
        return this->LocationDescription_;
      }

      void LocationType::
      LocationDescription (const LocationDescription_type& x)
      {
        this->LocationDescription_.set (x);
      }

      void LocationType::
      LocationDescription (const LocationDescription_optional& x)
      {
        this->LocationDescription_ = x;
      }

      void LocationType::
      LocationDescription (::std::auto_ptr< LocationDescription_type > x)
      {
        this->LocationDescription_.set (x);
      }


      // AddressType
      // 

      const AddressType::RoomSuiteNumber_optional& AddressType::
      RoomSuiteNumber () const
      {
        return this->RoomSuiteNumber_;
      }

      AddressType::RoomSuiteNumber_optional& AddressType::
      RoomSuiteNumber ()
      {
        return this->RoomSuiteNumber_;
      }

      void AddressType::
      RoomSuiteNumber (const RoomSuiteNumber_type& x)
      {
        this->RoomSuiteNumber_.set (x);
      }

      void AddressType::
      RoomSuiteNumber (const RoomSuiteNumber_optional& x)
      {
        this->RoomSuiteNumber_ = x;
      }

      void AddressType::
      RoomSuiteNumber (::std::auto_ptr< RoomSuiteNumber_type > x)
      {
        this->RoomSuiteNumber_.set (x);
      }

      const AddressType::RoomSuiteName_optional& AddressType::
      RoomSuiteName () const
      {
        return this->RoomSuiteName_;
      }

      AddressType::RoomSuiteName_optional& AddressType::
      RoomSuiteName ()
      {
        return this->RoomSuiteName_;
      }

      void AddressType::
      RoomSuiteName (const RoomSuiteName_type& x)
      {
        this->RoomSuiteName_.set (x);
      }

      void AddressType::
      RoomSuiteName (const RoomSuiteName_optional& x)
      {
        this->RoomSuiteName_ = x;
      }

      void AddressType::
      RoomSuiteName (::std::auto_ptr< RoomSuiteName_type > x)
      {
        this->RoomSuiteName_.set (x);
      }

      const AddressType::BuildingName_optional& AddressType::
      BuildingName () const
      {
        return this->BuildingName_;
      }

      AddressType::BuildingName_optional& AddressType::
      BuildingName ()
      {
        return this->BuildingName_;
      }

      void AddressType::
      BuildingName (const BuildingName_type& x)
      {
        this->BuildingName_.set (x);
      }

      void AddressType::
      BuildingName (const BuildingName_optional& x)
      {
        this->BuildingName_ = x;
      }

      void AddressType::
      BuildingName (::std::auto_ptr< BuildingName_type > x)
      {
        this->BuildingName_.set (x);
      }

      const AddressType::PlaceName_optional& AddressType::
      PlaceName () const
      {
        return this->PlaceName_;
      }

      AddressType::PlaceName_optional& AddressType::
      PlaceName ()
      {
        return this->PlaceName_;
      }

      void AddressType::
      PlaceName (const PlaceName_type& x)
      {
        this->PlaceName_.set (x);
      }

      void AddressType::
      PlaceName (const PlaceName_optional& x)
      {
        this->PlaceName_ = x;
      }

      void AddressType::
      PlaceName (::std::auto_ptr< PlaceName_type > x)
      {
        this->PlaceName_.set (x);
      }

      const AddressType::StreetNumber_optional& AddressType::
      StreetNumber () const
      {
        return this->StreetNumber_;
      }

      AddressType::StreetNumber_optional& AddressType::
      StreetNumber ()
      {
        return this->StreetNumber_;
      }

      void AddressType::
      StreetNumber (const StreetNumber_type& x)
      {
        this->StreetNumber_.set (x);
      }

      void AddressType::
      StreetNumber (const StreetNumber_optional& x)
      {
        this->StreetNumber_ = x;
      }

      void AddressType::
      StreetNumber (::std::auto_ptr< StreetNumber_type > x)
      {
        this->StreetNumber_.set (x);
      }

      const AddressType::StreetName_optional& AddressType::
      StreetName () const
      {
        return this->StreetName_;
      }

      AddressType::StreetName_optional& AddressType::
      StreetName ()
      {
        return this->StreetName_;
      }

      void AddressType::
      StreetName (const StreetName_type& x)
      {
        this->StreetName_.set (x);
      }

      void AddressType::
      StreetName (const StreetName_optional& x)
      {
        this->StreetName_ = x;
      }

      void AddressType::
      StreetName (::std::auto_ptr< StreetName_type > x)
      {
        this->StreetName_.set (x);
      }

      const AddressType::PostalTown_optional& AddressType::
      PostalTown () const
      {
        return this->PostalTown_;
      }

      AddressType::PostalTown_optional& AddressType::
      PostalTown ()
      {
        return this->PostalTown_;
      }

      void AddressType::
      PostalTown (const PostalTown_type& x)
      {
        this->PostalTown_.set (x);
      }

      void AddressType::
      PostalTown (const PostalTown_optional& x)
      {
        this->PostalTown_ = x;
      }

      void AddressType::
      PostalTown (::std::auto_ptr< PostalTown_type > x)
      {
        this->PostalTown_.set (x);
      }

      const AddressType::City_optional& AddressType::
      City () const
      {
        return this->City_;
      }

      AddressType::City_optional& AddressType::
      City ()
      {
        return this->City_;
      }

      void AddressType::
      City (const City_type& x)
      {
        this->City_.set (x);
      }

      void AddressType::
      City (const City_optional& x)
      {
        this->City_ = x;
      }

      void AddressType::
      City (::std::auto_ptr< City_type > x)
      {
        this->City_.set (x);
      }

      const AddressType::StateProvinceCounty_optional& AddressType::
      StateProvinceCounty () const
      {
        return this->StateProvinceCounty_;
      }

      AddressType::StateProvinceCounty_optional& AddressType::
      StateProvinceCounty ()
      {
        return this->StateProvinceCounty_;
      }

      void AddressType::
      StateProvinceCounty (const StateProvinceCounty_type& x)
      {
        this->StateProvinceCounty_.set (x);
      }

      void AddressType::
      StateProvinceCounty (const StateProvinceCounty_optional& x)
      {
        this->StateProvinceCounty_ = x;
      }

      void AddressType::
      StateProvinceCounty (::std::auto_ptr< StateProvinceCounty_type > x)
      {
        this->StateProvinceCounty_.set (x);
      }

      const AddressType::PostalCode_optional& AddressType::
      PostalCode () const
      {
        return this->PostalCode_;
      }

      AddressType::PostalCode_optional& AddressType::
      PostalCode ()
      {
        return this->PostalCode_;
      }

      void AddressType::
      PostalCode (const PostalCode_type& x)
      {
        this->PostalCode_.set (x);
      }

      void AddressType::
      PostalCode (const PostalCode_optional& x)
      {
        this->PostalCode_ = x;
      }

      void AddressType::
      PostalCode (::std::auto_ptr< PostalCode_type > x)
      {
        this->PostalCode_.set (x);
      }

      const AddressType::Country_optional& AddressType::
      Country () const
      {
        return this->Country_;
      }

      AddressType::Country_optional& AddressType::
      Country ()
      {
        return this->Country_;
      }

      void AddressType::
      Country (const Country_type& x)
      {
        this->Country_.set (x);
      }

      void AddressType::
      Country (const Country_optional& x)
      {
        this->Country_ = x;
      }

      void AddressType::
      Country (::std::auto_ptr< Country_type > x)
      {
        this->Country_.set (x);
      }

      const AddressType::GeographicalCoordinates_optional& AddressType::
      GeographicalCoordinates () const
      {
        return this->GeographicalCoordinates_;
      }

      AddressType::GeographicalCoordinates_optional& AddressType::
      GeographicalCoordinates ()
      {
        return this->GeographicalCoordinates_;
      }

      void AddressType::
      GeographicalCoordinates (const GeographicalCoordinates_type& x)
      {
        this->GeographicalCoordinates_.set (x);
      }

      void AddressType::
      GeographicalCoordinates (const GeographicalCoordinates_optional& x)
      {
        this->GeographicalCoordinates_ = x;
      }

      void AddressType::
      GeographicalCoordinates (::std::auto_ptr< GeographicalCoordinates_type > x)
      {
        this->GeographicalCoordinates_.set (x);
      }

      const AddressType::AstronomicalBodyName_optional& AddressType::
      AstronomicalBodyName () const
      {
        return this->AstronomicalBodyName_;
      }

      AddressType::AstronomicalBodyName_optional& AddressType::
      AstronomicalBodyName ()
      {
        return this->AstronomicalBodyName_;
      }

      void AddressType::
      AstronomicalBodyName (const AstronomicalBodyName_type& x)
      {
        this->AstronomicalBodyName_.set (x);
      }

      void AddressType::
      AstronomicalBodyName (const AstronomicalBodyName_optional& x)
      {
        this->AstronomicalBodyName_ = x;
      }

      void AddressType::
      AstronomicalBodyName (::std::auto_ptr< AstronomicalBodyName_type > x)
      {
        this->AstronomicalBodyName_.set (x);
      }

      const AddressType::CommunicationsObjects_optional& AddressType::
      CommunicationsObjects () const
      {
        return this->CommunicationsObjects_;
      }

      AddressType::CommunicationsObjects_optional& AddressType::
      CommunicationsObjects ()
      {
        return this->CommunicationsObjects_;
      }

      void AddressType::
      CommunicationsObjects (const CommunicationsObjects_type& x)
      {
        this->CommunicationsObjects_.set (x);
      }

      void AddressType::
      CommunicationsObjects (const CommunicationsObjects_optional& x)
      {
        this->CommunicationsObjects_ = x;
      }

      void AddressType::
      CommunicationsObjects (::std::auto_ptr< CommunicationsObjects_type > x)
      {
        this->CommunicationsObjects_.set (x);
      }

      const AddressType::AddressNameValueObjects_optional& AddressType::
      AddressNameValueObjects () const
      {
        return this->AddressNameValueObjects_;
      }

      AddressType::AddressNameValueObjects_optional& AddressType::
      AddressNameValueObjects ()
      {
        return this->AddressNameValueObjects_;
      }

      void AddressType::
      AddressNameValueObjects (const AddressNameValueObjects_type& x)
      {
        this->AddressNameValueObjects_.set (x);
      }

      void AddressType::
      AddressNameValueObjects (const AddressNameValueObjects_optional& x)
      {
        this->AddressNameValueObjects_ = x;
      }

      void AddressType::
      AddressNameValueObjects (::std::auto_ptr< AddressNameValueObjects_type > x)
      {
        this->AddressNameValueObjects_.set (x);
      }


      // CommunicationsType
      // 

      const CommunicationsType::CentralTelephoneNumber_optional& CommunicationsType::
      CentralTelephoneNumber () const
      {
        return this->CentralTelephoneNumber_;
      }

      CommunicationsType::CentralTelephoneNumber_optional& CommunicationsType::
      CentralTelephoneNumber ()
      {
        return this->CentralTelephoneNumber_;
      }

      void CommunicationsType::
      CentralTelephoneNumber (const CentralTelephoneNumber_type& x)
      {
        this->CentralTelephoneNumber_.set (x);
      }

      void CommunicationsType::
      CentralTelephoneNumber (const CentralTelephoneNumber_optional& x)
      {
        this->CentralTelephoneNumber_ = x;
      }

      void CommunicationsType::
      CentralTelephoneNumber (::std::auto_ptr< CentralTelephoneNumber_type > x)
      {
        this->CentralTelephoneNumber_.set (x);
      }

      const CommunicationsType::TelephoneNumber_optional& CommunicationsType::
      TelephoneNumber () const
      {
        return this->TelephoneNumber_;
      }

      CommunicationsType::TelephoneNumber_optional& CommunicationsType::
      TelephoneNumber ()
      {
        return this->TelephoneNumber_;
      }

      void CommunicationsType::
      TelephoneNumber (const TelephoneNumber_type& x)
      {
        this->TelephoneNumber_.set (x);
      }

      void CommunicationsType::
      TelephoneNumber (const TelephoneNumber_optional& x)
      {
        this->TelephoneNumber_ = x;
      }

      void CommunicationsType::
      TelephoneNumber (::std::auto_ptr< TelephoneNumber_type > x)
      {
        this->TelephoneNumber_.set (x);
      }

      const CommunicationsType::MobileTelephoneNumber_optional& CommunicationsType::
      MobileTelephoneNumber () const
      {
        return this->MobileTelephoneNumber_;
      }

      CommunicationsType::MobileTelephoneNumber_optional& CommunicationsType::
      MobileTelephoneNumber ()
      {
        return this->MobileTelephoneNumber_;
      }

      void CommunicationsType::
      MobileTelephoneNumber (const MobileTelephoneNumber_type& x)
      {
        this->MobileTelephoneNumber_.set (x);
      }

      void CommunicationsType::
      MobileTelephoneNumber (const MobileTelephoneNumber_optional& x)
      {
        this->MobileTelephoneNumber_ = x;
      }

      void CommunicationsType::
      MobileTelephoneNumber (::std::auto_ptr< MobileTelephoneNumber_type > x)
      {
        this->MobileTelephoneNumber_.set (x);
      }

      const CommunicationsType::FaxNumber_optional& CommunicationsType::
      FaxNumber () const
      {
        return this->FaxNumber_;
      }

      CommunicationsType::FaxNumber_optional& CommunicationsType::
      FaxNumber ()
      {
        return this->FaxNumber_;
      }

      void CommunicationsType::
      FaxNumber (const FaxNumber_type& x)
      {
        this->FaxNumber_.set (x);
      }

      void CommunicationsType::
      FaxNumber (const FaxNumber_optional& x)
      {
        this->FaxNumber_ = x;
      }

      void CommunicationsType::
      FaxNumber (::std::auto_ptr< FaxNumber_type > x)
      {
        this->FaxNumber_.set (x);
      }

      const CommunicationsType::EmailAddress_optional& CommunicationsType::
      EmailAddress () const
      {
        return this->EmailAddress_;
      }

      CommunicationsType::EmailAddress_optional& CommunicationsType::
      EmailAddress ()
      {
        return this->EmailAddress_;
      }

      void CommunicationsType::
      EmailAddress (const EmailAddress_type& x)
      {
        this->EmailAddress_.set (x);
      }

      void CommunicationsType::
      EmailAddress (const EmailAddress_optional& x)
      {
        this->EmailAddress_ = x;
      }

      void CommunicationsType::
      EmailAddress (::std::auto_ptr< EmailAddress_type > x)
      {
        this->EmailAddress_.set (x);
      }

      const CommunicationsType::ContactWebPage_optional& CommunicationsType::
      ContactWebPage () const
      {
        return this->ContactWebPage_;
      }

      CommunicationsType::ContactWebPage_optional& CommunicationsType::
      ContactWebPage ()
      {
        return this->ContactWebPage_;
      }

      void CommunicationsType::
      ContactWebPage (const ContactWebPage_type& x)
      {
        this->ContactWebPage_.set (x);
      }

      void CommunicationsType::
      ContactWebPage (const ContactWebPage_optional& x)
      {
        this->ContactWebPage_ = x;
      }

      void CommunicationsType::
      ContactWebPage (::std::auto_ptr< ContactWebPage_type > x)
      {
        this->ContactWebPage_.set (x);
      }


      // ContractType
      // 

      const ContractType::SupplyContractNumber_optional& ContractType::
      SupplyContractNumber () const
      {
        return this->SupplyContractNumber_;
      }

      ContractType::SupplyContractNumber_optional& ContractType::
      SupplyContractNumber ()
      {
        return this->SupplyContractNumber_;
      }

      void ContractType::
      SupplyContractNumber (const SupplyContractNumber_type& x)
      {
        this->SupplyContractNumber_.set (x);
      }

      void ContractType::
      SupplyContractNumber (const SupplyContractNumber_optional& x)
      {
        this->SupplyContractNumber_ = x;
      }

      void ContractType::
      SupplyContractNumber (::std::auto_ptr< SupplyContractNumber_type > x)
      {
        this->SupplyContractNumber_.set (x);
      }

      const ContractType::RightsObjects_optional& ContractType::
      RightsObjects () const
      {
        return this->RightsObjects_;
      }

      ContractType::RightsObjects_optional& ContractType::
      RightsObjects ()
      {
        return this->RightsObjects_;
      }

      void ContractType::
      RightsObjects (const RightsObjects_type& x)
      {
        this->RightsObjects_.set (x);
      }

      void ContractType::
      RightsObjects (const RightsObjects_optional& x)
      {
        this->RightsObjects_ = x;
      }

      void ContractType::
      RightsObjects (::std::auto_ptr< RightsObjects_type > x)
      {
        this->RightsObjects_.set (x);
      }

      const ContractType::ContractParticipants_optional& ContractType::
      ContractParticipants () const
      {
        return this->ContractParticipants_;
      }

      ContractType::ContractParticipants_optional& ContractType::
      ContractParticipants ()
      {
        return this->ContractParticipants_;
      }

      void ContractType::
      ContractParticipants (const ContractParticipants_type& x)
      {
        this->ContractParticipants_.set (x);
      }

      void ContractType::
      ContractParticipants (const ContractParticipants_optional& x)
      {
        this->ContractParticipants_ = x;
      }

      void ContractType::
      ContractParticipants (::std::auto_ptr< ContractParticipants_type > x)
      {
        this->ContractParticipants_.set (x);
      }


      // RightsType
      // 

      const RightsType::CopyrightOwner_optional& RightsType::
      CopyrightOwner () const
      {
        return this->CopyrightOwner_;
      }

      RightsType::CopyrightOwner_optional& RightsType::
      CopyrightOwner ()
      {
        return this->CopyrightOwner_;
      }

      void RightsType::
      CopyrightOwner (const CopyrightOwner_type& x)
      {
        this->CopyrightOwner_.set (x);
      }

      void RightsType::
      CopyrightOwner (const CopyrightOwner_optional& x)
      {
        this->CopyrightOwner_ = x;
      }

      void RightsType::
      CopyrightOwner (::std::auto_ptr< CopyrightOwner_type > x)
      {
        this->CopyrightOwner_.set (x);
      }

      const RightsType::Rightsholder_optional& RightsType::
      Rightsholder () const
      {
        return this->Rightsholder_;
      }

      RightsType::Rightsholder_optional& RightsType::
      Rightsholder ()
      {
        return this->Rightsholder_;
      }

      void RightsType::
      Rightsholder (const Rightsholder_type& x)
      {
        this->Rightsholder_.set (x);
      }

      void RightsType::
      Rightsholder (const Rightsholder_optional& x)
      {
        this->Rightsholder_ = x;
      }

      void RightsType::
      Rightsholder (::std::auto_ptr< Rightsholder_type > x)
      {
        this->Rightsholder_.set (x);
      }

      const RightsType::RightsManagementAuthority_optional& RightsType::
      RightsManagementAuthority () const
      {
        return this->RightsManagementAuthority_;
      }

      RightsType::RightsManagementAuthority_optional& RightsType::
      RightsManagementAuthority ()
      {
        return this->RightsManagementAuthority_;
      }

      void RightsType::
      RightsManagementAuthority (const RightsManagementAuthority_type& x)
      {
        this->RightsManagementAuthority_.set (x);
      }

      void RightsType::
      RightsManagementAuthority (const RightsManagementAuthority_optional& x)
      {
        this->RightsManagementAuthority_ = x;
      }

      void RightsType::
      RightsManagementAuthority (::std::auto_ptr< RightsManagementAuthority_type > x)
      {
        this->RightsManagementAuthority_.set (x);
      }

      const RightsType::RegionAreaOfIPLicense_optional& RightsType::
      RegionAreaOfIPLicense () const
      {
        return this->RegionAreaOfIPLicense_;
      }

      RightsType::RegionAreaOfIPLicense_optional& RightsType::
      RegionAreaOfIPLicense ()
      {
        return this->RegionAreaOfIPLicense_;
      }

      void RightsType::
      RegionAreaOfIPLicense (const RegionAreaOfIPLicense_type& x)
      {
        this->RegionAreaOfIPLicense_.set (x);
      }

      void RightsType::
      RegionAreaOfIPLicense (const RegionAreaOfIPLicense_optional& x)
      {
        this->RegionAreaOfIPLicense_ = x;
      }

      void RightsType::
      RegionAreaOfIPLicense (::std::auto_ptr< RegionAreaOfIPLicense_type > x)
      {
        this->RegionAreaOfIPLicense_.set (x);
      }

      const RightsType::IntellectualPropertyDescription_optional& RightsType::
      IntellectualPropertyDescription () const
      {
        return this->IntellectualPropertyDescription_;
      }

      RightsType::IntellectualPropertyDescription_optional& RightsType::
      IntellectualPropertyDescription ()
      {
        return this->IntellectualPropertyDescription_;
      }

      void RightsType::
      IntellectualPropertyDescription (const IntellectualPropertyDescription_type& x)
      {
        this->IntellectualPropertyDescription_.set (x);
      }

      void RightsType::
      IntellectualPropertyDescription (const IntellectualPropertyDescription_optional& x)
      {
        this->IntellectualPropertyDescription_ = x;
      }

      void RightsType::
      IntellectualPropertyDescription (::std::auto_ptr< IntellectualPropertyDescription_type > x)
      {
        this->IntellectualPropertyDescription_.set (x);
      }

      const RightsType::RightsCondition_optional& RightsType::
      RightsCondition () const
      {
        return this->RightsCondition_;
      }

      RightsType::RightsCondition_optional& RightsType::
      RightsCondition ()
      {
        return this->RightsCondition_;
      }

      void RightsType::
      RightsCondition (const RightsCondition_type& x)
      {
        this->RightsCondition_.set (x);
      }

      void RightsType::
      RightsCondition (const RightsCondition_optional& x)
      {
        this->RightsCondition_ = x;
      }

      void RightsType::
      RightsCondition (::std::auto_ptr< RightsCondition_type > x)
      {
        this->RightsCondition_.set (x);
      }

      const RightsType::RightsComment_optional& RightsType::
      RightsComment () const
      {
        return this->RightsComment_;
      }

      RightsType::RightsComment_optional& RightsType::
      RightsComment ()
      {
        return this->RightsComment_;
      }

      void RightsType::
      RightsComment (const RightsComment_type& x)
      {
        this->RightsComment_.set (x);
      }

      void RightsType::
      RightsComment (const RightsComment_optional& x)
      {
        this->RightsComment_ = x;
      }

      void RightsType::
      RightsComment (::std::auto_ptr< RightsComment_type > x)
      {
        this->RightsComment_.set (x);
      }

      const RightsType::IntellectualPropertyRight_optional& RightsType::
      IntellectualPropertyRight () const
      {
        return this->IntellectualPropertyRight_;
      }

      RightsType::IntellectualPropertyRight_optional& RightsType::
      IntellectualPropertyRight ()
      {
        return this->IntellectualPropertyRight_;
      }

      void RightsType::
      IntellectualPropertyRight (const IntellectualPropertyRight_type& x)
      {
        this->IntellectualPropertyRight_.set (x);
      }

      void RightsType::
      IntellectualPropertyRight (const IntellectualPropertyRight_optional& x)
      {
        this->IntellectualPropertyRight_ = x;
      }

      void RightsType::
      IntellectualPropertyRight (::std::auto_ptr< IntellectualPropertyRight_type > x)
      {
        this->IntellectualPropertyRight_.set (x);
      }

      const RightsType::RightsStartDateTime_optional& RightsType::
      RightsStartDateTime () const
      {
        return this->RightsStartDateTime_;
      }

      RightsType::RightsStartDateTime_optional& RightsType::
      RightsStartDateTime ()
      {
        return this->RightsStartDateTime_;
      }

      void RightsType::
      RightsStartDateTime (const RightsStartDateTime_type& x)
      {
        this->RightsStartDateTime_.set (x);
      }

      void RightsType::
      RightsStartDateTime (const RightsStartDateTime_optional& x)
      {
        this->RightsStartDateTime_ = x;
      }

      void RightsType::
      RightsStartDateTime (::std::auto_ptr< RightsStartDateTime_type > x)
      {
        this->RightsStartDateTime_.set (x);
      }

      const RightsType::RightsStopDateTime_optional& RightsType::
      RightsStopDateTime () const
      {
        return this->RightsStopDateTime_;
      }

      RightsType::RightsStopDateTime_optional& RightsType::
      RightsStopDateTime ()
      {
        return this->RightsStopDateTime_;
      }

      void RightsType::
      RightsStopDateTime (const RightsStopDateTime_type& x)
      {
        this->RightsStopDateTime_.set (x);
      }

      void RightsType::
      RightsStopDateTime (const RightsStopDateTime_optional& x)
      {
        this->RightsStopDateTime_ = x;
      }

      void RightsType::
      RightsStopDateTime (::std::auto_ptr< RightsStopDateTime_type > x)
      {
        this->RightsStopDateTime_.set (x);
      }

      const RightsType::MaxNumberOfUsages_optional& RightsType::
      MaxNumberOfUsages () const
      {
        return this->MaxNumberOfUsages_;
      }

      RightsType::MaxNumberOfUsages_optional& RightsType::
      MaxNumberOfUsages ()
      {
        return this->MaxNumberOfUsages_;
      }

      void RightsType::
      MaxNumberOfUsages (const MaxNumberOfUsages_type& x)
      {
        this->MaxNumberOfUsages_.set (x);
      }

      void RightsType::
      MaxNumberOfUsages (const MaxNumberOfUsages_optional& x)
      {
        this->MaxNumberOfUsages_ = x;
      }

      void RightsType::
      MaxNumberOfUsages (::std::auto_ptr< MaxNumberOfUsages_type > x)
      {
        this->MaxNumberOfUsages_.set (x);
      }


      // PictureFormatType
      // 

      const PictureFormatType::ViewportAspectRatio_optional& PictureFormatType::
      ViewportAspectRatio () const
      {
        return this->ViewportAspectRatio_;
      }

      PictureFormatType::ViewportAspectRatio_optional& PictureFormatType::
      ViewportAspectRatio ()
      {
        return this->ViewportAspectRatio_;
      }

      void PictureFormatType::
      ViewportAspectRatio (const ViewportAspectRatio_type& x)
      {
        this->ViewportAspectRatio_.set (x);
      }

      void PictureFormatType::
      ViewportAspectRatio (const ViewportAspectRatio_optional& x)
      {
        this->ViewportAspectRatio_ = x;
      }

      void PictureFormatType::
      ViewportAspectRatio (::std::auto_ptr< ViewportAspectRatio_type > x)
      {
        this->ViewportAspectRatio_.set (x);
      }

      const PictureFormatType::PerceivedDisplayFormat_optional& PictureFormatType::
      PerceivedDisplayFormat () const
      {
        return this->PerceivedDisplayFormat_;
      }

      PictureFormatType::PerceivedDisplayFormat_optional& PictureFormatType::
      PerceivedDisplayFormat ()
      {
        return this->PerceivedDisplayFormat_;
      }

      void PictureFormatType::
      PerceivedDisplayFormat (const PerceivedDisplayFormat_type& x)
      {
        this->PerceivedDisplayFormat_.set (x);
      }

      void PictureFormatType::
      PerceivedDisplayFormat (const PerceivedDisplayFormat_optional& x)
      {
        this->PerceivedDisplayFormat_ = x;
      }

      void PictureFormatType::
      PerceivedDisplayFormat (::std::auto_ptr< PerceivedDisplayFormat_type > x)
      {
        this->PerceivedDisplayFormat_.set (x);
      }

      const PictureFormatType::ColorDescriptor_optional& PictureFormatType::
      ColorDescriptor () const
      {
        return this->ColorDescriptor_;
      }

      PictureFormatType::ColorDescriptor_optional& PictureFormatType::
      ColorDescriptor ()
      {
        return this->ColorDescriptor_;
      }

      void PictureFormatType::
      ColorDescriptor (const ColorDescriptor_type& x)
      {
        this->ColorDescriptor_.set (x);
      }

      void PictureFormatType::
      ColorDescriptor (const ColorDescriptor_optional& x)
      {
        this->ColorDescriptor_ = x;
      }

      void PictureFormatType::
      ColorDescriptor (::std::auto_ptr< ColorDescriptor_type > x)
      {
        this->ColorDescriptor_.set (x);
      }


      // DeviceParametersType
      // 

      const DeviceParametersType::DeviceKind_optional& DeviceParametersType::
      DeviceKind () const
      {
        return this->DeviceKind_;
      }

      DeviceParametersType::DeviceKind_optional& DeviceParametersType::
      DeviceKind ()
      {
        return this->DeviceKind_;
      }

      void DeviceParametersType::
      DeviceKind (const DeviceKind_type& x)
      {
        this->DeviceKind_.set (x);
      }

      void DeviceParametersType::
      DeviceKind (const DeviceKind_optional& x)
      {
        this->DeviceKind_ = x;
      }

      void DeviceParametersType::
      DeviceKind (::std::auto_ptr< DeviceKind_type > x)
      {
        this->DeviceKind_.set (x);
      }

      const DeviceParametersType::DeviceDesignation_optional& DeviceParametersType::
      DeviceDesignation () const
      {
        return this->DeviceDesignation_;
      }

      DeviceParametersType::DeviceDesignation_optional& DeviceParametersType::
      DeviceDesignation ()
      {
        return this->DeviceDesignation_;
      }

      void DeviceParametersType::
      DeviceDesignation (const DeviceDesignation_type& x)
      {
        this->DeviceDesignation_.set (x);
      }

      void DeviceParametersType::
      DeviceDesignation (const DeviceDesignation_optional& x)
      {
        this->DeviceDesignation_ = x;
      }

      void DeviceParametersType::
      DeviceDesignation (::std::auto_ptr< DeviceDesignation_type > x)
      {
        this->DeviceDesignation_.set (x);
      }

      const DeviceParametersType::DeviceAssetNumber_optional& DeviceParametersType::
      DeviceAssetNumber () const
      {
        return this->DeviceAssetNumber_;
      }

      DeviceParametersType::DeviceAssetNumber_optional& DeviceParametersType::
      DeviceAssetNumber ()
      {
        return this->DeviceAssetNumber_;
      }

      void DeviceParametersType::
      DeviceAssetNumber (const DeviceAssetNumber_type& x)
      {
        this->DeviceAssetNumber_.set (x);
      }

      void DeviceParametersType::
      DeviceAssetNumber (const DeviceAssetNumber_optional& x)
      {
        this->DeviceAssetNumber_ = x;
      }

      void DeviceParametersType::
      DeviceAssetNumber (::std::auto_ptr< DeviceAssetNumber_type > x)
      {
        this->DeviceAssetNumber_.set (x);
      }

      const DeviceParametersType::IEEEDeviceIdentifier_optional& DeviceParametersType::
      IEEEDeviceIdentifier () const
      {
        return this->IEEEDeviceIdentifier_;
      }

      DeviceParametersType::IEEEDeviceIdentifier_optional& DeviceParametersType::
      IEEEDeviceIdentifier ()
      {
        return this->IEEEDeviceIdentifier_;
      }

      void DeviceParametersType::
      IEEEDeviceIdentifier (const IEEEDeviceIdentifier_type& x)
      {
        this->IEEEDeviceIdentifier_.set (x);
      }

      void DeviceParametersType::
      IEEEDeviceIdentifier (const IEEEDeviceIdentifier_optional& x)
      {
        this->IEEEDeviceIdentifier_ = x;
      }

      void DeviceParametersType::
      IEEEDeviceIdentifier (::std::auto_ptr< IEEEDeviceIdentifier_type > x)
      {
        this->IEEEDeviceIdentifier_.set (x);
      }

      const DeviceParametersType::DeviceManufacturerName_optional& DeviceParametersType::
      DeviceManufacturerName () const
      {
        return this->DeviceManufacturerName_;
      }

      DeviceParametersType::DeviceManufacturerName_optional& DeviceParametersType::
      DeviceManufacturerName ()
      {
        return this->DeviceManufacturerName_;
      }

      void DeviceParametersType::
      DeviceManufacturerName (const DeviceManufacturerName_type& x)
      {
        this->DeviceManufacturerName_.set (x);
      }

      void DeviceParametersType::
      DeviceManufacturerName (const DeviceManufacturerName_optional& x)
      {
        this->DeviceManufacturerName_ = x;
      }

      void DeviceParametersType::
      DeviceManufacturerName (::std::auto_ptr< DeviceManufacturerName_type > x)
      {
        this->DeviceManufacturerName_.set (x);
      }

      const DeviceParametersType::DeviceModel_optional& DeviceParametersType::
      DeviceModel () const
      {
        return this->DeviceModel_;
      }

      DeviceParametersType::DeviceModel_optional& DeviceParametersType::
      DeviceModel ()
      {
        return this->DeviceModel_;
      }

      void DeviceParametersType::
      DeviceModel (const DeviceModel_type& x)
      {
        this->DeviceModel_.set (x);
      }

      void DeviceParametersType::
      DeviceModel (const DeviceModel_optional& x)
      {
        this->DeviceModel_ = x;
      }

      void DeviceParametersType::
      DeviceModel (::std::auto_ptr< DeviceModel_type > x)
      {
        this->DeviceModel_.set (x);
      }

      const DeviceParametersType::DeviceSerialNumber_optional& DeviceParametersType::
      DeviceSerialNumber () const
      {
        return this->DeviceSerialNumber_;
      }

      DeviceParametersType::DeviceSerialNumber_optional& DeviceParametersType::
      DeviceSerialNumber ()
      {
        return this->DeviceSerialNumber_;
      }

      void DeviceParametersType::
      DeviceSerialNumber (const DeviceSerialNumber_type& x)
      {
        this->DeviceSerialNumber_.set (x);
      }

      void DeviceParametersType::
      DeviceSerialNumber (const DeviceSerialNumber_optional& x)
      {
        this->DeviceSerialNumber_ = x;
      }

      void DeviceParametersType::
      DeviceSerialNumber (::std::auto_ptr< DeviceSerialNumber_type > x)
      {
        this->DeviceSerialNumber_.set (x);
      }

      const DeviceParametersType::DeviceUsageDescription_optional& DeviceParametersType::
      DeviceUsageDescription () const
      {
        return this->DeviceUsageDescription_;
      }

      DeviceParametersType::DeviceUsageDescription_optional& DeviceParametersType::
      DeviceUsageDescription ()
      {
        return this->DeviceUsageDescription_;
      }

      void DeviceParametersType::
      DeviceUsageDescription (const DeviceUsageDescription_type& x)
      {
        this->DeviceUsageDescription_.set (x);
      }

      void DeviceParametersType::
      DeviceUsageDescription (const DeviceUsageDescription_optional& x)
      {
        this->DeviceUsageDescription_ = x;
      }

      void DeviceParametersType::
      DeviceUsageDescription (::std::auto_ptr< DeviceUsageDescription_type > x)
      {
        this->DeviceUsageDescription_.set (x);
      }

      const DeviceParametersType::DeviceParametersNameValueObjects_optional& DeviceParametersType::
      DeviceParametersNameValueObjects () const
      {
        return this->DeviceParametersNameValueObjects_;
      }

      DeviceParametersType::DeviceParametersNameValueObjects_optional& DeviceParametersType::
      DeviceParametersNameValueObjects ()
      {
        return this->DeviceParametersNameValueObjects_;
      }

      void DeviceParametersType::
      DeviceParametersNameValueObjects (const DeviceParametersNameValueObjects_type& x)
      {
        this->DeviceParametersNameValueObjects_.set (x);
      }

      void DeviceParametersType::
      DeviceParametersNameValueObjects (const DeviceParametersNameValueObjects_optional& x)
      {
        this->DeviceParametersNameValueObjects_ = x;
      }

      void DeviceParametersType::
      DeviceParametersNameValueObjects (::std::auto_ptr< DeviceParametersNameValueObjects_type > x)
      {
        this->DeviceParametersNameValueObjects_.set (x);
      }


      // NameValueType
      // 

      const NameValueType::ItemName_optional& NameValueType::
      ItemName () const
      {
        return this->ItemName_;
      }

      NameValueType::ItemName_optional& NameValueType::
      ItemName ()
      {
        return this->ItemName_;
      }

      void NameValueType::
      ItemName (const ItemName_type& x)
      {
        this->ItemName_.set (x);
      }

      void NameValueType::
      ItemName (const ItemName_optional& x)
      {
        this->ItemName_ = x;
      }

      void NameValueType::
      ItemName (::std::auto_ptr< ItemName_type > x)
      {
        this->ItemName_.set (x);
      }

      const NameValueType::ItemValue_optional& NameValueType::
      ItemValue () const
      {
        return this->ItemValue_;
      }

      NameValueType::ItemValue_optional& NameValueType::
      ItemValue ()
      {
        return this->ItemValue_;
      }

      void NameValueType::
      ItemValue (const ItemValue_type& x)
      {
        this->ItemValue_.set (x);
      }

      void NameValueType::
      ItemValue (const ItemValue_optional& x)
      {
        this->ItemValue_ = x;
      }

      void NameValueType::
      ItemValue (::std::auto_ptr< ItemValue_type > x)
      {
        this->ItemValue_.set (x);
      }

      const NameValueType::SMPTEUniversalLabelLocator_optional& NameValueType::
      SMPTEUniversalLabelLocator () const
      {
        return this->SMPTEUniversalLabelLocator_;
      }

      NameValueType::SMPTEUniversalLabelLocator_optional& NameValueType::
      SMPTEUniversalLabelLocator ()
      {
        return this->SMPTEUniversalLabelLocator_;
      }

      void NameValueType::
      SMPTEUniversalLabelLocator (const SMPTEUniversalLabelLocator_type& x)
      {
        this->SMPTEUniversalLabelLocator_.set (x);
      }

      void NameValueType::
      SMPTEUniversalLabelLocator (const SMPTEUniversalLabelLocator_optional& x)
      {
        this->SMPTEUniversalLabelLocator_ = x;
      }

      void NameValueType::
      SMPTEUniversalLabelLocator (::std::auto_ptr< SMPTEUniversalLabelLocator_type > x)
      {
        this->SMPTEUniversalLabelLocator_.set (x);
      }


      // ProcessingType
      // 

      const ProcessingType::QualityFlag_optional& ProcessingType::
      QualityFlag () const
      {
        return this->QualityFlag_;
      }

      ProcessingType::QualityFlag_optional& ProcessingType::
      QualityFlag ()
      {
        return this->QualityFlag_;
      }

      void ProcessingType::
      QualityFlag (const QualityFlag_type& x)
      {
        this->QualityFlag_.set (x);
      }

      void ProcessingType::
      QualityFlag (const QualityFlag_optional& x)
      {
        this->QualityFlag_ = x;
      }

      void ProcessingType::
      QualityFlag (::std::auto_ptr< QualityFlag_type > x)
      {
        this->QualityFlag_.set (x);
      }

      const ProcessingType::DescriptiveComment_optional& ProcessingType::
      DescriptiveComment () const
      {
        return this->DescriptiveComment_;
      }

      ProcessingType::DescriptiveComment_optional& ProcessingType::
      DescriptiveComment ()
      {
        return this->DescriptiveComment_;
      }

      void ProcessingType::
      DescriptiveComment (const DescriptiveComment_type& x)
      {
        this->DescriptiveComment_.set (x);
      }

      void ProcessingType::
      DescriptiveComment (const DescriptiveComment_optional& x)
      {
        this->DescriptiveComment_ = x;
      }

      void ProcessingType::
      DescriptiveComment (::std::auto_ptr< DescriptiveComment_type > x)
      {
        this->DescriptiveComment_.set (x);
      }

      const ProcessingType::GraphicUsage_optional& ProcessingType::
      GraphicUsage () const
      {
        return this->GraphicUsage_;
      }

      ProcessingType::GraphicUsage_optional& ProcessingType::
      GraphicUsage ()
      {
        return this->GraphicUsage_;
      }

      void ProcessingType::
      GraphicUsage (const GraphicUsage_type& x)
      {
        this->GraphicUsage_.set (x);
      }

      void ProcessingType::
      GraphicUsage (const GraphicUsage_optional& x)
      {
        this->GraphicUsage_ = x;
      }

      void ProcessingType::
      GraphicUsage (::std::auto_ptr< GraphicUsage_type > x)
      {
        this->GraphicUsage_.set (x);
      }

      const ProcessingType::LogoFlag_optional& ProcessingType::
      LogoFlag () const
      {
        return this->LogoFlag_;
      }

      ProcessingType::LogoFlag_optional& ProcessingType::
      LogoFlag ()
      {
        return this->LogoFlag_;
      }

      void ProcessingType::
      LogoFlag (const LogoFlag_type& x)
      {
        this->LogoFlag_.set (x);
      }

      void ProcessingType::
      LogoFlag (const LogoFlag_optional& x)
      {
        this->LogoFlag_ = x;
      }

      void ProcessingType::
      LogoFlag (::std::auto_ptr< LogoFlag_type > x)
      {
        this->LogoFlag_.set (x);
      }

      const ProcessingType::SimpleFlagging_optional& ProcessingType::
      SimpleFlagging () const
      {
        return this->SimpleFlagging_;
      }

      ProcessingType::SimpleFlagging_optional& ProcessingType::
      SimpleFlagging ()
      {
        return this->SimpleFlagging_;
      }

      void ProcessingType::
      SimpleFlagging (const SimpleFlagging_type& x)
      {
        this->SimpleFlagging_.set (x);
      }

      void ProcessingType::
      SimpleFlagging (const SimpleFlagging_optional& x)
      {
        this->SimpleFlagging_ = x;
      }

      void ProcessingType::
      SimpleFlagging (::std::auto_ptr< SimpleFlagging_type > x)
      {
        this->SimpleFlagging_.set (x);
      }

      const ProcessingType::GenerationCopyNumber_type& ProcessingType::
      GenerationCopyNumber () const
      {
        return this->GenerationCopyNumber_.get ();
      }

      ProcessingType::GenerationCopyNumber_type& ProcessingType::
      GenerationCopyNumber ()
      {
        return this->GenerationCopyNumber_.get ();
      }

      void ProcessingType::
      GenerationCopyNumber (const GenerationCopyNumber_type& x)
      {
        this->GenerationCopyNumber_.set (x);
      }

      void ProcessingType::
      GenerationCopyNumber (::std::auto_ptr< GenerationCopyNumber_type > x)
      {
        this->GenerationCopyNumber_.set (x);
      }

      const ProcessingType::GenerationCloneNumber_type& ProcessingType::
      GenerationCloneNumber () const
      {
        return this->GenerationCloneNumber_.get ();
      }

      ProcessingType::GenerationCloneNumber_type& ProcessingType::
      GenerationCloneNumber ()
      {
        return this->GenerationCloneNumber_.get ();
      }

      void ProcessingType::
      GenerationCloneNumber (const GenerationCloneNumber_type& x)
      {
        this->GenerationCloneNumber_.set (x);
      }

      void ProcessingType::
      GenerationCloneNumber (::std::auto_ptr< GenerationCloneNumber_type > x)
      {
        this->GenerationCloneNumber_.set (x);
      }


      // ProjectType
      // 

      const ProjectType::ProjectNumber_optional& ProjectType::
      ProjectNumber () const
      {
        return this->ProjectNumber_;
      }

      ProjectType::ProjectNumber_optional& ProjectType::
      ProjectNumber ()
      {
        return this->ProjectNumber_;
      }

      void ProjectType::
      ProjectNumber (const ProjectNumber_type& x)
      {
        this->ProjectNumber_.set (x);
      }

      void ProjectType::
      ProjectNumber (const ProjectNumber_optional& x)
      {
        this->ProjectNumber_ = x;
      }

      void ProjectType::
      ProjectNumber (::std::auto_ptr< ProjectNumber_type > x)
      {
        this->ProjectNumber_.set (x);
      }

      const ProjectType::ProjectName_optional& ProjectType::
      ProjectName () const
      {
        return this->ProjectName_;
      }

      ProjectType::ProjectName_optional& ProjectType::
      ProjectName ()
      {
        return this->ProjectName_;
      }

      void ProjectType::
      ProjectName (const ProjectName_type& x)
      {
        this->ProjectName_.set (x);
      }

      void ProjectType::
      ProjectName (const ProjectName_optional& x)
      {
        this->ProjectName_ = x;
      }

      void ProjectType::
      ProjectName (::std::auto_ptr< ProjectName_type > x)
      {
        this->ProjectName_.set (x);
      }


      // ContactsListType
      // 

      const ContactsListType::PersonObjects_optional& ContactsListType::
      PersonObjects () const
      {
        return this->PersonObjects_;
      }

      ContactsListType::PersonObjects_optional& ContactsListType::
      PersonObjects ()
      {
        return this->PersonObjects_;
      }

      void ContactsListType::
      PersonObjects (const PersonObjects_type& x)
      {
        this->PersonObjects_.set (x);
      }

      void ContactsListType::
      PersonObjects (const PersonObjects_optional& x)
      {
        this->PersonObjects_ = x;
      }

      void ContactsListType::
      PersonObjects (::std::auto_ptr< PersonObjects_type > x)
      {
        this->PersonObjects_.set (x);
      }

      const ContactsListType::OrganizationObjects_optional& ContactsListType::
      OrganizationObjects () const
      {
        return this->OrganizationObjects_;
      }

      ContactsListType::OrganizationObjects_optional& ContactsListType::
      OrganizationObjects ()
      {
        return this->OrganizationObjects_;
      }

      void ContactsListType::
      OrganizationObjects (const OrganizationObjects_type& x)
      {
        this->OrganizationObjects_.set (x);
      }

      void ContactsListType::
      OrganizationObjects (const OrganizationObjects_optional& x)
      {
        this->OrganizationObjects_ = x;
      }

      void ContactsListType::
      OrganizationObjects (::std::auto_ptr< OrganizationObjects_type > x)
      {
        this->OrganizationObjects_.set (x);
      }

      const ContactsListType::LocationObjects_optional& ContactsListType::
      LocationObjects () const
      {
        return this->LocationObjects_;
      }

      ContactsListType::LocationObjects_optional& ContactsListType::
      LocationObjects ()
      {
        return this->LocationObjects_;
      }

      void ContactsListType::
      LocationObjects (const LocationObjects_type& x)
      {
        this->LocationObjects_.set (x);
      }

      void ContactsListType::
      LocationObjects (const LocationObjects_optional& x)
      {
        this->LocationObjects_ = x;
      }

      void ContactsListType::
      LocationObjects (::std::auto_ptr< LocationObjects_type > x)
      {
        this->LocationObjects_.set (x);
      }


      // CueWordsType
      // 

      const CueWordsType::InCueWords_optional& CueWordsType::
      InCueWords () const
      {
        return this->InCueWords_;
      }

      CueWordsType::InCueWords_optional& CueWordsType::
      InCueWords ()
      {
        return this->InCueWords_;
      }

      void CueWordsType::
      InCueWords (const InCueWords_type& x)
      {
        this->InCueWords_.set (x);
      }

      void CueWordsType::
      InCueWords (const InCueWords_optional& x)
      {
        this->InCueWords_ = x;
      }

      void CueWordsType::
      InCueWords (::std::auto_ptr< InCueWords_type > x)
      {
        this->InCueWords_.set (x);
      }

      const CueWordsType::OutCueWords_optional& CueWordsType::
      OutCueWords () const
      {
        return this->OutCueWords_;
      }

      CueWordsType::OutCueWords_optional& CueWordsType::
      OutCueWords ()
      {
        return this->OutCueWords_;
      }

      void CueWordsType::
      OutCueWords (const OutCueWords_type& x)
      {
        this->OutCueWords_.set (x);
      }

      void CueWordsType::
      OutCueWords (const OutCueWords_optional& x)
      {
        this->OutCueWords_ = x;
      }

      void CueWordsType::
      OutCueWords (::std::auto_ptr< OutCueWords_type > x)
      {
        this->OutCueWords_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace st434
{
  namespace s380m
  {
    namespace groups
    {
      // DMS1ObjectType
      //

      DMS1ObjectType::
      DMS1ObjectType (const InstanceID_type& InstanceID)
      : ::st434::s377m::groups::DescriptiveObjectType (InstanceID)
      {
      }

      DMS1ObjectType::
      DMS1ObjectType (const DMS1ObjectType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::st434::s377m::groups::DescriptiveObjectType (x, f, c)
      {
      }

      DMS1ObjectType::
      DMS1ObjectType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::st434::s377m::groups::DescriptiveObjectType (e, f, c)
      {
      }

      DMS1ObjectType* DMS1ObjectType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class DMS1ObjectType (*this, f, c);
      }

      DMS1ObjectType::
      ~DMS1ObjectType ()
      {
      }

      // DMS1FrameworkType
      //

      DMS1FrameworkType::
      DMS1FrameworkType (const InstanceID_type& InstanceID,
                         const FrameworkExtendedTextLanguageCode_type& FrameworkExtendedTextLanguageCode)
      : ::st434::s377m::groups::DescriptiveFrameworkType (InstanceID),
        FrameworkExtendedTextLanguageCode_ (FrameworkExtendedTextLanguageCode, ::xml_schema::flags (), this),
        FrameworkThesaurusName_ (::xml_schema::flags (), this),
        FrameworkTitle_ (::xml_schema::flags (), this),
        PrimaryExtendedSpokenLanguageCode_ (::xml_schema::flags (), this),
        SecondaryExtendedSpokenLanguageCode_ (::xml_schema::flags (), this),
        OriginalExtendedSpokenLanguageCode_ (::xml_schema::flags (), this),
        MetadataServerLocators_ (::xml_schema::flags (), this),
        TitlesObjects_ (::xml_schema::flags (), this),
        AnnotationObjects_ (::xml_schema::flags (), this),
        ParticipantObjects_ (::xml_schema::flags (), this),
        Locations_ (::xml_schema::flags (), this),
        ContactsListObject_ (::xml_schema::flags (), this)
      {
      }

      DMS1FrameworkType::
      DMS1FrameworkType (const DMS1FrameworkType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::st434::s377m::groups::DescriptiveFrameworkType (x, f, c),
        FrameworkExtendedTextLanguageCode_ (x.FrameworkExtendedTextLanguageCode_, f, this),
        FrameworkThesaurusName_ (x.FrameworkThesaurusName_, f, this),
        FrameworkTitle_ (x.FrameworkTitle_, f, this),
        PrimaryExtendedSpokenLanguageCode_ (x.PrimaryExtendedSpokenLanguageCode_, f, this),
        SecondaryExtendedSpokenLanguageCode_ (x.SecondaryExtendedSpokenLanguageCode_, f, this),
        OriginalExtendedSpokenLanguageCode_ (x.OriginalExtendedSpokenLanguageCode_, f, this),
        MetadataServerLocators_ (x.MetadataServerLocators_, f, this),
        TitlesObjects_ (x.TitlesObjects_, f, this),
        AnnotationObjects_ (x.AnnotationObjects_, f, this),
        ParticipantObjects_ (x.ParticipantObjects_, f, this),
        Locations_ (x.Locations_, f, this),
        ContactsListObject_ (x.ContactsListObject_, f, this)
      {
      }

      DMS1FrameworkType::
      DMS1FrameworkType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::st434::s377m::groups::DescriptiveFrameworkType (e, f | ::xml_schema::flags::base, c),
        FrameworkExtendedTextLanguageCode_ (f, this),
        FrameworkThesaurusName_ (f, this),
        FrameworkTitle_ (f, this),
        PrimaryExtendedSpokenLanguageCode_ (f, this),
        SecondaryExtendedSpokenLanguageCode_ (f, this),
        OriginalExtendedSpokenLanguageCode_ (f, this),
        MetadataServerLocators_ (f, this),
        TitlesObjects_ (f, this),
        AnnotationObjects_ (f, this),
        ParticipantObjects_ (f, this),
        Locations_ (f, this),
        ContactsListObject_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void DMS1FrameworkType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::DescriptiveFrameworkType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // FrameworkExtendedTextLanguageCode
          //
          if (n.name () == "FrameworkExtendedTextLanguageCode" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< FrameworkExtendedTextLanguageCode_type > r (
              FrameworkExtendedTextLanguageCode_traits::create (i, f, this));

            if (!FrameworkExtendedTextLanguageCode_.present ())
            {
              this->FrameworkExtendedTextLanguageCode_.set (r);
              continue;
            }
          }

          // FrameworkThesaurusName
          //
          if (n.name () == "FrameworkThesaurusName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< FrameworkThesaurusName_type > r (
              FrameworkThesaurusName_traits::create (i, f, this));

            if (!this->FrameworkThesaurusName_)
            {
              this->FrameworkThesaurusName_.set (r);
              continue;
            }
          }

          // FrameworkTitle
          //
          if (n.name () == "FrameworkTitle" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< FrameworkTitle_type > r (
              FrameworkTitle_traits::create (i, f, this));

            if (!this->FrameworkTitle_)
            {
              this->FrameworkTitle_.set (r);
              continue;
            }
          }

          // PrimaryExtendedSpokenLanguageCode
          //
          if (n.name () == "PrimaryExtendedSpokenLanguageCode" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PrimaryExtendedSpokenLanguageCode_type > r (
              PrimaryExtendedSpokenLanguageCode_traits::create (i, f, this));

            if (!this->PrimaryExtendedSpokenLanguageCode_)
            {
              this->PrimaryExtendedSpokenLanguageCode_.set (r);
              continue;
            }
          }

          // SecondaryExtendedSpokenLanguageCode
          //
          if (n.name () == "SecondaryExtendedSpokenLanguageCode" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SecondaryExtendedSpokenLanguageCode_type > r (
              SecondaryExtendedSpokenLanguageCode_traits::create (i, f, this));

            if (!this->SecondaryExtendedSpokenLanguageCode_)
            {
              this->SecondaryExtendedSpokenLanguageCode_.set (r);
              continue;
            }
          }

          // OriginalExtendedSpokenLanguageCode
          //
          if (n.name () == "OriginalExtendedSpokenLanguageCode" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< OriginalExtendedSpokenLanguageCode_type > r (
              OriginalExtendedSpokenLanguageCode_traits::create (i, f, this));

            if (!this->OriginalExtendedSpokenLanguageCode_)
            {
              this->OriginalExtendedSpokenLanguageCode_.set (r);
              continue;
            }
          }

          // MetadataServerLocators
          //
          if (n.name () == "MetadataServerLocators" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< MetadataServerLocators_type > r (
              MetadataServerLocators_traits::create (i, f, this));

            if (!this->MetadataServerLocators_)
            {
              this->MetadataServerLocators_.set (r);
              continue;
            }
          }

          // TitlesObjects
          //
          if (n.name () == "TitlesObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< TitlesObjects_type > r (
              TitlesObjects_traits::create (i, f, this));

            if (!this->TitlesObjects_)
            {
              this->TitlesObjects_.set (r);
              continue;
            }
          }

          // AnnotationObjects
          //
          if (n.name () == "AnnotationObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< AnnotationObjects_type > r (
              AnnotationObjects_traits::create (i, f, this));

            if (!this->AnnotationObjects_)
            {
              this->AnnotationObjects_.set (r);
              continue;
            }
          }

          // ParticipantObjects
          //
          if (n.name () == "ParticipantObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ParticipantObjects_type > r (
              ParticipantObjects_traits::create (i, f, this));

            if (!this->ParticipantObjects_)
            {
              this->ParticipantObjects_.set (r);
              continue;
            }
          }

          // Locations
          //
          if (n.name () == "Locations" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< Locations_type > r (
              Locations_traits::create (i, f, this));

            if (!this->Locations_)
            {
              this->Locations_.set (r);
              continue;
            }
          }

          // ContactsListObject
          //
          if (n.name () == "ContactsListObject" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ContactsListObject_type > r (
              ContactsListObject_traits::create (i, f, this));

            if (!this->ContactsListObject_)
            {
              this->ContactsListObject_.set (r);
              continue;
            }
          }

          break;
        }

        if (!FrameworkExtendedTextLanguageCode_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FrameworkExtendedTextLanguageCode",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      DMS1FrameworkType* DMS1FrameworkType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class DMS1FrameworkType (*this, f, c);
      }

      DMS1FrameworkType::
      ~DMS1FrameworkType ()
      {
      }

      // TextLanguageType
      //

      TextLanguageType::
      TextLanguageType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::DMS1ObjectType (InstanceID),
        ExtendedTextLanguageCode_ (::xml_schema::flags (), this)
      {
      }

      TextLanguageType::
      TextLanguageType (const TextLanguageType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
      : ::st434::s380m::groups::DMS1ObjectType (x, f, c),
        ExtendedTextLanguageCode_ (x.ExtendedTextLanguageCode_, f, this)
      {
      }

      TextLanguageType::
      TextLanguageType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
      : ::st434::s380m::groups::DMS1ObjectType (e, f | ::xml_schema::flags::base, c),
        ExtendedTextLanguageCode_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void TextLanguageType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::DMS1ObjectType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ExtendedTextLanguageCode
          //
          if (n.name () == "ExtendedTextLanguageCode" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ExtendedTextLanguageCode_type > r (
              ExtendedTextLanguageCode_traits::create (i, f, this));

            if (!this->ExtendedTextLanguageCode_)
            {
              this->ExtendedTextLanguageCode_.set (r);
              continue;
            }
          }

          break;
        }
      }

      TextLanguageType* TextLanguageType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class TextLanguageType (*this, f, c);
      }

      TextLanguageType::
      ~TextLanguageType ()
      {
      }

      // ThesaurusType
      //

      ThesaurusType::
      ThesaurusType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::TextLanguageType (InstanceID),
        ThesaurusName_ (::xml_schema::flags (), this)
      {
      }

      ThesaurusType::
      ThesaurusType (const ThesaurusType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::st434::s380m::groups::TextLanguageType (x, f, c),
        ThesaurusName_ (x.ThesaurusName_, f, this)
      {
      }

      ThesaurusType::
      ThesaurusType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::st434::s380m::groups::TextLanguageType (e, f | ::xml_schema::flags::base, c),
        ThesaurusName_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void ThesaurusType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::TextLanguageType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ThesaurusName
          //
          if (n.name () == "ThesaurusName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ThesaurusName_type > r (
              ThesaurusName_traits::create (i, f, this));

            if (!this->ThesaurusName_)
            {
              this->ThesaurusName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      ThesaurusType* ThesaurusType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class ThesaurusType (*this, f, c);
      }

      ThesaurusType::
      ~ThesaurusType ()
      {
      }

      // ContactType
      //

      ContactType::
      ContactType (const InstanceID_type& InstanceID,
                   const ContactID_type& ContactID)
      : ::st434::s380m::groups::ThesaurusType (InstanceID),
        ContactID_ (ContactID, ::xml_schema::flags (), this),
        ContactNameValueObjects_ (::xml_schema::flags (), this),
        AddressObjects_ (::xml_schema::flags (), this)
      {
      }

      ContactType::
      ContactType (const ContactType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (x, f, c),
        ContactID_ (x.ContactID_, f, this),
        ContactNameValueObjects_ (x.ContactNameValueObjects_, f, this),
        AddressObjects_ (x.AddressObjects_, f, this)
      {
      }

      ContactType::
      ContactType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (e, f | ::xml_schema::flags::base, c),
        ContactID_ (f, this),
        ContactNameValueObjects_ (f, this),
        AddressObjects_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void ContactType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::ThesaurusType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ContactID
          //
          if (n.name () == "ContactID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ContactID_type > r (
              ContactID_traits::create (i, f, this));

            if (!ContactID_.present ())
            {
              this->ContactID_.set (r);
              continue;
            }
          }

          // ContactNameValueObjects
          //
          if (n.name () == "ContactNameValueObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ContactNameValueObjects_type > r (
              ContactNameValueObjects_traits::create (i, f, this));

            if (!this->ContactNameValueObjects_)
            {
              this->ContactNameValueObjects_.set (r);
              continue;
            }
          }

          // AddressObjects
          //
          if (n.name () == "AddressObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< AddressObjects_type > r (
              AddressObjects_traits::create (i, f, this));

            if (!this->AddressObjects_)
            {
              this->AddressObjects_.set (r);
              continue;
            }
          }

          break;
        }

        if (!ContactID_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ContactID",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      ContactType* ContactType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class ContactType (*this, f, c);
      }

      ContactType::
      ~ContactType ()
      {
      }

      // ProductionClipFrameworkType
      //

      ProductionClipFrameworkType::
      ProductionClipFrameworkType (const InstanceID_type& InstanceID,
                                   const FrameworkExtendedTextLanguageCode_type& FrameworkExtendedTextLanguageCode)
      : ::st434::s380m::groups::DMS1FrameworkType (InstanceID,
                                                   FrameworkExtendedTextLanguageCode),
        CaptionsDescriptionObjects_ (::xml_schema::flags (), this),
        ContractObjects_ (::xml_schema::flags (), this),
        PictureFormatObject_ (::xml_schema::flags (), this),
        ProjectObject_ (::xml_schema::flags (), this)
      {
      }

      ProductionClipFrameworkType::
      ProductionClipFrameworkType (const ProductionClipFrameworkType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
      : ::st434::s380m::groups::DMS1FrameworkType (x, f, c),
        CaptionsDescriptionObjects_ (x.CaptionsDescriptionObjects_, f, this),
        ContractObjects_ (x.ContractObjects_, f, this),
        PictureFormatObject_ (x.PictureFormatObject_, f, this),
        ProjectObject_ (x.ProjectObject_, f, this)
      {
      }

      ProductionClipFrameworkType::
      ProductionClipFrameworkType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
      : ::st434::s380m::groups::DMS1FrameworkType (e, f | ::xml_schema::flags::base, c),
        CaptionsDescriptionObjects_ (f, this),
        ContractObjects_ (f, this),
        PictureFormatObject_ (f, this),
        ProjectObject_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void ProductionClipFrameworkType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::DMS1FrameworkType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // CaptionsDescriptionObjects
          //
          if (n.name () == "CaptionsDescriptionObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< CaptionsDescriptionObjects_type > r (
              CaptionsDescriptionObjects_traits::create (i, f, this));

            if (!this->CaptionsDescriptionObjects_)
            {
              this->CaptionsDescriptionObjects_.set (r);
              continue;
            }
          }

          // ContractObjects
          //
          if (n.name () == "ContractObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ContractObjects_type > r (
              ContractObjects_traits::create (i, f, this));

            if (!this->ContractObjects_)
            {
              this->ContractObjects_.set (r);
              continue;
            }
          }

          // PictureFormatObject
          //
          if (n.name () == "PictureFormatObject" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PictureFormatObject_type > r (
              PictureFormatObject_traits::create (i, f, this));

            if (!this->PictureFormatObject_)
            {
              this->PictureFormatObject_.set (r);
              continue;
            }
          }

          // ProjectObject
          //
          if (n.name () == "ProjectObject" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ProjectObject_type > r (
              ProjectObject_traits::create (i, f, this));

            if (!this->ProjectObject_)
            {
              this->ProjectObject_.set (r);
              continue;
            }
          }

          break;
        }
      }

      ProductionClipFrameworkType* ProductionClipFrameworkType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class ProductionClipFrameworkType (*this, f, c);
      }

      ProductionClipFrameworkType::
      ~ProductionClipFrameworkType ()
      {
      }

      // ProductionFrameworkType
      //

      ProductionFrameworkType::
      ProductionFrameworkType (const InstanceID_type& InstanceID,
                               const FrameworkExtendedTextLanguageCode_type& FrameworkExtendedTextLanguageCode)
      : ::st434::s380m::groups::ProductionClipFrameworkType (InstanceID,
                                                             FrameworkExtendedTextLanguageCode),
        IntegrationIndication_ (::xml_schema::flags (), this),
        IdentificationObjects_ (::xml_schema::flags (), this),
        GroupRelationshipObjects_ (::xml_schema::flags (), this),
        BrandingObjects_ (::xml_schema::flags (), this),
        EventObjects_ (::xml_schema::flags (), this),
        AwardObjects_ (::xml_schema::flags (), this),
        ProductionSettingPeriodObjects_ (::xml_schema::flags (), this)
      {
      }

      ProductionFrameworkType::
      ProductionFrameworkType (const ProductionFrameworkType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
      : ::st434::s380m::groups::ProductionClipFrameworkType (x, f, c),
        IntegrationIndication_ (x.IntegrationIndication_, f, this),
        IdentificationObjects_ (x.IdentificationObjects_, f, this),
        GroupRelationshipObjects_ (x.GroupRelationshipObjects_, f, this),
        BrandingObjects_ (x.BrandingObjects_, f, this),
        EventObjects_ (x.EventObjects_, f, this),
        AwardObjects_ (x.AwardObjects_, f, this),
        ProductionSettingPeriodObjects_ (x.ProductionSettingPeriodObjects_, f, this)
      {
      }

      ProductionFrameworkType::
      ProductionFrameworkType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
      : ::st434::s380m::groups::ProductionClipFrameworkType (e, f | ::xml_schema::flags::base, c),
        IntegrationIndication_ (f, this),
        IdentificationObjects_ (f, this),
        GroupRelationshipObjects_ (f, this),
        BrandingObjects_ (f, this),
        EventObjects_ (f, this),
        AwardObjects_ (f, this),
        ProductionSettingPeriodObjects_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void ProductionFrameworkType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::ProductionClipFrameworkType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // IntegrationIndication
          //
          if (n.name () == "IntegrationIndication" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< IntegrationIndication_type > r (
              IntegrationIndication_traits::create (i, f, this));

            if (!this->IntegrationIndication_)
            {
              this->IntegrationIndication_.set (r);
              continue;
            }
          }

          // IdentificationObjects
          //
          if (n.name () == "IdentificationObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< IdentificationObjects_type > r (
              IdentificationObjects_traits::create (i, f, this));

            if (!this->IdentificationObjects_)
            {
              this->IdentificationObjects_.set (r);
              continue;
            }
          }

          // GroupRelationshipObjects
          //
          if (n.name () == "GroupRelationshipObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< GroupRelationshipObjects_type > r (
              GroupRelationshipObjects_traits::create (i, f, this));

            if (!this->GroupRelationshipObjects_)
            {
              this->GroupRelationshipObjects_.set (r);
              continue;
            }
          }

          // BrandingObjects
          //
          if (n.name () == "BrandingObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< BrandingObjects_type > r (
              BrandingObjects_traits::create (i, f, this));

            if (!this->BrandingObjects_)
            {
              this->BrandingObjects_.set (r);
              continue;
            }
          }

          // EventObjects
          //
          if (n.name () == "EventObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EventObjects_type > r (
              EventObjects_traits::create (i, f, this));

            if (!this->EventObjects_)
            {
              this->EventObjects_.set (r);
              continue;
            }
          }

          // AwardObjects
          //
          if (n.name () == "AwardObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< AwardObjects_type > r (
              AwardObjects_traits::create (i, f, this));

            if (!this->AwardObjects_)
            {
              this->AwardObjects_.set (r);
              continue;
            }
          }

          // ProductionSettingPeriodObjects
          //
          if (n.name () == "ProductionSettingPeriodObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ProductionSettingPeriodObjects_type > r (
              ProductionSettingPeriodObjects_traits::create (i, f, this));

            if (!this->ProductionSettingPeriodObjects_)
            {
              this->ProductionSettingPeriodObjects_.set (r);
              continue;
            }
          }

          break;
        }
      }

      ProductionFrameworkType* ProductionFrameworkType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class ProductionFrameworkType (*this, f, c);
      }

      ProductionFrameworkType::
      ~ProductionFrameworkType ()
      {
      }

      // ClipFrameworkType
      //

      ClipFrameworkType::
      ClipFrameworkType (const InstanceID_type& InstanceID,
                         const FrameworkExtendedTextLanguageCode_type& FrameworkExtendedTextLanguageCode,
                         const ClipKind_type& ClipKind)
      : ::st434::s380m::groups::ProductionClipFrameworkType (InstanceID,
                                                             FrameworkExtendedTextLanguageCode),
        ClipKind_ (ClipKind, ::xml_schema::flags (), this),
        ClipNumber_ (::xml_schema::flags (), this),
        ExtendedClipID_ (::xml_schema::flags (), this),
        ClipCreationDateTime_ (::xml_schema::flags (), this),
        TakeNumber_ (::xml_schema::flags (), this),
        SlateInformation_ (::xml_schema::flags (), this),
        ScriptingObjects_ (::xml_schema::flags (), this),
        ClipShotObjects_ (::xml_schema::flags (), this),
        DeviceParametersObjects_ (::xml_schema::flags (), this),
        ProcessingObject_ (::xml_schema::flags (), this)
      {
      }

      ClipFrameworkType::
      ClipFrameworkType (const ClipFrameworkType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::st434::s380m::groups::ProductionClipFrameworkType (x, f, c),
        ClipKind_ (x.ClipKind_, f, this),
        ClipNumber_ (x.ClipNumber_, f, this),
        ExtendedClipID_ (x.ExtendedClipID_, f, this),
        ClipCreationDateTime_ (x.ClipCreationDateTime_, f, this),
        TakeNumber_ (x.TakeNumber_, f, this),
        SlateInformation_ (x.SlateInformation_, f, this),
        ScriptingObjects_ (x.ScriptingObjects_, f, this),
        ClipShotObjects_ (x.ClipShotObjects_, f, this),
        DeviceParametersObjects_ (x.DeviceParametersObjects_, f, this),
        ProcessingObject_ (x.ProcessingObject_, f, this)
      {
      }

      ClipFrameworkType::
      ClipFrameworkType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::st434::s380m::groups::ProductionClipFrameworkType (e, f | ::xml_schema::flags::base, c),
        ClipKind_ (f, this),
        ClipNumber_ (f, this),
        ExtendedClipID_ (f, this),
        ClipCreationDateTime_ (f, this),
        TakeNumber_ (f, this),
        SlateInformation_ (f, this),
        ScriptingObjects_ (f, this),
        ClipShotObjects_ (f, this),
        DeviceParametersObjects_ (f, this),
        ProcessingObject_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void ClipFrameworkType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::ProductionClipFrameworkType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ClipKind
          //
          if (n.name () == "ClipKind" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ClipKind_type > r (
              ClipKind_traits::create (i, f, this));

            if (!ClipKind_.present ())
            {
              this->ClipKind_.set (r);
              continue;
            }
          }

          // ClipNumber
          //
          if (n.name () == "ClipNumber" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ClipNumber_type > r (
              ClipNumber_traits::create (i, f, this));

            if (!this->ClipNumber_)
            {
              this->ClipNumber_.set (r);
              continue;
            }
          }

          // ExtendedClipID
          //
          if (n.name () == "ExtendedClipID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ExtendedClipID_type > r (
              ExtendedClipID_traits::create (i, f, this));

            if (!this->ExtendedClipID_)
            {
              this->ExtendedClipID_.set (r);
              continue;
            }
          }

          // ClipCreationDateTime
          //
          if (n.name () == "ClipCreationDateTime" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ClipCreationDateTime_type > r (
              ClipCreationDateTime_traits::create (i, f, this));

            if (!this->ClipCreationDateTime_)
            {
              this->ClipCreationDateTime_.set (r);
              continue;
            }
          }

          // TakeNumber
          //
          if (n.name () == "TakeNumber" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< TakeNumber_type > r (
              TakeNumber_traits::create (i, f, this));

            if (!this->TakeNumber_)
            {
              this->TakeNumber_.set (r);
              continue;
            }
          }

          // SlateInformation
          //
          if (n.name () == "SlateInformation" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SlateInformation_type > r (
              SlateInformation_traits::create (i, f, this));

            if (!this->SlateInformation_)
            {
              this->SlateInformation_.set (r);
              continue;
            }
          }

          // ScriptingObjects
          //
          if (n.name () == "ScriptingObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ScriptingObjects_type > r (
              ScriptingObjects_traits::create (i, f, this));

            if (!this->ScriptingObjects_)
            {
              this->ScriptingObjects_.set (r);
              continue;
            }
          }

          // ClipShotObjects
          //
          if (n.name () == "ClipShotObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ClipShotObjects_type > r (
              ClipShotObjects_traits::create (i, f, this));

            if (!this->ClipShotObjects_)
            {
              this->ClipShotObjects_.set (r);
              continue;
            }
          }

          // DeviceParametersObjects
          //
          if (n.name () == "DeviceParametersObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DeviceParametersObjects_type > r (
              DeviceParametersObjects_traits::create (i, f, this));

            if (!this->DeviceParametersObjects_)
            {
              this->DeviceParametersObjects_.set (r);
              continue;
            }
          }

          // ProcessingObject
          //
          if (n.name () == "ProcessingObject" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ProcessingObject_type > r (
              ProcessingObject_traits::create (i, f, this));

            if (!this->ProcessingObject_)
            {
              this->ProcessingObject_.set (r);
              continue;
            }
          }

          break;
        }

        if (!ClipKind_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ClipKind",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      ClipFrameworkType* ClipFrameworkType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class ClipFrameworkType (*this, f, c);
      }

      ClipFrameworkType::
      ~ClipFrameworkType ()
      {
      }

      // SceneFrameworkType
      //

      SceneFrameworkType::
      SceneFrameworkType (const InstanceID_type& InstanceID,
                          const FrameworkExtendedTextLanguageCode_type& FrameworkExtendedTextLanguageCode)
      : ::st434::s380m::groups::DMS1FrameworkType (InstanceID,
                                                   FrameworkExtendedTextLanguageCode),
        SceneNumber_ (::xml_schema::flags (), this),
        SceneSettingPeriodObjects_ (::xml_schema::flags (), this),
        SceneShotObjects_ (::xml_schema::flags (), this)
      {
      }

      SceneFrameworkType::
      SceneFrameworkType (const SceneFrameworkType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::st434::s380m::groups::DMS1FrameworkType (x, f, c),
        SceneNumber_ (x.SceneNumber_, f, this),
        SceneSettingPeriodObjects_ (x.SceneSettingPeriodObjects_, f, this),
        SceneShotObjects_ (x.SceneShotObjects_, f, this)
      {
      }

      SceneFrameworkType::
      SceneFrameworkType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::st434::s380m::groups::DMS1FrameworkType (e, f | ::xml_schema::flags::base, c),
        SceneNumber_ (f, this),
        SceneSettingPeriodObjects_ (f, this),
        SceneShotObjects_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void SceneFrameworkType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::DMS1FrameworkType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SceneNumber
          //
          if (n.name () == "SceneNumber" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SceneNumber_type > r (
              SceneNumber_traits::create (i, f, this));

            if (!this->SceneNumber_)
            {
              this->SceneNumber_.set (r);
              continue;
            }
          }

          // SceneSettingPeriodObjects
          //
          if (n.name () == "SceneSettingPeriodObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SceneSettingPeriodObjects_type > r (
              SceneSettingPeriodObjects_traits::create (i, f, this));

            if (!this->SceneSettingPeriodObjects_)
            {
              this->SceneSettingPeriodObjects_.set (r);
              continue;
            }
          }

          // SceneShotObjects
          //
          if (n.name () == "SceneShotObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SceneShotObjects_type > r (
              SceneShotObjects_traits::create (i, f, this));

            if (!this->SceneShotObjects_)
            {
              this->SceneShotObjects_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SceneFrameworkType* SceneFrameworkType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SceneFrameworkType (*this, f, c);
      }

      SceneFrameworkType::
      ~SceneFrameworkType ()
      {
      }

      // TitlesType
      //

      TitlesType::
      TitlesType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::TextLanguageType (InstanceID),
        MainTitle_ (::xml_schema::flags (), this),
        SecondaryTitle_ (::xml_schema::flags (), this),
        WorkingTitle_ (::xml_schema::flags (), this),
        OriginalTitle_ (::xml_schema::flags (), this),
        VersionTitle_ (::xml_schema::flags (), this)
      {
      }

      TitlesType::
      TitlesType (const TitlesType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
      : ::st434::s380m::groups::TextLanguageType (x, f, c),
        MainTitle_ (x.MainTitle_, f, this),
        SecondaryTitle_ (x.SecondaryTitle_, f, this),
        WorkingTitle_ (x.WorkingTitle_, f, this),
        OriginalTitle_ (x.OriginalTitle_, f, this),
        VersionTitle_ (x.VersionTitle_, f, this)
      {
      }

      TitlesType::
      TitlesType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
      : ::st434::s380m::groups::TextLanguageType (e, f | ::xml_schema::flags::base, c),
        MainTitle_ (f, this),
        SecondaryTitle_ (f, this),
        WorkingTitle_ (f, this),
        OriginalTitle_ (f, this),
        VersionTitle_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void TitlesType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::TextLanguageType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // MainTitle
          //
          if (n.name () == "MainTitle" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< MainTitle_type > r (
              MainTitle_traits::create (i, f, this));

            if (!this->MainTitle_)
            {
              this->MainTitle_.set (r);
              continue;
            }
          }

          // SecondaryTitle
          //
          if (n.name () == "SecondaryTitle" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SecondaryTitle_type > r (
              SecondaryTitle_traits::create (i, f, this));

            if (!this->SecondaryTitle_)
            {
              this->SecondaryTitle_.set (r);
              continue;
            }
          }

          // WorkingTitle
          //
          if (n.name () == "WorkingTitle" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< WorkingTitle_type > r (
              WorkingTitle_traits::create (i, f, this));

            if (!this->WorkingTitle_)
            {
              this->WorkingTitle_.set (r);
              continue;
            }
          }

          // OriginalTitle
          //
          if (n.name () == "OriginalTitle" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< OriginalTitle_type > r (
              OriginalTitle_traits::create (i, f, this));

            if (!this->OriginalTitle_)
            {
              this->OriginalTitle_.set (r);
              continue;
            }
          }

          // VersionTitle
          //
          if (n.name () == "VersionTitle" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< VersionTitle_type > r (
              VersionTitle_traits::create (i, f, this));

            if (!this->VersionTitle_)
            {
              this->VersionTitle_.set (r);
              continue;
            }
          }

          break;
        }
      }

      TitlesType* TitlesType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class TitlesType (*this, f, c);
      }

      TitlesType::
      ~TitlesType ()
      {
      }

      // DMS1IdentificationType
      //

      DMS1IdentificationType::
      DMS1IdentificationType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::ThesaurusType (InstanceID),
        IdentifierKind_ (::xml_schema::flags (), this),
        IdentifierValue_ (::xml_schema::flags (), this),
        IdentificationLocator_ (::xml_schema::flags (), this),
        IdentificationIssuingAuthority_ (::xml_schema::flags (), this)
      {
      }

      DMS1IdentificationType::
      DMS1IdentificationType (const DMS1IdentificationType& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (x, f, c),
        IdentifierKind_ (x.IdentifierKind_, f, this),
        IdentifierValue_ (x.IdentifierValue_, f, this),
        IdentificationLocator_ (x.IdentificationLocator_, f, this),
        IdentificationIssuingAuthority_ (x.IdentificationIssuingAuthority_, f, this)
      {
      }

      DMS1IdentificationType::
      DMS1IdentificationType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (e, f | ::xml_schema::flags::base, c),
        IdentifierKind_ (f, this),
        IdentifierValue_ (f, this),
        IdentificationLocator_ (f, this),
        IdentificationIssuingAuthority_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void DMS1IdentificationType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::ThesaurusType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // IdentifierKind
          //
          if (n.name () == "IdentifierKind" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< IdentifierKind_type > r (
              IdentifierKind_traits::create (i, f, this));

            if (!this->IdentifierKind_)
            {
              this->IdentifierKind_.set (r);
              continue;
            }
          }

          // IdentifierValue
          //
          if (n.name () == "IdentifierValue" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< IdentifierValue_type > r (
              IdentifierValue_traits::create (i, f, this));

            if (!this->IdentifierValue_)
            {
              this->IdentifierValue_.set (r);
              continue;
            }
          }

          // IdentificationLocator
          //
          if (n.name () == "IdentificationLocator" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< IdentificationLocator_type > r (
              IdentificationLocator_traits::create (i, f, this));

            if (!this->IdentificationLocator_)
            {
              this->IdentificationLocator_.set (r);
              continue;
            }
          }

          // IdentificationIssuingAuthority
          //
          if (n.name () == "IdentificationIssuingAuthority" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< IdentificationIssuingAuthority_type > r (
              IdentificationIssuingAuthority_traits::create (i, f, this));

            if (!this->IdentificationIssuingAuthority_)
            {
              this->IdentificationIssuingAuthority_.set (r);
              continue;
            }
          }

          break;
        }
      }

      DMS1IdentificationType* DMS1IdentificationType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class DMS1IdentificationType (*this, f, c);
      }

      DMS1IdentificationType::
      ~DMS1IdentificationType ()
      {
      }

      // GroupRelationshipType
      //

      GroupRelationshipType::
      GroupRelationshipType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::ThesaurusType (InstanceID),
        ProgrammingGroupKind_ (::xml_schema::flags (), this),
        ProgrammingGroupTitle_ (::xml_schema::flags (), this),
        GroupSynopsis_ (::xml_schema::flags (), this),
        PositionInSequence_ (::xml_schema::flags (), this),
        TotalNumberInSequence_ (::xml_schema::flags (), this),
        EpisodicStartNumber_ (::xml_schema::flags (), this),
        EpisodicEndNumber_ (::xml_schema::flags (), this)
      {
      }

      GroupRelationshipType::
      GroupRelationshipType (const GroupRelationshipType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (x, f, c),
        ProgrammingGroupKind_ (x.ProgrammingGroupKind_, f, this),
        ProgrammingGroupTitle_ (x.ProgrammingGroupTitle_, f, this),
        GroupSynopsis_ (x.GroupSynopsis_, f, this),
        PositionInSequence_ (x.PositionInSequence_, f, this),
        TotalNumberInSequence_ (x.TotalNumberInSequence_, f, this),
        EpisodicStartNumber_ (x.EpisodicStartNumber_, f, this),
        EpisodicEndNumber_ (x.EpisodicEndNumber_, f, this)
      {
      }

      GroupRelationshipType::
      GroupRelationshipType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (e, f | ::xml_schema::flags::base, c),
        ProgrammingGroupKind_ (f, this),
        ProgrammingGroupTitle_ (f, this),
        GroupSynopsis_ (f, this),
        PositionInSequence_ (f, this),
        TotalNumberInSequence_ (f, this),
        EpisodicStartNumber_ (f, this),
        EpisodicEndNumber_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void GroupRelationshipType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::ThesaurusType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ProgrammingGroupKind
          //
          if (n.name () == "ProgrammingGroupKind" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ProgrammingGroupKind_type > r (
              ProgrammingGroupKind_traits::create (i, f, this));

            if (!this->ProgrammingGroupKind_)
            {
              this->ProgrammingGroupKind_.set (r);
              continue;
            }
          }

          // ProgrammingGroupTitle
          //
          if (n.name () == "ProgrammingGroupTitle" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ProgrammingGroupTitle_type > r (
              ProgrammingGroupTitle_traits::create (i, f, this));

            if (!this->ProgrammingGroupTitle_)
            {
              this->ProgrammingGroupTitle_.set (r);
              continue;
            }
          }

          // GroupSynopsis
          //
          if (n.name () == "GroupSynopsis" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< GroupSynopsis_type > r (
              GroupSynopsis_traits::create (i, f, this));

            if (!this->GroupSynopsis_)
            {
              this->GroupSynopsis_.set (r);
              continue;
            }
          }

          // PositionInSequence
          //
          if (n.name () == "PositionInSequence" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PositionInSequence_type > r (
              PositionInSequence_traits::create (i, f, this));

            if (!this->PositionInSequence_)
            {
              this->PositionInSequence_.set (r);
              continue;
            }
          }

          // TotalNumberInSequence
          //
          if (n.name () == "TotalNumberInSequence" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< TotalNumberInSequence_type > r (
              TotalNumberInSequence_traits::create (i, f, this));

            if (!this->TotalNumberInSequence_)
            {
              this->TotalNumberInSequence_.set (r);
              continue;
            }
          }

          // EpisodicStartNumber
          //
          if (n.name () == "EpisodicStartNumber" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EpisodicStartNumber_type > r (
              EpisodicStartNumber_traits::create (i, f, this));

            if (!this->EpisodicStartNumber_)
            {
              this->EpisodicStartNumber_.set (r);
              continue;
            }
          }

          // EpisodicEndNumber
          //
          if (n.name () == "EpisodicEndNumber" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EpisodicEndNumber_type > r (
              EpisodicEndNumber_traits::create (i, f, this));

            if (!this->EpisodicEndNumber_)
            {
              this->EpisodicEndNumber_.set (r);
              continue;
            }
          }

          break;
        }
      }

      GroupRelationshipType* GroupRelationshipType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class GroupRelationshipType (*this, f, c);
      }

      GroupRelationshipType::
      ~GroupRelationshipType ()
      {
      }

      // BrandingType
      //

      BrandingType::
      BrandingType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::TextLanguageType (InstanceID),
        BrandMainTitle_ (::xml_schema::flags (), this),
        BrandOriginalTitle_ (::xml_schema::flags (), this)
      {
      }

      BrandingType::
      BrandingType (const BrandingType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::st434::s380m::groups::TextLanguageType (x, f, c),
        BrandMainTitle_ (x.BrandMainTitle_, f, this),
        BrandOriginalTitle_ (x.BrandOriginalTitle_, f, this)
      {
      }

      BrandingType::
      BrandingType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::st434::s380m::groups::TextLanguageType (e, f | ::xml_schema::flags::base, c),
        BrandMainTitle_ (f, this),
        BrandOriginalTitle_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void BrandingType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::TextLanguageType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // BrandMainTitle
          //
          if (n.name () == "BrandMainTitle" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< BrandMainTitle_type > r (
              BrandMainTitle_traits::create (i, f, this));

            if (!this->BrandMainTitle_)
            {
              this->BrandMainTitle_.set (r);
              continue;
            }
          }

          // BrandOriginalTitle
          //
          if (n.name () == "BrandOriginalTitle" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< BrandOriginalTitle_type > r (
              BrandOriginalTitle_traits::create (i, f, this));

            if (!this->BrandOriginalTitle_)
            {
              this->BrandOriginalTitle_.set (r);
              continue;
            }
          }

          break;
        }
      }

      BrandingType* BrandingType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class BrandingType (*this, f, c);
      }

      BrandingType::
      ~BrandingType ()
      {
      }

      // DMS1EventType
      //

      DMS1EventType::
      DMS1EventType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::ThesaurusType (InstanceID),
        EventIndication_ (::xml_schema::flags (), this),
        EventStartDateTime_ (::xml_schema::flags (), this),
        EventEndDateTime_ (::xml_schema::flags (), this),
        PublicationObjects_ (::xml_schema::flags (), this),
        EventAnnotationObjects_ (::xml_schema::flags (), this)
      {
      }

      DMS1EventType::
      DMS1EventType (const DMS1EventType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (x, f, c),
        EventIndication_ (x.EventIndication_, f, this),
        EventStartDateTime_ (x.EventStartDateTime_, f, this),
        EventEndDateTime_ (x.EventEndDateTime_, f, this),
        PublicationObjects_ (x.PublicationObjects_, f, this),
        EventAnnotationObjects_ (x.EventAnnotationObjects_, f, this)
      {
      }

      DMS1EventType::
      DMS1EventType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (e, f | ::xml_schema::flags::base, c),
        EventIndication_ (f, this),
        EventStartDateTime_ (f, this),
        EventEndDateTime_ (f, this),
        PublicationObjects_ (f, this),
        EventAnnotationObjects_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void DMS1EventType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::ThesaurusType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // EventIndication
          //
          if (n.name () == "EventIndication" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EventIndication_type > r (
              EventIndication_traits::create (i, f, this));

            if (!this->EventIndication_)
            {
              this->EventIndication_.set (r);
              continue;
            }
          }

          // EventStartDateTime
          //
          if (n.name () == "EventStartDateTime" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EventStartDateTime_type > r (
              EventStartDateTime_traits::create (i, f, this));

            if (!this->EventStartDateTime_)
            {
              this->EventStartDateTime_.set (r);
              continue;
            }
          }

          // EventEndDateTime
          //
          if (n.name () == "EventEndDateTime" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EventEndDateTime_type > r (
              EventEndDateTime_traits::create (i, f, this));

            if (!this->EventEndDateTime_)
            {
              this->EventEndDateTime_.set (r);
              continue;
            }
          }

          // PublicationObjects
          //
          if (n.name () == "PublicationObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PublicationObjects_type > r (
              PublicationObjects_traits::create (i, f, this));

            if (!this->PublicationObjects_)
            {
              this->PublicationObjects_.set (r);
              continue;
            }
          }

          // EventAnnotationObjects
          //
          if (n.name () == "EventAnnotationObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EventAnnotationObjects_type > r (
              EventAnnotationObjects_traits::create (i, f, this));

            if (!this->EventAnnotationObjects_)
            {
              this->EventAnnotationObjects_.set (r);
              continue;
            }
          }

          break;
        }
      }

      DMS1EventType* DMS1EventType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class DMS1EventType (*this, f, c);
      }

      DMS1EventType::
      ~DMS1EventType ()
      {
      }

      // PublicationType
      //

      PublicationType::
      PublicationType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::DMS1ObjectType (InstanceID),
        PublishingOrganizationName_ (::xml_schema::flags (), this),
        PublishingServiceName_ (::xml_schema::flags (), this),
        PublishingMediumName_ (::xml_schema::flags (), this),
        PublishingRegionName_ (::xml_schema::flags (), this)
      {
      }

      PublicationType::
      PublicationType (const PublicationType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::st434::s380m::groups::DMS1ObjectType (x, f, c),
        PublishingOrganizationName_ (x.PublishingOrganizationName_, f, this),
        PublishingServiceName_ (x.PublishingServiceName_, f, this),
        PublishingMediumName_ (x.PublishingMediumName_, f, this),
        PublishingRegionName_ (x.PublishingRegionName_, f, this)
      {
      }

      PublicationType::
      PublicationType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::st434::s380m::groups::DMS1ObjectType (e, f | ::xml_schema::flags::base, c),
        PublishingOrganizationName_ (f, this),
        PublishingServiceName_ (f, this),
        PublishingMediumName_ (f, this),
        PublishingRegionName_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void PublicationType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::DMS1ObjectType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PublishingOrganizationName
          //
          if (n.name () == "PublishingOrganizationName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PublishingOrganizationName_type > r (
              PublishingOrganizationName_traits::create (i, f, this));

            if (!this->PublishingOrganizationName_)
            {
              this->PublishingOrganizationName_.set (r);
              continue;
            }
          }

          // PublishingServiceName
          //
          if (n.name () == "PublishingServiceName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PublishingServiceName_type > r (
              PublishingServiceName_traits::create (i, f, this));

            if (!this->PublishingServiceName_)
            {
              this->PublishingServiceName_.set (r);
              continue;
            }
          }

          // PublishingMediumName
          //
          if (n.name () == "PublishingMediumName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PublishingMediumName_type > r (
              PublishingMediumName_traits::create (i, f, this));

            if (!this->PublishingMediumName_)
            {
              this->PublishingMediumName_.set (r);
              continue;
            }
          }

          // PublishingRegionName
          //
          if (n.name () == "PublishingRegionName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PublishingRegionName_type > r (
              PublishingRegionName_traits::create (i, f, this));

            if (!this->PublishingRegionName_)
            {
              this->PublishingRegionName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      PublicationType* PublicationType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class PublicationType (*this, f, c);
      }

      PublicationType::
      ~PublicationType ()
      {
      }

      // AwardType
      //

      AwardType::
      AwardType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::ThesaurusType (InstanceID),
        FestivalName_ (::xml_schema::flags (), this),
        FestivalDateTime_ (::xml_schema::flags (), this),
        AwardName_ (::xml_schema::flags (), this),
        AwardCategory_ (::xml_schema::flags (), this),
        NominationCategory_ (::xml_schema::flags (), this),
        AwardParticipants_ (::xml_schema::flags (), this)
      {
      }

      AwardType::
      AwardType (const AwardType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (x, f, c),
        FestivalName_ (x.FestivalName_, f, this),
        FestivalDateTime_ (x.FestivalDateTime_, f, this),
        AwardName_ (x.AwardName_, f, this),
        AwardCategory_ (x.AwardCategory_, f, this),
        NominationCategory_ (x.NominationCategory_, f, this),
        AwardParticipants_ (x.AwardParticipants_, f, this)
      {
      }

      AwardType::
      AwardType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (e, f | ::xml_schema::flags::base, c),
        FestivalName_ (f, this),
        FestivalDateTime_ (f, this),
        AwardName_ (f, this),
        AwardCategory_ (f, this),
        NominationCategory_ (f, this),
        AwardParticipants_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void AwardType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::ThesaurusType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // FestivalName
          //
          if (n.name () == "FestivalName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< FestivalName_type > r (
              FestivalName_traits::create (i, f, this));

            if (!this->FestivalName_)
            {
              this->FestivalName_.set (r);
              continue;
            }
          }

          // FestivalDateTime
          //
          if (n.name () == "FestivalDateTime" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< FestivalDateTime_type > r (
              FestivalDateTime_traits::create (i, f, this));

            if (!this->FestivalDateTime_)
            {
              this->FestivalDateTime_.set (r);
              continue;
            }
          }

          // AwardName
          //
          if (n.name () == "AwardName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< AwardName_type > r (
              AwardName_traits::create (i, f, this));

            if (!this->AwardName_)
            {
              this->AwardName_.set (r);
              continue;
            }
          }

          // AwardCategory
          //
          if (n.name () == "AwardCategory" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< AwardCategory_type > r (
              AwardCategory_traits::create (i, f, this));

            if (!this->AwardCategory_)
            {
              this->AwardCategory_.set (r);
              continue;
            }
          }

          // NominationCategory
          //
          if (n.name () == "NominationCategory" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< NominationCategory_type > r (
              NominationCategory_traits::create (i, f, this));

            if (!this->NominationCategory_)
            {
              this->NominationCategory_.set (r);
              continue;
            }
          }

          // AwardParticipants
          //
          if (n.name () == "AwardParticipants" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< AwardParticipants_type > r (
              AwardParticipants_traits::create (i, f, this));

            if (!this->AwardParticipants_)
            {
              this->AwardParticipants_.set (r);
              continue;
            }
          }

          break;
        }
      }

      AwardType* AwardType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class AwardType (*this, f, c);
      }

      AwardType::
      ~AwardType ()
      {
      }

      // CaptionsDescriptionType
      //

      CaptionsDescriptionType::
      CaptionsDescriptionType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::ThesaurusType (InstanceID),
        ExtendedCaptionsLanguageCode_ (::xml_schema::flags (), this),
        CaptionKind_ (::xml_schema::flags (), this)
      {
      }

      CaptionsDescriptionType::
      CaptionsDescriptionType (const CaptionsDescriptionType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (x, f, c),
        ExtendedCaptionsLanguageCode_ (x.ExtendedCaptionsLanguageCode_, f, this),
        CaptionKind_ (x.CaptionKind_, f, this)
      {
      }

      CaptionsDescriptionType::
      CaptionsDescriptionType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (e, f | ::xml_schema::flags::base, c),
        ExtendedCaptionsLanguageCode_ (f, this),
        CaptionKind_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void CaptionsDescriptionType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::ThesaurusType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ExtendedCaptionsLanguageCode
          //
          if (n.name () == "ExtendedCaptionsLanguageCode" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ExtendedCaptionsLanguageCode_type > r (
              ExtendedCaptionsLanguageCode_traits::create (i, f, this));

            if (!this->ExtendedCaptionsLanguageCode_)
            {
              this->ExtendedCaptionsLanguageCode_.set (r);
              continue;
            }
          }

          // CaptionKind
          //
          if (n.name () == "CaptionKind" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< CaptionKind_type > r (
              CaptionKind_traits::create (i, f, this));

            if (!this->CaptionKind_)
            {
              this->CaptionKind_.set (r);
              continue;
            }
          }

          break;
        }
      }

      CaptionsDescriptionType* CaptionsDescriptionType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class CaptionsDescriptionType (*this, f, c);
      }

      CaptionsDescriptionType::
      ~CaptionsDescriptionType ()
      {
      }

      // DMS1AnnotationType
      //

      DMS1AnnotationType::
      DMS1AnnotationType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::ThesaurusType (InstanceID),
        AnnotationKind_ (::xml_schema::flags (), this),
        AnnotationSynopsis_ (::xml_schema::flags (), this),
        AnnotationDescription_ (::xml_schema::flags (), this),
        RelatedMaterialDescription_ (::xml_schema::flags (), this),
        ClassificationObjects_ (::xml_schema::flags (), this),
        AnnotationCueWordsObject_ (::xml_schema::flags (), this),
        RelatedMaterialLocators_ (::xml_schema::flags (), this),
        AnnotationParticipants_ (::xml_schema::flags (), this)
      {
      }

      DMS1AnnotationType::
      DMS1AnnotationType (const DMS1AnnotationType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (x, f, c),
        AnnotationKind_ (x.AnnotationKind_, f, this),
        AnnotationSynopsis_ (x.AnnotationSynopsis_, f, this),
        AnnotationDescription_ (x.AnnotationDescription_, f, this),
        RelatedMaterialDescription_ (x.RelatedMaterialDescription_, f, this),
        ClassificationObjects_ (x.ClassificationObjects_, f, this),
        AnnotationCueWordsObject_ (x.AnnotationCueWordsObject_, f, this),
        RelatedMaterialLocators_ (x.RelatedMaterialLocators_, f, this),
        AnnotationParticipants_ (x.AnnotationParticipants_, f, this)
      {
      }

      DMS1AnnotationType::
      DMS1AnnotationType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (e, f | ::xml_schema::flags::base, c),
        AnnotationKind_ (f, this),
        AnnotationSynopsis_ (f, this),
        AnnotationDescription_ (f, this),
        RelatedMaterialDescription_ (f, this),
        ClassificationObjects_ (f, this),
        AnnotationCueWordsObject_ (f, this),
        RelatedMaterialLocators_ (f, this),
        AnnotationParticipants_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void DMS1AnnotationType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::ThesaurusType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // AnnotationKind
          //
          if (n.name () == "AnnotationKind" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< AnnotationKind_type > r (
              AnnotationKind_traits::create (i, f, this));

            if (!this->AnnotationKind_)
            {
              this->AnnotationKind_.set (r);
              continue;
            }
          }

          // AnnotationSynopsis
          //
          if (n.name () == "AnnotationSynopsis" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< AnnotationSynopsis_type > r (
              AnnotationSynopsis_traits::create (i, f, this));

            if (!this->AnnotationSynopsis_)
            {
              this->AnnotationSynopsis_.set (r);
              continue;
            }
          }

          // AnnotationDescription
          //
          if (n.name () == "AnnotationDescription" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< AnnotationDescription_type > r (
              AnnotationDescription_traits::create (i, f, this));

            if (!this->AnnotationDescription_)
            {
              this->AnnotationDescription_.set (r);
              continue;
            }
          }

          // RelatedMaterialDescription
          //
          if (n.name () == "RelatedMaterialDescription" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< RelatedMaterialDescription_type > r (
              RelatedMaterialDescription_traits::create (i, f, this));

            if (!this->RelatedMaterialDescription_)
            {
              this->RelatedMaterialDescription_.set (r);
              continue;
            }
          }

          // ClassificationObjects
          //
          if (n.name () == "ClassificationObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ClassificationObjects_type > r (
              ClassificationObjects_traits::create (i, f, this));

            if (!this->ClassificationObjects_)
            {
              this->ClassificationObjects_.set (r);
              continue;
            }
          }

          // AnnotationCueWordsObject
          //
          if (n.name () == "AnnotationCueWordsObject" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< AnnotationCueWordsObject_type > r (
              AnnotationCueWordsObject_traits::create (i, f, this));

            if (!this->AnnotationCueWordsObject_)
            {
              this->AnnotationCueWordsObject_.set (r);
              continue;
            }
          }

          // RelatedMaterialLocators
          //
          if (n.name () == "RelatedMaterialLocators" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< RelatedMaterialLocators_type > r (
              RelatedMaterialLocators_traits::create (i, f, this));

            if (!this->RelatedMaterialLocators_)
            {
              this->RelatedMaterialLocators_.set (r);
              continue;
            }
          }

          // AnnotationParticipants
          //
          if (n.name () == "AnnotationParticipants" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< AnnotationParticipants_type > r (
              AnnotationParticipants_traits::create (i, f, this));

            if (!this->AnnotationParticipants_)
            {
              this->AnnotationParticipants_.set (r);
              continue;
            }
          }

          break;
        }
      }

      DMS1AnnotationType* DMS1AnnotationType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class DMS1AnnotationType (*this, f, c);
      }

      DMS1AnnotationType::
      ~DMS1AnnotationType ()
      {
      }

      // SettingPeriodType
      //

      SettingPeriodType::
      SettingPeriodType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::ThesaurusType (InstanceID),
        SettingDateTime_ (::xml_schema::flags (), this),
        TimePeriodKeyword_ (::xml_schema::flags (), this),
        SettingPeriodDescription_ (::xml_schema::flags (), this)
      {
      }

      SettingPeriodType::
      SettingPeriodType (const SettingPeriodType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (x, f, c),
        SettingDateTime_ (x.SettingDateTime_, f, this),
        TimePeriodKeyword_ (x.TimePeriodKeyword_, f, this),
        SettingPeriodDescription_ (x.SettingPeriodDescription_, f, this)
      {
      }

      SettingPeriodType::
      SettingPeriodType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (e, f | ::xml_schema::flags::base, c),
        SettingDateTime_ (f, this),
        TimePeriodKeyword_ (f, this),
        SettingPeriodDescription_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void SettingPeriodType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::ThesaurusType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SettingDateTime
          //
          if (n.name () == "SettingDateTime" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SettingDateTime_type > r (
              SettingDateTime_traits::create (i, f, this));

            if (!this->SettingDateTime_)
            {
              this->SettingDateTime_.set (r);
              continue;
            }
          }

          // TimePeriodKeyword
          //
          if (n.name () == "TimePeriodKeyword" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< TimePeriodKeyword_type > r (
              TimePeriodKeyword_traits::create (i, f, this));

            if (!this->TimePeriodKeyword_)
            {
              this->TimePeriodKeyword_.set (r);
              continue;
            }
          }

          // SettingPeriodDescription
          //
          if (n.name () == "SettingPeriodDescription" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SettingPeriodDescription_type > r (
              SettingPeriodDescription_traits::create (i, f, this));

            if (!this->SettingPeriodDescription_)
            {
              this->SettingPeriodDescription_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SettingPeriodType* SettingPeriodType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SettingPeriodType (*this, f, c);
      }

      SettingPeriodType::
      ~SettingPeriodType ()
      {
      }

      // ScriptingType
      //

      ScriptingType::
      ScriptingType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::ThesaurusType (InstanceID),
        ScriptingKind_ (::xml_schema::flags (), this),
        ScriptingText_ (::xml_schema::flags (), this),
        ScriptingLocators_ (::xml_schema::flags (), this)
      {
      }

      ScriptingType::
      ScriptingType (const ScriptingType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (x, f, c),
        ScriptingKind_ (x.ScriptingKind_, f, this),
        ScriptingText_ (x.ScriptingText_, f, this),
        ScriptingLocators_ (x.ScriptingLocators_, f, this)
      {
      }

      ScriptingType::
      ScriptingType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (e, f | ::xml_schema::flags::base, c),
        ScriptingKind_ (f, this),
        ScriptingText_ (f, this),
        ScriptingLocators_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void ScriptingType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::ThesaurusType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ScriptingKind
          //
          if (n.name () == "ScriptingKind" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ScriptingKind_type > r (
              ScriptingKind_traits::create (i, f, this));

            if (!this->ScriptingKind_)
            {
              this->ScriptingKind_.set (r);
              continue;
            }
          }

          // ScriptingText
          //
          if (n.name () == "ScriptingText" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ScriptingText_type > r (
              ScriptingText_traits::create (i, f, this));

            if (!this->ScriptingText_)
            {
              this->ScriptingText_.set (r);
              continue;
            }
          }

          // ScriptingLocators
          //
          if (n.name () == "ScriptingLocators" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ScriptingLocators_type > r (
              ScriptingLocators_traits::create (i, f, this));

            if (!this->ScriptingLocators_)
            {
              this->ScriptingLocators_.set (r);
              continue;
            }
          }

          break;
        }
      }

      ScriptingType* ScriptingType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class ScriptingType (*this, f, c);
      }

      ScriptingType::
      ~ScriptingType ()
      {
      }

      // ClassificationType
      //

      ClassificationType::
      ClassificationType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::ThesaurusType (InstanceID),
        ContentClassification_ (::xml_schema::flags (), this),
        ClassificationNameValueObjects_ (::xml_schema::flags (), this)
      {
      }

      ClassificationType::
      ClassificationType (const ClassificationType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (x, f, c),
        ContentClassification_ (x.ContentClassification_, f, this),
        ClassificationNameValueObjects_ (x.ClassificationNameValueObjects_, f, this)
      {
      }

      ClassificationType::
      ClassificationType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (e, f | ::xml_schema::flags::base, c),
        ContentClassification_ (f, this),
        ClassificationNameValueObjects_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void ClassificationType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::ThesaurusType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ContentClassification
          //
          if (n.name () == "ContentClassification" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ContentClassification_type > r (
              ContentClassification_traits::create (i, f, this));

            if (!this->ContentClassification_)
            {
              this->ContentClassification_.set (r);
              continue;
            }
          }

          // ClassificationNameValueObjects
          //
          if (n.name () == "ClassificationNameValueObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ClassificationNameValueObjects_type > r (
              ClassificationNameValueObjects_traits::create (i, f, this));

            if (!this->ClassificationNameValueObjects_)
            {
              this->ClassificationNameValueObjects_.set (r);
              continue;
            }
          }

          break;
        }
      }

      ClassificationType* ClassificationType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class ClassificationType (*this, f, c);
      }

      ClassificationType::
      ~ClassificationType ()
      {
      }

      // ShotType
      //

      ShotType::
      ShotType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::TextLanguageType (InstanceID),
        ShotStartPosition_ (::xml_schema::flags (), this),
        ShotDuration_ (::xml_schema::flags (), this),
        ShotTrackIDs_ (::xml_schema::flags (), this),
        ShotDescription_ (::xml_schema::flags (), this),
        ShotCommentKind_ (::xml_schema::flags (), this),
        ShotComment_ (::xml_schema::flags (), this),
        ShotCueWordsObject_ (::xml_schema::flags (), this),
        KeypointObjects_ (::xml_schema::flags (), this)
      {
      }

      ShotType::
      ShotType (const ShotType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
      : ::st434::s380m::groups::TextLanguageType (x, f, c),
        ShotStartPosition_ (x.ShotStartPosition_, f, this),
        ShotDuration_ (x.ShotDuration_, f, this),
        ShotTrackIDs_ (x.ShotTrackIDs_, f, this),
        ShotDescription_ (x.ShotDescription_, f, this),
        ShotCommentKind_ (x.ShotCommentKind_, f, this),
        ShotComment_ (x.ShotComment_, f, this),
        ShotCueWordsObject_ (x.ShotCueWordsObject_, f, this),
        KeypointObjects_ (x.KeypointObjects_, f, this)
      {
      }

      ShotType::
      ShotType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
      : ::st434::s380m::groups::TextLanguageType (e, f | ::xml_schema::flags::base, c),
        ShotStartPosition_ (f, this),
        ShotDuration_ (f, this),
        ShotTrackIDs_ (f, this),
        ShotDescription_ (f, this),
        ShotCommentKind_ (f, this),
        ShotComment_ (f, this),
        ShotCueWordsObject_ (f, this),
        KeypointObjects_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void ShotType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::TextLanguageType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ShotStartPosition
          //
          if (n.name () == "ShotStartPosition" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ShotStartPosition_type > r (
              ShotStartPosition_traits::create (i, f, this));

            if (!this->ShotStartPosition_)
            {
              this->ShotStartPosition_.set (r);
              continue;
            }
          }

          // ShotDuration
          //
          if (n.name () == "ShotDuration" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ShotDuration_type > r (
              ShotDuration_traits::create (i, f, this));

            if (!this->ShotDuration_)
            {
              this->ShotDuration_.set (r);
              continue;
            }
          }

          // ShotTrackIDs
          //
          if (n.name () == "ShotTrackIDs" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ShotTrackIDs_type > r (
              ShotTrackIDs_traits::create (i, f, this));

            if (!this->ShotTrackIDs_)
            {
              this->ShotTrackIDs_.set (r);
              continue;
            }
          }

          // ShotDescription
          //
          if (n.name () == "ShotDescription" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ShotDescription_type > r (
              ShotDescription_traits::create (i, f, this));

            if (!this->ShotDescription_)
            {
              this->ShotDescription_.set (r);
              continue;
            }
          }

          // ShotCommentKind
          //
          if (n.name () == "ShotCommentKind" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ShotCommentKind_type > r (
              ShotCommentKind_traits::create (i, f, this));

            if (!this->ShotCommentKind_)
            {
              this->ShotCommentKind_.set (r);
              continue;
            }
          }

          // ShotComment
          //
          if (n.name () == "ShotComment" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ShotComment_type > r (
              ShotComment_traits::create (i, f, this));

            if (!this->ShotComment_)
            {
              this->ShotComment_.set (r);
              continue;
            }
          }

          // ShotCueWordsObject
          //
          if (n.name () == "ShotCueWordsObject" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ShotCueWordsObject_type > r (
              ShotCueWordsObject_traits::create (i, f, this));

            if (!this->ShotCueWordsObject_)
            {
              this->ShotCueWordsObject_.set (r);
              continue;
            }
          }

          // KeypointObjects
          //
          if (n.name () == "KeypointObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< KeypointObjects_type > r (
              KeypointObjects_traits::create (i, f, this));

            if (!this->KeypointObjects_)
            {
              this->KeypointObjects_.set (r);
              continue;
            }
          }

          break;
        }
      }

      ShotType* ShotType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class ShotType (*this, f, c);
      }

      ShotType::
      ~ShotType ()
      {
      }

      // KeypointType
      //

      KeypointType::
      KeypointType (const InstanceID_type& InstanceID,
                    const KeypointPosition_type& KeypointPosition)
      : ::st434::s380m::groups::ThesaurusType (InstanceID),
        KeypointKind_ (::xml_schema::flags (), this),
        KeypointPosition_ (KeypointPosition, ::xml_schema::flags (), this),
        KeypointValue_ (::xml_schema::flags (), this)
      {
      }

      KeypointType::
      KeypointType (const KeypointType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (x, f, c),
        KeypointKind_ (x.KeypointKind_, f, this),
        KeypointPosition_ (x.KeypointPosition_, f, this),
        KeypointValue_ (x.KeypointValue_, f, this)
      {
      }

      KeypointType::
      KeypointType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (e, f | ::xml_schema::flags::base, c),
        KeypointKind_ (f, this),
        KeypointPosition_ (f, this),
        KeypointValue_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void KeypointType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::ThesaurusType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // KeypointKind
          //
          if (n.name () == "KeypointKind" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< KeypointKind_type > r (
              KeypointKind_traits::create (i, f, this));

            if (!this->KeypointKind_)
            {
              this->KeypointKind_.set (r);
              continue;
            }
          }

          // KeypointPosition
          //
          if (n.name () == "KeypointPosition" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< KeypointPosition_type > r (
              KeypointPosition_traits::create (i, f, this));

            if (!KeypointPosition_.present ())
            {
              this->KeypointPosition_.set (r);
              continue;
            }
          }

          // KeypointValue
          //
          if (n.name () == "KeypointValue" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< KeypointValue_type > r (
              KeypointValue_traits::create (i, f, this));

            if (!this->KeypointValue_)
            {
              this->KeypointValue_.set (r);
              continue;
            }
          }

          break;
        }

        if (!KeypointPosition_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "KeypointPosition",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      KeypointType* KeypointType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class KeypointType (*this, f, c);
      }

      KeypointType::
      ~KeypointType ()
      {
      }

      // ParticipantType
      //

      ParticipantType::
      ParticipantType (const InstanceID_type& InstanceID,
                       const ParticipantID_type& ParticipantID)
      : ::st434::s380m::groups::ThesaurusType (InstanceID),
        ParticipantID_ (ParticipantID, ::xml_schema::flags (), this),
        ContributionStatus_ (::xml_schema::flags (), this),
        JobFunction_ (::xml_schema::flags (), this),
        JobFunctionCode_ (::xml_schema::flags (), this),
        RoleName_ (::xml_schema::flags (), this),
        Persons_ (::xml_schema::flags (), this),
        ParticipantOrganizations_ (::xml_schema::flags (), this)
      {
      }

      ParticipantType::
      ParticipantType (const ParticipantType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (x, f, c),
        ParticipantID_ (x.ParticipantID_, f, this),
        ContributionStatus_ (x.ContributionStatus_, f, this),
        JobFunction_ (x.JobFunction_, f, this),
        JobFunctionCode_ (x.JobFunctionCode_, f, this),
        RoleName_ (x.RoleName_, f, this),
        Persons_ (x.Persons_, f, this),
        ParticipantOrganizations_ (x.ParticipantOrganizations_, f, this)
      {
      }

      ParticipantType::
      ParticipantType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (e, f | ::xml_schema::flags::base, c),
        ParticipantID_ (f, this),
        ContributionStatus_ (f, this),
        JobFunction_ (f, this),
        JobFunctionCode_ (f, this),
        RoleName_ (f, this),
        Persons_ (f, this),
        ParticipantOrganizations_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void ParticipantType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::ThesaurusType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ParticipantID
          //
          if (n.name () == "ParticipantID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ParticipantID_type > r (
              ParticipantID_traits::create (i, f, this));

            if (!ParticipantID_.present ())
            {
              this->ParticipantID_.set (r);
              continue;
            }
          }

          // ContributionStatus
          //
          if (n.name () == "ContributionStatus" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ContributionStatus_type > r (
              ContributionStatus_traits::create (i, f, this));

            if (!this->ContributionStatus_)
            {
              this->ContributionStatus_.set (r);
              continue;
            }
          }

          // JobFunction
          //
          if (n.name () == "JobFunction" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< JobFunction_type > r (
              JobFunction_traits::create (i, f, this));

            if (!this->JobFunction_)
            {
              this->JobFunction_.set (r);
              continue;
            }
          }

          // JobFunctionCode
          //
          if (n.name () == "JobFunctionCode" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< JobFunctionCode_type > r (
              JobFunctionCode_traits::create (i, f, this));

            if (!this->JobFunctionCode_)
            {
              this->JobFunctionCode_.set (r);
              continue;
            }
          }

          // RoleName
          //
          if (n.name () == "RoleName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< RoleName_type > r (
              RoleName_traits::create (i, f, this));

            if (!this->RoleName_)
            {
              this->RoleName_.set (r);
              continue;
            }
          }

          // Persons
          //
          if (n.name () == "Persons" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< Persons_type > r (
              Persons_traits::create (i, f, this));

            if (!this->Persons_)
            {
              this->Persons_.set (r);
              continue;
            }
          }

          // ParticipantOrganizations
          //
          if (n.name () == "ParticipantOrganizations" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ParticipantOrganizations_type > r (
              ParticipantOrganizations_traits::create (i, f, this));

            if (!this->ParticipantOrganizations_)
            {
              this->ParticipantOrganizations_.set (r);
              continue;
            }
          }

          break;
        }

        if (!ParticipantID_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ParticipantID",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      ParticipantType* ParticipantType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class ParticipantType (*this, f, c);
      }

      ParticipantType::
      ~ParticipantType ()
      {
      }

      // PersonType
      //

      PersonType::
      PersonType (const InstanceID_type& InstanceID,
                  const ContactID_type& ContactID)
      : ::st434::s380m::groups::ContactType (InstanceID,
                                             ContactID),
        FamilyName_ (::xml_schema::flags (), this),
        FirstGivenName_ (::xml_schema::flags (), this),
        OtherGivenNames_ (::xml_schema::flags (), this),
        Salutation_ (::xml_schema::flags (), this),
        HonorsQualifications_ (::xml_schema::flags (), this),
        PersonDescription_ (::xml_schema::flags (), this),
        AlternateName_ (::xml_schema::flags (), this),
        LinkingName_ (::xml_schema::flags (), this),
        NameSuffix_ (::xml_schema::flags (), this),
        FormerFamilyName_ (::xml_schema::flags (), this),
        Nationality_ (::xml_schema::flags (), this),
        Citizenship_ (::xml_schema::flags (), this),
        PersonOrganizations_ (::xml_schema::flags (), this)
      {
      }

      PersonType::
      PersonType (const PersonType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
      : ::st434::s380m::groups::ContactType (x, f, c),
        FamilyName_ (x.FamilyName_, f, this),
        FirstGivenName_ (x.FirstGivenName_, f, this),
        OtherGivenNames_ (x.OtherGivenNames_, f, this),
        Salutation_ (x.Salutation_, f, this),
        HonorsQualifications_ (x.HonorsQualifications_, f, this),
        PersonDescription_ (x.PersonDescription_, f, this),
        AlternateName_ (x.AlternateName_, f, this),
        LinkingName_ (x.LinkingName_, f, this),
        NameSuffix_ (x.NameSuffix_, f, this),
        FormerFamilyName_ (x.FormerFamilyName_, f, this),
        Nationality_ (x.Nationality_, f, this),
        Citizenship_ (x.Citizenship_, f, this),
        PersonOrganizations_ (x.PersonOrganizations_, f, this)
      {
      }

      PersonType::
      PersonType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
      : ::st434::s380m::groups::ContactType (e, f | ::xml_schema::flags::base, c),
        FamilyName_ (f, this),
        FirstGivenName_ (f, this),
        OtherGivenNames_ (f, this),
        Salutation_ (f, this),
        HonorsQualifications_ (f, this),
        PersonDescription_ (f, this),
        AlternateName_ (f, this),
        LinkingName_ (f, this),
        NameSuffix_ (f, this),
        FormerFamilyName_ (f, this),
        Nationality_ (f, this),
        Citizenship_ (f, this),
        PersonOrganizations_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void PersonType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::ContactType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // FamilyName
          //
          if (n.name () == "FamilyName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< FamilyName_type > r (
              FamilyName_traits::create (i, f, this));

            if (!this->FamilyName_)
            {
              this->FamilyName_.set (r);
              continue;
            }
          }

          // FirstGivenName
          //
          if (n.name () == "FirstGivenName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< FirstGivenName_type > r (
              FirstGivenName_traits::create (i, f, this));

            if (!this->FirstGivenName_)
            {
              this->FirstGivenName_.set (r);
              continue;
            }
          }

          // OtherGivenNames
          //
          if (n.name () == "OtherGivenNames" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< OtherGivenNames_type > r (
              OtherGivenNames_traits::create (i, f, this));

            if (!this->OtherGivenNames_)
            {
              this->OtherGivenNames_.set (r);
              continue;
            }
          }

          // Salutation
          //
          if (n.name () == "Salutation" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< Salutation_type > r (
              Salutation_traits::create (i, f, this));

            if (!this->Salutation_)
            {
              this->Salutation_.set (r);
              continue;
            }
          }

          // HonorsQualifications
          //
          if (n.name () == "HonorsQualifications" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< HonorsQualifications_type > r (
              HonorsQualifications_traits::create (i, f, this));

            if (!this->HonorsQualifications_)
            {
              this->HonorsQualifications_.set (r);
              continue;
            }
          }

          // PersonDescription
          //
          if (n.name () == "PersonDescription" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PersonDescription_type > r (
              PersonDescription_traits::create (i, f, this));

            if (!this->PersonDescription_)
            {
              this->PersonDescription_.set (r);
              continue;
            }
          }

          // AlternateName
          //
          if (n.name () == "AlternateName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< AlternateName_type > r (
              AlternateName_traits::create (i, f, this));

            if (!this->AlternateName_)
            {
              this->AlternateName_.set (r);
              continue;
            }
          }

          // LinkingName
          //
          if (n.name () == "LinkingName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< LinkingName_type > r (
              LinkingName_traits::create (i, f, this));

            if (!this->LinkingName_)
            {
              this->LinkingName_.set (r);
              continue;
            }
          }

          // NameSuffix
          //
          if (n.name () == "NameSuffix" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< NameSuffix_type > r (
              NameSuffix_traits::create (i, f, this));

            if (!this->NameSuffix_)
            {
              this->NameSuffix_.set (r);
              continue;
            }
          }

          // FormerFamilyName
          //
          if (n.name () == "FormerFamilyName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< FormerFamilyName_type > r (
              FormerFamilyName_traits::create (i, f, this));

            if (!this->FormerFamilyName_)
            {
              this->FormerFamilyName_.set (r);
              continue;
            }
          }

          // Nationality
          //
          if (n.name () == "Nationality" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< Nationality_type > r (
              Nationality_traits::create (i, f, this));

            if (!this->Nationality_)
            {
              this->Nationality_.set (r);
              continue;
            }
          }

          // Citizenship
          //
          if (n.name () == "Citizenship" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< Citizenship_type > r (
              Citizenship_traits::create (i, f, this));

            if (!this->Citizenship_)
            {
              this->Citizenship_.set (r);
              continue;
            }
          }

          // PersonOrganizations
          //
          if (n.name () == "PersonOrganizations" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PersonOrganizations_type > r (
              PersonOrganizations_traits::create (i, f, this));

            if (!this->PersonOrganizations_)
            {
              this->PersonOrganizations_.set (r);
              continue;
            }
          }

          break;
        }
      }

      PersonType* PersonType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class PersonType (*this, f, c);
      }

      PersonType::
      ~PersonType ()
      {
      }

      // OrganizationType
      //

      OrganizationType::
      OrganizationType (const InstanceID_type& InstanceID,
                        const ContactID_type& ContactID)
      : ::st434::s380m::groups::ContactType (InstanceID,
                                             ContactID),
        OrganizationKind_ (::xml_schema::flags (), this),
        OrganizationMainName_ (::xml_schema::flags (), this),
        OrganizationCode_ (::xml_schema::flags (), this),
        ContactDepartment_ (::xml_schema::flags (), this)
      {
      }

      OrganizationType::
      OrganizationType (const OrganizationType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
      : ::st434::s380m::groups::ContactType (x, f, c),
        OrganizationKind_ (x.OrganizationKind_, f, this),
        OrganizationMainName_ (x.OrganizationMainName_, f, this),
        OrganizationCode_ (x.OrganizationCode_, f, this),
        ContactDepartment_ (x.ContactDepartment_, f, this)
      {
      }

      OrganizationType::
      OrganizationType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
      : ::st434::s380m::groups::ContactType (e, f | ::xml_schema::flags::base, c),
        OrganizationKind_ (f, this),
        OrganizationMainName_ (f, this),
        OrganizationCode_ (f, this),
        ContactDepartment_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void OrganizationType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::ContactType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // OrganizationKind
          //
          if (n.name () == "OrganizationKind" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< OrganizationKind_type > r (
              OrganizationKind_traits::create (i, f, this));

            if (!this->OrganizationKind_)
            {
              this->OrganizationKind_.set (r);
              continue;
            }
          }

          // OrganizationMainName
          //
          if (n.name () == "OrganizationMainName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< OrganizationMainName_type > r (
              OrganizationMainName_traits::create (i, f, this));

            if (!this->OrganizationMainName_)
            {
              this->OrganizationMainName_.set (r);
              continue;
            }
          }

          // OrganizationCode
          //
          if (n.name () == "OrganizationCode" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< OrganizationCode_type > r (
              OrganizationCode_traits::create (i, f, this));

            if (!this->OrganizationCode_)
            {
              this->OrganizationCode_.set (r);
              continue;
            }
          }

          // ContactDepartment
          //
          if (n.name () == "ContactDepartment" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ContactDepartment_type > r (
              ContactDepartment_traits::create (i, f, this));

            if (!this->ContactDepartment_)
            {
              this->ContactDepartment_.set (r);
              continue;
            }
          }

          break;
        }
      }

      OrganizationType* OrganizationType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class OrganizationType (*this, f, c);
      }

      OrganizationType::
      ~OrganizationType ()
      {
      }

      // LocationType
      //

      LocationType::
      LocationType (const InstanceID_type& InstanceID,
                    const ContactID_type& ContactID)
      : ::st434::s380m::groups::ContactType (InstanceID,
                                             ContactID),
        LocationKind_ (::xml_schema::flags (), this),
        LocationDescription_ (::xml_schema::flags (), this)
      {
      }

      LocationType::
      LocationType (const LocationType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::st434::s380m::groups::ContactType (x, f, c),
        LocationKind_ (x.LocationKind_, f, this),
        LocationDescription_ (x.LocationDescription_, f, this)
      {
      }

      LocationType::
      LocationType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::st434::s380m::groups::ContactType (e, f | ::xml_schema::flags::base, c),
        LocationKind_ (f, this),
        LocationDescription_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void LocationType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::ContactType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // LocationKind
          //
          if (n.name () == "LocationKind" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< LocationKind_type > r (
              LocationKind_traits::create (i, f, this));

            if (!this->LocationKind_)
            {
              this->LocationKind_.set (r);
              continue;
            }
          }

          // LocationDescription
          //
          if (n.name () == "LocationDescription" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< LocationDescription_type > r (
              LocationDescription_traits::create (i, f, this));

            if (!this->LocationDescription_)
            {
              this->LocationDescription_.set (r);
              continue;
            }
          }

          break;
        }
      }

      LocationType* LocationType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class LocationType (*this, f, c);
      }

      LocationType::
      ~LocationType ()
      {
      }

      // AddressType
      //

      AddressType::
      AddressType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::DMS1ObjectType (InstanceID),
        RoomSuiteNumber_ (::xml_schema::flags (), this),
        RoomSuiteName_ (::xml_schema::flags (), this),
        BuildingName_ (::xml_schema::flags (), this),
        PlaceName_ (::xml_schema::flags (), this),
        StreetNumber_ (::xml_schema::flags (), this),
        StreetName_ (::xml_schema::flags (), this),
        PostalTown_ (::xml_schema::flags (), this),
        City_ (::xml_schema::flags (), this),
        StateProvinceCounty_ (::xml_schema::flags (), this),
        PostalCode_ (::xml_schema::flags (), this),
        Country_ (::xml_schema::flags (), this),
        GeographicalCoordinates_ (::xml_schema::flags (), this),
        AstronomicalBodyName_ (::xml_schema::flags (), this),
        CommunicationsObjects_ (::xml_schema::flags (), this),
        AddressNameValueObjects_ (::xml_schema::flags (), this)
      {
      }

      AddressType::
      AddressType (const AddressType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::st434::s380m::groups::DMS1ObjectType (x, f, c),
        RoomSuiteNumber_ (x.RoomSuiteNumber_, f, this),
        RoomSuiteName_ (x.RoomSuiteName_, f, this),
        BuildingName_ (x.BuildingName_, f, this),
        PlaceName_ (x.PlaceName_, f, this),
        StreetNumber_ (x.StreetNumber_, f, this),
        StreetName_ (x.StreetName_, f, this),
        PostalTown_ (x.PostalTown_, f, this),
        City_ (x.City_, f, this),
        StateProvinceCounty_ (x.StateProvinceCounty_, f, this),
        PostalCode_ (x.PostalCode_, f, this),
        Country_ (x.Country_, f, this),
        GeographicalCoordinates_ (x.GeographicalCoordinates_, f, this),
        AstronomicalBodyName_ (x.AstronomicalBodyName_, f, this),
        CommunicationsObjects_ (x.CommunicationsObjects_, f, this),
        AddressNameValueObjects_ (x.AddressNameValueObjects_, f, this)
      {
      }

      AddressType::
      AddressType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::st434::s380m::groups::DMS1ObjectType (e, f | ::xml_schema::flags::base, c),
        RoomSuiteNumber_ (f, this),
        RoomSuiteName_ (f, this),
        BuildingName_ (f, this),
        PlaceName_ (f, this),
        StreetNumber_ (f, this),
        StreetName_ (f, this),
        PostalTown_ (f, this),
        City_ (f, this),
        StateProvinceCounty_ (f, this),
        PostalCode_ (f, this),
        Country_ (f, this),
        GeographicalCoordinates_ (f, this),
        AstronomicalBodyName_ (f, this),
        CommunicationsObjects_ (f, this),
        AddressNameValueObjects_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void AddressType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::DMS1ObjectType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // RoomSuiteNumber
          //
          if (n.name () == "RoomSuiteNumber" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< RoomSuiteNumber_type > r (
              RoomSuiteNumber_traits::create (i, f, this));

            if (!this->RoomSuiteNumber_)
            {
              this->RoomSuiteNumber_.set (r);
              continue;
            }
          }

          // RoomSuiteName
          //
          if (n.name () == "RoomSuiteName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< RoomSuiteName_type > r (
              RoomSuiteName_traits::create (i, f, this));

            if (!this->RoomSuiteName_)
            {
              this->RoomSuiteName_.set (r);
              continue;
            }
          }

          // BuildingName
          //
          if (n.name () == "BuildingName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< BuildingName_type > r (
              BuildingName_traits::create (i, f, this));

            if (!this->BuildingName_)
            {
              this->BuildingName_.set (r);
              continue;
            }
          }

          // PlaceName
          //
          if (n.name () == "PlaceName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PlaceName_type > r (
              PlaceName_traits::create (i, f, this));

            if (!this->PlaceName_)
            {
              this->PlaceName_.set (r);
              continue;
            }
          }

          // StreetNumber
          //
          if (n.name () == "StreetNumber" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< StreetNumber_type > r (
              StreetNumber_traits::create (i, f, this));

            if (!this->StreetNumber_)
            {
              this->StreetNumber_.set (r);
              continue;
            }
          }

          // StreetName
          //
          if (n.name () == "StreetName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< StreetName_type > r (
              StreetName_traits::create (i, f, this));

            if (!this->StreetName_)
            {
              this->StreetName_.set (r);
              continue;
            }
          }

          // PostalTown
          //
          if (n.name () == "PostalTown" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PostalTown_type > r (
              PostalTown_traits::create (i, f, this));

            if (!this->PostalTown_)
            {
              this->PostalTown_.set (r);
              continue;
            }
          }

          // City
          //
          if (n.name () == "City" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< City_type > r (
              City_traits::create (i, f, this));

            if (!this->City_)
            {
              this->City_.set (r);
              continue;
            }
          }

          // StateProvinceCounty
          //
          if (n.name () == "StateProvinceCounty" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< StateProvinceCounty_type > r (
              StateProvinceCounty_traits::create (i, f, this));

            if (!this->StateProvinceCounty_)
            {
              this->StateProvinceCounty_.set (r);
              continue;
            }
          }

          // PostalCode
          //
          if (n.name () == "PostalCode" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PostalCode_type > r (
              PostalCode_traits::create (i, f, this));

            if (!this->PostalCode_)
            {
              this->PostalCode_.set (r);
              continue;
            }
          }

          // Country
          //
          if (n.name () == "Country" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< Country_type > r (
              Country_traits::create (i, f, this));

            if (!this->Country_)
            {
              this->Country_.set (r);
              continue;
            }
          }

          // GeographicalCoordinates
          //
          if (n.name () == "GeographicalCoordinates" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< GeographicalCoordinates_type > r (
              GeographicalCoordinates_traits::create (i, f, this));

            if (!this->GeographicalCoordinates_)
            {
              this->GeographicalCoordinates_.set (r);
              continue;
            }
          }

          // AstronomicalBodyName
          //
          if (n.name () == "AstronomicalBodyName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< AstronomicalBodyName_type > r (
              AstronomicalBodyName_traits::create (i, f, this));

            if (!this->AstronomicalBodyName_)
            {
              this->AstronomicalBodyName_.set (r);
              continue;
            }
          }

          // CommunicationsObjects
          //
          if (n.name () == "CommunicationsObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< CommunicationsObjects_type > r (
              CommunicationsObjects_traits::create (i, f, this));

            if (!this->CommunicationsObjects_)
            {
              this->CommunicationsObjects_.set (r);
              continue;
            }
          }

          // AddressNameValueObjects
          //
          if (n.name () == "AddressNameValueObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< AddressNameValueObjects_type > r (
              AddressNameValueObjects_traits::create (i, f, this));

            if (!this->AddressNameValueObjects_)
            {
              this->AddressNameValueObjects_.set (r);
              continue;
            }
          }

          break;
        }
      }

      AddressType* AddressType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class AddressType (*this, f, c);
      }

      AddressType::
      ~AddressType ()
      {
      }

      // CommunicationsType
      //

      CommunicationsType::
      CommunicationsType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::DMS1ObjectType (InstanceID),
        CentralTelephoneNumber_ (::xml_schema::flags (), this),
        TelephoneNumber_ (::xml_schema::flags (), this),
        MobileTelephoneNumber_ (::xml_schema::flags (), this),
        FaxNumber_ (::xml_schema::flags (), this),
        EmailAddress_ (::xml_schema::flags (), this),
        ContactWebPage_ (::xml_schema::flags (), this)
      {
      }

      CommunicationsType::
      CommunicationsType (const CommunicationsType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::st434::s380m::groups::DMS1ObjectType (x, f, c),
        CentralTelephoneNumber_ (x.CentralTelephoneNumber_, f, this),
        TelephoneNumber_ (x.TelephoneNumber_, f, this),
        MobileTelephoneNumber_ (x.MobileTelephoneNumber_, f, this),
        FaxNumber_ (x.FaxNumber_, f, this),
        EmailAddress_ (x.EmailAddress_, f, this),
        ContactWebPage_ (x.ContactWebPage_, f, this)
      {
      }

      CommunicationsType::
      CommunicationsType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::st434::s380m::groups::DMS1ObjectType (e, f | ::xml_schema::flags::base, c),
        CentralTelephoneNumber_ (f, this),
        TelephoneNumber_ (f, this),
        MobileTelephoneNumber_ (f, this),
        FaxNumber_ (f, this),
        EmailAddress_ (f, this),
        ContactWebPage_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void CommunicationsType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::DMS1ObjectType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // CentralTelephoneNumber
          //
          if (n.name () == "CentralTelephoneNumber" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< CentralTelephoneNumber_type > r (
              CentralTelephoneNumber_traits::create (i, f, this));

            if (!this->CentralTelephoneNumber_)
            {
              this->CentralTelephoneNumber_.set (r);
              continue;
            }
          }

          // TelephoneNumber
          //
          if (n.name () == "TelephoneNumber" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< TelephoneNumber_type > r (
              TelephoneNumber_traits::create (i, f, this));

            if (!this->TelephoneNumber_)
            {
              this->TelephoneNumber_.set (r);
              continue;
            }
          }

          // MobileTelephoneNumber
          //
          if (n.name () == "MobileTelephoneNumber" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< MobileTelephoneNumber_type > r (
              MobileTelephoneNumber_traits::create (i, f, this));

            if (!this->MobileTelephoneNumber_)
            {
              this->MobileTelephoneNumber_.set (r);
              continue;
            }
          }

          // FaxNumber
          //
          if (n.name () == "FaxNumber" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< FaxNumber_type > r (
              FaxNumber_traits::create (i, f, this));

            if (!this->FaxNumber_)
            {
              this->FaxNumber_.set (r);
              continue;
            }
          }

          // EmailAddress
          //
          if (n.name () == "EmailAddress" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EmailAddress_type > r (
              EmailAddress_traits::create (i, f, this));

            if (!this->EmailAddress_)
            {
              this->EmailAddress_.set (r);
              continue;
            }
          }

          // ContactWebPage
          //
          if (n.name () == "ContactWebPage" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ContactWebPage_type > r (
              ContactWebPage_traits::create (i, f, this));

            if (!this->ContactWebPage_)
            {
              this->ContactWebPage_.set (r);
              continue;
            }
          }

          break;
        }
      }

      CommunicationsType* CommunicationsType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class CommunicationsType (*this, f, c);
      }

      CommunicationsType::
      ~CommunicationsType ()
      {
      }

      // ContractType
      //

      ContractType::
      ContractType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::ThesaurusType (InstanceID),
        SupplyContractNumber_ (::xml_schema::flags (), this),
        RightsObjects_ (::xml_schema::flags (), this),
        ContractParticipants_ (::xml_schema::flags (), this)
      {
      }

      ContractType::
      ContractType (const ContractType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (x, f, c),
        SupplyContractNumber_ (x.SupplyContractNumber_, f, this),
        RightsObjects_ (x.RightsObjects_, f, this),
        ContractParticipants_ (x.ContractParticipants_, f, this)
      {
      }

      ContractType::
      ContractType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (e, f | ::xml_schema::flags::base, c),
        SupplyContractNumber_ (f, this),
        RightsObjects_ (f, this),
        ContractParticipants_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void ContractType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::ThesaurusType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SupplyContractNumber
          //
          if (n.name () == "SupplyContractNumber" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SupplyContractNumber_type > r (
              SupplyContractNumber_traits::create (i, f, this));

            if (!this->SupplyContractNumber_)
            {
              this->SupplyContractNumber_.set (r);
              continue;
            }
          }

          // RightsObjects
          //
          if (n.name () == "RightsObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< RightsObjects_type > r (
              RightsObjects_traits::create (i, f, this));

            if (!this->RightsObjects_)
            {
              this->RightsObjects_.set (r);
              continue;
            }
          }

          // ContractParticipants
          //
          if (n.name () == "ContractParticipants" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ContractParticipants_type > r (
              ContractParticipants_traits::create (i, f, this));

            if (!this->ContractParticipants_)
            {
              this->ContractParticipants_.set (r);
              continue;
            }
          }

          break;
        }
      }

      ContractType* ContractType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class ContractType (*this, f, c);
      }

      ContractType::
      ~ContractType ()
      {
      }

      // RightsType
      //

      RightsType::
      RightsType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::ThesaurusType (InstanceID),
        CopyrightOwner_ (::xml_schema::flags (), this),
        Rightsholder_ (::xml_schema::flags (), this),
        RightsManagementAuthority_ (::xml_schema::flags (), this),
        RegionAreaOfIPLicense_ (::xml_schema::flags (), this),
        IntellectualPropertyDescription_ (::xml_schema::flags (), this),
        RightsCondition_ (::xml_schema::flags (), this),
        RightsComment_ (::xml_schema::flags (), this),
        IntellectualPropertyRight_ (::xml_schema::flags (), this),
        RightsStartDateTime_ (::xml_schema::flags (), this),
        RightsStopDateTime_ (::xml_schema::flags (), this),
        MaxNumberOfUsages_ (::xml_schema::flags (), this)
      {
      }

      RightsType::
      RightsType (const RightsType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (x, f, c),
        CopyrightOwner_ (x.CopyrightOwner_, f, this),
        Rightsholder_ (x.Rightsholder_, f, this),
        RightsManagementAuthority_ (x.RightsManagementAuthority_, f, this),
        RegionAreaOfIPLicense_ (x.RegionAreaOfIPLicense_, f, this),
        IntellectualPropertyDescription_ (x.IntellectualPropertyDescription_, f, this),
        RightsCondition_ (x.RightsCondition_, f, this),
        RightsComment_ (x.RightsComment_, f, this),
        IntellectualPropertyRight_ (x.IntellectualPropertyRight_, f, this),
        RightsStartDateTime_ (x.RightsStartDateTime_, f, this),
        RightsStopDateTime_ (x.RightsStopDateTime_, f, this),
        MaxNumberOfUsages_ (x.MaxNumberOfUsages_, f, this)
      {
      }

      RightsType::
      RightsType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (e, f | ::xml_schema::flags::base, c),
        CopyrightOwner_ (f, this),
        Rightsholder_ (f, this),
        RightsManagementAuthority_ (f, this),
        RegionAreaOfIPLicense_ (f, this),
        IntellectualPropertyDescription_ (f, this),
        RightsCondition_ (f, this),
        RightsComment_ (f, this),
        IntellectualPropertyRight_ (f, this),
        RightsStartDateTime_ (f, this),
        RightsStopDateTime_ (f, this),
        MaxNumberOfUsages_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void RightsType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::ThesaurusType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // CopyrightOwner
          //
          if (n.name () == "CopyrightOwner" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< CopyrightOwner_type > r (
              CopyrightOwner_traits::create (i, f, this));

            if (!this->CopyrightOwner_)
            {
              this->CopyrightOwner_.set (r);
              continue;
            }
          }

          // Rightsholder
          //
          if (n.name () == "Rightsholder" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< Rightsholder_type > r (
              Rightsholder_traits::create (i, f, this));

            if (!this->Rightsholder_)
            {
              this->Rightsholder_.set (r);
              continue;
            }
          }

          // RightsManagementAuthority
          //
          if (n.name () == "RightsManagementAuthority" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< RightsManagementAuthority_type > r (
              RightsManagementAuthority_traits::create (i, f, this));

            if (!this->RightsManagementAuthority_)
            {
              this->RightsManagementAuthority_.set (r);
              continue;
            }
          }

          // RegionAreaOfIPLicense
          //
          if (n.name () == "RegionAreaOfIPLicense" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< RegionAreaOfIPLicense_type > r (
              RegionAreaOfIPLicense_traits::create (i, f, this));

            if (!this->RegionAreaOfIPLicense_)
            {
              this->RegionAreaOfIPLicense_.set (r);
              continue;
            }
          }

          // IntellectualPropertyDescription
          //
          if (n.name () == "IntellectualPropertyDescription" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< IntellectualPropertyDescription_type > r (
              IntellectualPropertyDescription_traits::create (i, f, this));

            if (!this->IntellectualPropertyDescription_)
            {
              this->IntellectualPropertyDescription_.set (r);
              continue;
            }
          }

          // RightsCondition
          //
          if (n.name () == "RightsCondition" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< RightsCondition_type > r (
              RightsCondition_traits::create (i, f, this));

            if (!this->RightsCondition_)
            {
              this->RightsCondition_.set (r);
              continue;
            }
          }

          // RightsComment
          //
          if (n.name () == "RightsComment" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< RightsComment_type > r (
              RightsComment_traits::create (i, f, this));

            if (!this->RightsComment_)
            {
              this->RightsComment_.set (r);
              continue;
            }
          }

          // IntellectualPropertyRight
          //
          if (n.name () == "IntellectualPropertyRight" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< IntellectualPropertyRight_type > r (
              IntellectualPropertyRight_traits::create (i, f, this));

            if (!this->IntellectualPropertyRight_)
            {
              this->IntellectualPropertyRight_.set (r);
              continue;
            }
          }

          // RightsStartDateTime
          //
          if (n.name () == "RightsStartDateTime" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< RightsStartDateTime_type > r (
              RightsStartDateTime_traits::create (i, f, this));

            if (!this->RightsStartDateTime_)
            {
              this->RightsStartDateTime_.set (r);
              continue;
            }
          }

          // RightsStopDateTime
          //
          if (n.name () == "RightsStopDateTime" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< RightsStopDateTime_type > r (
              RightsStopDateTime_traits::create (i, f, this));

            if (!this->RightsStopDateTime_)
            {
              this->RightsStopDateTime_.set (r);
              continue;
            }
          }

          // MaxNumberOfUsages
          //
          if (n.name () == "MaxNumberOfUsages" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< MaxNumberOfUsages_type > r (
              MaxNumberOfUsages_traits::create (i, f, this));

            if (!this->MaxNumberOfUsages_)
            {
              this->MaxNumberOfUsages_.set (r);
              continue;
            }
          }

          break;
        }
      }

      RightsType* RightsType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class RightsType (*this, f, c);
      }

      RightsType::
      ~RightsType ()
      {
      }

      // PictureFormatType
      //

      PictureFormatType::
      PictureFormatType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::DMS1ObjectType (InstanceID),
        ViewportAspectRatio_ (::xml_schema::flags (), this),
        PerceivedDisplayFormat_ (::xml_schema::flags (), this),
        ColorDescriptor_ (::xml_schema::flags (), this)
      {
      }

      PictureFormatType::
      PictureFormatType (const PictureFormatType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::st434::s380m::groups::DMS1ObjectType (x, f, c),
        ViewportAspectRatio_ (x.ViewportAspectRatio_, f, this),
        PerceivedDisplayFormat_ (x.PerceivedDisplayFormat_, f, this),
        ColorDescriptor_ (x.ColorDescriptor_, f, this)
      {
      }

      PictureFormatType::
      PictureFormatType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::st434::s380m::groups::DMS1ObjectType (e, f | ::xml_schema::flags::base, c),
        ViewportAspectRatio_ (f, this),
        PerceivedDisplayFormat_ (f, this),
        ColorDescriptor_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void PictureFormatType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::DMS1ObjectType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ViewportAspectRatio
          //
          if (n.name () == "ViewportAspectRatio" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ViewportAspectRatio_type > r (
              ViewportAspectRatio_traits::create (i, f, this));

            if (!this->ViewportAspectRatio_)
            {
              this->ViewportAspectRatio_.set (r);
              continue;
            }
          }

          // PerceivedDisplayFormat
          //
          if (n.name () == "PerceivedDisplayFormat" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PerceivedDisplayFormat_type > r (
              PerceivedDisplayFormat_traits::create (i, f, this));

            if (!this->PerceivedDisplayFormat_)
            {
              this->PerceivedDisplayFormat_.set (r);
              continue;
            }
          }

          // ColorDescriptor
          //
          if (n.name () == "ColorDescriptor" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ColorDescriptor_type > r (
              ColorDescriptor_traits::create (i, f, this));

            if (!this->ColorDescriptor_)
            {
              this->ColorDescriptor_.set (r);
              continue;
            }
          }

          break;
        }
      }

      PictureFormatType* PictureFormatType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class PictureFormatType (*this, f, c);
      }

      PictureFormatType::
      ~PictureFormatType ()
      {
      }

      // DeviceParametersType
      //

      DeviceParametersType::
      DeviceParametersType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::ThesaurusType (InstanceID),
        DeviceKind_ (::xml_schema::flags (), this),
        DeviceDesignation_ (::xml_schema::flags (), this),
        DeviceAssetNumber_ (::xml_schema::flags (), this),
        IEEEDeviceIdentifier_ (::xml_schema::flags (), this),
        DeviceManufacturerName_ (::xml_schema::flags (), this),
        DeviceModel_ (::xml_schema::flags (), this),
        DeviceSerialNumber_ (::xml_schema::flags (), this),
        DeviceUsageDescription_ (::xml_schema::flags (), this),
        DeviceParametersNameValueObjects_ (::xml_schema::flags (), this)
      {
      }

      DeviceParametersType::
      DeviceParametersType (const DeviceParametersType& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (x, f, c),
        DeviceKind_ (x.DeviceKind_, f, this),
        DeviceDesignation_ (x.DeviceDesignation_, f, this),
        DeviceAssetNumber_ (x.DeviceAssetNumber_, f, this),
        IEEEDeviceIdentifier_ (x.IEEEDeviceIdentifier_, f, this),
        DeviceManufacturerName_ (x.DeviceManufacturerName_, f, this),
        DeviceModel_ (x.DeviceModel_, f, this),
        DeviceSerialNumber_ (x.DeviceSerialNumber_, f, this),
        DeviceUsageDescription_ (x.DeviceUsageDescription_, f, this),
        DeviceParametersNameValueObjects_ (x.DeviceParametersNameValueObjects_, f, this)
      {
      }

      DeviceParametersType::
      DeviceParametersType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
      : ::st434::s380m::groups::ThesaurusType (e, f | ::xml_schema::flags::base, c),
        DeviceKind_ (f, this),
        DeviceDesignation_ (f, this),
        DeviceAssetNumber_ (f, this),
        IEEEDeviceIdentifier_ (f, this),
        DeviceManufacturerName_ (f, this),
        DeviceModel_ (f, this),
        DeviceSerialNumber_ (f, this),
        DeviceUsageDescription_ (f, this),
        DeviceParametersNameValueObjects_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void DeviceParametersType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::ThesaurusType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // DeviceKind
          //
          if (n.name () == "DeviceKind" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DeviceKind_type > r (
              DeviceKind_traits::create (i, f, this));

            if (!this->DeviceKind_)
            {
              this->DeviceKind_.set (r);
              continue;
            }
          }

          // DeviceDesignation
          //
          if (n.name () == "DeviceDesignation" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DeviceDesignation_type > r (
              DeviceDesignation_traits::create (i, f, this));

            if (!this->DeviceDesignation_)
            {
              this->DeviceDesignation_.set (r);
              continue;
            }
          }

          // DeviceAssetNumber
          //
          if (n.name () == "DeviceAssetNumber" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DeviceAssetNumber_type > r (
              DeviceAssetNumber_traits::create (i, f, this));

            if (!this->DeviceAssetNumber_)
            {
              this->DeviceAssetNumber_.set (r);
              continue;
            }
          }

          // IEEEDeviceIdentifier
          //
          if (n.name () == "IEEEDeviceIdentifier" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< IEEEDeviceIdentifier_type > r (
              IEEEDeviceIdentifier_traits::create (i, f, this));

            if (!this->IEEEDeviceIdentifier_)
            {
              this->IEEEDeviceIdentifier_.set (r);
              continue;
            }
          }

          // DeviceManufacturerName
          //
          if (n.name () == "DeviceManufacturerName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DeviceManufacturerName_type > r (
              DeviceManufacturerName_traits::create (i, f, this));

            if (!this->DeviceManufacturerName_)
            {
              this->DeviceManufacturerName_.set (r);
              continue;
            }
          }

          // DeviceModel
          //
          if (n.name () == "DeviceModel" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DeviceModel_type > r (
              DeviceModel_traits::create (i, f, this));

            if (!this->DeviceModel_)
            {
              this->DeviceModel_.set (r);
              continue;
            }
          }

          // DeviceSerialNumber
          //
          if (n.name () == "DeviceSerialNumber" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DeviceSerialNumber_type > r (
              DeviceSerialNumber_traits::create (i, f, this));

            if (!this->DeviceSerialNumber_)
            {
              this->DeviceSerialNumber_.set (r);
              continue;
            }
          }

          // DeviceUsageDescription
          //
          if (n.name () == "DeviceUsageDescription" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DeviceUsageDescription_type > r (
              DeviceUsageDescription_traits::create (i, f, this));

            if (!this->DeviceUsageDescription_)
            {
              this->DeviceUsageDescription_.set (r);
              continue;
            }
          }

          // DeviceParametersNameValueObjects
          //
          if (n.name () == "DeviceParametersNameValueObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DeviceParametersNameValueObjects_type > r (
              DeviceParametersNameValueObjects_traits::create (i, f, this));

            if (!this->DeviceParametersNameValueObjects_)
            {
              this->DeviceParametersNameValueObjects_.set (r);
              continue;
            }
          }

          break;
        }
      }

      DeviceParametersType* DeviceParametersType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class DeviceParametersType (*this, f, c);
      }

      DeviceParametersType::
      ~DeviceParametersType ()
      {
      }

      // NameValueType
      //

      NameValueType::
      NameValueType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::DMS1ObjectType (InstanceID),
        ItemName_ (::xml_schema::flags (), this),
        ItemValue_ (::xml_schema::flags (), this),
        SMPTEUniversalLabelLocator_ (::xml_schema::flags (), this)
      {
      }

      NameValueType::
      NameValueType (const NameValueType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::st434::s380m::groups::DMS1ObjectType (x, f, c),
        ItemName_ (x.ItemName_, f, this),
        ItemValue_ (x.ItemValue_, f, this),
        SMPTEUniversalLabelLocator_ (x.SMPTEUniversalLabelLocator_, f, this)
      {
      }

      NameValueType::
      NameValueType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::st434::s380m::groups::DMS1ObjectType (e, f | ::xml_schema::flags::base, c),
        ItemName_ (f, this),
        ItemValue_ (f, this),
        SMPTEUniversalLabelLocator_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void NameValueType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::DMS1ObjectType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ItemName
          //
          if (n.name () == "ItemName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ItemName_type > r (
              ItemName_traits::create (i, f, this));

            if (!this->ItemName_)
            {
              this->ItemName_.set (r);
              continue;
            }
          }

          // ItemValue
          //
          if (n.name () == "ItemValue" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ItemValue_type > r (
              ItemValue_traits::create (i, f, this));

            if (!this->ItemValue_)
            {
              this->ItemValue_.set (r);
              continue;
            }
          }

          // SMPTEUniversalLabelLocator
          //
          if (n.name () == "SMPTEUniversalLabelLocator" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SMPTEUniversalLabelLocator_type > r (
              SMPTEUniversalLabelLocator_traits::create (i, f, this));

            if (!this->SMPTEUniversalLabelLocator_)
            {
              this->SMPTEUniversalLabelLocator_.set (r);
              continue;
            }
          }

          break;
        }
      }

      NameValueType* NameValueType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class NameValueType (*this, f, c);
      }

      NameValueType::
      ~NameValueType ()
      {
      }

      // ProcessingType
      //

      ProcessingType::
      ProcessingType (const InstanceID_type& InstanceID,
                      const GenerationCopyNumber_type& GenerationCopyNumber,
                      const GenerationCloneNumber_type& GenerationCloneNumber)
      : ::st434::s380m::groups::DMS1ObjectType (InstanceID),
        QualityFlag_ (::xml_schema::flags (), this),
        DescriptiveComment_ (::xml_schema::flags (), this),
        GraphicUsage_ (::xml_schema::flags (), this),
        LogoFlag_ (::xml_schema::flags (), this),
        SimpleFlagging_ (::xml_schema::flags (), this),
        GenerationCopyNumber_ (GenerationCopyNumber, ::xml_schema::flags (), this),
        GenerationCloneNumber_ (GenerationCloneNumber, ::xml_schema::flags (), this)
      {
      }

      ProcessingType::
      ProcessingType (const ProcessingType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::st434::s380m::groups::DMS1ObjectType (x, f, c),
        QualityFlag_ (x.QualityFlag_, f, this),
        DescriptiveComment_ (x.DescriptiveComment_, f, this),
        GraphicUsage_ (x.GraphicUsage_, f, this),
        LogoFlag_ (x.LogoFlag_, f, this),
        SimpleFlagging_ (x.SimpleFlagging_, f, this),
        GenerationCopyNumber_ (x.GenerationCopyNumber_, f, this),
        GenerationCloneNumber_ (x.GenerationCloneNumber_, f, this)
      {
      }

      ProcessingType::
      ProcessingType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::st434::s380m::groups::DMS1ObjectType (e, f | ::xml_schema::flags::base, c),
        QualityFlag_ (f, this),
        DescriptiveComment_ (f, this),
        GraphicUsage_ (f, this),
        LogoFlag_ (f, this),
        SimpleFlagging_ (f, this),
        GenerationCopyNumber_ (f, this),
        GenerationCloneNumber_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void ProcessingType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::DMS1ObjectType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // QualityFlag
          //
          if (n.name () == "QualityFlag" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< QualityFlag_type > r (
              QualityFlag_traits::create (i, f, this));

            if (!this->QualityFlag_)
            {
              this->QualityFlag_.set (r);
              continue;
            }
          }

          // DescriptiveComment
          //
          if (n.name () == "DescriptiveComment" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DescriptiveComment_type > r (
              DescriptiveComment_traits::create (i, f, this));

            if (!this->DescriptiveComment_)
            {
              this->DescriptiveComment_.set (r);
              continue;
            }
          }

          // GraphicUsage
          //
          if (n.name () == "GraphicUsage" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< GraphicUsage_type > r (
              GraphicUsage_traits::create (i, f, this));

            if (!this->GraphicUsage_)
            {
              this->GraphicUsage_.set (r);
              continue;
            }
          }

          // LogoFlag
          //
          if (n.name () == "LogoFlag" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< LogoFlag_type > r (
              LogoFlag_traits::create (i, f, this));

            if (!this->LogoFlag_)
            {
              this->LogoFlag_.set (r);
              continue;
            }
          }

          // SimpleFlagging
          //
          if (n.name () == "SimpleFlagging" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SimpleFlagging_type > r (
              SimpleFlagging_traits::create (i, f, this));

            if (!this->SimpleFlagging_)
            {
              this->SimpleFlagging_.set (r);
              continue;
            }
          }

          // GenerationCopyNumber
          //
          if (n.name () == "GenerationCopyNumber" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< GenerationCopyNumber_type > r (
              GenerationCopyNumber_traits::create (i, f, this));

            if (!GenerationCopyNumber_.present ())
            {
              this->GenerationCopyNumber_.set (r);
              continue;
            }
          }

          // GenerationCloneNumber
          //
          if (n.name () == "GenerationCloneNumber" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< GenerationCloneNumber_type > r (
              GenerationCloneNumber_traits::create (i, f, this));

            if (!GenerationCloneNumber_.present ())
            {
              this->GenerationCloneNumber_.set (r);
              continue;
            }
          }

          break;
        }

        if (!GenerationCopyNumber_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "GenerationCopyNumber",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!GenerationCloneNumber_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "GenerationCloneNumber",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      ProcessingType* ProcessingType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class ProcessingType (*this, f, c);
      }

      ProcessingType::
      ~ProcessingType ()
      {
      }

      // ProjectType
      //

      ProjectType::
      ProjectType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::DMS1ObjectType (InstanceID),
        ProjectNumber_ (::xml_schema::flags (), this),
        ProjectName_ (::xml_schema::flags (), this)
      {
      }

      ProjectType::
      ProjectType (const ProjectType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::st434::s380m::groups::DMS1ObjectType (x, f, c),
        ProjectNumber_ (x.ProjectNumber_, f, this),
        ProjectName_ (x.ProjectName_, f, this)
      {
      }

      ProjectType::
      ProjectType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::st434::s380m::groups::DMS1ObjectType (e, f | ::xml_schema::flags::base, c),
        ProjectNumber_ (f, this),
        ProjectName_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void ProjectType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::DMS1ObjectType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ProjectNumber
          //
          if (n.name () == "ProjectNumber" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ProjectNumber_type > r (
              ProjectNumber_traits::create (i, f, this));

            if (!this->ProjectNumber_)
            {
              this->ProjectNumber_.set (r);
              continue;
            }
          }

          // ProjectName
          //
          if (n.name () == "ProjectName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ProjectName_type > r (
              ProjectName_traits::create (i, f, this));

            if (!this->ProjectName_)
            {
              this->ProjectName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      ProjectType* ProjectType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class ProjectType (*this, f, c);
      }

      ProjectType::
      ~ProjectType ()
      {
      }

      // ContactsListType
      //

      ContactsListType::
      ContactsListType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::DMS1ObjectType (InstanceID),
        PersonObjects_ (::xml_schema::flags (), this),
        OrganizationObjects_ (::xml_schema::flags (), this),
        LocationObjects_ (::xml_schema::flags (), this)
      {
      }

      ContactsListType::
      ContactsListType (const ContactsListType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
      : ::st434::s380m::groups::DMS1ObjectType (x, f, c),
        PersonObjects_ (x.PersonObjects_, f, this),
        OrganizationObjects_ (x.OrganizationObjects_, f, this),
        LocationObjects_ (x.LocationObjects_, f, this)
      {
      }

      ContactsListType::
      ContactsListType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
      : ::st434::s380m::groups::DMS1ObjectType (e, f | ::xml_schema::flags::base, c),
        PersonObjects_ (f, this),
        OrganizationObjects_ (f, this),
        LocationObjects_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void ContactsListType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::DMS1ObjectType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PersonObjects
          //
          if (n.name () == "PersonObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PersonObjects_type > r (
              PersonObjects_traits::create (i, f, this));

            if (!this->PersonObjects_)
            {
              this->PersonObjects_.set (r);
              continue;
            }
          }

          // OrganizationObjects
          //
          if (n.name () == "OrganizationObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< OrganizationObjects_type > r (
              OrganizationObjects_traits::create (i, f, this));

            if (!this->OrganizationObjects_)
            {
              this->OrganizationObjects_.set (r);
              continue;
            }
          }

          // LocationObjects
          //
          if (n.name () == "LocationObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< LocationObjects_type > r (
              LocationObjects_traits::create (i, f, this));

            if (!this->LocationObjects_)
            {
              this->LocationObjects_.set (r);
              continue;
            }
          }

          break;
        }
      }

      ContactsListType* ContactsListType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class ContactsListType (*this, f, c);
      }

      ContactsListType::
      ~ContactsListType ()
      {
      }

      // CueWordsType
      //

      CueWordsType::
      CueWordsType (const InstanceID_type& InstanceID)
      : ::st434::s380m::groups::TextLanguageType (InstanceID),
        InCueWords_ (::xml_schema::flags (), this),
        OutCueWords_ (::xml_schema::flags (), this)
      {
      }

      CueWordsType::
      CueWordsType (const CueWordsType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::st434::s380m::groups::TextLanguageType (x, f, c),
        InCueWords_ (x.InCueWords_, f, this),
        OutCueWords_ (x.OutCueWords_, f, this)
      {
      }

      CueWordsType::
      CueWordsType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::st434::s380m::groups::TextLanguageType (e, f | ::xml_schema::flags::base, c),
        InCueWords_ (f, this),
        OutCueWords_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void CueWordsType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s380m::groups::TextLanguageType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // InCueWords
          //
          if (n.name () == "InCueWords" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< InCueWords_type > r (
              InCueWords_traits::create (i, f, this));

            if (!this->InCueWords_)
            {
              this->InCueWords_.set (r);
              continue;
            }
          }

          // OutCueWords
          //
          if (n.name () == "OutCueWords" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< OutCueWords_type > r (
              OutCueWords_traits::create (i, f, this));

            if (!this->OutCueWords_)
            {
              this->OutCueWords_.set (r);
              continue;
            }
          }

          break;
        }
      }

      CueWordsType* CueWordsType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class CueWordsType (*this, f, c);
      }

      CueWordsType::
      ~CueWordsType ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace st434
{
  namespace s380m
  {
    namespace groups
    {
      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::ProductionFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::ProductionFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::ProductionFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::ProductionFramework_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::ProductionFramework_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::ProductionFramework_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::ProductionFramework_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::ProductionFramework_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::ProductionFramework_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::ProductionFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::ProductionFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::ProductionFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::ProductionFramework_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ProductionFramework_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ProductionFramework_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ProductionFramework_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ProductionFramework_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ProductionFramework_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType > r (
          ::st434::s380m::groups::ProductionFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType > r (
          ::st434::s380m::groups::ProductionFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType > r (
          ::st434::s380m::groups::ProductionFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::ProductionFramework (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::ProductionFramework (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::ProductionFramework (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::ProductionFramework (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::ProductionFramework (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::ProductionFramework (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType > r (
          ::st434::s380m::groups::ProductionFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType > r (
          ::st434::s380m::groups::ProductionFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType > r (
          ::st434::s380m::groups::ProductionFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType > r (
            ::st434::s380m::groups::ProductionFramework (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ProductionFramework" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::ProductionFrameworkType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ProductionFramework",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType >
      ProductionFramework (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ProductionFramework" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::ProductionFrameworkType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::ProductionFrameworkType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ProductionFramework",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::ClipFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::ClipFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::ClipFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::ClipFramework_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::ClipFramework_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::ClipFramework_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::ClipFramework_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::ClipFramework_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::ClipFramework_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::ClipFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::ClipFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::ClipFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::ClipFramework_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ClipFramework_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ClipFramework_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ClipFramework_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ClipFramework_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ClipFramework_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType > r (
          ::st434::s380m::groups::ClipFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType > r (
          ::st434::s380m::groups::ClipFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType > r (
          ::st434::s380m::groups::ClipFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::ClipFramework (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::ClipFramework (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::ClipFramework (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::ClipFramework (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::ClipFramework (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::ClipFramework (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType > r (
          ::st434::s380m::groups::ClipFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType > r (
          ::st434::s380m::groups::ClipFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType > r (
          ::st434::s380m::groups::ClipFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType > r (
            ::st434::s380m::groups::ClipFramework (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ClipFramework" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::ClipFrameworkType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ClipFramework",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType >
      ClipFramework (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ClipFramework" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::ClipFrameworkType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::ClipFrameworkType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ClipFramework",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::SceneFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::SceneFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::SceneFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::SceneFramework_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::SceneFramework_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::SceneFramework_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::SceneFramework_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::SceneFramework_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::SceneFramework_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::SceneFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::SceneFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::SceneFramework_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::SceneFramework_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SceneFramework_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SceneFramework_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SceneFramework_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SceneFramework_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SceneFramework_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType > r (
          ::st434::s380m::groups::SceneFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType > r (
          ::st434::s380m::groups::SceneFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType > r (
          ::st434::s380m::groups::SceneFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::SceneFramework (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::SceneFramework (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::SceneFramework (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::SceneFramework (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::SceneFramework (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::SceneFramework (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType > r (
          ::st434::s380m::groups::SceneFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType > r (
          ::st434::s380m::groups::SceneFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType > r (
          ::st434::s380m::groups::SceneFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType > r (
            ::st434::s380m::groups::SceneFramework (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SceneFramework" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::SceneFrameworkType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SceneFramework",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType >
      SceneFramework (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SceneFramework" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::SceneFrameworkType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::SceneFrameworkType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SceneFramework",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Titles_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Titles_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Titles_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Titles_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Titles_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Titles_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Titles_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Titles_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Titles_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Titles_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Titles_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Titles_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::Titles_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Titles_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Titles_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Titles_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Titles_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Titles_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::TitlesType > r (
          ::st434::s380m::groups::Titles (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::TitlesType > r (
          ::st434::s380m::groups::Titles (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::TitlesType > r (
          ::st434::s380m::groups::Titles (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Titles (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Titles (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Titles (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Titles (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Titles (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Titles (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::TitlesType > r (
          ::st434::s380m::groups::Titles (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::TitlesType > r (
          ::st434::s380m::groups::Titles (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::TitlesType > r (
          ::st434::s380m::groups::Titles (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::TitlesType > r (
            ::st434::s380m::groups::Titles (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Titles" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::TitlesType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::TitlesType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Titles",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::TitlesType >
      Titles (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Titles" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::TitlesType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::TitlesType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Titles",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DMS1Identification_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DMS1Identification_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DMS1Identification_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DMS1Identification_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DMS1Identification_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DMS1Identification_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DMS1Identification_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DMS1Identification_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DMS1Identification_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DMS1Identification_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DMS1Identification_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DMS1Identification_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::DMS1Identification_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DMS1Identification_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DMS1Identification_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Identification_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DMS1Identification_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DMS1Identification_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType > r (
          ::st434::s380m::groups::DMS1Identification (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType > r (
          ::st434::s380m::groups::DMS1Identification (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType > r (
          ::st434::s380m::groups::DMS1Identification (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DMS1Identification (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DMS1Identification (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DMS1Identification (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DMS1Identification (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DMS1Identification (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DMS1Identification (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType > r (
          ::st434::s380m::groups::DMS1Identification (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType > r (
          ::st434::s380m::groups::DMS1Identification (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType > r (
          ::st434::s380m::groups::DMS1Identification (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType > r (
            ::st434::s380m::groups::DMS1Identification (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DMS1Identification" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::DMS1IdentificationType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DMS1Identification",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType >
      DMS1Identification (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DMS1Identification" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::DMS1IdentificationType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::DMS1IdentificationType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DMS1Identification",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::GroupRelationship_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::GroupRelationship_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::GroupRelationship_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::GroupRelationship_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::GroupRelationship_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::GroupRelationship_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::GroupRelationship_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::GroupRelationship_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::GroupRelationship_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::GroupRelationship_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::GroupRelationship_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::GroupRelationship_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::GroupRelationship_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "GroupRelationship_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "GroupRelationship_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      GroupRelationship_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "GroupRelationship_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "GroupRelationship_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType > r (
          ::st434::s380m::groups::GroupRelationship (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType > r (
          ::st434::s380m::groups::GroupRelationship (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType > r (
          ::st434::s380m::groups::GroupRelationship (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::GroupRelationship (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::GroupRelationship (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::GroupRelationship (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::GroupRelationship (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::GroupRelationship (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::GroupRelationship (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType > r (
          ::st434::s380m::groups::GroupRelationship (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType > r (
          ::st434::s380m::groups::GroupRelationship (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType > r (
          ::st434::s380m::groups::GroupRelationship (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType > r (
            ::st434::s380m::groups::GroupRelationship (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "GroupRelationship" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::GroupRelationshipType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "GroupRelationship",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType >
      GroupRelationship (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "GroupRelationship" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::GroupRelationshipType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::GroupRelationshipType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "GroupRelationship",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Branding_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Branding_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Branding_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Branding_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Branding_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Branding_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Branding_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Branding_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Branding_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Branding_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Branding_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Branding_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::Branding_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Branding_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Branding_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Branding_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Branding_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Branding_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::BrandingType > r (
          ::st434::s380m::groups::Branding (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::BrandingType > r (
          ::st434::s380m::groups::Branding (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::BrandingType > r (
          ::st434::s380m::groups::Branding (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Branding (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Branding (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Branding (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Branding (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Branding (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Branding (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::BrandingType > r (
          ::st434::s380m::groups::Branding (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::BrandingType > r (
          ::st434::s380m::groups::Branding (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::BrandingType > r (
          ::st434::s380m::groups::Branding (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::BrandingType > r (
            ::st434::s380m::groups::Branding (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Branding" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::BrandingType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::BrandingType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Branding",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::BrandingType >
      Branding (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Branding" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::BrandingType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::BrandingType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Branding",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DMS1Event_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DMS1Event_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DMS1Event_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DMS1Event_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DMS1Event_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DMS1Event_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DMS1Event_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DMS1Event_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DMS1Event_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DMS1Event_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DMS1Event_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DMS1Event_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::DMS1Event_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DMS1Event_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DMS1Event_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Event_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DMS1Event_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DMS1Event_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType > r (
          ::st434::s380m::groups::DMS1Event (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType > r (
          ::st434::s380m::groups::DMS1Event (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType > r (
          ::st434::s380m::groups::DMS1Event (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DMS1Event (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DMS1Event (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DMS1Event (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DMS1Event (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DMS1Event (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DMS1Event (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType > r (
          ::st434::s380m::groups::DMS1Event (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType > r (
          ::st434::s380m::groups::DMS1Event (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType > r (
          ::st434::s380m::groups::DMS1Event (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType > r (
            ::st434::s380m::groups::DMS1Event (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DMS1Event" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::DMS1EventType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DMS1Event",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType >
      DMS1Event (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DMS1Event" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::DMS1EventType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::DMS1EventType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DMS1Event",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Publication_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Publication_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Publication_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Publication_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Publication_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Publication_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Publication_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Publication_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Publication_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Publication_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Publication_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Publication_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::Publication_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Publication_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Publication_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Publication_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Publication_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Publication_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::PublicationType > r (
          ::st434::s380m::groups::Publication (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::PublicationType > r (
          ::st434::s380m::groups::Publication (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::PublicationType > r (
          ::st434::s380m::groups::Publication (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Publication (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Publication (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Publication (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Publication (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Publication (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Publication (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::PublicationType > r (
          ::st434::s380m::groups::Publication (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::PublicationType > r (
          ::st434::s380m::groups::Publication (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::PublicationType > r (
          ::st434::s380m::groups::Publication (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::PublicationType > r (
            ::st434::s380m::groups::Publication (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Publication" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::PublicationType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::PublicationType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Publication",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::PublicationType >
      Publication (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Publication" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::PublicationType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::PublicationType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Publication",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Award_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Award_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Award_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Award_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Award_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Award_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Award_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Award_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Award_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Award_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Award_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Award_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::Award_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Award_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Award_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Award_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Award_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Award_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::AwardType > r (
          ::st434::s380m::groups::Award (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::AwardType > r (
          ::st434::s380m::groups::Award (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::AwardType > r (
          ::st434::s380m::groups::Award (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Award (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Award (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Award (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Award (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Award (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Award (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::AwardType > r (
          ::st434::s380m::groups::Award (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::AwardType > r (
          ::st434::s380m::groups::Award (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::AwardType > r (
          ::st434::s380m::groups::Award (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::AwardType > r (
            ::st434::s380m::groups::Award (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Award" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::AwardType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::AwardType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Award",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::AwardType >
      Award (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Award" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::AwardType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::AwardType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Award",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::CaptionsDescription_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::CaptionsDescription_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::CaptionsDescription_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::CaptionsDescription_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::CaptionsDescription_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::CaptionsDescription_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::CaptionsDescription_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::CaptionsDescription_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::CaptionsDescription_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::CaptionsDescription_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::CaptionsDescription_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::CaptionsDescription_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::CaptionsDescription_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CaptionsDescription_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CaptionsDescription_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CaptionsDescription_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "CaptionsDescription_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CaptionsDescription_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType > r (
          ::st434::s380m::groups::CaptionsDescription (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType > r (
          ::st434::s380m::groups::CaptionsDescription (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType > r (
          ::st434::s380m::groups::CaptionsDescription (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::CaptionsDescription (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::CaptionsDescription (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::CaptionsDescription (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::CaptionsDescription (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::CaptionsDescription (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::CaptionsDescription (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType > r (
          ::st434::s380m::groups::CaptionsDescription (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType > r (
          ::st434::s380m::groups::CaptionsDescription (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType > r (
          ::st434::s380m::groups::CaptionsDescription (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType > r (
            ::st434::s380m::groups::CaptionsDescription (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CaptionsDescription" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::CaptionsDescriptionType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CaptionsDescription",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType >
      CaptionsDescription (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "CaptionsDescription" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::CaptionsDescriptionType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::CaptionsDescriptionType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CaptionsDescription",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DMS1Annotation_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DMS1Annotation_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DMS1Annotation_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DMS1Annotation_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DMS1Annotation_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DMS1Annotation_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DMS1Annotation_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DMS1Annotation_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DMS1Annotation_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DMS1Annotation_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DMS1Annotation_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DMS1Annotation_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::DMS1Annotation_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DMS1Annotation_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DMS1Annotation_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DMS1Annotation_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DMS1Annotation_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DMS1Annotation_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType > r (
          ::st434::s380m::groups::DMS1Annotation (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType > r (
          ::st434::s380m::groups::DMS1Annotation (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType > r (
          ::st434::s380m::groups::DMS1Annotation (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DMS1Annotation (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DMS1Annotation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DMS1Annotation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DMS1Annotation (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DMS1Annotation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DMS1Annotation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType > r (
          ::st434::s380m::groups::DMS1Annotation (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType > r (
          ::st434::s380m::groups::DMS1Annotation (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType > r (
          ::st434::s380m::groups::DMS1Annotation (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType > r (
            ::st434::s380m::groups::DMS1Annotation (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DMS1Annotation" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::DMS1AnnotationType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DMS1Annotation",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType >
      DMS1Annotation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DMS1Annotation" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::DMS1AnnotationType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::DMS1AnnotationType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DMS1Annotation",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::SettingPeriod_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::SettingPeriod_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::SettingPeriod_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::SettingPeriod_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::SettingPeriod_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::SettingPeriod_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::SettingPeriod_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::SettingPeriod_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::SettingPeriod_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::SettingPeriod_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::SettingPeriod_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::SettingPeriod_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::SettingPeriod_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SettingPeriod_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SettingPeriod_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SettingPeriod_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SettingPeriod_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SettingPeriod_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType > r (
          ::st434::s380m::groups::SettingPeriod (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType > r (
          ::st434::s380m::groups::SettingPeriod (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType > r (
          ::st434::s380m::groups::SettingPeriod (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::SettingPeriod (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::SettingPeriod (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::SettingPeriod (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::SettingPeriod (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::SettingPeriod (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::SettingPeriod (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType > r (
          ::st434::s380m::groups::SettingPeriod (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType > r (
          ::st434::s380m::groups::SettingPeriod (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType > r (
          ::st434::s380m::groups::SettingPeriod (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType > r (
            ::st434::s380m::groups::SettingPeriod (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SettingPeriod" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::SettingPeriodType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SettingPeriod",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType >
      SettingPeriod (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SettingPeriod" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::SettingPeriodType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::SettingPeriodType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SettingPeriod",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Scripting_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Scripting_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Scripting_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Scripting_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Scripting_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Scripting_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Scripting_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Scripting_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Scripting_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Scripting_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Scripting_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Scripting_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::Scripting_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Scripting_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Scripting_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Scripting_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Scripting_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Scripting_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::ScriptingType > r (
          ::st434::s380m::groups::Scripting (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ScriptingType > r (
          ::st434::s380m::groups::Scripting (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ScriptingType > r (
          ::st434::s380m::groups::Scripting (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Scripting (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Scripting (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Scripting (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Scripting (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Scripting (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Scripting (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::ScriptingType > r (
          ::st434::s380m::groups::Scripting (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ScriptingType > r (
          ::st434::s380m::groups::Scripting (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ScriptingType > r (
          ::st434::s380m::groups::Scripting (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::ScriptingType > r (
            ::st434::s380m::groups::Scripting (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Scripting" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::ScriptingType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::ScriptingType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Scripting",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::ScriptingType >
      Scripting (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Scripting" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::ScriptingType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::ScriptingType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Scripting",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Classification_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Classification_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Classification_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Classification_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Classification_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Classification_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Classification_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Classification_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Classification_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Classification_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Classification_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Classification_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::Classification_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Classification_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Classification_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Classification_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Classification_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Classification_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::ClassificationType > r (
          ::st434::s380m::groups::Classification (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ClassificationType > r (
          ::st434::s380m::groups::Classification (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ClassificationType > r (
          ::st434::s380m::groups::Classification (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Classification (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Classification (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Classification (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Classification (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Classification (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Classification (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::ClassificationType > r (
          ::st434::s380m::groups::Classification (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ClassificationType > r (
          ::st434::s380m::groups::Classification (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ClassificationType > r (
          ::st434::s380m::groups::Classification (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::ClassificationType > r (
            ::st434::s380m::groups::Classification (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Classification" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::ClassificationType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::ClassificationType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Classification",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::ClassificationType >
      Classification (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Classification" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::ClassificationType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::ClassificationType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Classification",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Shot_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Shot_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Shot_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Shot_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Shot_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Shot_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Shot_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Shot_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Shot_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Shot_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Shot_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Shot_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::Shot_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Shot_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Shot_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Shot_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Shot_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Shot_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::ShotType > r (
          ::st434::s380m::groups::Shot (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ShotType > r (
          ::st434::s380m::groups::Shot (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ShotType > r (
          ::st434::s380m::groups::Shot (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Shot (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Shot (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Shot (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Shot (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Shot (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Shot (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::ShotType > r (
          ::st434::s380m::groups::Shot (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ShotType > r (
          ::st434::s380m::groups::Shot (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ShotType > r (
          ::st434::s380m::groups::Shot (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::ShotType > r (
            ::st434::s380m::groups::Shot (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Shot" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::ShotType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::ShotType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Shot",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::ShotType >
      Shot (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Shot" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::ShotType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::ShotType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Shot",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Keypoint_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Keypoint_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Keypoint_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Keypoint_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Keypoint_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Keypoint_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Keypoint_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Keypoint_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Keypoint_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Keypoint_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Keypoint_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Keypoint_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::Keypoint_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Keypoint_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Keypoint_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Keypoint_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Keypoint_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Keypoint_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::KeypointType > r (
          ::st434::s380m::groups::Keypoint (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::KeypointType > r (
          ::st434::s380m::groups::Keypoint (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::KeypointType > r (
          ::st434::s380m::groups::Keypoint (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Keypoint (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Keypoint (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Keypoint (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Keypoint (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Keypoint (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Keypoint (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::KeypointType > r (
          ::st434::s380m::groups::Keypoint (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::KeypointType > r (
          ::st434::s380m::groups::Keypoint (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::KeypointType > r (
          ::st434::s380m::groups::Keypoint (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::KeypointType > r (
            ::st434::s380m::groups::Keypoint (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Keypoint" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::KeypointType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::KeypointType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Keypoint",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::KeypointType >
      Keypoint (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Keypoint" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::KeypointType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::KeypointType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Keypoint",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Participant_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Participant_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Participant_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Participant_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Participant_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Participant_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Participant_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Participant_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Participant_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Participant_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Participant_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Participant_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::Participant_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Participant_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Participant_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Participant_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Participant_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Participant_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::ParticipantType > r (
          ::st434::s380m::groups::Participant (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ParticipantType > r (
          ::st434::s380m::groups::Participant (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ParticipantType > r (
          ::st434::s380m::groups::Participant (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Participant (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Participant (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Participant (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Participant (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Participant (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Participant (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::ParticipantType > r (
          ::st434::s380m::groups::Participant (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ParticipantType > r (
          ::st434::s380m::groups::Participant (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ParticipantType > r (
          ::st434::s380m::groups::Participant (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::ParticipantType > r (
            ::st434::s380m::groups::Participant (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Participant" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::ParticipantType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::ParticipantType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Participant",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::ParticipantType >
      Participant (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Participant" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::ParticipantType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::ParticipantType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Participant",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Person_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Person_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Person_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Person_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Person_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Person_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Person_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Person_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Person_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Person_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Person_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Person_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::Person_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Person_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Person_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Person_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Person_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Person_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::PersonType > r (
          ::st434::s380m::groups::Person (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::PersonType > r (
          ::st434::s380m::groups::Person (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::PersonType > r (
          ::st434::s380m::groups::Person (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Person (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Person (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Person (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Person (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Person (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Person (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::PersonType > r (
          ::st434::s380m::groups::Person (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::PersonType > r (
          ::st434::s380m::groups::Person (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::PersonType > r (
          ::st434::s380m::groups::Person (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::PersonType > r (
            ::st434::s380m::groups::Person (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Person" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::PersonType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::PersonType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Person",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::PersonType >
      Person (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Person" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::PersonType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::PersonType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Person",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Organization_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Organization_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Organization_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Organization_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Organization_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Organization_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Organization_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Organization_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Organization_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Organization_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Organization_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Organization_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::Organization_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Organization_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Organization_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Organization_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Organization_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Organization_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::OrganizationType > r (
          ::st434::s380m::groups::Organization (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::OrganizationType > r (
          ::st434::s380m::groups::Organization (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::OrganizationType > r (
          ::st434::s380m::groups::Organization (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Organization (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Organization (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Organization (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Organization (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Organization (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Organization (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::OrganizationType > r (
          ::st434::s380m::groups::Organization (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::OrganizationType > r (
          ::st434::s380m::groups::Organization (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::OrganizationType > r (
          ::st434::s380m::groups::Organization (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::OrganizationType > r (
            ::st434::s380m::groups::Organization (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Organization" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::OrganizationType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::OrganizationType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Organization",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::OrganizationType >
      Organization (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Organization" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::OrganizationType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::OrganizationType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Organization",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Location_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Location_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Location_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Location_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Location_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Location_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Location_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Location_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Location_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Location_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Location_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Location_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::Location_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Location_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Location_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Location_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Location_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Location_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::LocationType > r (
          ::st434::s380m::groups::Location (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::LocationType > r (
          ::st434::s380m::groups::Location (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::LocationType > r (
          ::st434::s380m::groups::Location (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Location (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Location (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Location (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Location (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Location (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Location (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::LocationType > r (
          ::st434::s380m::groups::Location (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::LocationType > r (
          ::st434::s380m::groups::Location (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::LocationType > r (
          ::st434::s380m::groups::Location (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::LocationType > r (
            ::st434::s380m::groups::Location (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Location" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::LocationType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::LocationType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Location",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::LocationType >
      Location (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Location" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::LocationType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::LocationType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Location",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Address_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Address_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Address_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Address_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Address_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Address_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Address_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Address_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Address_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Address_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Address_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Address_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::Address_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Address_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Address_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Address_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Address_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Address_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::AddressType > r (
          ::st434::s380m::groups::Address (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::AddressType > r (
          ::st434::s380m::groups::Address (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::AddressType > r (
          ::st434::s380m::groups::Address (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Address (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Address (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Address (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Address (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Address (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Address (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::AddressType > r (
          ::st434::s380m::groups::Address (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::AddressType > r (
          ::st434::s380m::groups::Address (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::AddressType > r (
          ::st434::s380m::groups::Address (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::AddressType > r (
            ::st434::s380m::groups::Address (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Address" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::AddressType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::AddressType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Address",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::AddressType >
      Address (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Address" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::AddressType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::AddressType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Address",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Communications_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Communications_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Communications_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Communications_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Communications_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Communications_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Communications_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Communications_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Communications_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Communications_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Communications_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Communications_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::Communications_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Communications_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Communications_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Communications_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Communications_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Communications_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType > r (
          ::st434::s380m::groups::Communications (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType > r (
          ::st434::s380m::groups::Communications (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType > r (
          ::st434::s380m::groups::Communications (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Communications (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Communications (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Communications (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Communications (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Communications (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Communications (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType > r (
          ::st434::s380m::groups::Communications (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType > r (
          ::st434::s380m::groups::Communications (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType > r (
          ::st434::s380m::groups::Communications (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType > r (
            ::st434::s380m::groups::Communications (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Communications" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::CommunicationsType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Communications",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType >
      Communications (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Communications" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::CommunicationsType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::CommunicationsType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Communications",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Contract_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Contract_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Contract_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Contract_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Contract_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Contract_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Contract_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Contract_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Contract_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Contract_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Contract_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Contract_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::Contract_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Contract_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Contract_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Contract_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Contract_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Contract_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::ContractType > r (
          ::st434::s380m::groups::Contract (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ContractType > r (
          ::st434::s380m::groups::Contract (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ContractType > r (
          ::st434::s380m::groups::Contract (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Contract (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Contract (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Contract (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Contract (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Contract (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Contract (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::ContractType > r (
          ::st434::s380m::groups::Contract (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ContractType > r (
          ::st434::s380m::groups::Contract (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ContractType > r (
          ::st434::s380m::groups::Contract (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::ContractType > r (
            ::st434::s380m::groups::Contract (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Contract" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::ContractType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::ContractType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Contract",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContractType >
      Contract (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Contract" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::ContractType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::ContractType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Contract",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Rights_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Rights_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Rights_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Rights_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Rights_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Rights_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Rights_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Rights_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Rights_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Rights_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Rights_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Rights_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::Rights_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Rights_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Rights_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Rights_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Rights_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Rights_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::RightsType > r (
          ::st434::s380m::groups::Rights (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::RightsType > r (
          ::st434::s380m::groups::Rights (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::RightsType > r (
          ::st434::s380m::groups::Rights (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Rights (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Rights (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Rights (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Rights (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Rights (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Rights (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::RightsType > r (
          ::st434::s380m::groups::Rights (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::RightsType > r (
          ::st434::s380m::groups::Rights (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::RightsType > r (
          ::st434::s380m::groups::Rights (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::RightsType > r (
            ::st434::s380m::groups::Rights (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Rights" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::RightsType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::RightsType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Rights",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::RightsType >
      Rights (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Rights" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::RightsType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::RightsType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Rights",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::PictureFormat_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::PictureFormat_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::PictureFormat_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::PictureFormat_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::PictureFormat_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::PictureFormat_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::PictureFormat_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::PictureFormat_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::PictureFormat_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::PictureFormat_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::PictureFormat_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::PictureFormat_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::PictureFormat_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PictureFormat_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PictureFormat_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureFormat_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "PictureFormat_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PictureFormat_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType > r (
          ::st434::s380m::groups::PictureFormat (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType > r (
          ::st434::s380m::groups::PictureFormat (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType > r (
          ::st434::s380m::groups::PictureFormat (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::PictureFormat (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::PictureFormat (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::PictureFormat (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::PictureFormat (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::PictureFormat (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::PictureFormat (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType > r (
          ::st434::s380m::groups::PictureFormat (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType > r (
          ::st434::s380m::groups::PictureFormat (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType > r (
          ::st434::s380m::groups::PictureFormat (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType > r (
            ::st434::s380m::groups::PictureFormat (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PictureFormat" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::PictureFormatType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PictureFormat",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType >
      PictureFormat (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "PictureFormat" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::PictureFormatType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::PictureFormatType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PictureFormat",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DeviceParameters_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DeviceParameters_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DeviceParameters_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DeviceParameters_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DeviceParameters_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DeviceParameters_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DeviceParameters_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DeviceParameters_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DeviceParameters_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DeviceParameters_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DeviceParameters_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::DeviceParameters_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::DeviceParameters_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DeviceParameters_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DeviceParameters_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DeviceParameters_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DeviceParameters_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DeviceParameters_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType > r (
          ::st434::s380m::groups::DeviceParameters (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType > r (
          ::st434::s380m::groups::DeviceParameters (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType > r (
          ::st434::s380m::groups::DeviceParameters (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DeviceParameters (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DeviceParameters (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::DeviceParameters (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DeviceParameters (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DeviceParameters (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::DeviceParameters (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType > r (
          ::st434::s380m::groups::DeviceParameters (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType > r (
          ::st434::s380m::groups::DeviceParameters (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType > r (
          ::st434::s380m::groups::DeviceParameters (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType > r (
            ::st434::s380m::groups::DeviceParameters (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DeviceParameters" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::DeviceParametersType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DeviceParameters",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType >
      DeviceParameters (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DeviceParameters" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::DeviceParametersType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::DeviceParametersType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DeviceParameters",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::NameValue_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::NameValue_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::NameValue_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::NameValue_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::NameValue_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::NameValue_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::NameValue_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::NameValue_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::NameValue_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::NameValue_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::NameValue_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::NameValue_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::NameValue_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "NameValue_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "NameValue_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NameValue_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "NameValue_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "NameValue_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::NameValueType > r (
          ::st434::s380m::groups::NameValue (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::NameValueType > r (
          ::st434::s380m::groups::NameValue (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::NameValueType > r (
          ::st434::s380m::groups::NameValue (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::NameValue (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::NameValue (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::NameValue (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::NameValue (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::NameValue (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::NameValue (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::NameValueType > r (
          ::st434::s380m::groups::NameValue (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::NameValueType > r (
          ::st434::s380m::groups::NameValue (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::NameValueType > r (
          ::st434::s380m::groups::NameValue (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::NameValueType > r (
            ::st434::s380m::groups::NameValue (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "NameValue" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::NameValueType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::NameValueType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "NameValue",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::NameValueType >
      NameValue (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "NameValue" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::NameValueType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::NameValueType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "NameValue",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Processing_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Processing_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Processing_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Processing_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Processing_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Processing_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Processing_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Processing_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Processing_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Processing_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Processing_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Processing_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::Processing_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Processing_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Processing_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Processing_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Processing_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Processing_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::ProcessingType > r (
          ::st434::s380m::groups::Processing (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ProcessingType > r (
          ::st434::s380m::groups::Processing (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ProcessingType > r (
          ::st434::s380m::groups::Processing (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Processing (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Processing (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Processing (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Processing (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Processing (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Processing (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::ProcessingType > r (
          ::st434::s380m::groups::Processing (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ProcessingType > r (
          ::st434::s380m::groups::Processing (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ProcessingType > r (
          ::st434::s380m::groups::Processing (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::ProcessingType > r (
            ::st434::s380m::groups::Processing (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Processing" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::ProcessingType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::ProcessingType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Processing",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProcessingType >
      Processing (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Processing" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::ProcessingType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::ProcessingType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Processing",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Project_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Project_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Project_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Project_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Project_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Project_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Project_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Project_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Project_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Project_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Project_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::Project_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::Project_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Project_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Project_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Project_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Project_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Project_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::ProjectType > r (
          ::st434::s380m::groups::Project (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ProjectType > r (
          ::st434::s380m::groups::Project (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ProjectType > r (
          ::st434::s380m::groups::Project (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Project (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Project (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::Project (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Project (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Project (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::Project (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::ProjectType > r (
          ::st434::s380m::groups::Project (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ProjectType > r (
          ::st434::s380m::groups::Project (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ProjectType > r (
          ::st434::s380m::groups::Project (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::ProjectType > r (
            ::st434::s380m::groups::Project (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Project" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::ProjectType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::ProjectType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Project",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::ProjectType >
      Project (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Project" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::ProjectType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::ProjectType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Project",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::ContactsList_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::ContactsList_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::ContactsList_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::ContactsList_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::ContactsList_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::ContactsList_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::ContactsList_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::ContactsList_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::ContactsList_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::ContactsList_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::ContactsList_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::ContactsList_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::ContactsList_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ContactsList_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ContactsList_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContactsList_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ContactsList_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ContactsList_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::ContactsListType > r (
          ::st434::s380m::groups::ContactsList (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ContactsListType > r (
          ::st434::s380m::groups::ContactsList (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ContactsListType > r (
          ::st434::s380m::groups::ContactsList (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::ContactsList (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::ContactsList (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::ContactsList (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::ContactsList (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::ContactsList (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::ContactsList (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::ContactsListType > r (
          ::st434::s380m::groups::ContactsList (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ContactsListType > r (
          ::st434::s380m::groups::ContactsList (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::ContactsListType > r (
          ::st434::s380m::groups::ContactsList (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::ContactsListType > r (
            ::st434::s380m::groups::ContactsList (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ContactsList" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::ContactsListType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::ContactsListType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ContactsList",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::ContactsListType >
      ContactsList (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ContactsList" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::ContactsListType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::ContactsListType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ContactsList",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::CueWords_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::CueWords_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::CueWords_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::CueWords_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::CueWords_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::CueWords_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::CueWords_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::CueWords_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::CueWords_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::CueWords_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::CueWords_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s380m::groups::CueWords_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s380m::groups::CueWords_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CueWords_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CueWords_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CueWords_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "CueWords_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CueWords_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::CueWordsType > r (
          ::st434::s380m::groups::CueWords (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::CueWordsType > r (
          ::st434::s380m::groups::CueWords (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::CueWordsType > r (
          ::st434::s380m::groups::CueWords (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::CueWords (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::CueWords (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s380m::groups::CueWords (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::CueWords (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::CueWords (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s380m::groups::CueWords (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s380m::groups::CueWordsType > r (
          ::st434::s380m::groups::CueWords (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::CueWordsType > r (
          ::st434::s380m::groups::CueWords (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s380m::groups::CueWordsType > r (
          ::st434::s380m::groups::CueWords (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s380m::groups::CueWordsType > r (
            ::st434::s380m::groups::CueWords (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CueWords" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::CueWordsType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::CueWordsType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CueWords",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }

      ::std::auto_ptr< ::st434::s380m::groups::CueWordsType >
      CueWords (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "CueWords" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          ::std::auto_ptr< ::st434::s380m::groups::CueWordsType > r (
            ::xsd::cxx::tree::traits< ::st434::s380m::groups::CueWordsType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CueWords",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace st434
{
  namespace s380m
  {
    namespace groups
    {
      void
      operator<< (::xercesc::DOMElement& e, const DMS1ObjectType& i)
      {
        e << static_cast< const ::st434::s377m::groups::DescriptiveObjectType& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const DMS1FrameworkType& i)
      {
        e << static_cast< const ::st434::s377m::groups::DescriptiveFrameworkType& > (i);

        // FrameworkExtendedTextLanguageCode
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FrameworkExtendedTextLanguageCode",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.FrameworkExtendedTextLanguageCode ();
        }

        // FrameworkThesaurusName
        //
        if (i.FrameworkThesaurusName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FrameworkThesaurusName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.FrameworkThesaurusName ();
        }

        // FrameworkTitle
        //
        if (i.FrameworkTitle ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FrameworkTitle",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.FrameworkTitle ();
        }

        // PrimaryExtendedSpokenLanguageCode
        //
        if (i.PrimaryExtendedSpokenLanguageCode ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PrimaryExtendedSpokenLanguageCode",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.PrimaryExtendedSpokenLanguageCode ();
        }

        // SecondaryExtendedSpokenLanguageCode
        //
        if (i.SecondaryExtendedSpokenLanguageCode ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SecondaryExtendedSpokenLanguageCode",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.SecondaryExtendedSpokenLanguageCode ();
        }

        // OriginalExtendedSpokenLanguageCode
        //
        if (i.OriginalExtendedSpokenLanguageCode ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OriginalExtendedSpokenLanguageCode",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.OriginalExtendedSpokenLanguageCode ();
        }

        // MetadataServerLocators
        //
        if (i.MetadataServerLocators ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MetadataServerLocators",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.MetadataServerLocators ();
        }

        // TitlesObjects
        //
        if (i.TitlesObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TitlesObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.TitlesObjects ();
        }

        // AnnotationObjects
        //
        if (i.AnnotationObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AnnotationObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.AnnotationObjects ();
        }

        // ParticipantObjects
        //
        if (i.ParticipantObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ParticipantObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ParticipantObjects ();
        }

        // Locations
        //
        if (i.Locations ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Locations",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.Locations ();
        }

        // ContactsListObject
        //
        if (i.ContactsListObject ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ContactsListObject",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ContactsListObject ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const TextLanguageType& i)
      {
        e << static_cast< const ::st434::s380m::groups::DMS1ObjectType& > (i);

        // ExtendedTextLanguageCode
        //
        if (i.ExtendedTextLanguageCode ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ExtendedTextLanguageCode",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ExtendedTextLanguageCode ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ThesaurusType& i)
      {
        e << static_cast< const ::st434::s380m::groups::TextLanguageType& > (i);

        // ThesaurusName
        //
        if (i.ThesaurusName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ThesaurusName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ThesaurusName ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ContactType& i)
      {
        e << static_cast< const ::st434::s380m::groups::ThesaurusType& > (i);

        // ContactID
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ContactID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.ContactID ();
        }

        // ContactNameValueObjects
        //
        if (i.ContactNameValueObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ContactNameValueObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ContactNameValueObjects ();
        }

        // AddressObjects
        //
        if (i.AddressObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AddressObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.AddressObjects ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ProductionClipFrameworkType& i)
      {
        e << static_cast< const ::st434::s380m::groups::DMS1FrameworkType& > (i);

        // CaptionsDescriptionObjects
        //
        if (i.CaptionsDescriptionObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CaptionsDescriptionObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.CaptionsDescriptionObjects ();
        }

        // ContractObjects
        //
        if (i.ContractObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ContractObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ContractObjects ();
        }

        // PictureFormatObject
        //
        if (i.PictureFormatObject ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PictureFormatObject",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.PictureFormatObject ();
        }

        // ProjectObject
        //
        if (i.ProjectObject ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ProjectObject",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ProjectObject ();
        }
      }

      void
      ProductionFramework_REF (::std::ostream& o,
                               const ::st434::s377m::types::Ref& s,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ProductionFramework_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      ProductionFramework_REF (::std::ostream& o,
                               const ::st434::s377m::types::Ref& s,
                               ::xml_schema::error_handler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ProductionFramework_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ProductionFramework_REF (::std::ostream& o,
                               const ::st434::s377m::types::Ref& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ProductionFramework_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ProductionFramework_REF (::xercesc::XMLFormatTarget& t,
                               const ::st434::s377m::types::Ref& s,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ProductionFramework_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      ProductionFramework_REF (::xercesc::XMLFormatTarget& t,
                               const ::st434::s377m::types::Ref& s,
                               ::xml_schema::error_handler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ProductionFramework_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ProductionFramework_REF (::xercesc::XMLFormatTarget& t,
                               const ::st434::s377m::types::Ref& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ProductionFramework_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ProductionFramework_REF (::xercesc::DOMDocument& d,
                               const ::st434::s377m::types::Ref& s,
                               ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ProductionFramework_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ProductionFramework_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      ProductionFramework_REF (const ::st434::s377m::types::Ref& s,
                               const ::xml_schema::namespace_infomap& m,
                               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "ProductionFramework_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::ProductionFramework_REF (*d, s, f);
        return d;
      }

      void
      ProductionFramework (::std::ostream& o,
                           const ::st434::s380m::groups::ProductionFrameworkType& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ProductionFramework (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      ProductionFramework (::std::ostream& o,
                           const ::st434::s380m::groups::ProductionFrameworkType& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ProductionFramework (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ProductionFramework (::std::ostream& o,
                           const ::st434::s380m::groups::ProductionFrameworkType& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ProductionFramework (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ProductionFramework (::xercesc::XMLFormatTarget& t,
                           const ::st434::s380m::groups::ProductionFrameworkType& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ProductionFramework (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      ProductionFramework (::xercesc::XMLFormatTarget& t,
                           const ::st434::s380m::groups::ProductionFrameworkType& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ProductionFramework (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ProductionFramework (::xercesc::XMLFormatTarget& t,
                           const ::st434::s380m::groups::ProductionFrameworkType& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ProductionFramework (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ProductionFramework (::xercesc::DOMDocument& d,
                           const ::st434::s380m::groups::ProductionFrameworkType& s,
                           ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ProductionFramework" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ProductionFramework",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      ProductionFramework (const ::st434::s380m::groups::ProductionFrameworkType& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "ProductionFramework",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::ProductionFramework (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const ProductionFrameworkType& i)
      {
        e << static_cast< const ::st434::s380m::groups::ProductionClipFrameworkType& > (i);

        // IntegrationIndication
        //
        if (i.IntegrationIndication ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IntegrationIndication",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.IntegrationIndication ();
        }

        // IdentificationObjects
        //
        if (i.IdentificationObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IdentificationObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.IdentificationObjects ();
        }

        // GroupRelationshipObjects
        //
        if (i.GroupRelationshipObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "GroupRelationshipObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.GroupRelationshipObjects ();
        }

        // BrandingObjects
        //
        if (i.BrandingObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BrandingObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.BrandingObjects ();
        }

        // EventObjects
        //
        if (i.EventObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EventObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.EventObjects ();
        }

        // AwardObjects
        //
        if (i.AwardObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AwardObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.AwardObjects ();
        }

        // ProductionSettingPeriodObjects
        //
        if (i.ProductionSettingPeriodObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ProductionSettingPeriodObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ProductionSettingPeriodObjects ();
        }
      }

      void
      ClipFramework_REF (::std::ostream& o,
                         const ::st434::s377m::types::Ref& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ClipFramework_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      ClipFramework_REF (::std::ostream& o,
                         const ::st434::s377m::types::Ref& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ClipFramework_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ClipFramework_REF (::std::ostream& o,
                         const ::st434::s377m::types::Ref& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ClipFramework_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ClipFramework_REF (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::types::Ref& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ClipFramework_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      ClipFramework_REF (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::types::Ref& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ClipFramework_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ClipFramework_REF (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::types::Ref& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ClipFramework_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ClipFramework_REF (::xercesc::DOMDocument& d,
                         const ::st434::s377m::types::Ref& s,
                         ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ClipFramework_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ClipFramework_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      ClipFramework_REF (const ::st434::s377m::types::Ref& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "ClipFramework_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::ClipFramework_REF (*d, s, f);
        return d;
      }

      void
      ClipFramework (::std::ostream& o,
                     const ::st434::s380m::groups::ClipFrameworkType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ClipFramework (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      ClipFramework (::std::ostream& o,
                     const ::st434::s380m::groups::ClipFrameworkType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ClipFramework (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ClipFramework (::std::ostream& o,
                     const ::st434::s380m::groups::ClipFrameworkType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ClipFramework (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ClipFramework (::xercesc::XMLFormatTarget& t,
                     const ::st434::s380m::groups::ClipFrameworkType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ClipFramework (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      ClipFramework (::xercesc::XMLFormatTarget& t,
                     const ::st434::s380m::groups::ClipFrameworkType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ClipFramework (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ClipFramework (::xercesc::XMLFormatTarget& t,
                     const ::st434::s380m::groups::ClipFrameworkType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ClipFramework (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ClipFramework (::xercesc::DOMDocument& d,
                     const ::st434::s380m::groups::ClipFrameworkType& s,
                     ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ClipFramework" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ClipFramework",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      ClipFramework (const ::st434::s380m::groups::ClipFrameworkType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "ClipFramework",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::ClipFramework (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const ClipFrameworkType& i)
      {
        e << static_cast< const ::st434::s380m::groups::ProductionClipFrameworkType& > (i);

        // ClipKind
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ClipKind",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.ClipKind ();
        }

        // ClipNumber
        //
        if (i.ClipNumber ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ClipNumber",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ClipNumber ();
        }

        // ExtendedClipID
        //
        if (i.ExtendedClipID ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ExtendedClipID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ExtendedClipID ();
        }

        // ClipCreationDateTime
        //
        if (i.ClipCreationDateTime ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ClipCreationDateTime",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ClipCreationDateTime ();
        }

        // TakeNumber
        //
        if (i.TakeNumber ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TakeNumber",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.TakeNumber ();
        }

        // SlateInformation
        //
        if (i.SlateInformation ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SlateInformation",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.SlateInformation ();
        }

        // ScriptingObjects
        //
        if (i.ScriptingObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ScriptingObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ScriptingObjects ();
        }

        // ClipShotObjects
        //
        if (i.ClipShotObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ClipShotObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ClipShotObjects ();
        }

        // DeviceParametersObjects
        //
        if (i.DeviceParametersObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DeviceParametersObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DeviceParametersObjects ();
        }

        // ProcessingObject
        //
        if (i.ProcessingObject ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ProcessingObject",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ProcessingObject ();
        }
      }

      void
      SceneFramework_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SceneFramework_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SceneFramework_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SceneFramework_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SceneFramework_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SceneFramework_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SceneFramework_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SceneFramework_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SceneFramework_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SceneFramework_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SceneFramework_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SceneFramework_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SceneFramework_REF (::xercesc::DOMDocument& d,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SceneFramework_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SceneFramework_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SceneFramework_REF (const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "SceneFramework_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::SceneFramework_REF (*d, s, f);
        return d;
      }

      void
      SceneFramework (::std::ostream& o,
                      const ::st434::s380m::groups::SceneFrameworkType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SceneFramework (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SceneFramework (::std::ostream& o,
                      const ::st434::s380m::groups::SceneFrameworkType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SceneFramework (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SceneFramework (::std::ostream& o,
                      const ::st434::s380m::groups::SceneFrameworkType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SceneFramework (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SceneFramework (::xercesc::XMLFormatTarget& t,
                      const ::st434::s380m::groups::SceneFrameworkType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SceneFramework (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SceneFramework (::xercesc::XMLFormatTarget& t,
                      const ::st434::s380m::groups::SceneFrameworkType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SceneFramework (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SceneFramework (::xercesc::XMLFormatTarget& t,
                      const ::st434::s380m::groups::SceneFrameworkType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SceneFramework (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SceneFramework (::xercesc::DOMDocument& d,
                      const ::st434::s380m::groups::SceneFrameworkType& s,
                      ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SceneFramework" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SceneFramework",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SceneFramework (const ::st434::s380m::groups::SceneFrameworkType& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "SceneFramework",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::SceneFramework (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const SceneFrameworkType& i)
      {
        e << static_cast< const ::st434::s380m::groups::DMS1FrameworkType& > (i);

        // SceneNumber
        //
        if (i.SceneNumber ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SceneNumber",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.SceneNumber ();
        }

        // SceneSettingPeriodObjects
        //
        if (i.SceneSettingPeriodObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SceneSettingPeriodObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.SceneSettingPeriodObjects ();
        }

        // SceneShotObjects
        //
        if (i.SceneShotObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SceneShotObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.SceneShotObjects ();
        }
      }

      void
      Titles_REF (::std::ostream& o,
                  const ::st434::s377m::types::Ref& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Titles_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Titles_REF (::std::ostream& o,
                  const ::st434::s377m::types::Ref& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Titles_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Titles_REF (::std::ostream& o,
                  const ::st434::s377m::types::Ref& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Titles_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Titles_REF (::xercesc::XMLFormatTarget& t,
                  const ::st434::s377m::types::Ref& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Titles_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Titles_REF (::xercesc::XMLFormatTarget& t,
                  const ::st434::s377m::types::Ref& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Titles_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Titles_REF (::xercesc::XMLFormatTarget& t,
                  const ::st434::s377m::types::Ref& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Titles_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Titles_REF (::xercesc::DOMDocument& d,
                  const ::st434::s377m::types::Ref& s,
                  ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Titles_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Titles_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Titles_REF (const ::st434::s377m::types::Ref& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Titles_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Titles_REF (*d, s, f);
        return d;
      }

      void
      Titles (::std::ostream& o,
              const ::st434::s380m::groups::TitlesType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Titles (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Titles (::std::ostream& o,
              const ::st434::s380m::groups::TitlesType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Titles (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Titles (::std::ostream& o,
              const ::st434::s380m::groups::TitlesType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Titles (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Titles (::xercesc::XMLFormatTarget& t,
              const ::st434::s380m::groups::TitlesType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Titles (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Titles (::xercesc::XMLFormatTarget& t,
              const ::st434::s380m::groups::TitlesType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Titles (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Titles (::xercesc::XMLFormatTarget& t,
              const ::st434::s380m::groups::TitlesType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Titles (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Titles (::xercesc::DOMDocument& d,
              const ::st434::s380m::groups::TitlesType& s,
              ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Titles" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Titles",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Titles (const ::st434::s380m::groups::TitlesType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Titles",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Titles (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const TitlesType& i)
      {
        e << static_cast< const ::st434::s380m::groups::TextLanguageType& > (i);

        // MainTitle
        //
        if (i.MainTitle ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MainTitle",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.MainTitle ();
        }

        // SecondaryTitle
        //
        if (i.SecondaryTitle ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SecondaryTitle",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.SecondaryTitle ();
        }

        // WorkingTitle
        //
        if (i.WorkingTitle ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "WorkingTitle",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.WorkingTitle ();
        }

        // OriginalTitle
        //
        if (i.OriginalTitle ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OriginalTitle",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.OriginalTitle ();
        }

        // VersionTitle
        //
        if (i.VersionTitle ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VersionTitle",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.VersionTitle ();
        }
      }

      void
      DMS1Identification_REF (::std::ostream& o,
                              const ::st434::s377m::types::Ref& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Identification_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DMS1Identification_REF (::std::ostream& o,
                              const ::st434::s377m::types::Ref& s,
                              ::xml_schema::error_handler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Identification_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Identification_REF (::std::ostream& o,
                              const ::st434::s377m::types::Ref& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Identification_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Identification_REF (::xercesc::XMLFormatTarget& t,
                              const ::st434::s377m::types::Ref& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Identification_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DMS1Identification_REF (::xercesc::XMLFormatTarget& t,
                              const ::st434::s377m::types::Ref& s,
                              ::xml_schema::error_handler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Identification_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Identification_REF (::xercesc::XMLFormatTarget& t,
                              const ::st434::s377m::types::Ref& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Identification_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Identification_REF (::xercesc::DOMDocument& d,
                              const ::st434::s377m::types::Ref& s,
                              ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DMS1Identification_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DMS1Identification_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DMS1Identification_REF (const ::st434::s377m::types::Ref& s,
                              const ::xml_schema::namespace_infomap& m,
                              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "DMS1Identification_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::DMS1Identification_REF (*d, s, f);
        return d;
      }

      void
      DMS1Identification (::std::ostream& o,
                          const ::st434::s380m::groups::DMS1IdentificationType& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Identification (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DMS1Identification (::std::ostream& o,
                          const ::st434::s380m::groups::DMS1IdentificationType& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Identification (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Identification (::std::ostream& o,
                          const ::st434::s380m::groups::DMS1IdentificationType& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Identification (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Identification (::xercesc::XMLFormatTarget& t,
                          const ::st434::s380m::groups::DMS1IdentificationType& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Identification (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DMS1Identification (::xercesc::XMLFormatTarget& t,
                          const ::st434::s380m::groups::DMS1IdentificationType& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Identification (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Identification (::xercesc::XMLFormatTarget& t,
                          const ::st434::s380m::groups::DMS1IdentificationType& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Identification (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Identification (::xercesc::DOMDocument& d,
                          const ::st434::s380m::groups::DMS1IdentificationType& s,
                          ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DMS1Identification" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DMS1Identification",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DMS1Identification (const ::st434::s380m::groups::DMS1IdentificationType& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "DMS1Identification",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::DMS1Identification (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const DMS1IdentificationType& i)
      {
        e << static_cast< const ::st434::s380m::groups::ThesaurusType& > (i);

        // IdentifierKind
        //
        if (i.IdentifierKind ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IdentifierKind",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.IdentifierKind ();
        }

        // IdentifierValue
        //
        if (i.IdentifierValue ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IdentifierValue",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.IdentifierValue ();
        }

        // IdentificationLocator
        //
        if (i.IdentificationLocator ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IdentificationLocator",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.IdentificationLocator ();
        }

        // IdentificationIssuingAuthority
        //
        if (i.IdentificationIssuingAuthority ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IdentificationIssuingAuthority",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.IdentificationIssuingAuthority ();
        }
      }

      void
      GroupRelationship_REF (::std::ostream& o,
                             const ::st434::s377m::types::Ref& s,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::GroupRelationship_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      GroupRelationship_REF (::std::ostream& o,
                             const ::st434::s377m::types::Ref& s,
                             ::xml_schema::error_handler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::GroupRelationship_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      GroupRelationship_REF (::std::ostream& o,
                             const ::st434::s377m::types::Ref& s,
                             ::xercesc::DOMErrorHandler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::GroupRelationship_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      GroupRelationship_REF (::xercesc::XMLFormatTarget& t,
                             const ::st434::s377m::types::Ref& s,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::GroupRelationship_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      GroupRelationship_REF (::xercesc::XMLFormatTarget& t,
                             const ::st434::s377m::types::Ref& s,
                             ::xml_schema::error_handler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::GroupRelationship_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      GroupRelationship_REF (::xercesc::XMLFormatTarget& t,
                             const ::st434::s377m::types::Ref& s,
                             ::xercesc::DOMErrorHandler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::GroupRelationship_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      GroupRelationship_REF (::xercesc::DOMDocument& d,
                             const ::st434::s377m::types::Ref& s,
                             ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "GroupRelationship_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "GroupRelationship_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      GroupRelationship_REF (const ::st434::s377m::types::Ref& s,
                             const ::xml_schema::namespace_infomap& m,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "GroupRelationship_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::GroupRelationship_REF (*d, s, f);
        return d;
      }

      void
      GroupRelationship (::std::ostream& o,
                         const ::st434::s380m::groups::GroupRelationshipType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::GroupRelationship (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      GroupRelationship (::std::ostream& o,
                         const ::st434::s380m::groups::GroupRelationshipType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::GroupRelationship (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      GroupRelationship (::std::ostream& o,
                         const ::st434::s380m::groups::GroupRelationshipType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::GroupRelationship (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      GroupRelationship (::xercesc::XMLFormatTarget& t,
                         const ::st434::s380m::groups::GroupRelationshipType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::GroupRelationship (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      GroupRelationship (::xercesc::XMLFormatTarget& t,
                         const ::st434::s380m::groups::GroupRelationshipType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::GroupRelationship (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      GroupRelationship (::xercesc::XMLFormatTarget& t,
                         const ::st434::s380m::groups::GroupRelationshipType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::GroupRelationship (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      GroupRelationship (::xercesc::DOMDocument& d,
                         const ::st434::s380m::groups::GroupRelationshipType& s,
                         ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "GroupRelationship" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "GroupRelationship",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      GroupRelationship (const ::st434::s380m::groups::GroupRelationshipType& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "GroupRelationship",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::GroupRelationship (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const GroupRelationshipType& i)
      {
        e << static_cast< const ::st434::s380m::groups::ThesaurusType& > (i);

        // ProgrammingGroupKind
        //
        if (i.ProgrammingGroupKind ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ProgrammingGroupKind",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ProgrammingGroupKind ();
        }

        // ProgrammingGroupTitle
        //
        if (i.ProgrammingGroupTitle ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ProgrammingGroupTitle",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ProgrammingGroupTitle ();
        }

        // GroupSynopsis
        //
        if (i.GroupSynopsis ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "GroupSynopsis",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.GroupSynopsis ();
        }

        // PositionInSequence
        //
        if (i.PositionInSequence ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PositionInSequence",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.PositionInSequence ();
        }

        // TotalNumberInSequence
        //
        if (i.TotalNumberInSequence ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TotalNumberInSequence",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.TotalNumberInSequence ();
        }

        // EpisodicStartNumber
        //
        if (i.EpisodicStartNumber ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EpisodicStartNumber",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.EpisodicStartNumber ();
        }

        // EpisodicEndNumber
        //
        if (i.EpisodicEndNumber ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EpisodicEndNumber",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.EpisodicEndNumber ();
        }
      }

      void
      Branding_REF (::std::ostream& o,
                    const ::st434::s377m::types::Ref& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Branding_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Branding_REF (::std::ostream& o,
                    const ::st434::s377m::types::Ref& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Branding_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Branding_REF (::std::ostream& o,
                    const ::st434::s377m::types::Ref& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Branding_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Branding_REF (::xercesc::XMLFormatTarget& t,
                    const ::st434::s377m::types::Ref& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Branding_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Branding_REF (::xercesc::XMLFormatTarget& t,
                    const ::st434::s377m::types::Ref& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Branding_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Branding_REF (::xercesc::XMLFormatTarget& t,
                    const ::st434::s377m::types::Ref& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Branding_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Branding_REF (::xercesc::DOMDocument& d,
                    const ::st434::s377m::types::Ref& s,
                    ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Branding_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Branding_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Branding_REF (const ::st434::s377m::types::Ref& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Branding_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Branding_REF (*d, s, f);
        return d;
      }

      void
      Branding (::std::ostream& o,
                const ::st434::s380m::groups::BrandingType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Branding (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Branding (::std::ostream& o,
                const ::st434::s380m::groups::BrandingType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Branding (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Branding (::std::ostream& o,
                const ::st434::s380m::groups::BrandingType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Branding (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Branding (::xercesc::XMLFormatTarget& t,
                const ::st434::s380m::groups::BrandingType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Branding (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Branding (::xercesc::XMLFormatTarget& t,
                const ::st434::s380m::groups::BrandingType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Branding (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Branding (::xercesc::XMLFormatTarget& t,
                const ::st434::s380m::groups::BrandingType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Branding (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Branding (::xercesc::DOMDocument& d,
                const ::st434::s380m::groups::BrandingType& s,
                ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Branding" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Branding",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Branding (const ::st434::s380m::groups::BrandingType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Branding",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Branding (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const BrandingType& i)
      {
        e << static_cast< const ::st434::s380m::groups::TextLanguageType& > (i);

        // BrandMainTitle
        //
        if (i.BrandMainTitle ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BrandMainTitle",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.BrandMainTitle ();
        }

        // BrandOriginalTitle
        //
        if (i.BrandOriginalTitle ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BrandOriginalTitle",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.BrandOriginalTitle ();
        }
      }

      void
      DMS1Event_REF (::std::ostream& o,
                     const ::st434::s377m::types::Ref& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Event_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DMS1Event_REF (::std::ostream& o,
                     const ::st434::s377m::types::Ref& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Event_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Event_REF (::std::ostream& o,
                     const ::st434::s377m::types::Ref& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Event_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Event_REF (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::types::Ref& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Event_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DMS1Event_REF (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::types::Ref& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Event_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Event_REF (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::types::Ref& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Event_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Event_REF (::xercesc::DOMDocument& d,
                     const ::st434::s377m::types::Ref& s,
                     ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DMS1Event_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DMS1Event_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DMS1Event_REF (const ::st434::s377m::types::Ref& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "DMS1Event_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::DMS1Event_REF (*d, s, f);
        return d;
      }

      void
      DMS1Event (::std::ostream& o,
                 const ::st434::s380m::groups::DMS1EventType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Event (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DMS1Event (::std::ostream& o,
                 const ::st434::s380m::groups::DMS1EventType& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Event (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Event (::std::ostream& o,
                 const ::st434::s380m::groups::DMS1EventType& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Event (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Event (::xercesc::XMLFormatTarget& t,
                 const ::st434::s380m::groups::DMS1EventType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Event (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DMS1Event (::xercesc::XMLFormatTarget& t,
                 const ::st434::s380m::groups::DMS1EventType& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Event (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Event (::xercesc::XMLFormatTarget& t,
                 const ::st434::s380m::groups::DMS1EventType& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Event (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Event (::xercesc::DOMDocument& d,
                 const ::st434::s380m::groups::DMS1EventType& s,
                 ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DMS1Event" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DMS1Event",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DMS1Event (const ::st434::s380m::groups::DMS1EventType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "DMS1Event",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::DMS1Event (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const DMS1EventType& i)
      {
        e << static_cast< const ::st434::s380m::groups::ThesaurusType& > (i);

        // EventIndication
        //
        if (i.EventIndication ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EventIndication",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.EventIndication ();
        }

        // EventStartDateTime
        //
        if (i.EventStartDateTime ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EventStartDateTime",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.EventStartDateTime ();
        }

        // EventEndDateTime
        //
        if (i.EventEndDateTime ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EventEndDateTime",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.EventEndDateTime ();
        }

        // PublicationObjects
        //
        if (i.PublicationObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PublicationObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.PublicationObjects ();
        }

        // EventAnnotationObjects
        //
        if (i.EventAnnotationObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EventAnnotationObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.EventAnnotationObjects ();
        }
      }

      void
      Publication_REF (::std::ostream& o,
                       const ::st434::s377m::types::Ref& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Publication_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Publication_REF (::std::ostream& o,
                       const ::st434::s377m::types::Ref& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Publication_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Publication_REF (::std::ostream& o,
                       const ::st434::s377m::types::Ref& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Publication_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Publication_REF (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::types::Ref& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Publication_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Publication_REF (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::types::Ref& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Publication_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Publication_REF (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::types::Ref& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Publication_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Publication_REF (::xercesc::DOMDocument& d,
                       const ::st434::s377m::types::Ref& s,
                       ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Publication_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Publication_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Publication_REF (const ::st434::s377m::types::Ref& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Publication_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Publication_REF (*d, s, f);
        return d;
      }

      void
      Publication (::std::ostream& o,
                   const ::st434::s380m::groups::PublicationType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Publication (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Publication (::std::ostream& o,
                   const ::st434::s380m::groups::PublicationType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Publication (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Publication (::std::ostream& o,
                   const ::st434::s380m::groups::PublicationType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Publication (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Publication (::xercesc::XMLFormatTarget& t,
                   const ::st434::s380m::groups::PublicationType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Publication (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Publication (::xercesc::XMLFormatTarget& t,
                   const ::st434::s380m::groups::PublicationType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Publication (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Publication (::xercesc::XMLFormatTarget& t,
                   const ::st434::s380m::groups::PublicationType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Publication (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Publication (::xercesc::DOMDocument& d,
                   const ::st434::s380m::groups::PublicationType& s,
                   ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Publication" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Publication",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Publication (const ::st434::s380m::groups::PublicationType& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Publication",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Publication (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const PublicationType& i)
      {
        e << static_cast< const ::st434::s380m::groups::DMS1ObjectType& > (i);

        // PublishingOrganizationName
        //
        if (i.PublishingOrganizationName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PublishingOrganizationName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.PublishingOrganizationName ();
        }

        // PublishingServiceName
        //
        if (i.PublishingServiceName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PublishingServiceName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.PublishingServiceName ();
        }

        // PublishingMediumName
        //
        if (i.PublishingMediumName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PublishingMediumName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.PublishingMediumName ();
        }

        // PublishingRegionName
        //
        if (i.PublishingRegionName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PublishingRegionName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.PublishingRegionName ();
        }
      }

      void
      Award_REF (::std::ostream& o,
                 const ::st434::s377m::types::Ref& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Award_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Award_REF (::std::ostream& o,
                 const ::st434::s377m::types::Ref& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Award_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Award_REF (::std::ostream& o,
                 const ::st434::s377m::types::Ref& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Award_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Award_REF (::xercesc::XMLFormatTarget& t,
                 const ::st434::s377m::types::Ref& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Award_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Award_REF (::xercesc::XMLFormatTarget& t,
                 const ::st434::s377m::types::Ref& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Award_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Award_REF (::xercesc::XMLFormatTarget& t,
                 const ::st434::s377m::types::Ref& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Award_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Award_REF (::xercesc::DOMDocument& d,
                 const ::st434::s377m::types::Ref& s,
                 ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Award_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Award_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Award_REF (const ::st434::s377m::types::Ref& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Award_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Award_REF (*d, s, f);
        return d;
      }

      void
      Award (::std::ostream& o,
             const ::st434::s380m::groups::AwardType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Award (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Award (::std::ostream& o,
             const ::st434::s380m::groups::AwardType& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Award (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Award (::std::ostream& o,
             const ::st434::s380m::groups::AwardType& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Award (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Award (::xercesc::XMLFormatTarget& t,
             const ::st434::s380m::groups::AwardType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Award (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Award (::xercesc::XMLFormatTarget& t,
             const ::st434::s380m::groups::AwardType& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Award (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Award (::xercesc::XMLFormatTarget& t,
             const ::st434::s380m::groups::AwardType& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Award (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Award (::xercesc::DOMDocument& d,
             const ::st434::s380m::groups::AwardType& s,
             ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Award" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Award",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Award (const ::st434::s380m::groups::AwardType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Award",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Award (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const AwardType& i)
      {
        e << static_cast< const ::st434::s380m::groups::ThesaurusType& > (i);

        // FestivalName
        //
        if (i.FestivalName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FestivalName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.FestivalName ();
        }

        // FestivalDateTime
        //
        if (i.FestivalDateTime ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FestivalDateTime",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.FestivalDateTime ();
        }

        // AwardName
        //
        if (i.AwardName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AwardName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.AwardName ();
        }

        // AwardCategory
        //
        if (i.AwardCategory ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AwardCategory",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.AwardCategory ();
        }

        // NominationCategory
        //
        if (i.NominationCategory ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NominationCategory",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.NominationCategory ();
        }

        // AwardParticipants
        //
        if (i.AwardParticipants ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AwardParticipants",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.AwardParticipants ();
        }
      }

      void
      CaptionsDescription_REF (::std::ostream& o,
                               const ::st434::s377m::types::Ref& s,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CaptionsDescription_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      CaptionsDescription_REF (::std::ostream& o,
                               const ::st434::s377m::types::Ref& s,
                               ::xml_schema::error_handler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CaptionsDescription_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CaptionsDescription_REF (::std::ostream& o,
                               const ::st434::s377m::types::Ref& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CaptionsDescription_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CaptionsDescription_REF (::xercesc::XMLFormatTarget& t,
                               const ::st434::s377m::types::Ref& s,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CaptionsDescription_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      CaptionsDescription_REF (::xercesc::XMLFormatTarget& t,
                               const ::st434::s377m::types::Ref& s,
                               ::xml_schema::error_handler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CaptionsDescription_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CaptionsDescription_REF (::xercesc::XMLFormatTarget& t,
                               const ::st434::s377m::types::Ref& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CaptionsDescription_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CaptionsDescription_REF (::xercesc::DOMDocument& d,
                               const ::st434::s377m::types::Ref& s,
                               ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CaptionsDescription_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "CaptionsDescription_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      CaptionsDescription_REF (const ::st434::s377m::types::Ref& s,
                               const ::xml_schema::namespace_infomap& m,
                               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "CaptionsDescription_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::CaptionsDescription_REF (*d, s, f);
        return d;
      }

      void
      CaptionsDescription (::std::ostream& o,
                           const ::st434::s380m::groups::CaptionsDescriptionType& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CaptionsDescription (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      CaptionsDescription (::std::ostream& o,
                           const ::st434::s380m::groups::CaptionsDescriptionType& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CaptionsDescription (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CaptionsDescription (::std::ostream& o,
                           const ::st434::s380m::groups::CaptionsDescriptionType& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CaptionsDescription (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CaptionsDescription (::xercesc::XMLFormatTarget& t,
                           const ::st434::s380m::groups::CaptionsDescriptionType& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CaptionsDescription (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      CaptionsDescription (::xercesc::XMLFormatTarget& t,
                           const ::st434::s380m::groups::CaptionsDescriptionType& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CaptionsDescription (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CaptionsDescription (::xercesc::XMLFormatTarget& t,
                           const ::st434::s380m::groups::CaptionsDescriptionType& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CaptionsDescription (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CaptionsDescription (::xercesc::DOMDocument& d,
                           const ::st434::s380m::groups::CaptionsDescriptionType& s,
                           ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CaptionsDescription" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "CaptionsDescription",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      CaptionsDescription (const ::st434::s380m::groups::CaptionsDescriptionType& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "CaptionsDescription",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::CaptionsDescription (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const CaptionsDescriptionType& i)
      {
        e << static_cast< const ::st434::s380m::groups::ThesaurusType& > (i);

        // ExtendedCaptionsLanguageCode
        //
        if (i.ExtendedCaptionsLanguageCode ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ExtendedCaptionsLanguageCode",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ExtendedCaptionsLanguageCode ();
        }

        // CaptionKind
        //
        if (i.CaptionKind ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CaptionKind",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.CaptionKind ();
        }
      }

      void
      DMS1Annotation_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Annotation_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DMS1Annotation_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Annotation_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Annotation_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Annotation_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Annotation_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Annotation_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DMS1Annotation_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Annotation_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Annotation_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Annotation_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Annotation_REF (::xercesc::DOMDocument& d,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DMS1Annotation_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DMS1Annotation_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DMS1Annotation_REF (const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "DMS1Annotation_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::DMS1Annotation_REF (*d, s, f);
        return d;
      }

      void
      DMS1Annotation (::std::ostream& o,
                      const ::st434::s380m::groups::DMS1AnnotationType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Annotation (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DMS1Annotation (::std::ostream& o,
                      const ::st434::s380m::groups::DMS1AnnotationType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Annotation (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Annotation (::std::ostream& o,
                      const ::st434::s380m::groups::DMS1AnnotationType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Annotation (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Annotation (::xercesc::XMLFormatTarget& t,
                      const ::st434::s380m::groups::DMS1AnnotationType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Annotation (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DMS1Annotation (::xercesc::XMLFormatTarget& t,
                      const ::st434::s380m::groups::DMS1AnnotationType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Annotation (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Annotation (::xercesc::XMLFormatTarget& t,
                      const ::st434::s380m::groups::DMS1AnnotationType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DMS1Annotation (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Annotation (::xercesc::DOMDocument& d,
                      const ::st434::s380m::groups::DMS1AnnotationType& s,
                      ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DMS1Annotation" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DMS1Annotation",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DMS1Annotation (const ::st434::s380m::groups::DMS1AnnotationType& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "DMS1Annotation",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::DMS1Annotation (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const DMS1AnnotationType& i)
      {
        e << static_cast< const ::st434::s380m::groups::ThesaurusType& > (i);

        // AnnotationKind
        //
        if (i.AnnotationKind ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AnnotationKind",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.AnnotationKind ();
        }

        // AnnotationSynopsis
        //
        if (i.AnnotationSynopsis ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AnnotationSynopsis",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.AnnotationSynopsis ();
        }

        // AnnotationDescription
        //
        if (i.AnnotationDescription ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AnnotationDescription",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.AnnotationDescription ();
        }

        // RelatedMaterialDescription
        //
        if (i.RelatedMaterialDescription ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RelatedMaterialDescription",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.RelatedMaterialDescription ();
        }

        // ClassificationObjects
        //
        if (i.ClassificationObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ClassificationObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ClassificationObjects ();
        }

        // AnnotationCueWordsObject
        //
        if (i.AnnotationCueWordsObject ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AnnotationCueWordsObject",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.AnnotationCueWordsObject ();
        }

        // RelatedMaterialLocators
        //
        if (i.RelatedMaterialLocators ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RelatedMaterialLocators",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.RelatedMaterialLocators ();
        }

        // AnnotationParticipants
        //
        if (i.AnnotationParticipants ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AnnotationParticipants",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.AnnotationParticipants ();
        }
      }

      void
      SettingPeriod_REF (::std::ostream& o,
                         const ::st434::s377m::types::Ref& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SettingPeriod_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SettingPeriod_REF (::std::ostream& o,
                         const ::st434::s377m::types::Ref& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SettingPeriod_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SettingPeriod_REF (::std::ostream& o,
                         const ::st434::s377m::types::Ref& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SettingPeriod_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SettingPeriod_REF (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::types::Ref& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SettingPeriod_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SettingPeriod_REF (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::types::Ref& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SettingPeriod_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SettingPeriod_REF (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::types::Ref& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SettingPeriod_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SettingPeriod_REF (::xercesc::DOMDocument& d,
                         const ::st434::s377m::types::Ref& s,
                         ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SettingPeriod_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SettingPeriod_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SettingPeriod_REF (const ::st434::s377m::types::Ref& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "SettingPeriod_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::SettingPeriod_REF (*d, s, f);
        return d;
      }

      void
      SettingPeriod (::std::ostream& o,
                     const ::st434::s380m::groups::SettingPeriodType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SettingPeriod (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SettingPeriod (::std::ostream& o,
                     const ::st434::s380m::groups::SettingPeriodType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SettingPeriod (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SettingPeriod (::std::ostream& o,
                     const ::st434::s380m::groups::SettingPeriodType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SettingPeriod (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SettingPeriod (::xercesc::XMLFormatTarget& t,
                     const ::st434::s380m::groups::SettingPeriodType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SettingPeriod (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SettingPeriod (::xercesc::XMLFormatTarget& t,
                     const ::st434::s380m::groups::SettingPeriodType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SettingPeriod (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SettingPeriod (::xercesc::XMLFormatTarget& t,
                     const ::st434::s380m::groups::SettingPeriodType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::SettingPeriod (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SettingPeriod (::xercesc::DOMDocument& d,
                     const ::st434::s380m::groups::SettingPeriodType& s,
                     ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SettingPeriod" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SettingPeriod",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SettingPeriod (const ::st434::s380m::groups::SettingPeriodType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "SettingPeriod",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::SettingPeriod (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const SettingPeriodType& i)
      {
        e << static_cast< const ::st434::s380m::groups::ThesaurusType& > (i);

        // SettingDateTime
        //
        if (i.SettingDateTime ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SettingDateTime",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.SettingDateTime ();
        }

        // TimePeriodKeyword
        //
        if (i.TimePeriodKeyword ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TimePeriodKeyword",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.TimePeriodKeyword ();
        }

        // SettingPeriodDescription
        //
        if (i.SettingPeriodDescription ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SettingPeriodDescription",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.SettingPeriodDescription ();
        }
      }

      void
      Scripting_REF (::std::ostream& o,
                     const ::st434::s377m::types::Ref& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Scripting_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Scripting_REF (::std::ostream& o,
                     const ::st434::s377m::types::Ref& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Scripting_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Scripting_REF (::std::ostream& o,
                     const ::st434::s377m::types::Ref& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Scripting_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Scripting_REF (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::types::Ref& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Scripting_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Scripting_REF (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::types::Ref& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Scripting_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Scripting_REF (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::types::Ref& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Scripting_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Scripting_REF (::xercesc::DOMDocument& d,
                     const ::st434::s377m::types::Ref& s,
                     ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Scripting_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Scripting_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Scripting_REF (const ::st434::s377m::types::Ref& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Scripting_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Scripting_REF (*d, s, f);
        return d;
      }

      void
      Scripting (::std::ostream& o,
                 const ::st434::s380m::groups::ScriptingType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Scripting (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Scripting (::std::ostream& o,
                 const ::st434::s380m::groups::ScriptingType& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Scripting (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Scripting (::std::ostream& o,
                 const ::st434::s380m::groups::ScriptingType& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Scripting (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Scripting (::xercesc::XMLFormatTarget& t,
                 const ::st434::s380m::groups::ScriptingType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Scripting (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Scripting (::xercesc::XMLFormatTarget& t,
                 const ::st434::s380m::groups::ScriptingType& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Scripting (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Scripting (::xercesc::XMLFormatTarget& t,
                 const ::st434::s380m::groups::ScriptingType& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Scripting (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Scripting (::xercesc::DOMDocument& d,
                 const ::st434::s380m::groups::ScriptingType& s,
                 ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Scripting" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Scripting",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Scripting (const ::st434::s380m::groups::ScriptingType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Scripting",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Scripting (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const ScriptingType& i)
      {
        e << static_cast< const ::st434::s380m::groups::ThesaurusType& > (i);

        // ScriptingKind
        //
        if (i.ScriptingKind ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ScriptingKind",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ScriptingKind ();
        }

        // ScriptingText
        //
        if (i.ScriptingText ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ScriptingText",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ScriptingText ();
        }

        // ScriptingLocators
        //
        if (i.ScriptingLocators ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ScriptingLocators",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ScriptingLocators ();
        }
      }

      void
      Classification_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Classification_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Classification_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Classification_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Classification_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Classification_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Classification_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Classification_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Classification_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Classification_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Classification_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Classification_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Classification_REF (::xercesc::DOMDocument& d,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Classification_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Classification_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Classification_REF (const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Classification_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Classification_REF (*d, s, f);
        return d;
      }

      void
      Classification (::std::ostream& o,
                      const ::st434::s380m::groups::ClassificationType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Classification (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Classification (::std::ostream& o,
                      const ::st434::s380m::groups::ClassificationType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Classification (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Classification (::std::ostream& o,
                      const ::st434::s380m::groups::ClassificationType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Classification (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Classification (::xercesc::XMLFormatTarget& t,
                      const ::st434::s380m::groups::ClassificationType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Classification (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Classification (::xercesc::XMLFormatTarget& t,
                      const ::st434::s380m::groups::ClassificationType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Classification (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Classification (::xercesc::XMLFormatTarget& t,
                      const ::st434::s380m::groups::ClassificationType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Classification (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Classification (::xercesc::DOMDocument& d,
                      const ::st434::s380m::groups::ClassificationType& s,
                      ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Classification" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Classification",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Classification (const ::st434::s380m::groups::ClassificationType& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Classification",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Classification (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const ClassificationType& i)
      {
        e << static_cast< const ::st434::s380m::groups::ThesaurusType& > (i);

        // ContentClassification
        //
        if (i.ContentClassification ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ContentClassification",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ContentClassification ();
        }

        // ClassificationNameValueObjects
        //
        if (i.ClassificationNameValueObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ClassificationNameValueObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ClassificationNameValueObjects ();
        }
      }

      void
      Shot_REF (::std::ostream& o,
                const ::st434::s377m::types::Ref& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Shot_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Shot_REF (::std::ostream& o,
                const ::st434::s377m::types::Ref& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Shot_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Shot_REF (::std::ostream& o,
                const ::st434::s377m::types::Ref& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Shot_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Shot_REF (::xercesc::XMLFormatTarget& t,
                const ::st434::s377m::types::Ref& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Shot_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Shot_REF (::xercesc::XMLFormatTarget& t,
                const ::st434::s377m::types::Ref& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Shot_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Shot_REF (::xercesc::XMLFormatTarget& t,
                const ::st434::s377m::types::Ref& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Shot_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Shot_REF (::xercesc::DOMDocument& d,
                const ::st434::s377m::types::Ref& s,
                ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Shot_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Shot_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Shot_REF (const ::st434::s377m::types::Ref& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Shot_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Shot_REF (*d, s, f);
        return d;
      }

      void
      Shot (::std::ostream& o,
            const ::st434::s380m::groups::ShotType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Shot (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Shot (::std::ostream& o,
            const ::st434::s380m::groups::ShotType& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Shot (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Shot (::std::ostream& o,
            const ::st434::s380m::groups::ShotType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Shot (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Shot (::xercesc::XMLFormatTarget& t,
            const ::st434::s380m::groups::ShotType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Shot (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Shot (::xercesc::XMLFormatTarget& t,
            const ::st434::s380m::groups::ShotType& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Shot (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Shot (::xercesc::XMLFormatTarget& t,
            const ::st434::s380m::groups::ShotType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Shot (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Shot (::xercesc::DOMDocument& d,
            const ::st434::s380m::groups::ShotType& s,
            ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Shot" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Shot",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Shot (const ::st434::s380m::groups::ShotType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Shot",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Shot (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const ShotType& i)
      {
        e << static_cast< const ::st434::s380m::groups::TextLanguageType& > (i);

        // ShotStartPosition
        //
        if (i.ShotStartPosition ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShotStartPosition",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ShotStartPosition ();
        }

        // ShotDuration
        //
        if (i.ShotDuration ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShotDuration",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ShotDuration ();
        }

        // ShotTrackIDs
        //
        if (i.ShotTrackIDs ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShotTrackIDs",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ShotTrackIDs ();
        }

        // ShotDescription
        //
        if (i.ShotDescription ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShotDescription",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ShotDescription ();
        }

        // ShotCommentKind
        //
        if (i.ShotCommentKind ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShotCommentKind",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ShotCommentKind ();
        }

        // ShotComment
        //
        if (i.ShotComment ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShotComment",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ShotComment ();
        }

        // ShotCueWordsObject
        //
        if (i.ShotCueWordsObject ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShotCueWordsObject",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ShotCueWordsObject ();
        }

        // KeypointObjects
        //
        if (i.KeypointObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "KeypointObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.KeypointObjects ();
        }
      }

      void
      Keypoint_REF (::std::ostream& o,
                    const ::st434::s377m::types::Ref& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Keypoint_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Keypoint_REF (::std::ostream& o,
                    const ::st434::s377m::types::Ref& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Keypoint_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Keypoint_REF (::std::ostream& o,
                    const ::st434::s377m::types::Ref& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Keypoint_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Keypoint_REF (::xercesc::XMLFormatTarget& t,
                    const ::st434::s377m::types::Ref& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Keypoint_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Keypoint_REF (::xercesc::XMLFormatTarget& t,
                    const ::st434::s377m::types::Ref& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Keypoint_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Keypoint_REF (::xercesc::XMLFormatTarget& t,
                    const ::st434::s377m::types::Ref& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Keypoint_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Keypoint_REF (::xercesc::DOMDocument& d,
                    const ::st434::s377m::types::Ref& s,
                    ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Keypoint_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Keypoint_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Keypoint_REF (const ::st434::s377m::types::Ref& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Keypoint_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Keypoint_REF (*d, s, f);
        return d;
      }

      void
      Keypoint (::std::ostream& o,
                const ::st434::s380m::groups::KeypointType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Keypoint (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Keypoint (::std::ostream& o,
                const ::st434::s380m::groups::KeypointType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Keypoint (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Keypoint (::std::ostream& o,
                const ::st434::s380m::groups::KeypointType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Keypoint (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Keypoint (::xercesc::XMLFormatTarget& t,
                const ::st434::s380m::groups::KeypointType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Keypoint (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Keypoint (::xercesc::XMLFormatTarget& t,
                const ::st434::s380m::groups::KeypointType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Keypoint (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Keypoint (::xercesc::XMLFormatTarget& t,
                const ::st434::s380m::groups::KeypointType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Keypoint (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Keypoint (::xercesc::DOMDocument& d,
                const ::st434::s380m::groups::KeypointType& s,
                ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Keypoint" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Keypoint",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Keypoint (const ::st434::s380m::groups::KeypointType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Keypoint",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Keypoint (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const KeypointType& i)
      {
        e << static_cast< const ::st434::s380m::groups::ThesaurusType& > (i);

        // KeypointKind
        //
        if (i.KeypointKind ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "KeypointKind",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.KeypointKind ();
        }

        // KeypointPosition
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "KeypointPosition",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.KeypointPosition ();
        }

        // KeypointValue
        //
        if (i.KeypointValue ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "KeypointValue",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.KeypointValue ();
        }
      }

      void
      Participant_REF (::std::ostream& o,
                       const ::st434::s377m::types::Ref& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Participant_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Participant_REF (::std::ostream& o,
                       const ::st434::s377m::types::Ref& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Participant_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Participant_REF (::std::ostream& o,
                       const ::st434::s377m::types::Ref& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Participant_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Participant_REF (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::types::Ref& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Participant_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Participant_REF (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::types::Ref& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Participant_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Participant_REF (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::types::Ref& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Participant_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Participant_REF (::xercesc::DOMDocument& d,
                       const ::st434::s377m::types::Ref& s,
                       ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Participant_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Participant_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Participant_REF (const ::st434::s377m::types::Ref& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Participant_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Participant_REF (*d, s, f);
        return d;
      }

      void
      Participant (::std::ostream& o,
                   const ::st434::s380m::groups::ParticipantType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Participant (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Participant (::std::ostream& o,
                   const ::st434::s380m::groups::ParticipantType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Participant (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Participant (::std::ostream& o,
                   const ::st434::s380m::groups::ParticipantType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Participant (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Participant (::xercesc::XMLFormatTarget& t,
                   const ::st434::s380m::groups::ParticipantType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Participant (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Participant (::xercesc::XMLFormatTarget& t,
                   const ::st434::s380m::groups::ParticipantType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Participant (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Participant (::xercesc::XMLFormatTarget& t,
                   const ::st434::s380m::groups::ParticipantType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Participant (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Participant (::xercesc::DOMDocument& d,
                   const ::st434::s380m::groups::ParticipantType& s,
                   ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Participant" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Participant",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Participant (const ::st434::s380m::groups::ParticipantType& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Participant",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Participant (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const ParticipantType& i)
      {
        e << static_cast< const ::st434::s380m::groups::ThesaurusType& > (i);

        // ParticipantID
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ParticipantID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.ParticipantID ();
        }

        // ContributionStatus
        //
        if (i.ContributionStatus ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ContributionStatus",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ContributionStatus ();
        }

        // JobFunction
        //
        if (i.JobFunction ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "JobFunction",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.JobFunction ();
        }

        // JobFunctionCode
        //
        if (i.JobFunctionCode ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "JobFunctionCode",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.JobFunctionCode ();
        }

        // RoleName
        //
        if (i.RoleName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RoleName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.RoleName ();
        }

        // Persons
        //
        if (i.Persons ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Persons",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.Persons ();
        }

        // ParticipantOrganizations
        //
        if (i.ParticipantOrganizations ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ParticipantOrganizations",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ParticipantOrganizations ();
        }
      }

      void
      Person_REF (::std::ostream& o,
                  const ::st434::s377m::types::Ref& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Person_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Person_REF (::std::ostream& o,
                  const ::st434::s377m::types::Ref& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Person_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Person_REF (::std::ostream& o,
                  const ::st434::s377m::types::Ref& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Person_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Person_REF (::xercesc::XMLFormatTarget& t,
                  const ::st434::s377m::types::Ref& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Person_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Person_REF (::xercesc::XMLFormatTarget& t,
                  const ::st434::s377m::types::Ref& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Person_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Person_REF (::xercesc::XMLFormatTarget& t,
                  const ::st434::s377m::types::Ref& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Person_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Person_REF (::xercesc::DOMDocument& d,
                  const ::st434::s377m::types::Ref& s,
                  ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Person_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Person_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Person_REF (const ::st434::s377m::types::Ref& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Person_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Person_REF (*d, s, f);
        return d;
      }

      void
      Person (::std::ostream& o,
              const ::st434::s380m::groups::PersonType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Person (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Person (::std::ostream& o,
              const ::st434::s380m::groups::PersonType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Person (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Person (::std::ostream& o,
              const ::st434::s380m::groups::PersonType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Person (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Person (::xercesc::XMLFormatTarget& t,
              const ::st434::s380m::groups::PersonType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Person (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Person (::xercesc::XMLFormatTarget& t,
              const ::st434::s380m::groups::PersonType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Person (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Person (::xercesc::XMLFormatTarget& t,
              const ::st434::s380m::groups::PersonType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Person (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Person (::xercesc::DOMDocument& d,
              const ::st434::s380m::groups::PersonType& s,
              ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Person" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Person",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Person (const ::st434::s380m::groups::PersonType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Person",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Person (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const PersonType& i)
      {
        e << static_cast< const ::st434::s380m::groups::ContactType& > (i);

        // FamilyName
        //
        if (i.FamilyName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FamilyName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.FamilyName ();
        }

        // FirstGivenName
        //
        if (i.FirstGivenName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FirstGivenName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.FirstGivenName ();
        }

        // OtherGivenNames
        //
        if (i.OtherGivenNames ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OtherGivenNames",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.OtherGivenNames ();
        }

        // Salutation
        //
        if (i.Salutation ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Salutation",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.Salutation ();
        }

        // HonorsQualifications
        //
        if (i.HonorsQualifications ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HonorsQualifications",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.HonorsQualifications ();
        }

        // PersonDescription
        //
        if (i.PersonDescription ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PersonDescription",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.PersonDescription ();
        }

        // AlternateName
        //
        if (i.AlternateName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AlternateName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.AlternateName ();
        }

        // LinkingName
        //
        if (i.LinkingName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LinkingName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.LinkingName ();
        }

        // NameSuffix
        //
        if (i.NameSuffix ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NameSuffix",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.NameSuffix ();
        }

        // FormerFamilyName
        //
        if (i.FormerFamilyName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FormerFamilyName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.FormerFamilyName ();
        }

        // Nationality
        //
        if (i.Nationality ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Nationality",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.Nationality ();
        }

        // Citizenship
        //
        if (i.Citizenship ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Citizenship",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.Citizenship ();
        }

        // PersonOrganizations
        //
        if (i.PersonOrganizations ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PersonOrganizations",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.PersonOrganizations ();
        }
      }

      void
      Organization_REF (::std::ostream& o,
                        const ::st434::s377m::types::Ref& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Organization_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Organization_REF (::std::ostream& o,
                        const ::st434::s377m::types::Ref& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Organization_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Organization_REF (::std::ostream& o,
                        const ::st434::s377m::types::Ref& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Organization_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Organization_REF (::xercesc::XMLFormatTarget& t,
                        const ::st434::s377m::types::Ref& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Organization_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Organization_REF (::xercesc::XMLFormatTarget& t,
                        const ::st434::s377m::types::Ref& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Organization_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Organization_REF (::xercesc::XMLFormatTarget& t,
                        const ::st434::s377m::types::Ref& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Organization_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Organization_REF (::xercesc::DOMDocument& d,
                        const ::st434::s377m::types::Ref& s,
                        ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Organization_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Organization_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Organization_REF (const ::st434::s377m::types::Ref& s,
                        const ::xml_schema::namespace_infomap& m,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Organization_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Organization_REF (*d, s, f);
        return d;
      }

      void
      Organization (::std::ostream& o,
                    const ::st434::s380m::groups::OrganizationType& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Organization (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Organization (::std::ostream& o,
                    const ::st434::s380m::groups::OrganizationType& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Organization (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Organization (::std::ostream& o,
                    const ::st434::s380m::groups::OrganizationType& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Organization (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Organization (::xercesc::XMLFormatTarget& t,
                    const ::st434::s380m::groups::OrganizationType& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Organization (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Organization (::xercesc::XMLFormatTarget& t,
                    const ::st434::s380m::groups::OrganizationType& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Organization (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Organization (::xercesc::XMLFormatTarget& t,
                    const ::st434::s380m::groups::OrganizationType& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Organization (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Organization (::xercesc::DOMDocument& d,
                    const ::st434::s380m::groups::OrganizationType& s,
                    ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Organization" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Organization",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Organization (const ::st434::s380m::groups::OrganizationType& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Organization",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Organization (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const OrganizationType& i)
      {
        e << static_cast< const ::st434::s380m::groups::ContactType& > (i);

        // OrganizationKind
        //
        if (i.OrganizationKind ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OrganizationKind",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.OrganizationKind ();
        }

        // OrganizationMainName
        //
        if (i.OrganizationMainName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OrganizationMainName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.OrganizationMainName ();
        }

        // OrganizationCode
        //
        if (i.OrganizationCode ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OrganizationCode",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.OrganizationCode ();
        }

        // ContactDepartment
        //
        if (i.ContactDepartment ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ContactDepartment",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ContactDepartment ();
        }
      }

      void
      Location_REF (::std::ostream& o,
                    const ::st434::s377m::types::Ref& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Location_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Location_REF (::std::ostream& o,
                    const ::st434::s377m::types::Ref& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Location_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Location_REF (::std::ostream& o,
                    const ::st434::s377m::types::Ref& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Location_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Location_REF (::xercesc::XMLFormatTarget& t,
                    const ::st434::s377m::types::Ref& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Location_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Location_REF (::xercesc::XMLFormatTarget& t,
                    const ::st434::s377m::types::Ref& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Location_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Location_REF (::xercesc::XMLFormatTarget& t,
                    const ::st434::s377m::types::Ref& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Location_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Location_REF (::xercesc::DOMDocument& d,
                    const ::st434::s377m::types::Ref& s,
                    ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Location_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Location_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Location_REF (const ::st434::s377m::types::Ref& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Location_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Location_REF (*d, s, f);
        return d;
      }

      void
      Location (::std::ostream& o,
                const ::st434::s380m::groups::LocationType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Location (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Location (::std::ostream& o,
                const ::st434::s380m::groups::LocationType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Location (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Location (::std::ostream& o,
                const ::st434::s380m::groups::LocationType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Location (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Location (::xercesc::XMLFormatTarget& t,
                const ::st434::s380m::groups::LocationType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Location (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Location (::xercesc::XMLFormatTarget& t,
                const ::st434::s380m::groups::LocationType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Location (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Location (::xercesc::XMLFormatTarget& t,
                const ::st434::s380m::groups::LocationType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Location (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Location (::xercesc::DOMDocument& d,
                const ::st434::s380m::groups::LocationType& s,
                ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Location" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Location",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Location (const ::st434::s380m::groups::LocationType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Location",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Location (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const LocationType& i)
      {
        e << static_cast< const ::st434::s380m::groups::ContactType& > (i);

        // LocationKind
        //
        if (i.LocationKind ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LocationKind",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.LocationKind ();
        }

        // LocationDescription
        //
        if (i.LocationDescription ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LocationDescription",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.LocationDescription ();
        }
      }

      void
      Address_REF (::std::ostream& o,
                   const ::st434::s377m::types::Ref& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Address_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Address_REF (::std::ostream& o,
                   const ::st434::s377m::types::Ref& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Address_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Address_REF (::std::ostream& o,
                   const ::st434::s377m::types::Ref& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Address_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Address_REF (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::types::Ref& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Address_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Address_REF (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::types::Ref& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Address_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Address_REF (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::types::Ref& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Address_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Address_REF (::xercesc::DOMDocument& d,
                   const ::st434::s377m::types::Ref& s,
                   ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Address_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Address_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Address_REF (const ::st434::s377m::types::Ref& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Address_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Address_REF (*d, s, f);
        return d;
      }

      void
      Address (::std::ostream& o,
               const ::st434::s380m::groups::AddressType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Address (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Address (::std::ostream& o,
               const ::st434::s380m::groups::AddressType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Address (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Address (::std::ostream& o,
               const ::st434::s380m::groups::AddressType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Address (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Address (::xercesc::XMLFormatTarget& t,
               const ::st434::s380m::groups::AddressType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Address (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Address (::xercesc::XMLFormatTarget& t,
               const ::st434::s380m::groups::AddressType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Address (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Address (::xercesc::XMLFormatTarget& t,
               const ::st434::s380m::groups::AddressType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Address (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Address (::xercesc::DOMDocument& d,
               const ::st434::s380m::groups::AddressType& s,
               ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Address" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Address",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Address (const ::st434::s380m::groups::AddressType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Address",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Address (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const AddressType& i)
      {
        e << static_cast< const ::st434::s380m::groups::DMS1ObjectType& > (i);

        // RoomSuiteNumber
        //
        if (i.RoomSuiteNumber ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RoomSuiteNumber",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.RoomSuiteNumber ();
        }

        // RoomSuiteName
        //
        if (i.RoomSuiteName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RoomSuiteName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.RoomSuiteName ();
        }

        // BuildingName
        //
        if (i.BuildingName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BuildingName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.BuildingName ();
        }

        // PlaceName
        //
        if (i.PlaceName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PlaceName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.PlaceName ();
        }

        // StreetNumber
        //
        if (i.StreetNumber ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StreetNumber",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.StreetNumber ();
        }

        // StreetName
        //
        if (i.StreetName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StreetName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.StreetName ();
        }

        // PostalTown
        //
        if (i.PostalTown ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PostalTown",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.PostalTown ();
        }

        // City
        //
        if (i.City ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "City",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.City ();
        }

        // StateProvinceCounty
        //
        if (i.StateProvinceCounty ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StateProvinceCounty",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.StateProvinceCounty ();
        }

        // PostalCode
        //
        if (i.PostalCode ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PostalCode",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.PostalCode ();
        }

        // Country
        //
        if (i.Country ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Country",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.Country ();
        }

        // GeographicalCoordinates
        //
        if (i.GeographicalCoordinates ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "GeographicalCoordinates",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.GeographicalCoordinates ();
        }

        // AstronomicalBodyName
        //
        if (i.AstronomicalBodyName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AstronomicalBodyName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.AstronomicalBodyName ();
        }

        // CommunicationsObjects
        //
        if (i.CommunicationsObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CommunicationsObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.CommunicationsObjects ();
        }

        // AddressNameValueObjects
        //
        if (i.AddressNameValueObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AddressNameValueObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.AddressNameValueObjects ();
        }
      }

      void
      Communications_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Communications_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Communications_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Communications_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Communications_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Communications_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Communications_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Communications_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Communications_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Communications_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Communications_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Communications_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Communications_REF (::xercesc::DOMDocument& d,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Communications_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Communications_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Communications_REF (const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Communications_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Communications_REF (*d, s, f);
        return d;
      }

      void
      Communications (::std::ostream& o,
                      const ::st434::s380m::groups::CommunicationsType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Communications (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Communications (::std::ostream& o,
                      const ::st434::s380m::groups::CommunicationsType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Communications (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Communications (::std::ostream& o,
                      const ::st434::s380m::groups::CommunicationsType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Communications (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Communications (::xercesc::XMLFormatTarget& t,
                      const ::st434::s380m::groups::CommunicationsType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Communications (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Communications (::xercesc::XMLFormatTarget& t,
                      const ::st434::s380m::groups::CommunicationsType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Communications (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Communications (::xercesc::XMLFormatTarget& t,
                      const ::st434::s380m::groups::CommunicationsType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Communications (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Communications (::xercesc::DOMDocument& d,
                      const ::st434::s380m::groups::CommunicationsType& s,
                      ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Communications" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Communications",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Communications (const ::st434::s380m::groups::CommunicationsType& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Communications",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Communications (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const CommunicationsType& i)
      {
        e << static_cast< const ::st434::s380m::groups::DMS1ObjectType& > (i);

        // CentralTelephoneNumber
        //
        if (i.CentralTelephoneNumber ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CentralTelephoneNumber",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.CentralTelephoneNumber ();
        }

        // TelephoneNumber
        //
        if (i.TelephoneNumber ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TelephoneNumber",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.TelephoneNumber ();
        }

        // MobileTelephoneNumber
        //
        if (i.MobileTelephoneNumber ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MobileTelephoneNumber",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.MobileTelephoneNumber ();
        }

        // FaxNumber
        //
        if (i.FaxNumber ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FaxNumber",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.FaxNumber ();
        }

        // EmailAddress
        //
        if (i.EmailAddress ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EmailAddress",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.EmailAddress ();
        }

        // ContactWebPage
        //
        if (i.ContactWebPage ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ContactWebPage",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ContactWebPage ();
        }
      }

      void
      Contract_REF (::std::ostream& o,
                    const ::st434::s377m::types::Ref& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Contract_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Contract_REF (::std::ostream& o,
                    const ::st434::s377m::types::Ref& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Contract_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Contract_REF (::std::ostream& o,
                    const ::st434::s377m::types::Ref& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Contract_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Contract_REF (::xercesc::XMLFormatTarget& t,
                    const ::st434::s377m::types::Ref& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Contract_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Contract_REF (::xercesc::XMLFormatTarget& t,
                    const ::st434::s377m::types::Ref& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Contract_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Contract_REF (::xercesc::XMLFormatTarget& t,
                    const ::st434::s377m::types::Ref& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Contract_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Contract_REF (::xercesc::DOMDocument& d,
                    const ::st434::s377m::types::Ref& s,
                    ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Contract_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Contract_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Contract_REF (const ::st434::s377m::types::Ref& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Contract_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Contract_REF (*d, s, f);
        return d;
      }

      void
      Contract (::std::ostream& o,
                const ::st434::s380m::groups::ContractType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Contract (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Contract (::std::ostream& o,
                const ::st434::s380m::groups::ContractType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Contract (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Contract (::std::ostream& o,
                const ::st434::s380m::groups::ContractType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Contract (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Contract (::xercesc::XMLFormatTarget& t,
                const ::st434::s380m::groups::ContractType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Contract (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Contract (::xercesc::XMLFormatTarget& t,
                const ::st434::s380m::groups::ContractType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Contract (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Contract (::xercesc::XMLFormatTarget& t,
                const ::st434::s380m::groups::ContractType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Contract (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Contract (::xercesc::DOMDocument& d,
                const ::st434::s380m::groups::ContractType& s,
                ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Contract" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Contract",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Contract (const ::st434::s380m::groups::ContractType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Contract",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Contract (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const ContractType& i)
      {
        e << static_cast< const ::st434::s380m::groups::ThesaurusType& > (i);

        // SupplyContractNumber
        //
        if (i.SupplyContractNumber ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SupplyContractNumber",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.SupplyContractNumber ();
        }

        // RightsObjects
        //
        if (i.RightsObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RightsObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.RightsObjects ();
        }

        // ContractParticipants
        //
        if (i.ContractParticipants ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ContractParticipants",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ContractParticipants ();
        }
      }

      void
      Rights_REF (::std::ostream& o,
                  const ::st434::s377m::types::Ref& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Rights_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Rights_REF (::std::ostream& o,
                  const ::st434::s377m::types::Ref& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Rights_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Rights_REF (::std::ostream& o,
                  const ::st434::s377m::types::Ref& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Rights_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Rights_REF (::xercesc::XMLFormatTarget& t,
                  const ::st434::s377m::types::Ref& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Rights_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Rights_REF (::xercesc::XMLFormatTarget& t,
                  const ::st434::s377m::types::Ref& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Rights_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Rights_REF (::xercesc::XMLFormatTarget& t,
                  const ::st434::s377m::types::Ref& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Rights_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Rights_REF (::xercesc::DOMDocument& d,
                  const ::st434::s377m::types::Ref& s,
                  ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Rights_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Rights_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Rights_REF (const ::st434::s377m::types::Ref& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Rights_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Rights_REF (*d, s, f);
        return d;
      }

      void
      Rights (::std::ostream& o,
              const ::st434::s380m::groups::RightsType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Rights (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Rights (::std::ostream& o,
              const ::st434::s380m::groups::RightsType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Rights (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Rights (::std::ostream& o,
              const ::st434::s380m::groups::RightsType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Rights (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Rights (::xercesc::XMLFormatTarget& t,
              const ::st434::s380m::groups::RightsType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Rights (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Rights (::xercesc::XMLFormatTarget& t,
              const ::st434::s380m::groups::RightsType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Rights (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Rights (::xercesc::XMLFormatTarget& t,
              const ::st434::s380m::groups::RightsType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Rights (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Rights (::xercesc::DOMDocument& d,
              const ::st434::s380m::groups::RightsType& s,
              ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Rights" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Rights",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Rights (const ::st434::s380m::groups::RightsType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Rights",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Rights (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const RightsType& i)
      {
        e << static_cast< const ::st434::s380m::groups::ThesaurusType& > (i);

        // CopyrightOwner
        //
        if (i.CopyrightOwner ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CopyrightOwner",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.CopyrightOwner ();
        }

        // Rightsholder
        //
        if (i.Rightsholder ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Rightsholder",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.Rightsholder ();
        }

        // RightsManagementAuthority
        //
        if (i.RightsManagementAuthority ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RightsManagementAuthority",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.RightsManagementAuthority ();
        }

        // RegionAreaOfIPLicense
        //
        if (i.RegionAreaOfIPLicense ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RegionAreaOfIPLicense",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.RegionAreaOfIPLicense ();
        }

        // IntellectualPropertyDescription
        //
        if (i.IntellectualPropertyDescription ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IntellectualPropertyDescription",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.IntellectualPropertyDescription ();
        }

        // RightsCondition
        //
        if (i.RightsCondition ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RightsCondition",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.RightsCondition ();
        }

        // RightsComment
        //
        if (i.RightsComment ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RightsComment",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.RightsComment ();
        }

        // IntellectualPropertyRight
        //
        if (i.IntellectualPropertyRight ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IntellectualPropertyRight",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.IntellectualPropertyRight ();
        }

        // RightsStartDateTime
        //
        if (i.RightsStartDateTime ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RightsStartDateTime",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.RightsStartDateTime ();
        }

        // RightsStopDateTime
        //
        if (i.RightsStopDateTime ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RightsStopDateTime",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.RightsStopDateTime ();
        }

        // MaxNumberOfUsages
        //
        if (i.MaxNumberOfUsages ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MaxNumberOfUsages",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.MaxNumberOfUsages ();
        }
      }

      void
      PictureFormat_REF (::std::ostream& o,
                         const ::st434::s377m::types::Ref& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::PictureFormat_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      PictureFormat_REF (::std::ostream& o,
                         const ::st434::s377m::types::Ref& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::PictureFormat_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PictureFormat_REF (::std::ostream& o,
                         const ::st434::s377m::types::Ref& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::PictureFormat_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PictureFormat_REF (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::types::Ref& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::PictureFormat_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      PictureFormat_REF (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::types::Ref& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::PictureFormat_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PictureFormat_REF (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::types::Ref& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::PictureFormat_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PictureFormat_REF (::xercesc::DOMDocument& d,
                         const ::st434::s377m::types::Ref& s,
                         ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PictureFormat_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "PictureFormat_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      PictureFormat_REF (const ::st434::s377m::types::Ref& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "PictureFormat_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::PictureFormat_REF (*d, s, f);
        return d;
      }

      void
      PictureFormat (::std::ostream& o,
                     const ::st434::s380m::groups::PictureFormatType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::PictureFormat (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      PictureFormat (::std::ostream& o,
                     const ::st434::s380m::groups::PictureFormatType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::PictureFormat (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PictureFormat (::std::ostream& o,
                     const ::st434::s380m::groups::PictureFormatType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::PictureFormat (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PictureFormat (::xercesc::XMLFormatTarget& t,
                     const ::st434::s380m::groups::PictureFormatType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::PictureFormat (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      PictureFormat (::xercesc::XMLFormatTarget& t,
                     const ::st434::s380m::groups::PictureFormatType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::PictureFormat (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PictureFormat (::xercesc::XMLFormatTarget& t,
                     const ::st434::s380m::groups::PictureFormatType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::PictureFormat (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PictureFormat (::xercesc::DOMDocument& d,
                     const ::st434::s380m::groups::PictureFormatType& s,
                     ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PictureFormat" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "PictureFormat",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      PictureFormat (const ::st434::s380m::groups::PictureFormatType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "PictureFormat",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::PictureFormat (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const PictureFormatType& i)
      {
        e << static_cast< const ::st434::s380m::groups::DMS1ObjectType& > (i);

        // ViewportAspectRatio
        //
        if (i.ViewportAspectRatio ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ViewportAspectRatio",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ViewportAspectRatio ();
        }

        // PerceivedDisplayFormat
        //
        if (i.PerceivedDisplayFormat ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PerceivedDisplayFormat",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.PerceivedDisplayFormat ();
        }

        // ColorDescriptor
        //
        if (i.ColorDescriptor ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ColorDescriptor",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ColorDescriptor ();
        }
      }

      void
      DeviceParameters_REF (::std::ostream& o,
                            const ::st434::s377m::types::Ref& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DeviceParameters_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DeviceParameters_REF (::std::ostream& o,
                            const ::st434::s377m::types::Ref& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DeviceParameters_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DeviceParameters_REF (::std::ostream& o,
                            const ::st434::s377m::types::Ref& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DeviceParameters_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DeviceParameters_REF (::xercesc::XMLFormatTarget& t,
                            const ::st434::s377m::types::Ref& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DeviceParameters_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DeviceParameters_REF (::xercesc::XMLFormatTarget& t,
                            const ::st434::s377m::types::Ref& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DeviceParameters_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DeviceParameters_REF (::xercesc::XMLFormatTarget& t,
                            const ::st434::s377m::types::Ref& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DeviceParameters_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DeviceParameters_REF (::xercesc::DOMDocument& d,
                            const ::st434::s377m::types::Ref& s,
                            ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DeviceParameters_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DeviceParameters_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DeviceParameters_REF (const ::st434::s377m::types::Ref& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "DeviceParameters_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::DeviceParameters_REF (*d, s, f);
        return d;
      }

      void
      DeviceParameters (::std::ostream& o,
                        const ::st434::s380m::groups::DeviceParametersType& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DeviceParameters (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DeviceParameters (::std::ostream& o,
                        const ::st434::s380m::groups::DeviceParametersType& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DeviceParameters (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DeviceParameters (::std::ostream& o,
                        const ::st434::s380m::groups::DeviceParametersType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DeviceParameters (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DeviceParameters (::xercesc::XMLFormatTarget& t,
                        const ::st434::s380m::groups::DeviceParametersType& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DeviceParameters (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DeviceParameters (::xercesc::XMLFormatTarget& t,
                        const ::st434::s380m::groups::DeviceParametersType& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DeviceParameters (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DeviceParameters (::xercesc::XMLFormatTarget& t,
                        const ::st434::s380m::groups::DeviceParametersType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::DeviceParameters (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DeviceParameters (::xercesc::DOMDocument& d,
                        const ::st434::s380m::groups::DeviceParametersType& s,
                        ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DeviceParameters" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DeviceParameters",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DeviceParameters (const ::st434::s380m::groups::DeviceParametersType& s,
                        const ::xml_schema::namespace_infomap& m,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "DeviceParameters",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::DeviceParameters (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const DeviceParametersType& i)
      {
        e << static_cast< const ::st434::s380m::groups::ThesaurusType& > (i);

        // DeviceKind
        //
        if (i.DeviceKind ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DeviceKind",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DeviceKind ();
        }

        // DeviceDesignation
        //
        if (i.DeviceDesignation ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DeviceDesignation",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DeviceDesignation ();
        }

        // DeviceAssetNumber
        //
        if (i.DeviceAssetNumber ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DeviceAssetNumber",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DeviceAssetNumber ();
        }

        // IEEEDeviceIdentifier
        //
        if (i.IEEEDeviceIdentifier ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IEEEDeviceIdentifier",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.IEEEDeviceIdentifier ();
        }

        // DeviceManufacturerName
        //
        if (i.DeviceManufacturerName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DeviceManufacturerName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DeviceManufacturerName ();
        }

        // DeviceModel
        //
        if (i.DeviceModel ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DeviceModel",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DeviceModel ();
        }

        // DeviceSerialNumber
        //
        if (i.DeviceSerialNumber ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DeviceSerialNumber",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DeviceSerialNumber ();
        }

        // DeviceUsageDescription
        //
        if (i.DeviceUsageDescription ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DeviceUsageDescription",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DeviceUsageDescription ();
        }

        // DeviceParametersNameValueObjects
        //
        if (i.DeviceParametersNameValueObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DeviceParametersNameValueObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DeviceParametersNameValueObjects ();
        }
      }

      void
      NameValue_REF (::std::ostream& o,
                     const ::st434::s377m::types::Ref& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::NameValue_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      NameValue_REF (::std::ostream& o,
                     const ::st434::s377m::types::Ref& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::NameValue_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      NameValue_REF (::std::ostream& o,
                     const ::st434::s377m::types::Ref& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::NameValue_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      NameValue_REF (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::types::Ref& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::NameValue_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      NameValue_REF (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::types::Ref& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::NameValue_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      NameValue_REF (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::types::Ref& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::NameValue_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      NameValue_REF (::xercesc::DOMDocument& d,
                     const ::st434::s377m::types::Ref& s,
                     ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "NameValue_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "NameValue_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      NameValue_REF (const ::st434::s377m::types::Ref& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "NameValue_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::NameValue_REF (*d, s, f);
        return d;
      }

      void
      NameValue (::std::ostream& o,
                 const ::st434::s380m::groups::NameValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::NameValue (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      NameValue (::std::ostream& o,
                 const ::st434::s380m::groups::NameValueType& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::NameValue (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      NameValue (::std::ostream& o,
                 const ::st434::s380m::groups::NameValueType& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::NameValue (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      NameValue (::xercesc::XMLFormatTarget& t,
                 const ::st434::s380m::groups::NameValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::NameValue (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      NameValue (::xercesc::XMLFormatTarget& t,
                 const ::st434::s380m::groups::NameValueType& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::NameValue (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      NameValue (::xercesc::XMLFormatTarget& t,
                 const ::st434::s380m::groups::NameValueType& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::NameValue (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      NameValue (::xercesc::DOMDocument& d,
                 const ::st434::s380m::groups::NameValueType& s,
                 ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "NameValue" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "NameValue",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      NameValue (const ::st434::s380m::groups::NameValueType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "NameValue",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::NameValue (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const NameValueType& i)
      {
        e << static_cast< const ::st434::s380m::groups::DMS1ObjectType& > (i);

        // ItemName
        //
        if (i.ItemName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ItemName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ItemName ();
        }

        // ItemValue
        //
        if (i.ItemValue ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ItemValue",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ItemValue ();
        }

        // SMPTEUniversalLabelLocator
        //
        if (i.SMPTEUniversalLabelLocator ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SMPTEUniversalLabelLocator",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.SMPTEUniversalLabelLocator ();
        }
      }

      void
      Processing_REF (::std::ostream& o,
                      const ::st434::s377m::types::Ref& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Processing_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Processing_REF (::std::ostream& o,
                      const ::st434::s377m::types::Ref& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Processing_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Processing_REF (::std::ostream& o,
                      const ::st434::s377m::types::Ref& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Processing_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Processing_REF (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::types::Ref& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Processing_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Processing_REF (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::types::Ref& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Processing_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Processing_REF (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::types::Ref& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Processing_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Processing_REF (::xercesc::DOMDocument& d,
                      const ::st434::s377m::types::Ref& s,
                      ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Processing_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Processing_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Processing_REF (const ::st434::s377m::types::Ref& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Processing_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Processing_REF (*d, s, f);
        return d;
      }

      void
      Processing (::std::ostream& o,
                  const ::st434::s380m::groups::ProcessingType& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Processing (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Processing (::std::ostream& o,
                  const ::st434::s380m::groups::ProcessingType& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Processing (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Processing (::std::ostream& o,
                  const ::st434::s380m::groups::ProcessingType& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Processing (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Processing (::xercesc::XMLFormatTarget& t,
                  const ::st434::s380m::groups::ProcessingType& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Processing (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Processing (::xercesc::XMLFormatTarget& t,
                  const ::st434::s380m::groups::ProcessingType& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Processing (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Processing (::xercesc::XMLFormatTarget& t,
                  const ::st434::s380m::groups::ProcessingType& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Processing (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Processing (::xercesc::DOMDocument& d,
                  const ::st434::s380m::groups::ProcessingType& s,
                  ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Processing" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Processing",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Processing (const ::st434::s380m::groups::ProcessingType& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Processing",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Processing (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const ProcessingType& i)
      {
        e << static_cast< const ::st434::s380m::groups::DMS1ObjectType& > (i);

        // QualityFlag
        //
        if (i.QualityFlag ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "QualityFlag",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.QualityFlag ();
        }

        // DescriptiveComment
        //
        if (i.DescriptiveComment ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DescriptiveComment",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DescriptiveComment ();
        }

        // GraphicUsage
        //
        if (i.GraphicUsage ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "GraphicUsage",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.GraphicUsage ();
        }

        // LogoFlag
        //
        if (i.LogoFlag ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LogoFlag",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.LogoFlag ();
        }

        // SimpleFlagging
        //
        if (i.SimpleFlagging ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SimpleFlagging",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.SimpleFlagging ();
        }

        // GenerationCopyNumber
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "GenerationCopyNumber",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.GenerationCopyNumber ();
        }

        // GenerationCloneNumber
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "GenerationCloneNumber",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.GenerationCloneNumber ();
        }
      }

      void
      Project_REF (::std::ostream& o,
                   const ::st434::s377m::types::Ref& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Project_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Project_REF (::std::ostream& o,
                   const ::st434::s377m::types::Ref& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Project_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Project_REF (::std::ostream& o,
                   const ::st434::s377m::types::Ref& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Project_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Project_REF (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::types::Ref& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Project_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Project_REF (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::types::Ref& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Project_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Project_REF (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::types::Ref& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Project_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Project_REF (::xercesc::DOMDocument& d,
                   const ::st434::s377m::types::Ref& s,
                   ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Project_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Project_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Project_REF (const ::st434::s377m::types::Ref& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Project_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Project_REF (*d, s, f);
        return d;
      }

      void
      Project (::std::ostream& o,
               const ::st434::s380m::groups::ProjectType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Project (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Project (::std::ostream& o,
               const ::st434::s380m::groups::ProjectType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Project (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Project (::std::ostream& o,
               const ::st434::s380m::groups::ProjectType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Project (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Project (::xercesc::XMLFormatTarget& t,
               const ::st434::s380m::groups::ProjectType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Project (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Project (::xercesc::XMLFormatTarget& t,
               const ::st434::s380m::groups::ProjectType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Project (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Project (::xercesc::XMLFormatTarget& t,
               const ::st434::s380m::groups::ProjectType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::Project (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Project (::xercesc::DOMDocument& d,
               const ::st434::s380m::groups::ProjectType& s,
               ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Project" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Project",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Project (const ::st434::s380m::groups::ProjectType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Project",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::Project (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const ProjectType& i)
      {
        e << static_cast< const ::st434::s380m::groups::DMS1ObjectType& > (i);

        // ProjectNumber
        //
        if (i.ProjectNumber ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ProjectNumber",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ProjectNumber ();
        }

        // ProjectName
        //
        if (i.ProjectName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ProjectName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ProjectName ();
        }
      }

      void
      ContactsList_REF (::std::ostream& o,
                        const ::st434::s377m::types::Ref& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ContactsList_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      ContactsList_REF (::std::ostream& o,
                        const ::st434::s377m::types::Ref& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ContactsList_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ContactsList_REF (::std::ostream& o,
                        const ::st434::s377m::types::Ref& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ContactsList_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ContactsList_REF (::xercesc::XMLFormatTarget& t,
                        const ::st434::s377m::types::Ref& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ContactsList_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      ContactsList_REF (::xercesc::XMLFormatTarget& t,
                        const ::st434::s377m::types::Ref& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ContactsList_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ContactsList_REF (::xercesc::XMLFormatTarget& t,
                        const ::st434::s377m::types::Ref& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ContactsList_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ContactsList_REF (::xercesc::DOMDocument& d,
                        const ::st434::s377m::types::Ref& s,
                        ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ContactsList_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ContactsList_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      ContactsList_REF (const ::st434::s377m::types::Ref& s,
                        const ::xml_schema::namespace_infomap& m,
                        ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "ContactsList_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::ContactsList_REF (*d, s, f);
        return d;
      }

      void
      ContactsList (::std::ostream& o,
                    const ::st434::s380m::groups::ContactsListType& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ContactsList (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      ContactsList (::std::ostream& o,
                    const ::st434::s380m::groups::ContactsListType& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ContactsList (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ContactsList (::std::ostream& o,
                    const ::st434::s380m::groups::ContactsListType& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ContactsList (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ContactsList (::xercesc::XMLFormatTarget& t,
                    const ::st434::s380m::groups::ContactsListType& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ContactsList (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      ContactsList (::xercesc::XMLFormatTarget& t,
                    const ::st434::s380m::groups::ContactsListType& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ContactsList (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ContactsList (::xercesc::XMLFormatTarget& t,
                    const ::st434::s380m::groups::ContactsListType& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::ContactsList (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ContactsList (::xercesc::DOMDocument& d,
                    const ::st434::s380m::groups::ContactsListType& s,
                    ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ContactsList" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ContactsList",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      ContactsList (const ::st434::s380m::groups::ContactsListType& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "ContactsList",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::ContactsList (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const ContactsListType& i)
      {
        e << static_cast< const ::st434::s380m::groups::DMS1ObjectType& > (i);

        // PersonObjects
        //
        if (i.PersonObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PersonObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.PersonObjects ();
        }

        // OrganizationObjects
        //
        if (i.OrganizationObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OrganizationObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.OrganizationObjects ();
        }

        // LocationObjects
        //
        if (i.LocationObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LocationObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.LocationObjects ();
        }
      }

      void
      CueWords_REF (::std::ostream& o,
                    const ::st434::s377m::types::Ref& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CueWords_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      CueWords_REF (::std::ostream& o,
                    const ::st434::s377m::types::Ref& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CueWords_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CueWords_REF (::std::ostream& o,
                    const ::st434::s377m::types::Ref& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CueWords_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CueWords_REF (::xercesc::XMLFormatTarget& t,
                    const ::st434::s377m::types::Ref& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CueWords_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      CueWords_REF (::xercesc::XMLFormatTarget& t,
                    const ::st434::s377m::types::Ref& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CueWords_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CueWords_REF (::xercesc::XMLFormatTarget& t,
                    const ::st434::s377m::types::Ref& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CueWords_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CueWords_REF (::xercesc::DOMDocument& d,
                    const ::st434::s377m::types::Ref& s,
                    ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CueWords_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "CueWords_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      CueWords_REF (const ::st434::s377m::types::Ref& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "CueWords_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::CueWords_REF (*d, s, f);
        return d;
      }

      void
      CueWords (::std::ostream& o,
                const ::st434::s380m::groups::CueWordsType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CueWords (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      CueWords (::std::ostream& o,
                const ::st434::s380m::groups::CueWordsType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CueWords (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CueWords (::std::ostream& o,
                const ::st434::s380m::groups::CueWordsType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CueWords (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CueWords (::xercesc::XMLFormatTarget& t,
                const ::st434::s380m::groups::CueWordsType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CueWords (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      CueWords (::xercesc::XMLFormatTarget& t,
                const ::st434::s380m::groups::CueWordsType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CueWords (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CueWords (::xercesc::XMLFormatTarget& t,
                const ::st434::s380m::groups::CueWordsType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s380m::groups::CueWords (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CueWords (::xercesc::DOMDocument& d,
                const ::st434::s380m::groups::CueWordsType& s,
                ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CueWords" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "CueWords",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      CueWords (const ::st434::s380m::groups::CueWordsType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "CueWords",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S380M/2004",
            m, f));

        ::st434::s380m::groups::CueWords (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const CueWordsType& i)
      {
        e << static_cast< const ::st434::s380m::groups::TextLanguageType& > (i);

        // InCueWords
        //
        if (i.InCueWords ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "InCueWords",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.InCueWords ();
        }

        // OutCueWords
        //
        if (i.OutCueWords ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OutCueWords",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.OutCueWords ();
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

