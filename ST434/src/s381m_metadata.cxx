// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "groups/s381m_metadata.hxx"

namespace st434
{
  namespace s381m
  {
    namespace groups
    {
      // MPEGVideoDescriptorType
      // 

      const MPEGVideoDescriptorType::SingleSequence_optional& MPEGVideoDescriptorType::
      SingleSequence () const
      {
        return this->SingleSequence_;
      }

      MPEGVideoDescriptorType::SingleSequence_optional& MPEGVideoDescriptorType::
      SingleSequence ()
      {
        return this->SingleSequence_;
      }

      void MPEGVideoDescriptorType::
      SingleSequence (const SingleSequence_type& x)
      {
        this->SingleSequence_.set (x);
      }

      void MPEGVideoDescriptorType::
      SingleSequence (const SingleSequence_optional& x)
      {
        this->SingleSequence_ = x;
      }

      void MPEGVideoDescriptorType::
      SingleSequence (::std::auto_ptr< SingleSequence_type > x)
      {
        this->SingleSequence_.set (x);
      }

      const MPEGVideoDescriptorType::ConstantBPictureCount_optional& MPEGVideoDescriptorType::
      ConstantBPictureCount () const
      {
        return this->ConstantBPictureCount_;
      }

      MPEGVideoDescriptorType::ConstantBPictureCount_optional& MPEGVideoDescriptorType::
      ConstantBPictureCount ()
      {
        return this->ConstantBPictureCount_;
      }

      void MPEGVideoDescriptorType::
      ConstantBPictureCount (const ConstantBPictureCount_type& x)
      {
        this->ConstantBPictureCount_.set (x);
      }

      void MPEGVideoDescriptorType::
      ConstantBPictureCount (const ConstantBPictureCount_optional& x)
      {
        this->ConstantBPictureCount_ = x;
      }

      void MPEGVideoDescriptorType::
      ConstantBPictureCount (::std::auto_ptr< ConstantBPictureCount_type > x)
      {
        this->ConstantBPictureCount_.set (x);
      }

      MPEGVideoDescriptorType::ConstantBPictureCount_type MPEGVideoDescriptorType::
      ConstantBPictureCount_default_value ()
      {
        return ConstantBPictureCount_type (false);
      }

      const MPEGVideoDescriptorType::CodedContentScanning_optional& MPEGVideoDescriptorType::
      CodedContentScanning () const
      {
        return this->CodedContentScanning_;
      }

      MPEGVideoDescriptorType::CodedContentScanning_optional& MPEGVideoDescriptorType::
      CodedContentScanning ()
      {
        return this->CodedContentScanning_;
      }

      void MPEGVideoDescriptorType::
      CodedContentScanning (const CodedContentScanning_type& x)
      {
        this->CodedContentScanning_.set (x);
      }

      void MPEGVideoDescriptorType::
      CodedContentScanning (const CodedContentScanning_optional& x)
      {
        this->CodedContentScanning_ = x;
      }

      void MPEGVideoDescriptorType::
      CodedContentScanning (::std::auto_ptr< CodedContentScanning_type > x)
      {
        this->CodedContentScanning_.set (x);
      }

      const MPEGVideoDescriptorType::LowDelay_optional& MPEGVideoDescriptorType::
      LowDelay () const
      {
        return this->LowDelay_;
      }

      MPEGVideoDescriptorType::LowDelay_optional& MPEGVideoDescriptorType::
      LowDelay ()
      {
        return this->LowDelay_;
      }

      void MPEGVideoDescriptorType::
      LowDelay (const LowDelay_type& x)
      {
        this->LowDelay_.set (x);
      }

      void MPEGVideoDescriptorType::
      LowDelay (const LowDelay_optional& x)
      {
        this->LowDelay_ = x;
      }

      void MPEGVideoDescriptorType::
      LowDelay (::std::auto_ptr< LowDelay_type > x)
      {
        this->LowDelay_.set (x);
      }

      MPEGVideoDescriptorType::LowDelay_type MPEGVideoDescriptorType::
      LowDelay_default_value ()
      {
        return LowDelay_type (false);
      }

      const MPEGVideoDescriptorType::ClosedGOP_optional& MPEGVideoDescriptorType::
      ClosedGOP () const
      {
        return this->ClosedGOP_;
      }

      MPEGVideoDescriptorType::ClosedGOP_optional& MPEGVideoDescriptorType::
      ClosedGOP ()
      {
        return this->ClosedGOP_;
      }

      void MPEGVideoDescriptorType::
      ClosedGOP (const ClosedGOP_type& x)
      {
        this->ClosedGOP_.set (x);
      }

      void MPEGVideoDescriptorType::
      ClosedGOP (const ClosedGOP_optional& x)
      {
        this->ClosedGOP_ = x;
      }

      void MPEGVideoDescriptorType::
      ClosedGOP (::std::auto_ptr< ClosedGOP_type > x)
      {
        this->ClosedGOP_.set (x);
      }

      MPEGVideoDescriptorType::ClosedGOP_type MPEGVideoDescriptorType::
      ClosedGOP_default_value ()
      {
        return ClosedGOP_type (false);
      }

      const MPEGVideoDescriptorType::IdenticalGOP_optional& MPEGVideoDescriptorType::
      IdenticalGOP () const
      {
        return this->IdenticalGOP_;
      }

      MPEGVideoDescriptorType::IdenticalGOP_optional& MPEGVideoDescriptorType::
      IdenticalGOP ()
      {
        return this->IdenticalGOP_;
      }

      void MPEGVideoDescriptorType::
      IdenticalGOP (const IdenticalGOP_type& x)
      {
        this->IdenticalGOP_.set (x);
      }

      void MPEGVideoDescriptorType::
      IdenticalGOP (const IdenticalGOP_optional& x)
      {
        this->IdenticalGOP_ = x;
      }

      void MPEGVideoDescriptorType::
      IdenticalGOP (::std::auto_ptr< IdenticalGOP_type > x)
      {
        this->IdenticalGOP_.set (x);
      }

      MPEGVideoDescriptorType::IdenticalGOP_type MPEGVideoDescriptorType::
      IdenticalGOP_default_value ()
      {
        return IdenticalGOP_type (false);
      }

      const MPEGVideoDescriptorType::MaxGOP_optional& MPEGVideoDescriptorType::
      MaxGOP () const
      {
        return this->MaxGOP_;
      }

      MPEGVideoDescriptorType::MaxGOP_optional& MPEGVideoDescriptorType::
      MaxGOP ()
      {
        return this->MaxGOP_;
      }

      void MPEGVideoDescriptorType::
      MaxGOP (const MaxGOP_type& x)
      {
        this->MaxGOP_.set (x);
      }

      void MPEGVideoDescriptorType::
      MaxGOP (const MaxGOP_optional& x)
      {
        this->MaxGOP_ = x;
      }

      void MPEGVideoDescriptorType::
      MaxGOP (::std::auto_ptr< MaxGOP_type > x)
      {
        this->MaxGOP_.set (x);
      }

      MPEGVideoDescriptorType::MaxGOP_type MPEGVideoDescriptorType::
      MaxGOP_default_value ()
      {
        return MaxGOP_type (0);
      }

      const MPEGVideoDescriptorType::MaxBPictureCount_optional& MPEGVideoDescriptorType::
      MaxBPictureCount () const
      {
        return this->MaxBPictureCount_;
      }

      MPEGVideoDescriptorType::MaxBPictureCount_optional& MPEGVideoDescriptorType::
      MaxBPictureCount ()
      {
        return this->MaxBPictureCount_;
      }

      void MPEGVideoDescriptorType::
      MaxBPictureCount (const MaxBPictureCount_type& x)
      {
        this->MaxBPictureCount_.set (x);
      }

      void MPEGVideoDescriptorType::
      MaxBPictureCount (const MaxBPictureCount_optional& x)
      {
        this->MaxBPictureCount_ = x;
      }

      void MPEGVideoDescriptorType::
      MaxBPictureCount (::std::auto_ptr< MaxBPictureCount_type > x)
      {
        this->MaxBPictureCount_.set (x);
      }

      const MPEGVideoDescriptorType::BitRate_optional& MPEGVideoDescriptorType::
      BitRate () const
      {
        return this->BitRate_;
      }

      MPEGVideoDescriptorType::BitRate_optional& MPEGVideoDescriptorType::
      BitRate ()
      {
        return this->BitRate_;
      }

      void MPEGVideoDescriptorType::
      BitRate (const BitRate_type& x)
      {
        this->BitRate_.set (x);
      }

      void MPEGVideoDescriptorType::
      BitRate (const BitRate_optional& x)
      {
        this->BitRate_ = x;
      }

      void MPEGVideoDescriptorType::
      BitRate (::std::auto_ptr< BitRate_type > x)
      {
        this->BitRate_.set (x);
      }

      const MPEGVideoDescriptorType::ProfileAndLevel_optional& MPEGVideoDescriptorType::
      ProfileAndLevel () const
      {
        return this->ProfileAndLevel_;
      }

      MPEGVideoDescriptorType::ProfileAndLevel_optional& MPEGVideoDescriptorType::
      ProfileAndLevel ()
      {
        return this->ProfileAndLevel_;
      }

      void MPEGVideoDescriptorType::
      ProfileAndLevel (const ProfileAndLevel_type& x)
      {
        this->ProfileAndLevel_.set (x);
      }

      void MPEGVideoDescriptorType::
      ProfileAndLevel (const ProfileAndLevel_optional& x)
      {
        this->ProfileAndLevel_ = x;
      }

      void MPEGVideoDescriptorType::
      ProfileAndLevel (::std::auto_ptr< ProfileAndLevel_type > x)
      {
        this->ProfileAndLevel_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace st434
{
  namespace s381m
  {
    namespace groups
    {
      // MPEGVideoDescriptorType
      //

      MPEGVideoDescriptorType::
      MPEGVideoDescriptorType (const InstanceID_type& InstanceID,
                               const SampleRate_type& SampleRate,
                               const ContainerFormat_type& ContainerFormat)
      : ::st434::s377m::groups::CDCIDescriptorType (InstanceID,
                                                    SampleRate,
                                                    ContainerFormat),
        SingleSequence_ (::xml_schema::flags (), this),
        ConstantBPictureCount_ (::xml_schema::flags (), this),
        CodedContentScanning_ (::xml_schema::flags (), this),
        LowDelay_ (::xml_schema::flags (), this),
        ClosedGOP_ (::xml_schema::flags (), this),
        IdenticalGOP_ (::xml_schema::flags (), this),
        MaxGOP_ (::xml_schema::flags (), this),
        MaxBPictureCount_ (::xml_schema::flags (), this),
        BitRate_ (::xml_schema::flags (), this),
        ProfileAndLevel_ (::xml_schema::flags (), this)
      {
      }

      MPEGVideoDescriptorType::
      MPEGVideoDescriptorType (const InstanceID_type& InstanceID,
                               ::std::auto_ptr< SampleRate_type >& SampleRate,
                               const ContainerFormat_type& ContainerFormat)
      : ::st434::s377m::groups::CDCIDescriptorType (InstanceID,
                                                    SampleRate,
                                                    ContainerFormat),
        SingleSequence_ (::xml_schema::flags (), this),
        ConstantBPictureCount_ (::xml_schema::flags (), this),
        CodedContentScanning_ (::xml_schema::flags (), this),
        LowDelay_ (::xml_schema::flags (), this),
        ClosedGOP_ (::xml_schema::flags (), this),
        IdenticalGOP_ (::xml_schema::flags (), this),
        MaxGOP_ (::xml_schema::flags (), this),
        MaxBPictureCount_ (::xml_schema::flags (), this),
        BitRate_ (::xml_schema::flags (), this),
        ProfileAndLevel_ (::xml_schema::flags (), this)
      {
      }

      MPEGVideoDescriptorType::
      MPEGVideoDescriptorType (const MPEGVideoDescriptorType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
      : ::st434::s377m::groups::CDCIDescriptorType (x, f, c),
        SingleSequence_ (x.SingleSequence_, f, this),
        ConstantBPictureCount_ (x.ConstantBPictureCount_, f, this),
        CodedContentScanning_ (x.CodedContentScanning_, f, this),
        LowDelay_ (x.LowDelay_, f, this),
        ClosedGOP_ (x.ClosedGOP_, f, this),
        IdenticalGOP_ (x.IdenticalGOP_, f, this),
        MaxGOP_ (x.MaxGOP_, f, this),
        MaxBPictureCount_ (x.MaxBPictureCount_, f, this),
        BitRate_ (x.BitRate_, f, this),
        ProfileAndLevel_ (x.ProfileAndLevel_, f, this)
      {
      }

      MPEGVideoDescriptorType::
      MPEGVideoDescriptorType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
      : ::st434::s377m::groups::CDCIDescriptorType (e, f | ::xml_schema::flags::base, c),
        SingleSequence_ (f, this),
        ConstantBPictureCount_ (f, this),
        CodedContentScanning_ (f, this),
        LowDelay_ (f, this),
        ClosedGOP_ (f, this),
        IdenticalGOP_ (f, this),
        MaxGOP_ (f, this),
        MaxBPictureCount_ (f, this),
        BitRate_ (f, this),
        ProfileAndLevel_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void MPEGVideoDescriptorType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::CDCIDescriptorType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SingleSequence
          //
          if (n.name () == "SingleSequence" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SingleSequence_type > r (
              SingleSequence_traits::create (i, f, this));

            if (!this->SingleSequence_)
            {
              this->SingleSequence_.set (r);
              continue;
            }
          }

          // ConstantBPictureCount
          //
          if (n.name () == "ConstantBPictureCount" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ConstantBPictureCount_type > r (
              ConstantBPictureCount_traits::create (i, f, this));

            if (!this->ConstantBPictureCount_)
            {
              this->ConstantBPictureCount_.set (r);
              continue;
            }
          }

          // CodedContentScanning
          //
          if (n.name () == "CodedContentScanning" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< CodedContentScanning_type > r (
              CodedContentScanning_traits::create (i, f, this));

            if (!this->CodedContentScanning_)
            {
              this->CodedContentScanning_.set (r);
              continue;
            }
          }

          // LowDelay
          //
          if (n.name () == "LowDelay" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< LowDelay_type > r (
              LowDelay_traits::create (i, f, this));

            if (!this->LowDelay_)
            {
              this->LowDelay_.set (r);
              continue;
            }
          }

          // ClosedGOP
          //
          if (n.name () == "ClosedGOP" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ClosedGOP_type > r (
              ClosedGOP_traits::create (i, f, this));

            if (!this->ClosedGOP_)
            {
              this->ClosedGOP_.set (r);
              continue;
            }
          }

          // IdenticalGOP
          //
          if (n.name () == "IdenticalGOP" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< IdenticalGOP_type > r (
              IdenticalGOP_traits::create (i, f, this));

            if (!this->IdenticalGOP_)
            {
              this->IdenticalGOP_.set (r);
              continue;
            }
          }

          // MaxGOP
          //
          if (n.name () == "MaxGOP" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< MaxGOP_type > r (
              MaxGOP_traits::create (i, f, this));

            if (!this->MaxGOP_)
            {
              this->MaxGOP_.set (r);
              continue;
            }
          }

          // MaxBPictureCount
          //
          if (n.name () == "MaxBPictureCount" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< MaxBPictureCount_type > r (
              MaxBPictureCount_traits::create (i, f, this));

            if (!this->MaxBPictureCount_)
            {
              this->MaxBPictureCount_.set (r);
              continue;
            }
          }

          // BitRate
          //
          if (n.name () == "BitRate" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< BitRate_type > r (
              BitRate_traits::create (i, f, this));

            if (!this->BitRate_)
            {
              this->BitRate_.set (r);
              continue;
            }
          }

          // ProfileAndLevel
          //
          if (n.name () == "ProfileAndLevel" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ProfileAndLevel_type > r (
              ProfileAndLevel_traits::create (i, f, this));

            if (!this->ProfileAndLevel_)
            {
              this->ProfileAndLevel_.set (r);
              continue;
            }
          }

          break;
        }
      }

      MPEGVideoDescriptorType* MPEGVideoDescriptorType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class MPEGVideoDescriptorType (*this, f, c);
      }

      MPEGVideoDescriptorType::
      ~MPEGVideoDescriptorType ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace st434
{
  namespace s381m
  {
    namespace groups
    {
      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MPEGVideoDescriptor_REF (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s381m::groups::MPEGVideoDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MPEGVideoDescriptor_REF (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s381m::groups::MPEGVideoDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MPEGVideoDescriptor_REF (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s381m::groups::MPEGVideoDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MPEGVideoDescriptor_REF (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s381m::groups::MPEGVideoDescriptor_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MPEGVideoDescriptor_REF (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s381m::groups::MPEGVideoDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MPEGVideoDescriptor_REF (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s381m::groups::MPEGVideoDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MPEGVideoDescriptor_REF (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s381m::groups::MPEGVideoDescriptor_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MPEGVideoDescriptor_REF (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s381m::groups::MPEGVideoDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MPEGVideoDescriptor_REF (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s381m::groups::MPEGVideoDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MPEGVideoDescriptor_REF (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s381m::groups::MPEGVideoDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MPEGVideoDescriptor_REF (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s381m::groups::MPEGVideoDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MPEGVideoDescriptor_REF (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s381m::groups::MPEGVideoDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MPEGVideoDescriptor_REF (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s381m::groups::MPEGVideoDescriptor_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "MPEGVideoDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S381M/2005")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MPEGVideoDescriptor_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S381M/2005");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MPEGVideoDescriptor_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "MPEGVideoDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S381M/2005")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MPEGVideoDescriptor_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S381M/2005");
      }

      ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType >
      MPEGVideoDescriptor (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType > r (
          ::st434::s381m::groups::MPEGVideoDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType >
      MPEGVideoDescriptor (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType > r (
          ::st434::s381m::groups::MPEGVideoDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType >
      MPEGVideoDescriptor (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType > r (
          ::st434::s381m::groups::MPEGVideoDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType >
      MPEGVideoDescriptor (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s381m::groups::MPEGVideoDescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType >
      MPEGVideoDescriptor (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s381m::groups::MPEGVideoDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType >
      MPEGVideoDescriptor (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s381m::groups::MPEGVideoDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType >
      MPEGVideoDescriptor (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s381m::groups::MPEGVideoDescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType >
      MPEGVideoDescriptor (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s381m::groups::MPEGVideoDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType >
      MPEGVideoDescriptor (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s381m::groups::MPEGVideoDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType >
      MPEGVideoDescriptor (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType > r (
          ::st434::s381m::groups::MPEGVideoDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType >
      MPEGVideoDescriptor (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType > r (
          ::st434::s381m::groups::MPEGVideoDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType >
      MPEGVideoDescriptor (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType > r (
          ::st434::s381m::groups::MPEGVideoDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType >
      MPEGVideoDescriptor (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType > r (
            ::st434::s381m::groups::MPEGVideoDescriptor (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "MPEGVideoDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S381M/2005")
        {
          ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s381m::groups::MPEGVideoDescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MPEGVideoDescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S381M/2005");
      }

      ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType >
      MPEGVideoDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "MPEGVideoDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S381M/2005")
        {
          ::std::auto_ptr< ::st434::s381m::groups::MPEGVideoDescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s381m::groups::MPEGVideoDescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MPEGVideoDescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S381M/2005");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace st434
{
  namespace s381m
  {
    namespace groups
    {
      void
      MPEGVideoDescriptor_REF (::std::ostream& o,
                               const ::st434::s377m::types::Ref& s,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s381m::groups::MPEGVideoDescriptor_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      MPEGVideoDescriptor_REF (::std::ostream& o,
                               const ::st434::s377m::types::Ref& s,
                               ::xml_schema::error_handler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s381m::groups::MPEGVideoDescriptor_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MPEGVideoDescriptor_REF (::std::ostream& o,
                               const ::st434::s377m::types::Ref& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s381m::groups::MPEGVideoDescriptor_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MPEGVideoDescriptor_REF (::xercesc::XMLFormatTarget& t,
                               const ::st434::s377m::types::Ref& s,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s381m::groups::MPEGVideoDescriptor_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      MPEGVideoDescriptor_REF (::xercesc::XMLFormatTarget& t,
                               const ::st434::s377m::types::Ref& s,
                               ::xml_schema::error_handler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s381m::groups::MPEGVideoDescriptor_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MPEGVideoDescriptor_REF (::xercesc::XMLFormatTarget& t,
                               const ::st434::s377m::types::Ref& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s381m::groups::MPEGVideoDescriptor_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MPEGVideoDescriptor_REF (::xercesc::DOMDocument& d,
                               const ::st434::s377m::types::Ref& s,
                               ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "MPEGVideoDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S381M/2005")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "MPEGVideoDescriptor_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S381M/2005");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      MPEGVideoDescriptor_REF (const ::st434::s377m::types::Ref& s,
                               const ::xml_schema::namespace_infomap& m,
                               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "MPEGVideoDescriptor_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S381M/2005",
            m, f));

        ::st434::s381m::groups::MPEGVideoDescriptor_REF (*d, s, f);
        return d;
      }

      void
      MPEGVideoDescriptor (::std::ostream& o,
                           const ::st434::s381m::groups::MPEGVideoDescriptorType& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s381m::groups::MPEGVideoDescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      MPEGVideoDescriptor (::std::ostream& o,
                           const ::st434::s381m::groups::MPEGVideoDescriptorType& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s381m::groups::MPEGVideoDescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MPEGVideoDescriptor (::std::ostream& o,
                           const ::st434::s381m::groups::MPEGVideoDescriptorType& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s381m::groups::MPEGVideoDescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MPEGVideoDescriptor (::xercesc::XMLFormatTarget& t,
                           const ::st434::s381m::groups::MPEGVideoDescriptorType& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s381m::groups::MPEGVideoDescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      MPEGVideoDescriptor (::xercesc::XMLFormatTarget& t,
                           const ::st434::s381m::groups::MPEGVideoDescriptorType& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s381m::groups::MPEGVideoDescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MPEGVideoDescriptor (::xercesc::XMLFormatTarget& t,
                           const ::st434::s381m::groups::MPEGVideoDescriptorType& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s381m::groups::MPEGVideoDescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MPEGVideoDescriptor (::xercesc::DOMDocument& d,
                           const ::st434::s381m::groups::MPEGVideoDescriptorType& s,
                           ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "MPEGVideoDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S381M/2005")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "MPEGVideoDescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S381M/2005");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      MPEGVideoDescriptor (const ::st434::s381m::groups::MPEGVideoDescriptorType& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "MPEGVideoDescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S381M/2005",
            m, f));

        ::st434::s381m::groups::MPEGVideoDescriptor (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const MPEGVideoDescriptorType& i)
      {
        e << static_cast< const ::st434::s377m::groups::CDCIDescriptorType& > (i);

        // SingleSequence
        //
        if (i.SingleSequence ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SingleSequence",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.SingleSequence ();
        }

        // ConstantBPictureCount
        //
        if (i.ConstantBPictureCount ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ConstantBPictureCount",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ConstantBPictureCount ();
        }

        // CodedContentScanning
        //
        if (i.CodedContentScanning ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CodedContentScanning",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.CodedContentScanning ();
        }

        // LowDelay
        //
        if (i.LowDelay ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LowDelay",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.LowDelay ();
        }

        // ClosedGOP
        //
        if (i.ClosedGOP ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ClosedGOP",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ClosedGOP ();
        }

        // IdenticalGOP
        //
        if (i.IdenticalGOP ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IdenticalGOP",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.IdenticalGOP ();
        }

        // MaxGOP
        //
        if (i.MaxGOP ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MaxGOP",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.MaxGOP ();
        }

        // MaxBPictureCount
        //
        if (i.MaxBPictureCount ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MaxBPictureCount",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.MaxBPictureCount ();
        }

        // BitRate
        //
        if (i.BitRate ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BitRate",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.BitRate ();
        }

        // ProfileAndLevel
        //
        if (i.ProfileAndLevel ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ProfileAndLevel",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ProfileAndLevel ();
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

