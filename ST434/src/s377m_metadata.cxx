// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "dataTypes/s377m_types.hxx"

#include "dictionary/rp210.hxx"

#include "groups/s377m_metadata.hxx"

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      // AbstractSetType
      // 

      const AbstractSetType::ExtensionProperties_optional& AbstractSetType::
      ExtensionProperties () const
      {
        return this->ExtensionProperties_;
      }

      AbstractSetType::ExtensionProperties_optional& AbstractSetType::
      ExtensionProperties ()
      {
        return this->ExtensionProperties_;
      }

      void AbstractSetType::
      ExtensionProperties (const ExtensionProperties_type& x)
      {
        this->ExtensionProperties_.set (x);
      }

      void AbstractSetType::
      ExtensionProperties (const ExtensionProperties_optional& x)
      {
        this->ExtensionProperties_ = x;
      }

      void AbstractSetType::
      ExtensionProperties (::std::auto_ptr< ExtensionProperties_type > x)
      {
        this->ExtensionProperties_.set (x);
      }

      const AbstractSetType::InstanceID_type& AbstractSetType::
      InstanceID () const
      {
        return this->InstanceID_.get ();
      }

      AbstractSetType::InstanceID_type& AbstractSetType::
      InstanceID ()
      {
        return this->InstanceID_.get ();
      }

      void AbstractSetType::
      InstanceID (const InstanceID_type& x)
      {
        this->InstanceID_.set (x);
      }

      void AbstractSetType::
      InstanceID (::std::auto_ptr< InstanceID_type > x)
      {
        this->InstanceID_.set (x);
      }


      // InterchangeObjectType
      // 

      const InterchangeObjectType::LinkedGenerationID_optional& InterchangeObjectType::
      LinkedGenerationID () const
      {
        return this->LinkedGenerationID_;
      }

      InterchangeObjectType::LinkedGenerationID_optional& InterchangeObjectType::
      LinkedGenerationID ()
      {
        return this->LinkedGenerationID_;
      }

      void InterchangeObjectType::
      LinkedGenerationID (const LinkedGenerationID_type& x)
      {
        this->LinkedGenerationID_.set (x);
      }

      void InterchangeObjectType::
      LinkedGenerationID (const LinkedGenerationID_optional& x)
      {
        this->LinkedGenerationID_ = x;
      }

      void InterchangeObjectType::
      LinkedGenerationID (::std::auto_ptr< LinkedGenerationID_type > x)
      {
        this->LinkedGenerationID_.set (x);
      }


      // SubDescriptorsType
      // 


      // DescriptiveFrameworkType
      // 


      // DescriptiveObjectType
      // 


      // TrackType
      // 

      const TrackType::TrackID_optional& TrackType::
      TrackID () const
      {
        return this->TrackID_;
      }

      TrackType::TrackID_optional& TrackType::
      TrackID ()
      {
        return this->TrackID_;
      }

      void TrackType::
      TrackID (const TrackID_type& x)
      {
        this->TrackID_.set (x);
      }

      void TrackType::
      TrackID (const TrackID_optional& x)
      {
        this->TrackID_ = x;
      }

      void TrackType::
      TrackID (::std::auto_ptr< TrackID_type > x)
      {
        this->TrackID_.set (x);
      }

      const TrackType::EssenceTrackNumber_type& TrackType::
      EssenceTrackNumber () const
      {
        return this->EssenceTrackNumber_.get ();
      }

      TrackType::EssenceTrackNumber_type& TrackType::
      EssenceTrackNumber ()
      {
        return this->EssenceTrackNumber_.get ();
      }

      void TrackType::
      EssenceTrackNumber (const EssenceTrackNumber_type& x)
      {
        this->EssenceTrackNumber_.set (x);
      }

      void TrackType::
      EssenceTrackNumber (::std::auto_ptr< EssenceTrackNumber_type > x)
      {
        this->EssenceTrackNumber_.set (x);
      }

      TrackType::EssenceTrackNumber_type TrackType::
      EssenceTrackNumber_default_value ()
      {
        return EssenceTrackNumber_type (0);
      }

      const TrackType::TrackName_optional& TrackType::
      TrackName () const
      {
        return this->TrackName_;
      }

      TrackType::TrackName_optional& TrackType::
      TrackName ()
      {
        return this->TrackName_;
      }

      void TrackType::
      TrackName (const TrackName_type& x)
      {
        this->TrackName_.set (x);
      }

      void TrackType::
      TrackName (const TrackName_optional& x)
      {
        this->TrackName_ = x;
      }

      void TrackType::
      TrackName (::std::auto_ptr< TrackName_type > x)
      {
        this->TrackName_.set (x);
      }

      const TrackType::TrackName_type& TrackType::
      TrackName_default_value ()
      {
        return TrackName_default_value_;
      }

      const TrackType::TrackSegment_type& TrackType::
      TrackSegment () const
      {
        return this->TrackSegment_.get ();
      }

      TrackType::TrackSegment_type& TrackType::
      TrackSegment ()
      {
        return this->TrackSegment_.get ();
      }

      void TrackType::
      TrackSegment (const TrackSegment_type& x)
      {
        this->TrackSegment_.set (x);
      }

      void TrackType::
      TrackSegment (::std::auto_ptr< TrackSegment_type > x)
      {
        this->TrackSegment_.set (x);
      }


      // PackageType
      // 

      const PackageType::PackageID_type& PackageType::
      PackageID () const
      {
        return this->PackageID_.get ();
      }

      PackageType::PackageID_type& PackageType::
      PackageID ()
      {
        return this->PackageID_.get ();
      }

      void PackageType::
      PackageID (const PackageID_type& x)
      {
        this->PackageID_.set (x);
      }

      void PackageType::
      PackageID (::std::auto_ptr< PackageID_type > x)
      {
        this->PackageID_.set (x);
      }

      const PackageType::PackageName_optional& PackageType::
      PackageName () const
      {
        return this->PackageName_;
      }

      PackageType::PackageName_optional& PackageType::
      PackageName ()
      {
        return this->PackageName_;
      }

      void PackageType::
      PackageName (const PackageName_type& x)
      {
        this->PackageName_.set (x);
      }

      void PackageType::
      PackageName (const PackageName_optional& x)
      {
        this->PackageName_ = x;
      }

      void PackageType::
      PackageName (::std::auto_ptr< PackageName_type > x)
      {
        this->PackageName_.set (x);
      }

      const PackageType::CreationTime_type& PackageType::
      CreationTime () const
      {
        return this->CreationTime_.get ();
      }

      PackageType::CreationTime_type& PackageType::
      CreationTime ()
      {
        return this->CreationTime_.get ();
      }

      void PackageType::
      CreationTime (const CreationTime_type& x)
      {
        this->CreationTime_.set (x);
      }

      void PackageType::
      CreationTime (::std::auto_ptr< CreationTime_type > x)
      {
        this->CreationTime_.set (x);
      }

      const PackageType::PackageLastModified_type& PackageType::
      PackageLastModified () const
      {
        return this->PackageLastModified_.get ();
      }

      PackageType::PackageLastModified_type& PackageType::
      PackageLastModified ()
      {
        return this->PackageLastModified_.get ();
      }

      void PackageType::
      PackageLastModified (const PackageLastModified_type& x)
      {
        this->PackageLastModified_.set (x);
      }

      void PackageType::
      PackageLastModified (::std::auto_ptr< PackageLastModified_type > x)
      {
        this->PackageLastModified_.set (x);
      }

      const PackageType::PackageTracks_type& PackageType::
      PackageTracks () const
      {
        return this->PackageTracks_.get ();
      }

      PackageType::PackageTracks_type& PackageType::
      PackageTracks ()
      {
        return this->PackageTracks_.get ();
      }

      void PackageType::
      PackageTracks (const PackageTracks_type& x)
      {
        this->PackageTracks_.set (x);
      }

      void PackageType::
      PackageTracks (::std::auto_ptr< PackageTracks_type > x)
      {
        this->PackageTracks_.set (x);
      }


      // ComponentType
      // 

      const ComponentType::ComponentDataDefinition_type& ComponentType::
      ComponentDataDefinition () const
      {
        return this->ComponentDataDefinition_.get ();
      }

      ComponentType::ComponentDataDefinition_type& ComponentType::
      ComponentDataDefinition ()
      {
        return this->ComponentDataDefinition_.get ();
      }

      void ComponentType::
      ComponentDataDefinition (const ComponentDataDefinition_type& x)
      {
        this->ComponentDataDefinition_.set (x);
      }

      void ComponentType::
      ComponentDataDefinition (::std::auto_ptr< ComponentDataDefinition_type > x)
      {
        this->ComponentDataDefinition_.set (x);
      }

      const ComponentType::ComponentLength_optional& ComponentType::
      ComponentLength () const
      {
        return this->ComponentLength_;
      }

      ComponentType::ComponentLength_optional& ComponentType::
      ComponentLength ()
      {
        return this->ComponentLength_;
      }

      void ComponentType::
      ComponentLength (const ComponentLength_type& x)
      {
        this->ComponentLength_.set (x);
      }

      void ComponentType::
      ComponentLength (const ComponentLength_optional& x)
      {
        this->ComponentLength_ = x;
      }

      void ComponentType::
      ComponentLength (::std::auto_ptr< ComponentLength_type > x)
      {
        this->ComponentLength_.set (x);
      }


      // SegmentType
      // 


      // SourceReferenceType
      // 

      const SourceReferenceType::SourcePackageID_type& SourceReferenceType::
      SourcePackageID () const
      {
        return this->SourcePackageID_.get ();
      }

      SourceReferenceType::SourcePackageID_type& SourceReferenceType::
      SourcePackageID ()
      {
        return this->SourcePackageID_.get ();
      }

      void SourceReferenceType::
      SourcePackageID (const SourcePackageID_type& x)
      {
        this->SourcePackageID_.set (x);
      }

      void SourceReferenceType::
      SourcePackageID (::std::auto_ptr< SourcePackageID_type > x)
      {
        this->SourcePackageID_.set (x);
      }

      const SourceReferenceType::SourceTrackID_type& SourceReferenceType::
      SourceTrackID () const
      {
        return this->SourceTrackID_.get ();
      }

      SourceReferenceType::SourceTrackID_type& SourceReferenceType::
      SourceTrackID ()
      {
        return this->SourceTrackID_.get ();
      }

      void SourceReferenceType::
      SourceTrackID (const SourceTrackID_type& x)
      {
        this->SourceTrackID_.set (x);
      }

      void SourceReferenceType::
      SourceTrackID (::std::auto_ptr< SourceTrackID_type > x)
      {
        this->SourceTrackID_.set (x);
      }

      const SourceReferenceType::ChannelIDs_optional& SourceReferenceType::
      ChannelIDs () const
      {
        return this->ChannelIDs_;
      }

      SourceReferenceType::ChannelIDs_optional& SourceReferenceType::
      ChannelIDs ()
      {
        return this->ChannelIDs_;
      }

      void SourceReferenceType::
      ChannelIDs (const ChannelIDs_type& x)
      {
        this->ChannelIDs_.set (x);
      }

      void SourceReferenceType::
      ChannelIDs (const ChannelIDs_optional& x)
      {
        this->ChannelIDs_ = x;
      }

      void SourceReferenceType::
      ChannelIDs (::std::auto_ptr< ChannelIDs_type > x)
      {
        this->ChannelIDs_.set (x);
      }

      const SourceReferenceType::MonoSourceTrackIDs_optional& SourceReferenceType::
      MonoSourceTrackIDs () const
      {
        return this->MonoSourceTrackIDs_;
      }

      SourceReferenceType::MonoSourceTrackIDs_optional& SourceReferenceType::
      MonoSourceTrackIDs ()
      {
        return this->MonoSourceTrackIDs_;
      }

      void SourceReferenceType::
      MonoSourceTrackIDs (const MonoSourceTrackIDs_type& x)
      {
        this->MonoSourceTrackIDs_.set (x);
      }

      void SourceReferenceType::
      MonoSourceTrackIDs (const MonoSourceTrackIDs_optional& x)
      {
        this->MonoSourceTrackIDs_ = x;
      }

      void SourceReferenceType::
      MonoSourceTrackIDs (::std::auto_ptr< MonoSourceTrackIDs_type > x)
      {
        this->MonoSourceTrackIDs_.set (x);
      }


      // DMS1EventType
      // 

      const DMS1EventType::EventPosition_optional& DMS1EventType::
      EventPosition () const
      {
        return this->EventPosition_;
      }

      DMS1EventType::EventPosition_optional& DMS1EventType::
      EventPosition ()
      {
        return this->EventPosition_;
      }

      void DMS1EventType::
      EventPosition (const EventPosition_type& x)
      {
        this->EventPosition_.set (x);
      }

      void DMS1EventType::
      EventPosition (const EventPosition_optional& x)
      {
        this->EventPosition_ = x;
      }

      void DMS1EventType::
      EventPosition (::std::auto_ptr< EventPosition_type > x)
      {
        this->EventPosition_.set (x);
      }

      const DMS1EventType::EventComment_optional& DMS1EventType::
      EventComment () const
      {
        return this->EventComment_;
      }

      DMS1EventType::EventComment_optional& DMS1EventType::
      EventComment ()
      {
        return this->EventComment_;
      }

      void DMS1EventType::
      EventComment (const EventComment_type& x)
      {
        this->EventComment_.set (x);
      }

      void DMS1EventType::
      EventComment (const EventComment_optional& x)
      {
        this->EventComment_ = x;
      }

      void DMS1EventType::
      EventComment (::std::auto_ptr< EventComment_type > x)
      {
        this->EventComment_.set (x);
      }


      // CommentMarkerType
      // 


      // GenericDescriptorType
      // 

      const GenericDescriptorType::Locators_optional& GenericDescriptorType::
      Locators () const
      {
        return this->Locators_;
      }

      GenericDescriptorType::Locators_optional& GenericDescriptorType::
      Locators ()
      {
        return this->Locators_;
      }

      void GenericDescriptorType::
      Locators (const Locators_type& x)
      {
        this->Locators_.set (x);
      }

      void GenericDescriptorType::
      Locators (const Locators_optional& x)
      {
        this->Locators_ = x;
      }

      void GenericDescriptorType::
      Locators (::std::auto_ptr< Locators_type > x)
      {
        this->Locators_.set (x);
      }

      const GenericDescriptorType::SubDescriptors_optional& GenericDescriptorType::
      SubDescriptors () const
      {
        return this->SubDescriptors_;
      }

      GenericDescriptorType::SubDescriptors_optional& GenericDescriptorType::
      SubDescriptors ()
      {
        return this->SubDescriptors_;
      }

      void GenericDescriptorType::
      SubDescriptors (const SubDescriptors_type& x)
      {
        this->SubDescriptors_.set (x);
      }

      void GenericDescriptorType::
      SubDescriptors (const SubDescriptors_optional& x)
      {
        this->SubDescriptors_ = x;
      }

      void GenericDescriptorType::
      SubDescriptors (::std::auto_ptr< SubDescriptors_type > x)
      {
        this->SubDescriptors_.set (x);
      }


      // PhysicalDescriptorType
      // 


      // LocatorType
      // 


      // PrefaceType
      // 

      const PrefaceType::FileLastModified_type& PrefaceType::
      FileLastModified () const
      {
        return this->FileLastModified_.get ();
      }

      PrefaceType::FileLastModified_type& PrefaceType::
      FileLastModified ()
      {
        return this->FileLastModified_.get ();
      }

      void PrefaceType::
      FileLastModified (const FileLastModified_type& x)
      {
        this->FileLastModified_.set (x);
      }

      void PrefaceType::
      FileLastModified (::std::auto_ptr< FileLastModified_type > x)
      {
        this->FileLastModified_.set (x);
      }

      const PrefaceType::FormatVersion_type& PrefaceType::
      FormatVersion () const
      {
        return this->FormatVersion_.get ();
      }

      PrefaceType::FormatVersion_type& PrefaceType::
      FormatVersion ()
      {
        return this->FormatVersion_.get ();
      }

      void PrefaceType::
      FormatVersion (const FormatVersion_type& x)
      {
        this->FormatVersion_.set (x);
      }

      void PrefaceType::
      FormatVersion (::std::auto_ptr< FormatVersion_type > x)
      {
        this->FormatVersion_.set (x);
      }

      const PrefaceType::ObjectModelVersion_optional& PrefaceType::
      ObjectModelVersion () const
      {
        return this->ObjectModelVersion_;
      }

      PrefaceType::ObjectModelVersion_optional& PrefaceType::
      ObjectModelVersion ()
      {
        return this->ObjectModelVersion_;
      }

      void PrefaceType::
      ObjectModelVersion (const ObjectModelVersion_type& x)
      {
        this->ObjectModelVersion_.set (x);
      }

      void PrefaceType::
      ObjectModelVersion (const ObjectModelVersion_optional& x)
      {
        this->ObjectModelVersion_ = x;
      }

      void PrefaceType::
      ObjectModelVersion (::std::auto_ptr< ObjectModelVersion_type > x)
      {
        this->ObjectModelVersion_.set (x);
      }

      PrefaceType::ObjectModelVersion_type PrefaceType::
      ObjectModelVersion_default_value ()
      {
        return ObjectModelVersion_type (1);
      }

      const PrefaceType::PrimaryPackage_optional& PrefaceType::
      PrimaryPackage () const
      {
        return this->PrimaryPackage_;
      }

      PrefaceType::PrimaryPackage_optional& PrefaceType::
      PrimaryPackage ()
      {
        return this->PrimaryPackage_;
      }

      void PrefaceType::
      PrimaryPackage (const PrimaryPackage_type& x)
      {
        this->PrimaryPackage_.set (x);
      }

      void PrefaceType::
      PrimaryPackage (const PrimaryPackage_optional& x)
      {
        this->PrimaryPackage_ = x;
      }

      void PrefaceType::
      PrimaryPackage (::std::auto_ptr< PrimaryPackage_type > x)
      {
        this->PrimaryPackage_.set (x);
      }

      const PrefaceType::IdentificationList_type& PrefaceType::
      IdentificationList () const
      {
        return this->IdentificationList_.get ();
      }

      PrefaceType::IdentificationList_type& PrefaceType::
      IdentificationList ()
      {
        return this->IdentificationList_.get ();
      }

      void PrefaceType::
      IdentificationList (const IdentificationList_type& x)
      {
        this->IdentificationList_.set (x);
      }

      void PrefaceType::
      IdentificationList (::std::auto_ptr< IdentificationList_type > x)
      {
        this->IdentificationList_.set (x);
      }

      const PrefaceType::ContentStorageObject_type& PrefaceType::
      ContentStorageObject () const
      {
        return this->ContentStorageObject_.get ();
      }

      PrefaceType::ContentStorageObject_type& PrefaceType::
      ContentStorageObject ()
      {
        return this->ContentStorageObject_.get ();
      }

      void PrefaceType::
      ContentStorageObject (const ContentStorageObject_type& x)
      {
        this->ContentStorageObject_.set (x);
      }

      void PrefaceType::
      ContentStorageObject (::std::auto_ptr< ContentStorageObject_type > x)
      {
        this->ContentStorageObject_.set (x);
      }

      const PrefaceType::OperationalPattern_type& PrefaceType::
      OperationalPattern () const
      {
        return this->OperationalPattern_.get ();
      }

      PrefaceType::OperationalPattern_type& PrefaceType::
      OperationalPattern ()
      {
        return this->OperationalPattern_.get ();
      }

      void PrefaceType::
      OperationalPattern (const OperationalPattern_type& x)
      {
        this->OperationalPattern_.set (x);
      }

      void PrefaceType::
      OperationalPattern (::std::auto_ptr< OperationalPattern_type > x)
      {
        this->OperationalPattern_.set (x);
      }

      const PrefaceType::EssenceContainers_type& PrefaceType::
      EssenceContainers () const
      {
        return this->EssenceContainers_.get ();
      }

      PrefaceType::EssenceContainers_type& PrefaceType::
      EssenceContainers ()
      {
        return this->EssenceContainers_.get ();
      }

      void PrefaceType::
      EssenceContainers (const EssenceContainers_type& x)
      {
        this->EssenceContainers_.set (x);
      }

      void PrefaceType::
      EssenceContainers (::std::auto_ptr< EssenceContainers_type > x)
      {
        this->EssenceContainers_.set (x);
      }

      const PrefaceType::DescriptiveSchemes_type& PrefaceType::
      DescriptiveSchemes () const
      {
        return this->DescriptiveSchemes_.get ();
      }

      PrefaceType::DescriptiveSchemes_type& PrefaceType::
      DescriptiveSchemes ()
      {
        return this->DescriptiveSchemes_.get ();
      }

      void PrefaceType::
      DescriptiveSchemes (const DescriptiveSchemes_type& x)
      {
        this->DescriptiveSchemes_.set (x);
      }

      void PrefaceType::
      DescriptiveSchemes (::std::auto_ptr< DescriptiveSchemes_type > x)
      {
        this->DescriptiveSchemes_.set (x);
      }


      // IdentificationType
      // 

      const IdentificationType::GenerationID_type& IdentificationType::
      GenerationID () const
      {
        return this->GenerationID_.get ();
      }

      IdentificationType::GenerationID_type& IdentificationType::
      GenerationID ()
      {
        return this->GenerationID_.get ();
      }

      void IdentificationType::
      GenerationID (const GenerationID_type& x)
      {
        this->GenerationID_.set (x);
      }

      void IdentificationType::
      GenerationID (::std::auto_ptr< GenerationID_type > x)
      {
        this->GenerationID_.set (x);
      }

      const IdentificationType::ApplicationSupplierName_type& IdentificationType::
      ApplicationSupplierName () const
      {
        return this->ApplicationSupplierName_.get ();
      }

      IdentificationType::ApplicationSupplierName_type& IdentificationType::
      ApplicationSupplierName ()
      {
        return this->ApplicationSupplierName_.get ();
      }

      void IdentificationType::
      ApplicationSupplierName (const ApplicationSupplierName_type& x)
      {
        this->ApplicationSupplierName_.set (x);
      }

      void IdentificationType::
      ApplicationSupplierName (::std::auto_ptr< ApplicationSupplierName_type > x)
      {
        this->ApplicationSupplierName_.set (x);
      }

      const IdentificationType::ApplicationName_type& IdentificationType::
      ApplicationName () const
      {
        return this->ApplicationName_.get ();
      }

      IdentificationType::ApplicationName_type& IdentificationType::
      ApplicationName ()
      {
        return this->ApplicationName_.get ();
      }

      void IdentificationType::
      ApplicationName (const ApplicationName_type& x)
      {
        this->ApplicationName_.set (x);
      }

      void IdentificationType::
      ApplicationName (::std::auto_ptr< ApplicationName_type > x)
      {
        this->ApplicationName_.set (x);
      }

      const IdentificationType::ApplicationVersion_optional& IdentificationType::
      ApplicationVersion () const
      {
        return this->ApplicationVersion_;
      }

      IdentificationType::ApplicationVersion_optional& IdentificationType::
      ApplicationVersion ()
      {
        return this->ApplicationVersion_;
      }

      void IdentificationType::
      ApplicationVersion (const ApplicationVersion_type& x)
      {
        this->ApplicationVersion_.set (x);
      }

      void IdentificationType::
      ApplicationVersion (const ApplicationVersion_optional& x)
      {
        this->ApplicationVersion_ = x;
      }

      void IdentificationType::
      ApplicationVersion (::std::auto_ptr< ApplicationVersion_type > x)
      {
        this->ApplicationVersion_.set (x);
      }

      const IdentificationType::ApplicationVersionString_type& IdentificationType::
      ApplicationVersionString () const
      {
        return this->ApplicationVersionString_.get ();
      }

      IdentificationType::ApplicationVersionString_type& IdentificationType::
      ApplicationVersionString ()
      {
        return this->ApplicationVersionString_.get ();
      }

      void IdentificationType::
      ApplicationVersionString (const ApplicationVersionString_type& x)
      {
        this->ApplicationVersionString_.set (x);
      }

      void IdentificationType::
      ApplicationVersionString (::std::auto_ptr< ApplicationVersionString_type > x)
      {
        this->ApplicationVersionString_.set (x);
      }

      const IdentificationType::ApplicationProductID_type& IdentificationType::
      ApplicationProductID () const
      {
        return this->ApplicationProductID_.get ();
      }

      IdentificationType::ApplicationProductID_type& IdentificationType::
      ApplicationProductID ()
      {
        return this->ApplicationProductID_.get ();
      }

      void IdentificationType::
      ApplicationProductID (const ApplicationProductID_type& x)
      {
        this->ApplicationProductID_.set (x);
      }

      void IdentificationType::
      ApplicationProductID (::std::auto_ptr< ApplicationProductID_type > x)
      {
        this->ApplicationProductID_.set (x);
      }

      const IdentificationType::FileModificationDate_type& IdentificationType::
      FileModificationDate () const
      {
        return this->FileModificationDate_.get ();
      }

      IdentificationType::FileModificationDate_type& IdentificationType::
      FileModificationDate ()
      {
        return this->FileModificationDate_.get ();
      }

      void IdentificationType::
      FileModificationDate (const FileModificationDate_type& x)
      {
        this->FileModificationDate_.set (x);
      }

      void IdentificationType::
      FileModificationDate (::std::auto_ptr< FileModificationDate_type > x)
      {
        this->FileModificationDate_.set (x);
      }

      const IdentificationType::ToolkitVersion_optional& IdentificationType::
      ToolkitVersion () const
      {
        return this->ToolkitVersion_;
      }

      IdentificationType::ToolkitVersion_optional& IdentificationType::
      ToolkitVersion ()
      {
        return this->ToolkitVersion_;
      }

      void IdentificationType::
      ToolkitVersion (const ToolkitVersion_type& x)
      {
        this->ToolkitVersion_.set (x);
      }

      void IdentificationType::
      ToolkitVersion (const ToolkitVersion_optional& x)
      {
        this->ToolkitVersion_ = x;
      }

      void IdentificationType::
      ToolkitVersion (::std::auto_ptr< ToolkitVersion_type > x)
      {
        this->ToolkitVersion_.set (x);
      }

      const IdentificationType::ApplicationPlatform_optional& IdentificationType::
      ApplicationPlatform () const
      {
        return this->ApplicationPlatform_;
      }

      IdentificationType::ApplicationPlatform_optional& IdentificationType::
      ApplicationPlatform ()
      {
        return this->ApplicationPlatform_;
      }

      void IdentificationType::
      ApplicationPlatform (const ApplicationPlatform_type& x)
      {
        this->ApplicationPlatform_.set (x);
      }

      void IdentificationType::
      ApplicationPlatform (const ApplicationPlatform_optional& x)
      {
        this->ApplicationPlatform_ = x;
      }

      void IdentificationType::
      ApplicationPlatform (::std::auto_ptr< ApplicationPlatform_type > x)
      {
        this->ApplicationPlatform_.set (x);
      }


      // ContentStorageType
      // 

      const ContentStorageType::Packages_type& ContentStorageType::
      Packages () const
      {
        return this->Packages_.get ();
      }

      ContentStorageType::Packages_type& ContentStorageType::
      Packages ()
      {
        return this->Packages_.get ();
      }

      void ContentStorageType::
      Packages (const Packages_type& x)
      {
        this->Packages_.set (x);
      }

      void ContentStorageType::
      Packages (::std::auto_ptr< Packages_type > x)
      {
        this->Packages_.set (x);
      }

      const ContentStorageType::EssenceDataObjects_optional& ContentStorageType::
      EssenceDataObjects () const
      {
        return this->EssenceDataObjects_;
      }

      ContentStorageType::EssenceDataObjects_optional& ContentStorageType::
      EssenceDataObjects ()
      {
        return this->EssenceDataObjects_;
      }

      void ContentStorageType::
      EssenceDataObjects (const EssenceDataObjects_type& x)
      {
        this->EssenceDataObjects_.set (x);
      }

      void ContentStorageType::
      EssenceDataObjects (const EssenceDataObjects_optional& x)
      {
        this->EssenceDataObjects_ = x;
      }

      void ContentStorageType::
      EssenceDataObjects (::std::auto_ptr< EssenceDataObjects_type > x)
      {
        this->EssenceDataObjects_.set (x);
      }


      // EssenceDataType
      // 

      const EssenceDataType::LinkedPackageID_type& EssenceDataType::
      LinkedPackageID () const
      {
        return this->LinkedPackageID_.get ();
      }

      EssenceDataType::LinkedPackageID_type& EssenceDataType::
      LinkedPackageID ()
      {
        return this->LinkedPackageID_.get ();
      }

      void EssenceDataType::
      LinkedPackageID (const LinkedPackageID_type& x)
      {
        this->LinkedPackageID_.set (x);
      }

      void EssenceDataType::
      LinkedPackageID (::std::auto_ptr< LinkedPackageID_type > x)
      {
        this->LinkedPackageID_.set (x);
      }

      const EssenceDataType::IndexStreamID_optional& EssenceDataType::
      IndexStreamID () const
      {
        return this->IndexStreamID_;
      }

      EssenceDataType::IndexStreamID_optional& EssenceDataType::
      IndexStreamID ()
      {
        return this->IndexStreamID_;
      }

      void EssenceDataType::
      IndexStreamID (const IndexStreamID_type& x)
      {
        this->IndexStreamID_.set (x);
      }

      void EssenceDataType::
      IndexStreamID (const IndexStreamID_optional& x)
      {
        this->IndexStreamID_ = x;
      }

      void EssenceDataType::
      IndexStreamID (::std::auto_ptr< IndexStreamID_type > x)
      {
        this->IndexStreamID_.set (x);
      }

      EssenceDataType::IndexStreamID_type EssenceDataType::
      IndexStreamID_default_value ()
      {
        return IndexStreamID_type (0);
      }

      const EssenceDataType::EssenceStreamID_type& EssenceDataType::
      EssenceStreamID () const
      {
        return this->EssenceStreamID_.get ();
      }

      EssenceDataType::EssenceStreamID_type& EssenceDataType::
      EssenceStreamID ()
      {
        return this->EssenceStreamID_.get ();
      }

      void EssenceDataType::
      EssenceStreamID (const EssenceStreamID_type& x)
      {
        this->EssenceStreamID_.set (x);
      }

      void EssenceDataType::
      EssenceStreamID (::std::auto_ptr< EssenceStreamID_type > x)
      {
        this->EssenceStreamID_.set (x);
      }

      EssenceDataType::EssenceStreamID_type EssenceDataType::
      EssenceStreamID_default_value ()
      {
        return EssenceStreamID_type (0);
      }


      // NetworkLocatorType
      // 

      const NetworkLocatorType::URL_type& NetworkLocatorType::
      URL () const
      {
        return this->URL_.get ();
      }

      NetworkLocatorType::URL_type& NetworkLocatorType::
      URL ()
      {
        return this->URL_.get ();
      }

      void NetworkLocatorType::
      URL (const URL_type& x)
      {
        this->URL_.set (x);
      }

      void NetworkLocatorType::
      URL (::std::auto_ptr< URL_type > x)
      {
        this->URL_.set (x);
      }


      // TextLocatorType
      // 

      const TextLocatorType::LocationName_type& TextLocatorType::
      LocationName () const
      {
        return this->LocationName_.get ();
      }

      TextLocatorType::LocationName_type& TextLocatorType::
      LocationName ()
      {
        return this->LocationName_.get ();
      }

      void TextLocatorType::
      LocationName (const LocationName_type& x)
      {
        this->LocationName_.set (x);
      }

      void TextLocatorType::
      LocationName (::std::auto_ptr< LocationName_type > x)
      {
        this->LocationName_.set (x);
      }


      // TimelineTrackType
      // 

      const TimelineTrackType::EditRate_type& TimelineTrackType::
      EditRate () const
      {
        return this->EditRate_.get ();
      }

      TimelineTrackType::EditRate_type& TimelineTrackType::
      EditRate ()
      {
        return this->EditRate_.get ();
      }

      void TimelineTrackType::
      EditRate (const EditRate_type& x)
      {
        this->EditRate_.set (x);
      }

      void TimelineTrackType::
      EditRate (::std::auto_ptr< EditRate_type > x)
      {
        this->EditRate_.set (x);
      }

      const TimelineTrackType::Origin_type& TimelineTrackType::
      Origin () const
      {
        return this->Origin_.get ();
      }

      TimelineTrackType::Origin_type& TimelineTrackType::
      Origin ()
      {
        return this->Origin_.get ();
      }

      void TimelineTrackType::
      Origin (const Origin_type& x)
      {
        this->Origin_.set (x);
      }

      void TimelineTrackType::
      Origin (::std::auto_ptr< Origin_type > x)
      {
        this->Origin_.set (x);
      }


      // EventTrackType
      // 

      const EventTrackType::EventTrackEditRate_type& EventTrackType::
      EventTrackEditRate () const
      {
        return this->EventTrackEditRate_.get ();
      }

      EventTrackType::EventTrackEditRate_type& EventTrackType::
      EventTrackEditRate ()
      {
        return this->EventTrackEditRate_.get ();
      }

      void EventTrackType::
      EventTrackEditRate (const EventTrackEditRate_type& x)
      {
        this->EventTrackEditRate_.set (x);
      }

      void EventTrackType::
      EventTrackEditRate (::std::auto_ptr< EventTrackEditRate_type > x)
      {
        this->EventTrackEditRate_.set (x);
      }

      const EventTrackType::EventTrackOrigin_optional& EventTrackType::
      EventTrackOrigin () const
      {
        return this->EventTrackOrigin_;
      }

      EventTrackType::EventTrackOrigin_optional& EventTrackType::
      EventTrackOrigin ()
      {
        return this->EventTrackOrigin_;
      }

      void EventTrackType::
      EventTrackOrigin (const EventTrackOrigin_type& x)
      {
        this->EventTrackOrigin_.set (x);
      }

      void EventTrackType::
      EventTrackOrigin (const EventTrackOrigin_optional& x)
      {
        this->EventTrackOrigin_ = x;
      }

      void EventTrackType::
      EventTrackOrigin (::std::auto_ptr< EventTrackOrigin_type > x)
      {
        this->EventTrackOrigin_.set (x);
      }


      // StaticTrackType
      // 


      // SequenceType
      // 

      const SequenceType::ComponentObjects_type& SequenceType::
      ComponentObjects () const
      {
        return this->ComponentObjects_.get ();
      }

      SequenceType::ComponentObjects_type& SequenceType::
      ComponentObjects ()
      {
        return this->ComponentObjects_.get ();
      }

      void SequenceType::
      ComponentObjects (const ComponentObjects_type& x)
      {
        this->ComponentObjects_.set (x);
      }

      void SequenceType::
      ComponentObjects (::std::auto_ptr< ComponentObjects_type > x)
      {
        this->ComponentObjects_.set (x);
      }


      // TimecodeType
      // 

      const TimecodeType::StartTimecode_type& TimecodeType::
      StartTimecode () const
      {
        return this->StartTimecode_.get ();
      }

      TimecodeType::StartTimecode_type& TimecodeType::
      StartTimecode ()
      {
        return this->StartTimecode_.get ();
      }

      void TimecodeType::
      StartTimecode (const StartTimecode_type& x)
      {
        this->StartTimecode_.set (x);
      }

      void TimecodeType::
      StartTimecode (::std::auto_ptr< StartTimecode_type > x)
      {
        this->StartTimecode_.set (x);
      }

      const TimecodeType::FramesPerSecond_type& TimecodeType::
      FramesPerSecond () const
      {
        return this->FramesPerSecond_.get ();
      }

      TimecodeType::FramesPerSecond_type& TimecodeType::
      FramesPerSecond ()
      {
        return this->FramesPerSecond_.get ();
      }

      void TimecodeType::
      FramesPerSecond (const FramesPerSecond_type& x)
      {
        this->FramesPerSecond_.set (x);
      }

      void TimecodeType::
      FramesPerSecond (::std::auto_ptr< FramesPerSecond_type > x)
      {
        this->FramesPerSecond_.set (x);
      }

      const TimecodeType::DropFrame_type& TimecodeType::
      DropFrame () const
      {
        return this->DropFrame_.get ();
      }

      TimecodeType::DropFrame_type& TimecodeType::
      DropFrame ()
      {
        return this->DropFrame_.get ();
      }

      void TimecodeType::
      DropFrame (const DropFrame_type& x)
      {
        this->DropFrame_.set (x);
      }

      void TimecodeType::
      DropFrame (::std::auto_ptr< DropFrame_type > x)
      {
        this->DropFrame_.set (x);
      }


      // DescriptiveMarkerType
      // 

      const DescriptiveMarkerType::DescribedTrackIDs_optional& DescriptiveMarkerType::
      DescribedTrackIDs () const
      {
        return this->DescribedTrackIDs_;
      }

      DescriptiveMarkerType::DescribedTrackIDs_optional& DescriptiveMarkerType::
      DescribedTrackIDs ()
      {
        return this->DescribedTrackIDs_;
      }

      void DescriptiveMarkerType::
      DescribedTrackIDs (const DescribedTrackIDs_type& x)
      {
        this->DescribedTrackIDs_.set (x);
      }

      void DescriptiveMarkerType::
      DescribedTrackIDs (const DescribedTrackIDs_optional& x)
      {
        this->DescribedTrackIDs_ = x;
      }

      void DescriptiveMarkerType::
      DescribedTrackIDs (::std::auto_ptr< DescribedTrackIDs_type > x)
      {
        this->DescribedTrackIDs_.set (x);
      }

      const DescriptiveMarkerType::DescriptiveFrameworkObject_optional& DescriptiveMarkerType::
      DescriptiveFrameworkObject () const
      {
        return this->DescriptiveFrameworkObject_;
      }

      DescriptiveMarkerType::DescriptiveFrameworkObject_optional& DescriptiveMarkerType::
      DescriptiveFrameworkObject ()
      {
        return this->DescriptiveFrameworkObject_;
      }

      void DescriptiveMarkerType::
      DescriptiveFrameworkObject (const DescriptiveFrameworkObject_type& x)
      {
        this->DescriptiveFrameworkObject_.set (x);
      }

      void DescriptiveMarkerType::
      DescriptiveFrameworkObject (const DescriptiveFrameworkObject_optional& x)
      {
        this->DescriptiveFrameworkObject_ = x;
      }

      void DescriptiveMarkerType::
      DescriptiveFrameworkObject (::std::auto_ptr< DescriptiveFrameworkObject_type > x)
      {
        this->DescriptiveFrameworkObject_.set (x);
      }


      // SourceClipType
      // 

      const SourceClipType::StartPosition_type& SourceClipType::
      StartPosition () const
      {
        return this->StartPosition_.get ();
      }

      SourceClipType::StartPosition_type& SourceClipType::
      StartPosition ()
      {
        return this->StartPosition_.get ();
      }

      void SourceClipType::
      StartPosition (const StartPosition_type& x)
      {
        this->StartPosition_.set (x);
      }

      void SourceClipType::
      StartPosition (::std::auto_ptr< StartPosition_type > x)
      {
        this->StartPosition_.set (x);
      }


      // DescriptiveClipType
      // 

      const DescriptiveClipType::SourcePackageID_type& DescriptiveClipType::
      SourcePackageID () const
      {
        return this->SourcePackageID_.get ();
      }

      DescriptiveClipType::SourcePackageID_type& DescriptiveClipType::
      SourcePackageID ()
      {
        return this->SourcePackageID_.get ();
      }

      void DescriptiveClipType::
      SourcePackageID (const SourcePackageID_type& x)
      {
        this->SourcePackageID_.set (x);
      }

      void DescriptiveClipType::
      SourcePackageID (::std::auto_ptr< SourcePackageID_type > x)
      {
        this->SourcePackageID_.set (x);
      }

      const DescriptiveClipType::SourceTrackID_optional& DescriptiveClipType::
      SourceTrackID () const
      {
        return this->SourceTrackID_;
      }

      DescriptiveClipType::SourceTrackID_optional& DescriptiveClipType::
      SourceTrackID ()
      {
        return this->SourceTrackID_;
      }

      void DescriptiveClipType::
      SourceTrackID (const SourceTrackID_type& x)
      {
        this->SourceTrackID_.set (x);
      }

      void DescriptiveClipType::
      SourceTrackID (const SourceTrackID_optional& x)
      {
        this->SourceTrackID_ = x;
      }

      void DescriptiveClipType::
      SourceTrackID (::std::auto_ptr< SourceTrackID_type > x)
      {
        this->SourceTrackID_.set (x);
      }

      const DescriptiveClipType::StartPosition_type& DescriptiveClipType::
      StartPosition () const
      {
        return this->StartPosition_.get ();
      }

      DescriptiveClipType::StartPosition_type& DescriptiveClipType::
      StartPosition ()
      {
        return this->StartPosition_.get ();
      }

      void DescriptiveClipType::
      StartPosition (const StartPosition_type& x)
      {
        this->StartPosition_.set (x);
      }

      void DescriptiveClipType::
      StartPosition (::std::auto_ptr< StartPosition_type > x)
      {
        this->StartPosition_.set (x);
      }

      const DescriptiveClipType::DescriptiveClipDescribedTrackIDs_optional& DescriptiveClipType::
      DescriptiveClipDescribedTrackIDs () const
      {
        return this->DescriptiveClipDescribedTrackIDs_;
      }

      DescriptiveClipType::DescriptiveClipDescribedTrackIDs_optional& DescriptiveClipType::
      DescriptiveClipDescribedTrackIDs ()
      {
        return this->DescriptiveClipDescribedTrackIDs_;
      }

      void DescriptiveClipType::
      DescriptiveClipDescribedTrackIDs (const DescriptiveClipDescribedTrackIDs_type& x)
      {
        this->DescriptiveClipDescribedTrackIDs_.set (x);
      }

      void DescriptiveClipType::
      DescriptiveClipDescribedTrackIDs (const DescriptiveClipDescribedTrackIDs_optional& x)
      {
        this->DescriptiveClipDescribedTrackIDs_ = x;
      }

      void DescriptiveClipType::
      DescriptiveClipDescribedTrackIDs (::std::auto_ptr< DescriptiveClipDescribedTrackIDs_type > x)
      {
        this->DescriptiveClipDescribedTrackIDs_.set (x);
      }


      // MaterialPackageType
      // 


      // SourcePackageType
      // 

      const SourcePackageType::EssenceDescription_optional& SourcePackageType::
      EssenceDescription () const
      {
        return this->EssenceDescription_;
      }

      SourcePackageType::EssenceDescription_optional& SourcePackageType::
      EssenceDescription ()
      {
        return this->EssenceDescription_;
      }

      void SourcePackageType::
      EssenceDescription (const EssenceDescription_type& x)
      {
        this->EssenceDescription_.set (x);
      }

      void SourcePackageType::
      EssenceDescription (const EssenceDescription_optional& x)
      {
        this->EssenceDescription_ = x;
      }

      void SourcePackageType::
      EssenceDescription (::std::auto_ptr< EssenceDescription_type > x)
      {
        this->EssenceDescription_.set (x);
      }


      // FileDescriptorType
      // 

      const FileDescriptorType::LinkedTrackID_optional& FileDescriptorType::
      LinkedTrackID () const
      {
        return this->LinkedTrackID_;
      }

      FileDescriptorType::LinkedTrackID_optional& FileDescriptorType::
      LinkedTrackID ()
      {
        return this->LinkedTrackID_;
      }

      void FileDescriptorType::
      LinkedTrackID (const LinkedTrackID_type& x)
      {
        this->LinkedTrackID_.set (x);
      }

      void FileDescriptorType::
      LinkedTrackID (const LinkedTrackID_optional& x)
      {
        this->LinkedTrackID_ = x;
      }

      void FileDescriptorType::
      LinkedTrackID (::std::auto_ptr< LinkedTrackID_type > x)
      {
        this->LinkedTrackID_.set (x);
      }

      const FileDescriptorType::SampleRate_type& FileDescriptorType::
      SampleRate () const
      {
        return this->SampleRate_.get ();
      }

      FileDescriptorType::SampleRate_type& FileDescriptorType::
      SampleRate ()
      {
        return this->SampleRate_.get ();
      }

      void FileDescriptorType::
      SampleRate (const SampleRate_type& x)
      {
        this->SampleRate_.set (x);
      }

      void FileDescriptorType::
      SampleRate (::std::auto_ptr< SampleRate_type > x)
      {
        this->SampleRate_.set (x);
      }

      const FileDescriptorType::EssenceLength_optional& FileDescriptorType::
      EssenceLength () const
      {
        return this->EssenceLength_;
      }

      FileDescriptorType::EssenceLength_optional& FileDescriptorType::
      EssenceLength ()
      {
        return this->EssenceLength_;
      }

      void FileDescriptorType::
      EssenceLength (const EssenceLength_type& x)
      {
        this->EssenceLength_.set (x);
      }

      void FileDescriptorType::
      EssenceLength (const EssenceLength_optional& x)
      {
        this->EssenceLength_ = x;
      }

      void FileDescriptorType::
      EssenceLength (::std::auto_ptr< EssenceLength_type > x)
      {
        this->EssenceLength_.set (x);
      }

      const FileDescriptorType::ContainerFormat_type& FileDescriptorType::
      ContainerFormat () const
      {
        return this->ContainerFormat_.get ();
      }

      FileDescriptorType::ContainerFormat_type& FileDescriptorType::
      ContainerFormat ()
      {
        return this->ContainerFormat_.get ();
      }

      void FileDescriptorType::
      ContainerFormat (const ContainerFormat_type& x)
      {
        this->ContainerFormat_.set (x);
      }

      void FileDescriptorType::
      ContainerFormat (::std::auto_ptr< ContainerFormat_type > x)
      {
        this->ContainerFormat_.set (x);
      }

      const FileDescriptorType::Codec_optional& FileDescriptorType::
      Codec () const
      {
        return this->Codec_;
      }

      FileDescriptorType::Codec_optional& FileDescriptorType::
      Codec ()
      {
        return this->Codec_;
      }

      void FileDescriptorType::
      Codec (const Codec_type& x)
      {
        this->Codec_.set (x);
      }

      void FileDescriptorType::
      Codec (const Codec_optional& x)
      {
        this->Codec_ = x;
      }

      void FileDescriptorType::
      Codec (::std::auto_ptr< Codec_type > x)
      {
        this->Codec_.set (x);
      }


      // PictureDescriptorType
      // 

      const PictureDescriptorType::SignalStandard_optional& PictureDescriptorType::
      SignalStandard () const
      {
        return this->SignalStandard_;
      }

      PictureDescriptorType::SignalStandard_optional& PictureDescriptorType::
      SignalStandard ()
      {
        return this->SignalStandard_;
      }

      void PictureDescriptorType::
      SignalStandard (const SignalStandard_type& x)
      {
        this->SignalStandard_.set (x);
      }

      void PictureDescriptorType::
      SignalStandard (const SignalStandard_optional& x)
      {
        this->SignalStandard_ = x;
      }

      void PictureDescriptorType::
      SignalStandard (::std::auto_ptr< SignalStandard_type > x)
      {
        this->SignalStandard_.set (x);
      }

      PictureDescriptorType::SignalStandard_type PictureDescriptorType::
      SignalStandard_default_value ()
      {
        return SignalStandard_type (1);
      }

      const PictureDescriptorType::FrameLayout_optional& PictureDescriptorType::
      FrameLayout () const
      {
        return this->FrameLayout_;
      }

      PictureDescriptorType::FrameLayout_optional& PictureDescriptorType::
      FrameLayout ()
      {
        return this->FrameLayout_;
      }

      void PictureDescriptorType::
      FrameLayout (const FrameLayout_type& x)
      {
        this->FrameLayout_.set (x);
      }

      void PictureDescriptorType::
      FrameLayout (const FrameLayout_optional& x)
      {
        this->FrameLayout_ = x;
      }

      void PictureDescriptorType::
      FrameLayout (::std::auto_ptr< FrameLayout_type > x)
      {
        this->FrameLayout_.set (x);
      }

      const PictureDescriptorType::StoredWidth_optional& PictureDescriptorType::
      StoredWidth () const
      {
        return this->StoredWidth_;
      }

      PictureDescriptorType::StoredWidth_optional& PictureDescriptorType::
      StoredWidth ()
      {
        return this->StoredWidth_;
      }

      void PictureDescriptorType::
      StoredWidth (const StoredWidth_type& x)
      {
        this->StoredWidth_.set (x);
      }

      void PictureDescriptorType::
      StoredWidth (const StoredWidth_optional& x)
      {
        this->StoredWidth_ = x;
      }

      void PictureDescriptorType::
      StoredWidth (::std::auto_ptr< StoredWidth_type > x)
      {
        this->StoredWidth_.set (x);
      }

      const PictureDescriptorType::StoredHeight_optional& PictureDescriptorType::
      StoredHeight () const
      {
        return this->StoredHeight_;
      }

      PictureDescriptorType::StoredHeight_optional& PictureDescriptorType::
      StoredHeight ()
      {
        return this->StoredHeight_;
      }

      void PictureDescriptorType::
      StoredHeight (const StoredHeight_type& x)
      {
        this->StoredHeight_.set (x);
      }

      void PictureDescriptorType::
      StoredHeight (const StoredHeight_optional& x)
      {
        this->StoredHeight_ = x;
      }

      void PictureDescriptorType::
      StoredHeight (::std::auto_ptr< StoredHeight_type > x)
      {
        this->StoredHeight_.set (x);
      }

      const PictureDescriptorType::StoredF2Offset_optional& PictureDescriptorType::
      StoredF2Offset () const
      {
        return this->StoredF2Offset_;
      }

      PictureDescriptorType::StoredF2Offset_optional& PictureDescriptorType::
      StoredF2Offset ()
      {
        return this->StoredF2Offset_;
      }

      void PictureDescriptorType::
      StoredF2Offset (const StoredF2Offset_type& x)
      {
        this->StoredF2Offset_.set (x);
      }

      void PictureDescriptorType::
      StoredF2Offset (const StoredF2Offset_optional& x)
      {
        this->StoredF2Offset_ = x;
      }

      void PictureDescriptorType::
      StoredF2Offset (::std::auto_ptr< StoredF2Offset_type > x)
      {
        this->StoredF2Offset_.set (x);
      }

      PictureDescriptorType::StoredF2Offset_type PictureDescriptorType::
      StoredF2Offset_default_value ()
      {
        return StoredF2Offset_type (0LL);
      }

      const PictureDescriptorType::SampledWidth_optional& PictureDescriptorType::
      SampledWidth () const
      {
        return this->SampledWidth_;
      }

      PictureDescriptorType::SampledWidth_optional& PictureDescriptorType::
      SampledWidth ()
      {
        return this->SampledWidth_;
      }

      void PictureDescriptorType::
      SampledWidth (const SampledWidth_type& x)
      {
        this->SampledWidth_.set (x);
      }

      void PictureDescriptorType::
      SampledWidth (const SampledWidth_optional& x)
      {
        this->SampledWidth_ = x;
      }

      void PictureDescriptorType::
      SampledWidth (::std::auto_ptr< SampledWidth_type > x)
      {
        this->SampledWidth_.set (x);
      }

      const PictureDescriptorType::SampledHeight_optional& PictureDescriptorType::
      SampledHeight () const
      {
        return this->SampledHeight_;
      }

      PictureDescriptorType::SampledHeight_optional& PictureDescriptorType::
      SampledHeight ()
      {
        return this->SampledHeight_;
      }

      void PictureDescriptorType::
      SampledHeight (const SampledHeight_type& x)
      {
        this->SampledHeight_.set (x);
      }

      void PictureDescriptorType::
      SampledHeight (const SampledHeight_optional& x)
      {
        this->SampledHeight_ = x;
      }

      void PictureDescriptorType::
      SampledHeight (::std::auto_ptr< SampledHeight_type > x)
      {
        this->SampledHeight_.set (x);
      }

      const PictureDescriptorType::SampledXOffset_optional& PictureDescriptorType::
      SampledXOffset () const
      {
        return this->SampledXOffset_;
      }

      PictureDescriptorType::SampledXOffset_optional& PictureDescriptorType::
      SampledXOffset ()
      {
        return this->SampledXOffset_;
      }

      void PictureDescriptorType::
      SampledXOffset (const SampledXOffset_type& x)
      {
        this->SampledXOffset_.set (x);
      }

      void PictureDescriptorType::
      SampledXOffset (const SampledXOffset_optional& x)
      {
        this->SampledXOffset_ = x;
      }

      void PictureDescriptorType::
      SampledXOffset (::std::auto_ptr< SampledXOffset_type > x)
      {
        this->SampledXOffset_.set (x);
      }

      PictureDescriptorType::SampledXOffset_type PictureDescriptorType::
      SampledXOffset_default_value ()
      {
        return SampledXOffset_type (0LL);
      }

      const PictureDescriptorType::SampledYOffset_optional& PictureDescriptorType::
      SampledYOffset () const
      {
        return this->SampledYOffset_;
      }

      PictureDescriptorType::SampledYOffset_optional& PictureDescriptorType::
      SampledYOffset ()
      {
        return this->SampledYOffset_;
      }

      void PictureDescriptorType::
      SampledYOffset (const SampledYOffset_type& x)
      {
        this->SampledYOffset_.set (x);
      }

      void PictureDescriptorType::
      SampledYOffset (const SampledYOffset_optional& x)
      {
        this->SampledYOffset_ = x;
      }

      void PictureDescriptorType::
      SampledYOffset (::std::auto_ptr< SampledYOffset_type > x)
      {
        this->SampledYOffset_.set (x);
      }

      PictureDescriptorType::SampledYOffset_type PictureDescriptorType::
      SampledYOffset_default_value ()
      {
        return SampledYOffset_type (0LL);
      }

      const PictureDescriptorType::DisplayHeight_optional& PictureDescriptorType::
      DisplayHeight () const
      {
        return this->DisplayHeight_;
      }

      PictureDescriptorType::DisplayHeight_optional& PictureDescriptorType::
      DisplayHeight ()
      {
        return this->DisplayHeight_;
      }

      void PictureDescriptorType::
      DisplayHeight (const DisplayHeight_type& x)
      {
        this->DisplayHeight_.set (x);
      }

      void PictureDescriptorType::
      DisplayHeight (const DisplayHeight_optional& x)
      {
        this->DisplayHeight_ = x;
      }

      void PictureDescriptorType::
      DisplayHeight (::std::auto_ptr< DisplayHeight_type > x)
      {
        this->DisplayHeight_.set (x);
      }

      const PictureDescriptorType::DisplayWidth_optional& PictureDescriptorType::
      DisplayWidth () const
      {
        return this->DisplayWidth_;
      }

      PictureDescriptorType::DisplayWidth_optional& PictureDescriptorType::
      DisplayWidth ()
      {
        return this->DisplayWidth_;
      }

      void PictureDescriptorType::
      DisplayWidth (const DisplayWidth_type& x)
      {
        this->DisplayWidth_.set (x);
      }

      void PictureDescriptorType::
      DisplayWidth (const DisplayWidth_optional& x)
      {
        this->DisplayWidth_ = x;
      }

      void PictureDescriptorType::
      DisplayWidth (::std::auto_ptr< DisplayWidth_type > x)
      {
        this->DisplayWidth_.set (x);
      }

      const PictureDescriptorType::DisplayXOffset_optional& PictureDescriptorType::
      DisplayXOffset () const
      {
        return this->DisplayXOffset_;
      }

      PictureDescriptorType::DisplayXOffset_optional& PictureDescriptorType::
      DisplayXOffset ()
      {
        return this->DisplayXOffset_;
      }

      void PictureDescriptorType::
      DisplayXOffset (const DisplayXOffset_type& x)
      {
        this->DisplayXOffset_.set (x);
      }

      void PictureDescriptorType::
      DisplayXOffset (const DisplayXOffset_optional& x)
      {
        this->DisplayXOffset_ = x;
      }

      void PictureDescriptorType::
      DisplayXOffset (::std::auto_ptr< DisplayXOffset_type > x)
      {
        this->DisplayXOffset_.set (x);
      }

      const PictureDescriptorType::DisplayYOffset_optional& PictureDescriptorType::
      DisplayYOffset () const
      {
        return this->DisplayYOffset_;
      }

      PictureDescriptorType::DisplayYOffset_optional& PictureDescriptorType::
      DisplayYOffset ()
      {
        return this->DisplayYOffset_;
      }

      void PictureDescriptorType::
      DisplayYOffset (const DisplayYOffset_type& x)
      {
        this->DisplayYOffset_.set (x);
      }

      void PictureDescriptorType::
      DisplayYOffset (const DisplayYOffset_optional& x)
      {
        this->DisplayYOffset_ = x;
      }

      void PictureDescriptorType::
      DisplayYOffset (::std::auto_ptr< DisplayYOffset_type > x)
      {
        this->DisplayYOffset_.set (x);
      }

      const PictureDescriptorType::DisplayF2Offset_optional& PictureDescriptorType::
      DisplayF2Offset () const
      {
        return this->DisplayF2Offset_;
      }

      PictureDescriptorType::DisplayF2Offset_optional& PictureDescriptorType::
      DisplayF2Offset ()
      {
        return this->DisplayF2Offset_;
      }

      void PictureDescriptorType::
      DisplayF2Offset (const DisplayF2Offset_type& x)
      {
        this->DisplayF2Offset_.set (x);
      }

      void PictureDescriptorType::
      DisplayF2Offset (const DisplayF2Offset_optional& x)
      {
        this->DisplayF2Offset_ = x;
      }

      void PictureDescriptorType::
      DisplayF2Offset (::std::auto_ptr< DisplayF2Offset_type > x)
      {
        this->DisplayF2Offset_.set (x);
      }

      PictureDescriptorType::DisplayF2Offset_type PictureDescriptorType::
      DisplayF2Offset_default_value ()
      {
        return DisplayF2Offset_type (0LL);
      }

      const PictureDescriptorType::ImageAspectRatio_optional& PictureDescriptorType::
      ImageAspectRatio () const
      {
        return this->ImageAspectRatio_;
      }

      PictureDescriptorType::ImageAspectRatio_optional& PictureDescriptorType::
      ImageAspectRatio ()
      {
        return this->ImageAspectRatio_;
      }

      void PictureDescriptorType::
      ImageAspectRatio (const ImageAspectRatio_type& x)
      {
        this->ImageAspectRatio_.set (x);
      }

      void PictureDescriptorType::
      ImageAspectRatio (const ImageAspectRatio_optional& x)
      {
        this->ImageAspectRatio_ = x;
      }

      void PictureDescriptorType::
      ImageAspectRatio (::std::auto_ptr< ImageAspectRatio_type > x)
      {
        this->ImageAspectRatio_.set (x);
      }

      const PictureDescriptorType::ActiveFormatDescriptor_optional& PictureDescriptorType::
      ActiveFormatDescriptor () const
      {
        return this->ActiveFormatDescriptor_;
      }

      PictureDescriptorType::ActiveFormatDescriptor_optional& PictureDescriptorType::
      ActiveFormatDescriptor ()
      {
        return this->ActiveFormatDescriptor_;
      }

      void PictureDescriptorType::
      ActiveFormatDescriptor (const ActiveFormatDescriptor_type& x)
      {
        this->ActiveFormatDescriptor_.set (x);
      }

      void PictureDescriptorType::
      ActiveFormatDescriptor (const ActiveFormatDescriptor_optional& x)
      {
        this->ActiveFormatDescriptor_ = x;
      }

      void PictureDescriptorType::
      ActiveFormatDescriptor (::std::auto_ptr< ActiveFormatDescriptor_type > x)
      {
        this->ActiveFormatDescriptor_.set (x);
      }

      const PictureDescriptorType::VideoLineMap_optional& PictureDescriptorType::
      VideoLineMap () const
      {
        return this->VideoLineMap_;
      }

      PictureDescriptorType::VideoLineMap_optional& PictureDescriptorType::
      VideoLineMap ()
      {
        return this->VideoLineMap_;
      }

      void PictureDescriptorType::
      VideoLineMap (const VideoLineMap_type& x)
      {
        this->VideoLineMap_.set (x);
      }

      void PictureDescriptorType::
      VideoLineMap (const VideoLineMap_optional& x)
      {
        this->VideoLineMap_ = x;
      }

      void PictureDescriptorType::
      VideoLineMap (::std::auto_ptr< VideoLineMap_type > x)
      {
        this->VideoLineMap_.set (x);
      }

      const PictureDescriptorType::AlphaTransparency_optional& PictureDescriptorType::
      AlphaTransparency () const
      {
        return this->AlphaTransparency_;
      }

      PictureDescriptorType::AlphaTransparency_optional& PictureDescriptorType::
      AlphaTransparency ()
      {
        return this->AlphaTransparency_;
      }

      void PictureDescriptorType::
      AlphaTransparency (const AlphaTransparency_type& x)
      {
        this->AlphaTransparency_.set (x);
      }

      void PictureDescriptorType::
      AlphaTransparency (const AlphaTransparency_optional& x)
      {
        this->AlphaTransparency_ = x;
      }

      void PictureDescriptorType::
      AlphaTransparency (::std::auto_ptr< AlphaTransparency_type > x)
      {
        this->AlphaTransparency_.set (x);
      }

      PictureDescriptorType::AlphaTransparency_type PictureDescriptorType::
      AlphaTransparency_default_value ()
      {
        return AlphaTransparency_type (0);
      }

      const PictureDescriptorType::TransferCharacteristic_optional& PictureDescriptorType::
      TransferCharacteristic () const
      {
        return this->TransferCharacteristic_;
      }

      PictureDescriptorType::TransferCharacteristic_optional& PictureDescriptorType::
      TransferCharacteristic ()
      {
        return this->TransferCharacteristic_;
      }

      void PictureDescriptorType::
      TransferCharacteristic (const TransferCharacteristic_type& x)
      {
        this->TransferCharacteristic_.set (x);
      }

      void PictureDescriptorType::
      TransferCharacteristic (const TransferCharacteristic_optional& x)
      {
        this->TransferCharacteristic_ = x;
      }

      void PictureDescriptorType::
      TransferCharacteristic (::std::auto_ptr< TransferCharacteristic_type > x)
      {
        this->TransferCharacteristic_.set (x);
      }

      const PictureDescriptorType::ImageAlignmentFactor_optional& PictureDescriptorType::
      ImageAlignmentFactor () const
      {
        return this->ImageAlignmentFactor_;
      }

      PictureDescriptorType::ImageAlignmentFactor_optional& PictureDescriptorType::
      ImageAlignmentFactor ()
      {
        return this->ImageAlignmentFactor_;
      }

      void PictureDescriptorType::
      ImageAlignmentFactor (const ImageAlignmentFactor_type& x)
      {
        this->ImageAlignmentFactor_.set (x);
      }

      void PictureDescriptorType::
      ImageAlignmentFactor (const ImageAlignmentFactor_optional& x)
      {
        this->ImageAlignmentFactor_ = x;
      }

      void PictureDescriptorType::
      ImageAlignmentFactor (::std::auto_ptr< ImageAlignmentFactor_type > x)
      {
        this->ImageAlignmentFactor_.set (x);
      }

      PictureDescriptorType::ImageAlignmentFactor_type PictureDescriptorType::
      ImageAlignmentFactor_default_value ()
      {
        return ImageAlignmentFactor_type (0);
      }

      const PictureDescriptorType::ImageStartOffset_optional& PictureDescriptorType::
      ImageStartOffset () const
      {
        return this->ImageStartOffset_;
      }

      PictureDescriptorType::ImageStartOffset_optional& PictureDescriptorType::
      ImageStartOffset ()
      {
        return this->ImageStartOffset_;
      }

      void PictureDescriptorType::
      ImageStartOffset (const ImageStartOffset_type& x)
      {
        this->ImageStartOffset_.set (x);
      }

      void PictureDescriptorType::
      ImageStartOffset (const ImageStartOffset_optional& x)
      {
        this->ImageStartOffset_ = x;
      }

      void PictureDescriptorType::
      ImageStartOffset (::std::auto_ptr< ImageStartOffset_type > x)
      {
        this->ImageStartOffset_.set (x);
      }

      const PictureDescriptorType::ImageEndOffset_optional& PictureDescriptorType::
      ImageEndOffset () const
      {
        return this->ImageEndOffset_;
      }

      PictureDescriptorType::ImageEndOffset_optional& PictureDescriptorType::
      ImageEndOffset ()
      {
        return this->ImageEndOffset_;
      }

      void PictureDescriptorType::
      ImageEndOffset (const ImageEndOffset_type& x)
      {
        this->ImageEndOffset_.set (x);
      }

      void PictureDescriptorType::
      ImageEndOffset (const ImageEndOffset_optional& x)
      {
        this->ImageEndOffset_ = x;
      }

      void PictureDescriptorType::
      ImageEndOffset (::std::auto_ptr< ImageEndOffset_type > x)
      {
        this->ImageEndOffset_.set (x);
      }

      const PictureDescriptorType::FieldDominance_optional& PictureDescriptorType::
      FieldDominance () const
      {
        return this->FieldDominance_;
      }

      PictureDescriptorType::FieldDominance_optional& PictureDescriptorType::
      FieldDominance ()
      {
        return this->FieldDominance_;
      }

      void PictureDescriptorType::
      FieldDominance (const FieldDominance_type& x)
      {
        this->FieldDominance_.set (x);
      }

      void PictureDescriptorType::
      FieldDominance (const FieldDominance_optional& x)
      {
        this->FieldDominance_ = x;
      }

      void PictureDescriptorType::
      FieldDominance (::std::auto_ptr< FieldDominance_type > x)
      {
        this->FieldDominance_.set (x);
      }

      const PictureDescriptorType::PictureCompression_optional& PictureDescriptorType::
      PictureCompression () const
      {
        return this->PictureCompression_;
      }

      PictureDescriptorType::PictureCompression_optional& PictureDescriptorType::
      PictureCompression ()
      {
        return this->PictureCompression_;
      }

      void PictureDescriptorType::
      PictureCompression (const PictureCompression_type& x)
      {
        this->PictureCompression_.set (x);
      }

      void PictureDescriptorType::
      PictureCompression (const PictureCompression_optional& x)
      {
        this->PictureCompression_ = x;
      }

      void PictureDescriptorType::
      PictureCompression (::std::auto_ptr< PictureCompression_type > x)
      {
        this->PictureCompression_.set (x);
      }


      // CDCIDescriptorType
      // 

      const CDCIDescriptorType::ComponentDepth_optional& CDCIDescriptorType::
      ComponentDepth () const
      {
        return this->ComponentDepth_;
      }

      CDCIDescriptorType::ComponentDepth_optional& CDCIDescriptorType::
      ComponentDepth ()
      {
        return this->ComponentDepth_;
      }

      void CDCIDescriptorType::
      ComponentDepth (const ComponentDepth_type& x)
      {
        this->ComponentDepth_.set (x);
      }

      void CDCIDescriptorType::
      ComponentDepth (const ComponentDepth_optional& x)
      {
        this->ComponentDepth_ = x;
      }

      void CDCIDescriptorType::
      ComponentDepth (::std::auto_ptr< ComponentDepth_type > x)
      {
        this->ComponentDepth_.set (x);
      }

      const CDCIDescriptorType::HorizontalSubsampling_optional& CDCIDescriptorType::
      HorizontalSubsampling () const
      {
        return this->HorizontalSubsampling_;
      }

      CDCIDescriptorType::HorizontalSubsampling_optional& CDCIDescriptorType::
      HorizontalSubsampling ()
      {
        return this->HorizontalSubsampling_;
      }

      void CDCIDescriptorType::
      HorizontalSubsampling (const HorizontalSubsampling_type& x)
      {
        this->HorizontalSubsampling_.set (x);
      }

      void CDCIDescriptorType::
      HorizontalSubsampling (const HorizontalSubsampling_optional& x)
      {
        this->HorizontalSubsampling_ = x;
      }

      void CDCIDescriptorType::
      HorizontalSubsampling (::std::auto_ptr< HorizontalSubsampling_type > x)
      {
        this->HorizontalSubsampling_.set (x);
      }

      const CDCIDescriptorType::VerticalSubsampling_optional& CDCIDescriptorType::
      VerticalSubsampling () const
      {
        return this->VerticalSubsampling_;
      }

      CDCIDescriptorType::VerticalSubsampling_optional& CDCIDescriptorType::
      VerticalSubsampling ()
      {
        return this->VerticalSubsampling_;
      }

      void CDCIDescriptorType::
      VerticalSubsampling (const VerticalSubsampling_type& x)
      {
        this->VerticalSubsampling_.set (x);
      }

      void CDCIDescriptorType::
      VerticalSubsampling (const VerticalSubsampling_optional& x)
      {
        this->VerticalSubsampling_ = x;
      }

      void CDCIDescriptorType::
      VerticalSubsampling (::std::auto_ptr< VerticalSubsampling_type > x)
      {
        this->VerticalSubsampling_.set (x);
      }

      const CDCIDescriptorType::ColorSiting_optional& CDCIDescriptorType::
      ColorSiting () const
      {
        return this->ColorSiting_;
      }

      CDCIDescriptorType::ColorSiting_optional& CDCIDescriptorType::
      ColorSiting ()
      {
        return this->ColorSiting_;
      }

      void CDCIDescriptorType::
      ColorSiting (const ColorSiting_type& x)
      {
        this->ColorSiting_.set (x);
      }

      void CDCIDescriptorType::
      ColorSiting (const ColorSiting_optional& x)
      {
        this->ColorSiting_ = x;
      }

      void CDCIDescriptorType::
      ColorSiting (::std::auto_ptr< ColorSiting_type > x)
      {
        this->ColorSiting_.set (x);
      }

      const CDCIDescriptorType::ReversedByteOrder_optional& CDCIDescriptorType::
      ReversedByteOrder () const
      {
        return this->ReversedByteOrder_;
      }

      CDCIDescriptorType::ReversedByteOrder_optional& CDCIDescriptorType::
      ReversedByteOrder ()
      {
        return this->ReversedByteOrder_;
      }

      void CDCIDescriptorType::
      ReversedByteOrder (const ReversedByteOrder_type& x)
      {
        this->ReversedByteOrder_.set (x);
      }

      void CDCIDescriptorType::
      ReversedByteOrder (const ReversedByteOrder_optional& x)
      {
        this->ReversedByteOrder_ = x;
      }

      void CDCIDescriptorType::
      ReversedByteOrder (::std::auto_ptr< ReversedByteOrder_type > x)
      {
        this->ReversedByteOrder_.set (x);
      }

      const CDCIDescriptorType::PaddingBits_optional& CDCIDescriptorType::
      PaddingBits () const
      {
        return this->PaddingBits_;
      }

      CDCIDescriptorType::PaddingBits_optional& CDCIDescriptorType::
      PaddingBits ()
      {
        return this->PaddingBits_;
      }

      void CDCIDescriptorType::
      PaddingBits (const PaddingBits_type& x)
      {
        this->PaddingBits_.set (x);
      }

      void CDCIDescriptorType::
      PaddingBits (const PaddingBits_optional& x)
      {
        this->PaddingBits_ = x;
      }

      void CDCIDescriptorType::
      PaddingBits (::std::auto_ptr< PaddingBits_type > x)
      {
        this->PaddingBits_.set (x);
      }

      const CDCIDescriptorType::AlphaSampleDepth_optional& CDCIDescriptorType::
      AlphaSampleDepth () const
      {
        return this->AlphaSampleDepth_;
      }

      CDCIDescriptorType::AlphaSampleDepth_optional& CDCIDescriptorType::
      AlphaSampleDepth ()
      {
        return this->AlphaSampleDepth_;
      }

      void CDCIDescriptorType::
      AlphaSampleDepth (const AlphaSampleDepth_type& x)
      {
        this->AlphaSampleDepth_.set (x);
      }

      void CDCIDescriptorType::
      AlphaSampleDepth (const AlphaSampleDepth_optional& x)
      {
        this->AlphaSampleDepth_ = x;
      }

      void CDCIDescriptorType::
      AlphaSampleDepth (::std::auto_ptr< AlphaSampleDepth_type > x)
      {
        this->AlphaSampleDepth_.set (x);
      }

      const CDCIDescriptorType::BlackRefLevel_optional& CDCIDescriptorType::
      BlackRefLevel () const
      {
        return this->BlackRefLevel_;
      }

      CDCIDescriptorType::BlackRefLevel_optional& CDCIDescriptorType::
      BlackRefLevel ()
      {
        return this->BlackRefLevel_;
      }

      void CDCIDescriptorType::
      BlackRefLevel (const BlackRefLevel_type& x)
      {
        this->BlackRefLevel_.set (x);
      }

      void CDCIDescriptorType::
      BlackRefLevel (const BlackRefLevel_optional& x)
      {
        this->BlackRefLevel_ = x;
      }

      void CDCIDescriptorType::
      BlackRefLevel (::std::auto_ptr< BlackRefLevel_type > x)
      {
        this->BlackRefLevel_.set (x);
      }

      const CDCIDescriptorType::WhiteRefLevel_optional& CDCIDescriptorType::
      WhiteRefLevel () const
      {
        return this->WhiteRefLevel_;
      }

      CDCIDescriptorType::WhiteRefLevel_optional& CDCIDescriptorType::
      WhiteRefLevel ()
      {
        return this->WhiteRefLevel_;
      }

      void CDCIDescriptorType::
      WhiteRefLevel (const WhiteRefLevel_type& x)
      {
        this->WhiteRefLevel_.set (x);
      }

      void CDCIDescriptorType::
      WhiteRefLevel (const WhiteRefLevel_optional& x)
      {
        this->WhiteRefLevel_ = x;
      }

      void CDCIDescriptorType::
      WhiteRefLevel (::std::auto_ptr< WhiteRefLevel_type > x)
      {
        this->WhiteRefLevel_.set (x);
      }

      const CDCIDescriptorType::ColorRange_optional& CDCIDescriptorType::
      ColorRange () const
      {
        return this->ColorRange_;
      }

      CDCIDescriptorType::ColorRange_optional& CDCIDescriptorType::
      ColorRange ()
      {
        return this->ColorRange_;
      }

      void CDCIDescriptorType::
      ColorRange (const ColorRange_type& x)
      {
        this->ColorRange_.set (x);
      }

      void CDCIDescriptorType::
      ColorRange (const ColorRange_optional& x)
      {
        this->ColorRange_ = x;
      }

      void CDCIDescriptorType::
      ColorRange (::std::auto_ptr< ColorRange_type > x)
      {
        this->ColorRange_.set (x);
      }


      // RGBADescriptorType
      // 

      const RGBADescriptorType::ComponentMaxRef_optional& RGBADescriptorType::
      ComponentMaxRef () const
      {
        return this->ComponentMaxRef_;
      }

      RGBADescriptorType::ComponentMaxRef_optional& RGBADescriptorType::
      ComponentMaxRef ()
      {
        return this->ComponentMaxRef_;
      }

      void RGBADescriptorType::
      ComponentMaxRef (const ComponentMaxRef_type& x)
      {
        this->ComponentMaxRef_.set (x);
      }

      void RGBADescriptorType::
      ComponentMaxRef (const ComponentMaxRef_optional& x)
      {
        this->ComponentMaxRef_ = x;
      }

      void RGBADescriptorType::
      ComponentMaxRef (::std::auto_ptr< ComponentMaxRef_type > x)
      {
        this->ComponentMaxRef_.set (x);
      }

      RGBADescriptorType::ComponentMaxRef_type RGBADescriptorType::
      ComponentMaxRef_default_value ()
      {
        return ComponentMaxRef_type (255);
      }

      const RGBADescriptorType::ComponentMinRef_optional& RGBADescriptorType::
      ComponentMinRef () const
      {
        return this->ComponentMinRef_;
      }

      RGBADescriptorType::ComponentMinRef_optional& RGBADescriptorType::
      ComponentMinRef ()
      {
        return this->ComponentMinRef_;
      }

      void RGBADescriptorType::
      ComponentMinRef (const ComponentMinRef_type& x)
      {
        this->ComponentMinRef_.set (x);
      }

      void RGBADescriptorType::
      ComponentMinRef (const ComponentMinRef_optional& x)
      {
        this->ComponentMinRef_ = x;
      }

      void RGBADescriptorType::
      ComponentMinRef (::std::auto_ptr< ComponentMinRef_type > x)
      {
        this->ComponentMinRef_.set (x);
      }

      RGBADescriptorType::ComponentMinRef_type RGBADescriptorType::
      ComponentMinRef_default_value ()
      {
        return ComponentMinRef_type (0);
      }

      const RGBADescriptorType::AlphaMaxRef_optional& RGBADescriptorType::
      AlphaMaxRef () const
      {
        return this->AlphaMaxRef_;
      }

      RGBADescriptorType::AlphaMaxRef_optional& RGBADescriptorType::
      AlphaMaxRef ()
      {
        return this->AlphaMaxRef_;
      }

      void RGBADescriptorType::
      AlphaMaxRef (const AlphaMaxRef_type& x)
      {
        this->AlphaMaxRef_.set (x);
      }

      void RGBADescriptorType::
      AlphaMaxRef (const AlphaMaxRef_optional& x)
      {
        this->AlphaMaxRef_ = x;
      }

      void RGBADescriptorType::
      AlphaMaxRef (::std::auto_ptr< AlphaMaxRef_type > x)
      {
        this->AlphaMaxRef_.set (x);
      }

      RGBADescriptorType::AlphaMaxRef_type RGBADescriptorType::
      AlphaMaxRef_default_value ()
      {
        return AlphaMaxRef_type (255);
      }

      const RGBADescriptorType::AlphaMinRef_optional& RGBADescriptorType::
      AlphaMinRef () const
      {
        return this->AlphaMinRef_;
      }

      RGBADescriptorType::AlphaMinRef_optional& RGBADescriptorType::
      AlphaMinRef ()
      {
        return this->AlphaMinRef_;
      }

      void RGBADescriptorType::
      AlphaMinRef (const AlphaMinRef_type& x)
      {
        this->AlphaMinRef_.set (x);
      }

      void RGBADescriptorType::
      AlphaMinRef (const AlphaMinRef_optional& x)
      {
        this->AlphaMinRef_ = x;
      }

      void RGBADescriptorType::
      AlphaMinRef (::std::auto_ptr< AlphaMinRef_type > x)
      {
        this->AlphaMinRef_.set (x);
      }

      RGBADescriptorType::AlphaMinRef_type RGBADescriptorType::
      AlphaMinRef_default_value ()
      {
        return AlphaMinRef_type (0);
      }

      const RGBADescriptorType::ScanningDirection_optional& RGBADescriptorType::
      ScanningDirection () const
      {
        return this->ScanningDirection_;
      }

      RGBADescriptorType::ScanningDirection_optional& RGBADescriptorType::
      ScanningDirection ()
      {
        return this->ScanningDirection_;
      }

      void RGBADescriptorType::
      ScanningDirection (const ScanningDirection_type& x)
      {
        this->ScanningDirection_.set (x);
      }

      void RGBADescriptorType::
      ScanningDirection (const ScanningDirection_optional& x)
      {
        this->ScanningDirection_ = x;
      }

      void RGBADescriptorType::
      ScanningDirection (::std::auto_ptr< ScanningDirection_type > x)
      {
        this->ScanningDirection_.set (x);
      }

      const RGBADescriptorType::PixelLayout_optional& RGBADescriptorType::
      PixelLayout () const
      {
        return this->PixelLayout_;
      }

      RGBADescriptorType::PixelLayout_optional& RGBADescriptorType::
      PixelLayout ()
      {
        return this->PixelLayout_;
      }

      void RGBADescriptorType::
      PixelLayout (const PixelLayout_type& x)
      {
        this->PixelLayout_.set (x);
      }

      void RGBADescriptorType::
      PixelLayout (const PixelLayout_optional& x)
      {
        this->PixelLayout_ = x;
      }

      void RGBADescriptorType::
      PixelLayout (::std::auto_ptr< PixelLayout_type > x)
      {
        this->PixelLayout_.set (x);
      }

      const RGBADescriptorType::Palette_optional& RGBADescriptorType::
      Palette () const
      {
        return this->Palette_;
      }

      RGBADescriptorType::Palette_optional& RGBADescriptorType::
      Palette ()
      {
        return this->Palette_;
      }

      void RGBADescriptorType::
      Palette (const Palette_type& x)
      {
        this->Palette_.set (x);
      }

      void RGBADescriptorType::
      Palette (const Palette_optional& x)
      {
        this->Palette_ = x;
      }

      void RGBADescriptorType::
      Palette (::std::auto_ptr< Palette_type > x)
      {
        this->Palette_.set (x);
      }

      const RGBADescriptorType::PaletteLayout_optional& RGBADescriptorType::
      PaletteLayout () const
      {
        return this->PaletteLayout_;
      }

      RGBADescriptorType::PaletteLayout_optional& RGBADescriptorType::
      PaletteLayout ()
      {
        return this->PaletteLayout_;
      }

      void RGBADescriptorType::
      PaletteLayout (const PaletteLayout_type& x)
      {
        this->PaletteLayout_.set (x);
      }

      void RGBADescriptorType::
      PaletteLayout (const PaletteLayout_optional& x)
      {
        this->PaletteLayout_ = x;
      }

      void RGBADescriptorType::
      PaletteLayout (::std::auto_ptr< PaletteLayout_type > x)
      {
        this->PaletteLayout_.set (x);
      }


      // SoundDescriptorType
      // 

      const SoundDescriptorType::AudioSampleRate_optional& SoundDescriptorType::
      AudioSampleRate () const
      {
        return this->AudioSampleRate_;
      }

      SoundDescriptorType::AudioSampleRate_optional& SoundDescriptorType::
      AudioSampleRate ()
      {
        return this->AudioSampleRate_;
      }

      void SoundDescriptorType::
      AudioSampleRate (const AudioSampleRate_type& x)
      {
        this->AudioSampleRate_.set (x);
      }

      void SoundDescriptorType::
      AudioSampleRate (const AudioSampleRate_optional& x)
      {
        this->AudioSampleRate_ = x;
      }

      void SoundDescriptorType::
      AudioSampleRate (::std::auto_ptr< AudioSampleRate_type > x)
      {
        this->AudioSampleRate_.set (x);
      }

      const SoundDescriptorType::Locked_optional& SoundDescriptorType::
      Locked () const
      {
        return this->Locked_;
      }

      SoundDescriptorType::Locked_optional& SoundDescriptorType::
      Locked ()
      {
        return this->Locked_;
      }

      void SoundDescriptorType::
      Locked (const Locked_type& x)
      {
        this->Locked_.set (x);
      }

      void SoundDescriptorType::
      Locked (const Locked_optional& x)
      {
        this->Locked_ = x;
      }

      void SoundDescriptorType::
      Locked (::std::auto_ptr< Locked_type > x)
      {
        this->Locked_.set (x);
      }

      const SoundDescriptorType::AudioReferenceLevel_optional& SoundDescriptorType::
      AudioReferenceLevel () const
      {
        return this->AudioReferenceLevel_;
      }

      SoundDescriptorType::AudioReferenceLevel_optional& SoundDescriptorType::
      AudioReferenceLevel ()
      {
        return this->AudioReferenceLevel_;
      }

      void SoundDescriptorType::
      AudioReferenceLevel (const AudioReferenceLevel_type& x)
      {
        this->AudioReferenceLevel_.set (x);
      }

      void SoundDescriptorType::
      AudioReferenceLevel (const AudioReferenceLevel_optional& x)
      {
        this->AudioReferenceLevel_ = x;
      }

      void SoundDescriptorType::
      AudioReferenceLevel (::std::auto_ptr< AudioReferenceLevel_type > x)
      {
        this->AudioReferenceLevel_.set (x);
      }

      const SoundDescriptorType::ElectrospatialFormulation_optional& SoundDescriptorType::
      ElectrospatialFormulation () const
      {
        return this->ElectrospatialFormulation_;
      }

      SoundDescriptorType::ElectrospatialFormulation_optional& SoundDescriptorType::
      ElectrospatialFormulation ()
      {
        return this->ElectrospatialFormulation_;
      }

      void SoundDescriptorType::
      ElectrospatialFormulation (const ElectrospatialFormulation_type& x)
      {
        this->ElectrospatialFormulation_.set (x);
      }

      void SoundDescriptorType::
      ElectrospatialFormulation (const ElectrospatialFormulation_optional& x)
      {
        this->ElectrospatialFormulation_ = x;
      }

      void SoundDescriptorType::
      ElectrospatialFormulation (::std::auto_ptr< ElectrospatialFormulation_type > x)
      {
        this->ElectrospatialFormulation_.set (x);
      }

      const SoundDescriptorType::ChannelCount_optional& SoundDescriptorType::
      ChannelCount () const
      {
        return this->ChannelCount_;
      }

      SoundDescriptorType::ChannelCount_optional& SoundDescriptorType::
      ChannelCount ()
      {
        return this->ChannelCount_;
      }

      void SoundDescriptorType::
      ChannelCount (const ChannelCount_type& x)
      {
        this->ChannelCount_.set (x);
      }

      void SoundDescriptorType::
      ChannelCount (const ChannelCount_optional& x)
      {
        this->ChannelCount_ = x;
      }

      void SoundDescriptorType::
      ChannelCount (::std::auto_ptr< ChannelCount_type > x)
      {
        this->ChannelCount_.set (x);
      }

      const SoundDescriptorType::QuantizationBits_optional& SoundDescriptorType::
      QuantizationBits () const
      {
        return this->QuantizationBits_;
      }

      SoundDescriptorType::QuantizationBits_optional& SoundDescriptorType::
      QuantizationBits ()
      {
        return this->QuantizationBits_;
      }

      void SoundDescriptorType::
      QuantizationBits (const QuantizationBits_type& x)
      {
        this->QuantizationBits_.set (x);
      }

      void SoundDescriptorType::
      QuantizationBits (const QuantizationBits_optional& x)
      {
        this->QuantizationBits_ = x;
      }

      void SoundDescriptorType::
      QuantizationBits (::std::auto_ptr< QuantizationBits_type > x)
      {
        this->QuantizationBits_.set (x);
      }

      const SoundDescriptorType::DialNorm_optional& SoundDescriptorType::
      DialNorm () const
      {
        return this->DialNorm_;
      }

      SoundDescriptorType::DialNorm_optional& SoundDescriptorType::
      DialNorm ()
      {
        return this->DialNorm_;
      }

      void SoundDescriptorType::
      DialNorm (const DialNorm_type& x)
      {
        this->DialNorm_.set (x);
      }

      void SoundDescriptorType::
      DialNorm (const DialNorm_optional& x)
      {
        this->DialNorm_ = x;
      }

      void SoundDescriptorType::
      DialNorm (::std::auto_ptr< DialNorm_type > x)
      {
        this->DialNorm_.set (x);
      }

      const SoundDescriptorType::SoundCompression_optional& SoundDescriptorType::
      SoundCompression () const
      {
        return this->SoundCompression_;
      }

      SoundDescriptorType::SoundCompression_optional& SoundDescriptorType::
      SoundCompression ()
      {
        return this->SoundCompression_;
      }

      void SoundDescriptorType::
      SoundCompression (const SoundCompression_type& x)
      {
        this->SoundCompression_.set (x);
      }

      void SoundDescriptorType::
      SoundCompression (const SoundCompression_optional& x)
      {
        this->SoundCompression_ = x;
      }

      void SoundDescriptorType::
      SoundCompression (::std::auto_ptr< SoundCompression_type > x)
      {
        this->SoundCompression_.set (x);
      }


      // DataEssenceDescriptorType
      // 

      const DataEssenceDescriptorType::DataEssenceCoding_optional& DataEssenceDescriptorType::
      DataEssenceCoding () const
      {
        return this->DataEssenceCoding_;
      }

      DataEssenceDescriptorType::DataEssenceCoding_optional& DataEssenceDescriptorType::
      DataEssenceCoding ()
      {
        return this->DataEssenceCoding_;
      }

      void DataEssenceDescriptorType::
      DataEssenceCoding (const DataEssenceCoding_type& x)
      {
        this->DataEssenceCoding_.set (x);
      }

      void DataEssenceDescriptorType::
      DataEssenceCoding (const DataEssenceCoding_optional& x)
      {
        this->DataEssenceCoding_ = x;
      }

      void DataEssenceDescriptorType::
      DataEssenceCoding (::std::auto_ptr< DataEssenceCoding_type > x)
      {
        this->DataEssenceCoding_.set (x);
      }


      // MultipleDescriptorType
      // 

      const MultipleDescriptorType::FileDescriptors_type& MultipleDescriptorType::
      FileDescriptors () const
      {
        return this->FileDescriptors_.get ();
      }

      MultipleDescriptorType::FileDescriptors_type& MultipleDescriptorType::
      FileDescriptors ()
      {
        return this->FileDescriptors_.get ();
      }

      void MultipleDescriptorType::
      FileDescriptors (const FileDescriptors_type& x)
      {
        this->FileDescriptors_.set (x);
      }

      void MultipleDescriptorType::
      FileDescriptors (::std::auto_ptr< FileDescriptors_type > x)
      {
        this->FileDescriptors_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      // AbstractSetType
      //

      AbstractSetType::
      AbstractSetType (const InstanceID_type& InstanceID)
      : ::xml_schema::type (),
        ExtensionProperties_ (::xml_schema::flags (), this),
        InstanceID_ (InstanceID, ::xml_schema::flags (), this)
      {
      }

      AbstractSetType::
      AbstractSetType (const AbstractSetType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        ExtensionProperties_ (x.ExtensionProperties_, f, this),
        InstanceID_ (x.InstanceID_, f, this)
      {
      }

      AbstractSetType::
      AbstractSetType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        ExtensionProperties_ (f, this),
        InstanceID_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void AbstractSetType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ExtensionProperties
          //
          if (n.name () == "ExtensionProperties" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            ::std::auto_ptr< ExtensionProperties_type > r (
              ExtensionProperties_traits::create (i, f, this));

            if (!this->ExtensionProperties_)
            {
              this->ExtensionProperties_.set (r);
              continue;
            }
          }

          break;
        }

        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "InstanceID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< InstanceID_type > r (
              InstanceID_traits::create (i, f, this));

            this->InstanceID_.set (r);
            continue;
          }
        }

        if (!InstanceID_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "InstanceID",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      AbstractSetType* AbstractSetType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class AbstractSetType (*this, f, c);
      }

      AbstractSetType::
      ~AbstractSetType ()
      {
      }

      // InterchangeObjectType
      //

      InterchangeObjectType::
      InterchangeObjectType (const InstanceID_type& InstanceID)
      : ::st434::s377m::groups::AbstractSetType (InstanceID),
        LinkedGenerationID_ (::xml_schema::flags (), this)
      {
      }

      InterchangeObjectType::
      InterchangeObjectType (const InterchangeObjectType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
      : ::st434::s377m::groups::AbstractSetType (x, f, c),
        LinkedGenerationID_ (x.LinkedGenerationID_, f, this)
      {
      }

      InterchangeObjectType::
      InterchangeObjectType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
      : ::st434::s377m::groups::AbstractSetType (e, f | ::xml_schema::flags::base, c),
        LinkedGenerationID_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void InterchangeObjectType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::AbstractSetType::parse (p, f);

        p.reset_attributes ();

        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "LinkedGenerationID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< LinkedGenerationID_type > r (
              LinkedGenerationID_traits::create (i, f, this));

            this->LinkedGenerationID_.set (r);
            continue;
          }
        }
      }

      InterchangeObjectType* InterchangeObjectType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class InterchangeObjectType (*this, f, c);
      }

      InterchangeObjectType::
      ~InterchangeObjectType ()
      {
      }

      // SubDescriptorsType
      //

      SubDescriptorsType::
      SubDescriptorsType (const InstanceID_type& InstanceID)
      : ::st434::s377m::groups::InterchangeObjectType (InstanceID)
      {
      }

      SubDescriptorsType::
      SubDescriptorsType (const SubDescriptorsType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::st434::s377m::groups::InterchangeObjectType (x, f, c)
      {
      }

      SubDescriptorsType::
      SubDescriptorsType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::st434::s377m::groups::InterchangeObjectType (e, f, c)
      {
      }

      SubDescriptorsType* SubDescriptorsType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SubDescriptorsType (*this, f, c);
      }

      SubDescriptorsType::
      ~SubDescriptorsType ()
      {
      }

      // DescriptiveFrameworkType
      //

      DescriptiveFrameworkType::
      DescriptiveFrameworkType (const InstanceID_type& InstanceID)
      : ::st434::s377m::groups::InterchangeObjectType (InstanceID)
      {
      }

      DescriptiveFrameworkType::
      DescriptiveFrameworkType (const DescriptiveFrameworkType& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
      : ::st434::s377m::groups::InterchangeObjectType (x, f, c)
      {
      }

      DescriptiveFrameworkType::
      DescriptiveFrameworkType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
      : ::st434::s377m::groups::InterchangeObjectType (e, f, c)
      {
      }

      DescriptiveFrameworkType* DescriptiveFrameworkType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class DescriptiveFrameworkType (*this, f, c);
      }

      DescriptiveFrameworkType::
      ~DescriptiveFrameworkType ()
      {
      }

      // DescriptiveObjectType
      //

      DescriptiveObjectType::
      DescriptiveObjectType (const InstanceID_type& InstanceID)
      : ::st434::s377m::groups::InterchangeObjectType (InstanceID)
      {
      }

      DescriptiveObjectType::
      DescriptiveObjectType (const DescriptiveObjectType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
      : ::st434::s377m::groups::InterchangeObjectType (x, f, c)
      {
      }

      DescriptiveObjectType::
      DescriptiveObjectType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
      : ::st434::s377m::groups::InterchangeObjectType (e, f, c)
      {
      }

      DescriptiveObjectType* DescriptiveObjectType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class DescriptiveObjectType (*this, f, c);
      }

      DescriptiveObjectType::
      ~DescriptiveObjectType ()
      {
      }

      // TrackType
      //

      const TrackType::TrackName_type TrackType::TrackName_default_value_ (
        "Master Timecode");

      TrackType::
      TrackType (const InstanceID_type& InstanceID,
                 const EssenceTrackNumber_type& EssenceTrackNumber,
                 const TrackSegment_type& TrackSegment)
      : ::st434::s377m::groups::InterchangeObjectType (InstanceID),
        TrackID_ (::xml_schema::flags (), this),
        EssenceTrackNumber_ (EssenceTrackNumber, ::xml_schema::flags (), this),
        TrackName_ (::xml_schema::flags (), this),
        TrackSegment_ (TrackSegment, ::xml_schema::flags (), this)
      {
      }

      TrackType::
      TrackType (const InstanceID_type& InstanceID,
                 const EssenceTrackNumber_type& EssenceTrackNumber,
                 ::std::auto_ptr< TrackSegment_type >& TrackSegment)
      : ::st434::s377m::groups::InterchangeObjectType (InstanceID),
        TrackID_ (::xml_schema::flags (), this),
        EssenceTrackNumber_ (EssenceTrackNumber, ::xml_schema::flags (), this),
        TrackName_ (::xml_schema::flags (), this),
        TrackSegment_ (TrackSegment, ::xml_schema::flags (), this)
      {
      }

      TrackType::
      TrackType (const TrackType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
      : ::st434::s377m::groups::InterchangeObjectType (x, f, c),
        TrackID_ (x.TrackID_, f, this),
        EssenceTrackNumber_ (x.EssenceTrackNumber_, f, this),
        TrackName_ (x.TrackName_, f, this),
        TrackSegment_ (x.TrackSegment_, f, this)
      {
      }

      TrackType::
      TrackType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
      : ::st434::s377m::groups::InterchangeObjectType (e, f | ::xml_schema::flags::base, c),
        TrackID_ (f, this),
        EssenceTrackNumber_ (f, this),
        TrackName_ (f, this),
        TrackSegment_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void TrackType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::InterchangeObjectType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // TrackID
          //
          if (n.name () == "TrackID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< TrackID_type > r (
              TrackID_traits::create (i, f, this));

            if (!this->TrackID_)
            {
              this->TrackID_.set (r);
              continue;
            }
          }

          // EssenceTrackNumber
          //
          if (n.name () == "EssenceTrackNumber" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EssenceTrackNumber_type > r (
              EssenceTrackNumber_traits::create (i, f, this));

            if (!EssenceTrackNumber_.present ())
            {
              this->EssenceTrackNumber_.set (r);
              continue;
            }
          }

          // TrackName
          //
          if (n.name () == "TrackName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< TrackName_type > r (
              TrackName_traits::create (i, f, this));

            if (!this->TrackName_)
            {
              this->TrackName_.set (r);
              continue;
            }
          }

          // TrackSegment
          //
          if (n.name () == "TrackSegment" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< TrackSegment_type > r (
              TrackSegment_traits::create (i, f, this));

            if (!TrackSegment_.present ())
            {
              this->TrackSegment_.set (r);
              continue;
            }
          }

          break;
        }

        if (!EssenceTrackNumber_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EssenceTrackNumber",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!TrackSegment_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TrackSegment",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      TrackType* TrackType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class TrackType (*this, f, c);
      }

      TrackType::
      ~TrackType ()
      {
      }

      // PackageType
      //

      PackageType::
      PackageType (const InstanceID_type& InstanceID,
                   const PackageID_type& PackageID,
                   const CreationTime_type& CreationTime,
                   const PackageLastModified_type& PackageLastModified,
                   const PackageTracks_type& PackageTracks)
      : ::st434::s377m::groups::InterchangeObjectType (InstanceID),
        PackageID_ (PackageID, ::xml_schema::flags (), this),
        PackageName_ (::xml_schema::flags (), this),
        CreationTime_ (CreationTime, ::xml_schema::flags (), this),
        PackageLastModified_ (PackageLastModified, ::xml_schema::flags (), this),
        PackageTracks_ (PackageTracks, ::xml_schema::flags (), this)
      {
      }

      PackageType::
      PackageType (const InstanceID_type& InstanceID,
                   const PackageID_type& PackageID,
                   ::std::auto_ptr< CreationTime_type >& CreationTime,
                   ::std::auto_ptr< PackageLastModified_type >& PackageLastModified,
                   ::std::auto_ptr< PackageTracks_type >& PackageTracks)
      : ::st434::s377m::groups::InterchangeObjectType (InstanceID),
        PackageID_ (PackageID, ::xml_schema::flags (), this),
        PackageName_ (::xml_schema::flags (), this),
        CreationTime_ (CreationTime, ::xml_schema::flags (), this),
        PackageLastModified_ (PackageLastModified, ::xml_schema::flags (), this),
        PackageTracks_ (PackageTracks, ::xml_schema::flags (), this)
      {
      }

      PackageType::
      PackageType (const PackageType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::st434::s377m::groups::InterchangeObjectType (x, f, c),
        PackageID_ (x.PackageID_, f, this),
        PackageName_ (x.PackageName_, f, this),
        CreationTime_ (x.CreationTime_, f, this),
        PackageLastModified_ (x.PackageLastModified_, f, this),
        PackageTracks_ (x.PackageTracks_, f, this)
      {
      }

      PackageType::
      PackageType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::st434::s377m::groups::InterchangeObjectType (e, f | ::xml_schema::flags::base, c),
        PackageID_ (f, this),
        PackageName_ (f, this),
        CreationTime_ (f, this),
        PackageLastModified_ (f, this),
        PackageTracks_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void PackageType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::InterchangeObjectType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PackageID
          //
          if (n.name () == "PackageID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PackageID_type > r (
              PackageID_traits::create (i, f, this));

            if (!PackageID_.present ())
            {
              this->PackageID_.set (r);
              continue;
            }
          }

          // PackageName
          //
          if (n.name () == "PackageName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PackageName_type > r (
              PackageName_traits::create (i, f, this));

            if (!this->PackageName_)
            {
              this->PackageName_.set (r);
              continue;
            }
          }

          // CreationTime
          //
          if (n.name () == "CreationTime" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< CreationTime_type > r (
              CreationTime_traits::create (i, f, this));

            if (!CreationTime_.present ())
            {
              this->CreationTime_.set (r);
              continue;
            }
          }

          // PackageLastModified
          //
          if (n.name () == "PackageLastModified" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PackageLastModified_type > r (
              PackageLastModified_traits::create (i, f, this));

            if (!PackageLastModified_.present ())
            {
              this->PackageLastModified_.set (r);
              continue;
            }
          }

          // PackageTracks
          //
          if (n.name () == "PackageTracks" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PackageTracks_type > r (
              PackageTracks_traits::create (i, f, this));

            if (!PackageTracks_.present ())
            {
              this->PackageTracks_.set (r);
              continue;
            }
          }

          break;
        }

        if (!PackageID_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PackageID",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!CreationTime_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CreationTime",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!PackageLastModified_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PackageLastModified",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!PackageTracks_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PackageTracks",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      PackageType* PackageType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class PackageType (*this, f, c);
      }

      PackageType::
      ~PackageType ()
      {
      }

      // ComponentType
      //

      ComponentType::
      ComponentType (const InstanceID_type& InstanceID,
                     const ComponentDataDefinition_type& ComponentDataDefinition)
      : ::st434::s377m::groups::InterchangeObjectType (InstanceID),
        ComponentDataDefinition_ (ComponentDataDefinition, ::xml_schema::flags (), this),
        ComponentLength_ (::xml_schema::flags (), this)
      {
      }

      ComponentType::
      ComponentType (const ComponentType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::st434::s377m::groups::InterchangeObjectType (x, f, c),
        ComponentDataDefinition_ (x.ComponentDataDefinition_, f, this),
        ComponentLength_ (x.ComponentLength_, f, this)
      {
      }

      ComponentType::
      ComponentType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::st434::s377m::groups::InterchangeObjectType (e, f | ::xml_schema::flags::base, c),
        ComponentDataDefinition_ (f, this),
        ComponentLength_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void ComponentType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::InterchangeObjectType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ComponentDataDefinition
          //
          if (n.name () == "ComponentDataDefinition" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ComponentDataDefinition_type > r (
              ComponentDataDefinition_traits::create (i, f, this));

            if (!ComponentDataDefinition_.present ())
            {
              this->ComponentDataDefinition_.set (r);
              continue;
            }
          }

          // ComponentLength
          //
          if (n.name () == "ComponentLength" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ComponentLength_type > r (
              ComponentLength_traits::create (i, f, this));

            if (!this->ComponentLength_)
            {
              this->ComponentLength_.set (r);
              continue;
            }
          }

          break;
        }

        if (!ComponentDataDefinition_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ComponentDataDefinition",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      ComponentType* ComponentType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class ComponentType (*this, f, c);
      }

      ComponentType::
      ~ComponentType ()
      {
      }

      // SegmentType
      //

      SegmentType::
      SegmentType (const InstanceID_type& InstanceID,
                   const ComponentDataDefinition_type& ComponentDataDefinition)
      : ::st434::s377m::groups::ComponentType (InstanceID,
                                               ComponentDataDefinition)
      {
      }

      SegmentType::
      SegmentType (const SegmentType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::st434::s377m::groups::ComponentType (x, f, c)
      {
      }

      SegmentType::
      SegmentType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::st434::s377m::groups::ComponentType (e, f, c)
      {
      }

      SegmentType* SegmentType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SegmentType (*this, f, c);
      }

      SegmentType::
      ~SegmentType ()
      {
      }

      // SourceReferenceType
      //

      SourceReferenceType::
      SourceReferenceType (const InstanceID_type& InstanceID,
                           const ComponentDataDefinition_type& ComponentDataDefinition,
                           const SourcePackageID_type& SourcePackageID,
                           const SourceTrackID_type& SourceTrackID)
      : ::st434::s377m::groups::SegmentType (InstanceID,
                                             ComponentDataDefinition),
        SourcePackageID_ (SourcePackageID, ::xml_schema::flags (), this),
        SourceTrackID_ (SourceTrackID, ::xml_schema::flags (), this),
        ChannelIDs_ (::xml_schema::flags (), this),
        MonoSourceTrackIDs_ (::xml_schema::flags (), this)
      {
      }

      SourceReferenceType::
      SourceReferenceType (const SourceReferenceType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::st434::s377m::groups::SegmentType (x, f, c),
        SourcePackageID_ (x.SourcePackageID_, f, this),
        SourceTrackID_ (x.SourceTrackID_, f, this),
        ChannelIDs_ (x.ChannelIDs_, f, this),
        MonoSourceTrackIDs_ (x.MonoSourceTrackIDs_, f, this)
      {
      }

      SourceReferenceType::
      SourceReferenceType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::st434::s377m::groups::SegmentType (e, f | ::xml_schema::flags::base, c),
        SourcePackageID_ (f, this),
        SourceTrackID_ (f, this),
        ChannelIDs_ (f, this),
        MonoSourceTrackIDs_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void SourceReferenceType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::SegmentType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SourcePackageID
          //
          if (n.name () == "SourcePackageID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SourcePackageID_type > r (
              SourcePackageID_traits::create (i, f, this));

            if (!SourcePackageID_.present ())
            {
              this->SourcePackageID_.set (r);
              continue;
            }
          }

          // SourceTrackID
          //
          if (n.name () == "SourceTrackID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SourceTrackID_type > r (
              SourceTrackID_traits::create (i, f, this));

            if (!SourceTrackID_.present ())
            {
              this->SourceTrackID_.set (r);
              continue;
            }
          }

          // ChannelIDs
          //
          if (n.name () == "ChannelIDs" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ChannelIDs_type > r (
              ChannelIDs_traits::create (i, f, this));

            if (!this->ChannelIDs_)
            {
              this->ChannelIDs_.set (r);
              continue;
            }
          }

          // MonoSourceTrackIDs
          //
          if (n.name () == "MonoSourceTrackIDs" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< MonoSourceTrackIDs_type > r (
              MonoSourceTrackIDs_traits::create (i, f, this));

            if (!this->MonoSourceTrackIDs_)
            {
              this->MonoSourceTrackIDs_.set (r);
              continue;
            }
          }

          break;
        }

        if (!SourcePackageID_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SourcePackageID",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!SourceTrackID_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SourceTrackID",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      SourceReferenceType* SourceReferenceType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SourceReferenceType (*this, f, c);
      }

      SourceReferenceType::
      ~SourceReferenceType ()
      {
      }

      // DMS1EventType
      //

      DMS1EventType::
      DMS1EventType (const InstanceID_type& InstanceID,
                     const ComponentDataDefinition_type& ComponentDataDefinition)
      : ::st434::s377m::groups::SegmentType (InstanceID,
                                             ComponentDataDefinition),
        EventPosition_ (::xml_schema::flags (), this),
        EventComment_ (::xml_schema::flags (), this)
      {
      }

      DMS1EventType::
      DMS1EventType (const DMS1EventType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::st434::s377m::groups::SegmentType (x, f, c),
        EventPosition_ (x.EventPosition_, f, this),
        EventComment_ (x.EventComment_, f, this)
      {
      }

      DMS1EventType::
      DMS1EventType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::st434::s377m::groups::SegmentType (e, f | ::xml_schema::flags::base, c),
        EventPosition_ (f, this),
        EventComment_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void DMS1EventType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::SegmentType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // EventPosition
          //
          if (n.name () == "EventPosition" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EventPosition_type > r (
              EventPosition_traits::create (i, f, this));

            if (!this->EventPosition_)
            {
              this->EventPosition_.set (r);
              continue;
            }
          }

          // EventComment
          //
          if (n.name () == "EventComment" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EventComment_type > r (
              EventComment_traits::create (i, f, this));

            if (!this->EventComment_)
            {
              this->EventComment_.set (r);
              continue;
            }
          }

          break;
        }
      }

      DMS1EventType* DMS1EventType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class DMS1EventType (*this, f, c);
      }

      DMS1EventType::
      ~DMS1EventType ()
      {
      }

      // CommentMarkerType
      //

      CommentMarkerType::
      CommentMarkerType (const InstanceID_type& InstanceID,
                         const ComponentDataDefinition_type& ComponentDataDefinition)
      : ::st434::s377m::groups::DMS1EventType (InstanceID,
                                               ComponentDataDefinition)
      {
      }

      CommentMarkerType::
      CommentMarkerType (const CommentMarkerType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::st434::s377m::groups::DMS1EventType (x, f, c)
      {
      }

      CommentMarkerType::
      CommentMarkerType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::st434::s377m::groups::DMS1EventType (e, f, c)
      {
      }

      CommentMarkerType* CommentMarkerType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class CommentMarkerType (*this, f, c);
      }

      CommentMarkerType::
      ~CommentMarkerType ()
      {
      }

      // GenericDescriptorType
      //

      GenericDescriptorType::
      GenericDescriptorType (const InstanceID_type& InstanceID)
      : ::st434::s377m::groups::InterchangeObjectType (InstanceID),
        Locators_ (::xml_schema::flags (), this),
        SubDescriptors_ (::xml_schema::flags (), this)
      {
      }

      GenericDescriptorType::
      GenericDescriptorType (const GenericDescriptorType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
      : ::st434::s377m::groups::InterchangeObjectType (x, f, c),
        Locators_ (x.Locators_, f, this),
        SubDescriptors_ (x.SubDescriptors_, f, this)
      {
      }

      GenericDescriptorType::
      GenericDescriptorType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
      : ::st434::s377m::groups::InterchangeObjectType (e, f | ::xml_schema::flags::base, c),
        Locators_ (f, this),
        SubDescriptors_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void GenericDescriptorType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::InterchangeObjectType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Locators
          //
          if (n.name () == "Locators" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< Locators_type > r (
              Locators_traits::create (i, f, this));

            if (!this->Locators_)
            {
              this->Locators_.set (r);
              continue;
            }
          }

          // SubDescriptors
          //
          if (n.name () == "SubDescriptors" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SubDescriptors_type > r (
              SubDescriptors_traits::create (i, f, this));

            if (!this->SubDescriptors_)
            {
              this->SubDescriptors_.set (r);
              continue;
            }
          }

          break;
        }
      }

      GenericDescriptorType* GenericDescriptorType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class GenericDescriptorType (*this, f, c);
      }

      GenericDescriptorType::
      ~GenericDescriptorType ()
      {
      }

      // PhysicalDescriptorType
      //

      PhysicalDescriptorType::
      PhysicalDescriptorType (const InstanceID_type& InstanceID)
      : ::st434::s377m::groups::GenericDescriptorType (InstanceID)
      {
      }

      PhysicalDescriptorType::
      PhysicalDescriptorType (const PhysicalDescriptorType& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
      : ::st434::s377m::groups::GenericDescriptorType (x, f, c)
      {
      }

      PhysicalDescriptorType::
      PhysicalDescriptorType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
      : ::st434::s377m::groups::GenericDescriptorType (e, f, c)
      {
      }

      PhysicalDescriptorType* PhysicalDescriptorType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class PhysicalDescriptorType (*this, f, c);
      }

      PhysicalDescriptorType::
      ~PhysicalDescriptorType ()
      {
      }

      // LocatorType
      //

      LocatorType::
      LocatorType (const InstanceID_type& InstanceID)
      : ::st434::s377m::groups::InterchangeObjectType (InstanceID)
      {
      }

      LocatorType::
      LocatorType (const LocatorType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::st434::s377m::groups::InterchangeObjectType (x, f, c)
      {
      }

      LocatorType::
      LocatorType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::st434::s377m::groups::InterchangeObjectType (e, f, c)
      {
      }

      LocatorType* LocatorType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class LocatorType (*this, f, c);
      }

      LocatorType::
      ~LocatorType ()
      {
      }

      // PrefaceType
      //

      PrefaceType::
      PrefaceType (const InstanceID_type& InstanceID,
                   const FileLastModified_type& FileLastModified,
                   const FormatVersion_type& FormatVersion,
                   const IdentificationList_type& IdentificationList,
                   const ContentStorageObject_type& ContentStorageObject,
                   const OperationalPattern_type& OperationalPattern,
                   const EssenceContainers_type& EssenceContainers,
                   const DescriptiveSchemes_type& DescriptiveSchemes)
      : ::st434::s377m::groups::InterchangeObjectType (InstanceID),
        FileLastModified_ (FileLastModified, ::xml_schema::flags (), this),
        FormatVersion_ (FormatVersion, ::xml_schema::flags (), this),
        ObjectModelVersion_ (::xml_schema::flags (), this),
        PrimaryPackage_ (::xml_schema::flags (), this),
        IdentificationList_ (IdentificationList, ::xml_schema::flags (), this),
        ContentStorageObject_ (ContentStorageObject, ::xml_schema::flags (), this),
        OperationalPattern_ (OperationalPattern, ::xml_schema::flags (), this),
        EssenceContainers_ (EssenceContainers, ::xml_schema::flags (), this),
        DescriptiveSchemes_ (DescriptiveSchemes, ::xml_schema::flags (), this)
      {
      }

      PrefaceType::
      PrefaceType (const InstanceID_type& InstanceID,
                   ::std::auto_ptr< FileLastModified_type >& FileLastModified,
                   const FormatVersion_type& FormatVersion,
                   ::std::auto_ptr< IdentificationList_type >& IdentificationList,
                   ::std::auto_ptr< ContentStorageObject_type >& ContentStorageObject,
                   const OperationalPattern_type& OperationalPattern,
                   ::std::auto_ptr< EssenceContainers_type >& EssenceContainers,
                   ::std::auto_ptr< DescriptiveSchemes_type >& DescriptiveSchemes)
      : ::st434::s377m::groups::InterchangeObjectType (InstanceID),
        FileLastModified_ (FileLastModified, ::xml_schema::flags (), this),
        FormatVersion_ (FormatVersion, ::xml_schema::flags (), this),
        ObjectModelVersion_ (::xml_schema::flags (), this),
        PrimaryPackage_ (::xml_schema::flags (), this),
        IdentificationList_ (IdentificationList, ::xml_schema::flags (), this),
        ContentStorageObject_ (ContentStorageObject, ::xml_schema::flags (), this),
        OperationalPattern_ (OperationalPattern, ::xml_schema::flags (), this),
        EssenceContainers_ (EssenceContainers, ::xml_schema::flags (), this),
        DescriptiveSchemes_ (DescriptiveSchemes, ::xml_schema::flags (), this)
      {
      }

      PrefaceType::
      PrefaceType (const PrefaceType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::st434::s377m::groups::InterchangeObjectType (x, f, c),
        FileLastModified_ (x.FileLastModified_, f, this),
        FormatVersion_ (x.FormatVersion_, f, this),
        ObjectModelVersion_ (x.ObjectModelVersion_, f, this),
        PrimaryPackage_ (x.PrimaryPackage_, f, this),
        IdentificationList_ (x.IdentificationList_, f, this),
        ContentStorageObject_ (x.ContentStorageObject_, f, this),
        OperationalPattern_ (x.OperationalPattern_, f, this),
        EssenceContainers_ (x.EssenceContainers_, f, this),
        DescriptiveSchemes_ (x.DescriptiveSchemes_, f, this)
      {
      }

      PrefaceType::
      PrefaceType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::st434::s377m::groups::InterchangeObjectType (e, f | ::xml_schema::flags::base, c),
        FileLastModified_ (f, this),
        FormatVersion_ (f, this),
        ObjectModelVersion_ (f, this),
        PrimaryPackage_ (f, this),
        IdentificationList_ (f, this),
        ContentStorageObject_ (f, this),
        OperationalPattern_ (f, this),
        EssenceContainers_ (f, this),
        DescriptiveSchemes_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void PrefaceType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::InterchangeObjectType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // FileLastModified
          //
          if (n.name () == "FileLastModified" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< FileLastModified_type > r (
              FileLastModified_traits::create (i, f, this));

            if (!FileLastModified_.present ())
            {
              this->FileLastModified_.set (r);
              continue;
            }
          }

          // FormatVersion
          //
          if (n.name () == "FormatVersion" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< FormatVersion_type > r (
              FormatVersion_traits::create (i, f, this));

            if (!FormatVersion_.present ())
            {
              this->FormatVersion_.set (r);
              continue;
            }
          }

          // ObjectModelVersion
          //
          if (n.name () == "ObjectModelVersion" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ObjectModelVersion_type > r (
              ObjectModelVersion_traits::create (i, f, this));

            if (!this->ObjectModelVersion_)
            {
              this->ObjectModelVersion_.set (r);
              continue;
            }
          }

          // PrimaryPackage
          //
          if (n.name () == "PrimaryPackage" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PrimaryPackage_type > r (
              PrimaryPackage_traits::create (i, f, this));

            if (!this->PrimaryPackage_)
            {
              this->PrimaryPackage_.set (r);
              continue;
            }
          }

          // IdentificationList
          //
          if (n.name () == "IdentificationList" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< IdentificationList_type > r (
              IdentificationList_traits::create (i, f, this));

            if (!IdentificationList_.present ())
            {
              this->IdentificationList_.set (r);
              continue;
            }
          }

          // ContentStorageObject
          //
          if (n.name () == "ContentStorageObject" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ContentStorageObject_type > r (
              ContentStorageObject_traits::create (i, f, this));

            if (!ContentStorageObject_.present ())
            {
              this->ContentStorageObject_.set (r);
              continue;
            }
          }

          // OperationalPattern
          //
          if (n.name () == "OperationalPattern" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< OperationalPattern_type > r (
              OperationalPattern_traits::create (i, f, this));

            if (!OperationalPattern_.present ())
            {
              this->OperationalPattern_.set (r);
              continue;
            }
          }

          // EssenceContainers
          //
          if (n.name () == "EssenceContainers" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EssenceContainers_type > r (
              EssenceContainers_traits::create (i, f, this));

            if (!EssenceContainers_.present ())
            {
              this->EssenceContainers_.set (r);
              continue;
            }
          }

          // DescriptiveSchemes
          //
          if (n.name () == "DescriptiveSchemes" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DescriptiveSchemes_type > r (
              DescriptiveSchemes_traits::create (i, f, this));

            if (!DescriptiveSchemes_.present ())
            {
              this->DescriptiveSchemes_.set (r);
              continue;
            }
          }

          break;
        }

        if (!FileLastModified_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FileLastModified",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!FormatVersion_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FormatVersion",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!IdentificationList_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "IdentificationList",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!ContentStorageObject_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ContentStorageObject",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!OperationalPattern_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "OperationalPattern",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!EssenceContainers_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EssenceContainers",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!DescriptiveSchemes_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "DescriptiveSchemes",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      PrefaceType* PrefaceType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class PrefaceType (*this, f, c);
      }

      PrefaceType::
      ~PrefaceType ()
      {
      }

      // IdentificationType
      //

      IdentificationType::
      IdentificationType (const InstanceID_type& InstanceID,
                          const GenerationID_type& GenerationID,
                          const ApplicationSupplierName_type& ApplicationSupplierName,
                          const ApplicationName_type& ApplicationName,
                          const ApplicationVersionString_type& ApplicationVersionString,
                          const ApplicationProductID_type& ApplicationProductID,
                          const FileModificationDate_type& FileModificationDate)
      : ::st434::s377m::groups::AbstractSetType (InstanceID),
        GenerationID_ (GenerationID, ::xml_schema::flags (), this),
        ApplicationSupplierName_ (ApplicationSupplierName, ::xml_schema::flags (), this),
        ApplicationName_ (ApplicationName, ::xml_schema::flags (), this),
        ApplicationVersion_ (::xml_schema::flags (), this),
        ApplicationVersionString_ (ApplicationVersionString, ::xml_schema::flags (), this),
        ApplicationProductID_ (ApplicationProductID, ::xml_schema::flags (), this),
        FileModificationDate_ (FileModificationDate, ::xml_schema::flags (), this),
        ToolkitVersion_ (::xml_schema::flags (), this),
        ApplicationPlatform_ (::xml_schema::flags (), this)
      {
      }

      IdentificationType::
      IdentificationType (const InstanceID_type& InstanceID,
                          const GenerationID_type& GenerationID,
                          const ApplicationSupplierName_type& ApplicationSupplierName,
                          const ApplicationName_type& ApplicationName,
                          const ApplicationVersionString_type& ApplicationVersionString,
                          const ApplicationProductID_type& ApplicationProductID,
                          ::std::auto_ptr< FileModificationDate_type >& FileModificationDate)
      : ::st434::s377m::groups::AbstractSetType (InstanceID),
        GenerationID_ (GenerationID, ::xml_schema::flags (), this),
        ApplicationSupplierName_ (ApplicationSupplierName, ::xml_schema::flags (), this),
        ApplicationName_ (ApplicationName, ::xml_schema::flags (), this),
        ApplicationVersion_ (::xml_schema::flags (), this),
        ApplicationVersionString_ (ApplicationVersionString, ::xml_schema::flags (), this),
        ApplicationProductID_ (ApplicationProductID, ::xml_schema::flags (), this),
        FileModificationDate_ (FileModificationDate, ::xml_schema::flags (), this),
        ToolkitVersion_ (::xml_schema::flags (), this),
        ApplicationPlatform_ (::xml_schema::flags (), this)
      {
      }

      IdentificationType::
      IdentificationType (const IdentificationType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::st434::s377m::groups::AbstractSetType (x, f, c),
        GenerationID_ (x.GenerationID_, f, this),
        ApplicationSupplierName_ (x.ApplicationSupplierName_, f, this),
        ApplicationName_ (x.ApplicationName_, f, this),
        ApplicationVersion_ (x.ApplicationVersion_, f, this),
        ApplicationVersionString_ (x.ApplicationVersionString_, f, this),
        ApplicationProductID_ (x.ApplicationProductID_, f, this),
        FileModificationDate_ (x.FileModificationDate_, f, this),
        ToolkitVersion_ (x.ToolkitVersion_, f, this),
        ApplicationPlatform_ (x.ApplicationPlatform_, f, this)
      {
      }

      IdentificationType::
      IdentificationType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::st434::s377m::groups::AbstractSetType (e, f | ::xml_schema::flags::base, c),
        GenerationID_ (f, this),
        ApplicationSupplierName_ (f, this),
        ApplicationName_ (f, this),
        ApplicationVersion_ (f, this),
        ApplicationVersionString_ (f, this),
        ApplicationProductID_ (f, this),
        FileModificationDate_ (f, this),
        ToolkitVersion_ (f, this),
        ApplicationPlatform_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void IdentificationType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::AbstractSetType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // GenerationID
          //
          if (n.name () == "GenerationID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< GenerationID_type > r (
              GenerationID_traits::create (i, f, this));

            if (!GenerationID_.present ())
            {
              this->GenerationID_.set (r);
              continue;
            }
          }

          // ApplicationSupplierName
          //
          if (n.name () == "ApplicationSupplierName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ApplicationSupplierName_type > r (
              ApplicationSupplierName_traits::create (i, f, this));

            if (!ApplicationSupplierName_.present ())
            {
              this->ApplicationSupplierName_.set (r);
              continue;
            }
          }

          // ApplicationName
          //
          if (n.name () == "ApplicationName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ApplicationName_type > r (
              ApplicationName_traits::create (i, f, this));

            if (!ApplicationName_.present ())
            {
              this->ApplicationName_.set (r);
              continue;
            }
          }

          // ApplicationVersion
          //
          if (n.name () == "ApplicationVersion" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ApplicationVersion_type > r (
              ApplicationVersion_traits::create (i, f, this));

            if (!this->ApplicationVersion_)
            {
              this->ApplicationVersion_.set (r);
              continue;
            }
          }

          // ApplicationVersionString
          //
          if (n.name () == "ApplicationVersionString" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ApplicationVersionString_type > r (
              ApplicationVersionString_traits::create (i, f, this));

            if (!ApplicationVersionString_.present ())
            {
              this->ApplicationVersionString_.set (r);
              continue;
            }
          }

          // ApplicationProductID
          //
          if (n.name () == "ApplicationProductID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ApplicationProductID_type > r (
              ApplicationProductID_traits::create (i, f, this));

            if (!ApplicationProductID_.present ())
            {
              this->ApplicationProductID_.set (r);
              continue;
            }
          }

          // FileModificationDate
          //
          if (n.name () == "FileModificationDate" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< FileModificationDate_type > r (
              FileModificationDate_traits::create (i, f, this));

            if (!FileModificationDate_.present ())
            {
              this->FileModificationDate_.set (r);
              continue;
            }
          }

          // ToolkitVersion
          //
          if (n.name () == "ToolkitVersion" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ToolkitVersion_type > r (
              ToolkitVersion_traits::create (i, f, this));

            if (!this->ToolkitVersion_)
            {
              this->ToolkitVersion_.set (r);
              continue;
            }
          }

          // ApplicationPlatform
          //
          if (n.name () == "ApplicationPlatform" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ApplicationPlatform_type > r (
              ApplicationPlatform_traits::create (i, f, this));

            if (!this->ApplicationPlatform_)
            {
              this->ApplicationPlatform_.set (r);
              continue;
            }
          }

          break;
        }

        if (!GenerationID_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "GenerationID",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!ApplicationSupplierName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ApplicationSupplierName",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!ApplicationName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ApplicationName",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!ApplicationVersionString_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ApplicationVersionString",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!ApplicationProductID_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ApplicationProductID",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!FileModificationDate_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FileModificationDate",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      IdentificationType* IdentificationType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class IdentificationType (*this, f, c);
      }

      IdentificationType::
      ~IdentificationType ()
      {
      }

      // ContentStorageType
      //

      ContentStorageType::
      ContentStorageType (const InstanceID_type& InstanceID,
                          const Packages_type& Packages)
      : ::st434::s377m::groups::InterchangeObjectType (InstanceID),
        Packages_ (Packages, ::xml_schema::flags (), this),
        EssenceDataObjects_ (::xml_schema::flags (), this)
      {
      }

      ContentStorageType::
      ContentStorageType (const InstanceID_type& InstanceID,
                          ::std::auto_ptr< Packages_type >& Packages)
      : ::st434::s377m::groups::InterchangeObjectType (InstanceID),
        Packages_ (Packages, ::xml_schema::flags (), this),
        EssenceDataObjects_ (::xml_schema::flags (), this)
      {
      }

      ContentStorageType::
      ContentStorageType (const ContentStorageType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::st434::s377m::groups::InterchangeObjectType (x, f, c),
        Packages_ (x.Packages_, f, this),
        EssenceDataObjects_ (x.EssenceDataObjects_, f, this)
      {
      }

      ContentStorageType::
      ContentStorageType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::st434::s377m::groups::InterchangeObjectType (e, f | ::xml_schema::flags::base, c),
        Packages_ (f, this),
        EssenceDataObjects_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void ContentStorageType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::InterchangeObjectType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Packages
          //
          if (n.name () == "Packages" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< Packages_type > r (
              Packages_traits::create (i, f, this));

            if (!Packages_.present ())
            {
              this->Packages_.set (r);
              continue;
            }
          }

          // EssenceDataObjects
          //
          if (n.name () == "EssenceDataObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EssenceDataObjects_type > r (
              EssenceDataObjects_traits::create (i, f, this));

            if (!this->EssenceDataObjects_)
            {
              this->EssenceDataObjects_.set (r);
              continue;
            }
          }

          break;
        }

        if (!Packages_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Packages",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      ContentStorageType* ContentStorageType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class ContentStorageType (*this, f, c);
      }

      ContentStorageType::
      ~ContentStorageType ()
      {
      }

      // EssenceDataType
      //

      EssenceDataType::
      EssenceDataType (const InstanceID_type& InstanceID,
                       const LinkedPackageID_type& LinkedPackageID,
                       const EssenceStreamID_type& EssenceStreamID)
      : ::st434::s377m::groups::InterchangeObjectType (InstanceID),
        LinkedPackageID_ (LinkedPackageID, ::xml_schema::flags (), this),
        IndexStreamID_ (::xml_schema::flags (), this),
        EssenceStreamID_ (EssenceStreamID, ::xml_schema::flags (), this)
      {
      }

      EssenceDataType::
      EssenceDataType (const EssenceDataType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::st434::s377m::groups::InterchangeObjectType (x, f, c),
        LinkedPackageID_ (x.LinkedPackageID_, f, this),
        IndexStreamID_ (x.IndexStreamID_, f, this),
        EssenceStreamID_ (x.EssenceStreamID_, f, this)
      {
      }

      EssenceDataType::
      EssenceDataType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::st434::s377m::groups::InterchangeObjectType (e, f | ::xml_schema::flags::base, c),
        LinkedPackageID_ (f, this),
        IndexStreamID_ (f, this),
        EssenceStreamID_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void EssenceDataType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::InterchangeObjectType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // LinkedPackageID
          //
          if (n.name () == "LinkedPackageID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< LinkedPackageID_type > r (
              LinkedPackageID_traits::create (i, f, this));

            if (!LinkedPackageID_.present ())
            {
              this->LinkedPackageID_.set (r);
              continue;
            }
          }

          // IndexStreamID
          //
          if (n.name () == "IndexStreamID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< IndexStreamID_type > r (
              IndexStreamID_traits::create (i, f, this));

            if (!this->IndexStreamID_)
            {
              this->IndexStreamID_.set (r);
              continue;
            }
          }

          // EssenceStreamID
          //
          if (n.name () == "EssenceStreamID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EssenceStreamID_type > r (
              EssenceStreamID_traits::create (i, f, this));

            if (!EssenceStreamID_.present ())
            {
              this->EssenceStreamID_.set (r);
              continue;
            }
          }

          break;
        }

        if (!LinkedPackageID_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LinkedPackageID",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!EssenceStreamID_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EssenceStreamID",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      EssenceDataType* EssenceDataType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class EssenceDataType (*this, f, c);
      }

      EssenceDataType::
      ~EssenceDataType ()
      {
      }

      // NetworkLocatorType
      //

      NetworkLocatorType::
      NetworkLocatorType (const InstanceID_type& InstanceID,
                          const URL_type& URL)
      : ::st434::s377m::groups::LocatorType (InstanceID),
        URL_ (URL, ::xml_schema::flags (), this)
      {
      }

      NetworkLocatorType::
      NetworkLocatorType (const NetworkLocatorType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::st434::s377m::groups::LocatorType (x, f, c),
        URL_ (x.URL_, f, this)
      {
      }

      NetworkLocatorType::
      NetworkLocatorType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::st434::s377m::groups::LocatorType (e, f | ::xml_schema::flags::base, c),
        URL_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void NetworkLocatorType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::LocatorType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // URL
          //
          if (n.name () == "URL" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< URL_type > r (
              URL_traits::create (i, f, this));

            if (!URL_.present ())
            {
              this->URL_.set (r);
              continue;
            }
          }

          break;
        }

        if (!URL_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "URL",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      NetworkLocatorType* NetworkLocatorType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class NetworkLocatorType (*this, f, c);
      }

      NetworkLocatorType::
      ~NetworkLocatorType ()
      {
      }

      // TextLocatorType
      //

      TextLocatorType::
      TextLocatorType (const InstanceID_type& InstanceID,
                       const LocationName_type& LocationName)
      : ::st434::s377m::groups::LocatorType (InstanceID),
        LocationName_ (LocationName, ::xml_schema::flags (), this)
      {
      }

      TextLocatorType::
      TextLocatorType (const TextLocatorType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::st434::s377m::groups::LocatorType (x, f, c),
        LocationName_ (x.LocationName_, f, this)
      {
      }

      TextLocatorType::
      TextLocatorType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::st434::s377m::groups::LocatorType (e, f | ::xml_schema::flags::base, c),
        LocationName_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void TextLocatorType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::LocatorType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // LocationName
          //
          if (n.name () == "LocationName" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< LocationName_type > r (
              LocationName_traits::create (i, f, this));

            if (!LocationName_.present ())
            {
              this->LocationName_.set (r);
              continue;
            }
          }

          break;
        }

        if (!LocationName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LocationName",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      TextLocatorType* TextLocatorType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class TextLocatorType (*this, f, c);
      }

      TextLocatorType::
      ~TextLocatorType ()
      {
      }

      // TimelineTrackType
      //

      TimelineTrackType::
      TimelineTrackType (const InstanceID_type& InstanceID,
                         const EssenceTrackNumber_type& EssenceTrackNumber,
                         const TrackSegment_type& TrackSegment,
                         const EditRate_type& EditRate,
                         const Origin_type& Origin)
      : ::st434::s377m::groups::TrackType (InstanceID,
                                           EssenceTrackNumber,
                                           TrackSegment),
        EditRate_ (EditRate, ::xml_schema::flags (), this),
        Origin_ (Origin, ::xml_schema::flags (), this)
      {
      }

      TimelineTrackType::
      TimelineTrackType (const InstanceID_type& InstanceID,
                         const EssenceTrackNumber_type& EssenceTrackNumber,
                         ::std::auto_ptr< TrackSegment_type >& TrackSegment,
                         ::std::auto_ptr< EditRate_type >& EditRate,
                         const Origin_type& Origin)
      : ::st434::s377m::groups::TrackType (InstanceID,
                                           EssenceTrackNumber,
                                           TrackSegment),
        EditRate_ (EditRate, ::xml_schema::flags (), this),
        Origin_ (Origin, ::xml_schema::flags (), this)
      {
      }

      TimelineTrackType::
      TimelineTrackType (const TimelineTrackType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::st434::s377m::groups::TrackType (x, f, c),
        EditRate_ (x.EditRate_, f, this),
        Origin_ (x.Origin_, f, this)
      {
      }

      TimelineTrackType::
      TimelineTrackType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::st434::s377m::groups::TrackType (e, f | ::xml_schema::flags::base, c),
        EditRate_ (f, this),
        Origin_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void TimelineTrackType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::TrackType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // EditRate
          //
          if (n.name () == "EditRate" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EditRate_type > r (
              EditRate_traits::create (i, f, this));

            if (!EditRate_.present ())
            {
              this->EditRate_.set (r);
              continue;
            }
          }

          // Origin
          //
          if (n.name () == "Origin" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< Origin_type > r (
              Origin_traits::create (i, f, this));

            if (!Origin_.present ())
            {
              this->Origin_.set (r);
              continue;
            }
          }

          break;
        }

        if (!EditRate_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EditRate",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!Origin_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Origin",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      TimelineTrackType* TimelineTrackType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class TimelineTrackType (*this, f, c);
      }

      TimelineTrackType::
      ~TimelineTrackType ()
      {
      }

      // EventTrackType
      //

      EventTrackType::
      EventTrackType (const InstanceID_type& InstanceID,
                      const EssenceTrackNumber_type& EssenceTrackNumber,
                      const TrackSegment_type& TrackSegment,
                      const EventTrackEditRate_type& EventTrackEditRate)
      : ::st434::s377m::groups::TrackType (InstanceID,
                                           EssenceTrackNumber,
                                           TrackSegment),
        EventTrackEditRate_ (EventTrackEditRate, ::xml_schema::flags (), this),
        EventTrackOrigin_ (::xml_schema::flags (), this)
      {
      }

      EventTrackType::
      EventTrackType (const InstanceID_type& InstanceID,
                      const EssenceTrackNumber_type& EssenceTrackNumber,
                      ::std::auto_ptr< TrackSegment_type >& TrackSegment,
                      ::std::auto_ptr< EventTrackEditRate_type >& EventTrackEditRate)
      : ::st434::s377m::groups::TrackType (InstanceID,
                                           EssenceTrackNumber,
                                           TrackSegment),
        EventTrackEditRate_ (EventTrackEditRate, ::xml_schema::flags (), this),
        EventTrackOrigin_ (::xml_schema::flags (), this)
      {
      }

      EventTrackType::
      EventTrackType (const EventTrackType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::st434::s377m::groups::TrackType (x, f, c),
        EventTrackEditRate_ (x.EventTrackEditRate_, f, this),
        EventTrackOrigin_ (x.EventTrackOrigin_, f, this)
      {
      }

      EventTrackType::
      EventTrackType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::st434::s377m::groups::TrackType (e, f | ::xml_schema::flags::base, c),
        EventTrackEditRate_ (f, this),
        EventTrackOrigin_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void EventTrackType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::TrackType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // EventTrackEditRate
          //
          if (n.name () == "EventTrackEditRate" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EventTrackEditRate_type > r (
              EventTrackEditRate_traits::create (i, f, this));

            if (!EventTrackEditRate_.present ())
            {
              this->EventTrackEditRate_.set (r);
              continue;
            }
          }

          // EventTrackOrigin
          //
          if (n.name () == "EventTrackOrigin" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EventTrackOrigin_type > r (
              EventTrackOrigin_traits::create (i, f, this));

            if (!this->EventTrackOrigin_)
            {
              this->EventTrackOrigin_.set (r);
              continue;
            }
          }

          break;
        }

        if (!EventTrackEditRate_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EventTrackEditRate",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      EventTrackType* EventTrackType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class EventTrackType (*this, f, c);
      }

      EventTrackType::
      ~EventTrackType ()
      {
      }

      // StaticTrackType
      //

      StaticTrackType::
      StaticTrackType (const InstanceID_type& InstanceID,
                       const EssenceTrackNumber_type& EssenceTrackNumber,
                       const TrackSegment_type& TrackSegment)
      : ::st434::s377m::groups::TrackType (InstanceID,
                                           EssenceTrackNumber,
                                           TrackSegment)
      {
      }

      StaticTrackType::
      StaticTrackType (const InstanceID_type& InstanceID,
                       const EssenceTrackNumber_type& EssenceTrackNumber,
                       ::std::auto_ptr< TrackSegment_type >& TrackSegment)
      : ::st434::s377m::groups::TrackType (InstanceID,
                                           EssenceTrackNumber,
                                           TrackSegment)
      {
      }

      StaticTrackType::
      StaticTrackType (const StaticTrackType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::st434::s377m::groups::TrackType (x, f, c)
      {
      }

      StaticTrackType::
      StaticTrackType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::st434::s377m::groups::TrackType (e, f, c)
      {
      }

      StaticTrackType* StaticTrackType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class StaticTrackType (*this, f, c);
      }

      StaticTrackType::
      ~StaticTrackType ()
      {
      }

      // SequenceType
      //

      SequenceType::
      SequenceType (const InstanceID_type& InstanceID,
                    const ComponentDataDefinition_type& ComponentDataDefinition,
                    const ComponentObjects_type& ComponentObjects)
      : ::st434::s377m::groups::SegmentType (InstanceID,
                                             ComponentDataDefinition),
        ComponentObjects_ (ComponentObjects, ::xml_schema::flags (), this)
      {
      }

      SequenceType::
      SequenceType (const InstanceID_type& InstanceID,
                    const ComponentDataDefinition_type& ComponentDataDefinition,
                    ::std::auto_ptr< ComponentObjects_type >& ComponentObjects)
      : ::st434::s377m::groups::SegmentType (InstanceID,
                                             ComponentDataDefinition),
        ComponentObjects_ (ComponentObjects, ::xml_schema::flags (), this)
      {
      }

      SequenceType::
      SequenceType (const SequenceType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::st434::s377m::groups::SegmentType (x, f, c),
        ComponentObjects_ (x.ComponentObjects_, f, this)
      {
      }

      SequenceType::
      SequenceType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::st434::s377m::groups::SegmentType (e, f | ::xml_schema::flags::base, c),
        ComponentObjects_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void SequenceType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::SegmentType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ComponentObjects
          //
          if (n.name () == "ComponentObjects" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ComponentObjects_type > r (
              ComponentObjects_traits::create (i, f, this));

            if (!ComponentObjects_.present ())
            {
              this->ComponentObjects_.set (r);
              continue;
            }
          }

          break;
        }

        if (!ComponentObjects_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ComponentObjects",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      SequenceType* SequenceType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SequenceType (*this, f, c);
      }

      SequenceType::
      ~SequenceType ()
      {
      }

      // TimecodeType
      //

      TimecodeType::
      TimecodeType (const InstanceID_type& InstanceID,
                    const ComponentDataDefinition_type& ComponentDataDefinition,
                    const StartTimecode_type& StartTimecode,
                    const FramesPerSecond_type& FramesPerSecond,
                    const DropFrame_type& DropFrame)
      : ::st434::s377m::groups::SegmentType (InstanceID,
                                             ComponentDataDefinition),
        StartTimecode_ (StartTimecode, ::xml_schema::flags (), this),
        FramesPerSecond_ (FramesPerSecond, ::xml_schema::flags (), this),
        DropFrame_ (DropFrame, ::xml_schema::flags (), this)
      {
      }

      TimecodeType::
      TimecodeType (const TimecodeType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::st434::s377m::groups::SegmentType (x, f, c),
        StartTimecode_ (x.StartTimecode_, f, this),
        FramesPerSecond_ (x.FramesPerSecond_, f, this),
        DropFrame_ (x.DropFrame_, f, this)
      {
      }

      TimecodeType::
      TimecodeType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::st434::s377m::groups::SegmentType (e, f | ::xml_schema::flags::base, c),
        StartTimecode_ (f, this),
        FramesPerSecond_ (f, this),
        DropFrame_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void TimecodeType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::SegmentType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // StartTimecode
          //
          if (n.name () == "StartTimecode" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< StartTimecode_type > r (
              StartTimecode_traits::create (i, f, this));

            if (!StartTimecode_.present ())
            {
              this->StartTimecode_.set (r);
              continue;
            }
          }

          // FramesPerSecond
          //
          if (n.name () == "FramesPerSecond" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< FramesPerSecond_type > r (
              FramesPerSecond_traits::create (i, f, this));

            if (!FramesPerSecond_.present ())
            {
              this->FramesPerSecond_.set (r);
              continue;
            }
          }

          // DropFrame
          //
          if (n.name () == "DropFrame" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DropFrame_type > r (
              DropFrame_traits::create (i, f, this));

            if (!DropFrame_.present ())
            {
              this->DropFrame_.set (r);
              continue;
            }
          }

          break;
        }

        if (!StartTimecode_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StartTimecode",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!FramesPerSecond_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FramesPerSecond",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!DropFrame_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "DropFrame",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      TimecodeType* TimecodeType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class TimecodeType (*this, f, c);
      }

      TimecodeType::
      ~TimecodeType ()
      {
      }

      // DescriptiveMarkerType
      //

      DescriptiveMarkerType::
      DescriptiveMarkerType (const InstanceID_type& InstanceID,
                             const ComponentDataDefinition_type& ComponentDataDefinition)
      : ::st434::s377m::groups::CommentMarkerType (InstanceID,
                                                   ComponentDataDefinition),
        DescribedTrackIDs_ (::xml_schema::flags (), this),
        DescriptiveFrameworkObject_ (::xml_schema::flags (), this)
      {
      }

      DescriptiveMarkerType::
      DescriptiveMarkerType (const DescriptiveMarkerType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
      : ::st434::s377m::groups::CommentMarkerType (x, f, c),
        DescribedTrackIDs_ (x.DescribedTrackIDs_, f, this),
        DescriptiveFrameworkObject_ (x.DescriptiveFrameworkObject_, f, this)
      {
      }

      DescriptiveMarkerType::
      DescriptiveMarkerType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
      : ::st434::s377m::groups::CommentMarkerType (e, f | ::xml_schema::flags::base, c),
        DescribedTrackIDs_ (f, this),
        DescriptiveFrameworkObject_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void DescriptiveMarkerType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::CommentMarkerType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // DescribedTrackIDs
          //
          if (n.name () == "DescribedTrackIDs" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DescribedTrackIDs_type > r (
              DescribedTrackIDs_traits::create (i, f, this));

            if (!this->DescribedTrackIDs_)
            {
              this->DescribedTrackIDs_.set (r);
              continue;
            }
          }

          // DescriptiveFrameworkObject
          //
          if (n.name () == "DescriptiveFrameworkObject" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DescriptiveFrameworkObject_type > r (
              DescriptiveFrameworkObject_traits::create (i, f, this));

            if (!this->DescriptiveFrameworkObject_)
            {
              this->DescriptiveFrameworkObject_.set (r);
              continue;
            }
          }

          break;
        }
      }

      DescriptiveMarkerType* DescriptiveMarkerType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class DescriptiveMarkerType (*this, f, c);
      }

      DescriptiveMarkerType::
      ~DescriptiveMarkerType ()
      {
      }

      // SourceClipType
      //

      SourceClipType::
      SourceClipType (const InstanceID_type& InstanceID,
                      const ComponentDataDefinition_type& ComponentDataDefinition,
                      const SourcePackageID_type& SourcePackageID,
                      const SourceTrackID_type& SourceTrackID,
                      const StartPosition_type& StartPosition)
      : ::st434::s377m::groups::SourceReferenceType (InstanceID,
                                                     ComponentDataDefinition,
                                                     SourcePackageID,
                                                     SourceTrackID),
        StartPosition_ (StartPosition, ::xml_schema::flags (), this)
      {
      }

      SourceClipType::
      SourceClipType (const SourceClipType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::st434::s377m::groups::SourceReferenceType (x, f, c),
        StartPosition_ (x.StartPosition_, f, this)
      {
      }

      SourceClipType::
      SourceClipType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::st434::s377m::groups::SourceReferenceType (e, f | ::xml_schema::flags::base, c),
        StartPosition_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void SourceClipType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::SourceReferenceType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // StartPosition
          //
          if (n.name () == "StartPosition" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< StartPosition_type > r (
              StartPosition_traits::create (i, f, this));

            if (!StartPosition_.present ())
            {
              this->StartPosition_.set (r);
              continue;
            }
          }

          break;
        }

        if (!StartPosition_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StartPosition",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      SourceClipType* SourceClipType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SourceClipType (*this, f, c);
      }

      SourceClipType::
      ~SourceClipType ()
      {
      }

      // DescriptiveClipType
      //

      DescriptiveClipType::
      DescriptiveClipType (const InstanceID_type& InstanceID,
                           const ComponentDataDefinition_type& ComponentDataDefinition,
                           const SourcePackageID_type& SourcePackageID,
                           const StartPosition_type& StartPosition)
      : ::st434::s377m::groups::SegmentType (InstanceID,
                                             ComponentDataDefinition),
        SourcePackageID_ (SourcePackageID, ::xml_schema::flags (), this),
        SourceTrackID_ (::xml_schema::flags (), this),
        StartPosition_ (StartPosition, ::xml_schema::flags (), this),
        DescriptiveClipDescribedTrackIDs_ (::xml_schema::flags (), this)
      {
      }

      DescriptiveClipType::
      DescriptiveClipType (const DescriptiveClipType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::st434::s377m::groups::SegmentType (x, f, c),
        SourcePackageID_ (x.SourcePackageID_, f, this),
        SourceTrackID_ (x.SourceTrackID_, f, this),
        StartPosition_ (x.StartPosition_, f, this),
        DescriptiveClipDescribedTrackIDs_ (x.DescriptiveClipDescribedTrackIDs_, f, this)
      {
      }

      DescriptiveClipType::
      DescriptiveClipType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::st434::s377m::groups::SegmentType (e, f | ::xml_schema::flags::base, c),
        SourcePackageID_ (f, this),
        SourceTrackID_ (f, this),
        StartPosition_ (f, this),
        DescriptiveClipDescribedTrackIDs_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void DescriptiveClipType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::SegmentType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SourcePackageID
          //
          if (n.name () == "SourcePackageID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SourcePackageID_type > r (
              SourcePackageID_traits::create (i, f, this));

            if (!SourcePackageID_.present ())
            {
              this->SourcePackageID_.set (r);
              continue;
            }
          }

          // SourceTrackID
          //
          if (n.name () == "SourceTrackID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SourceTrackID_type > r (
              SourceTrackID_traits::create (i, f, this));

            if (!this->SourceTrackID_)
            {
              this->SourceTrackID_.set (r);
              continue;
            }
          }

          // StartPosition
          //
          if (n.name () == "StartPosition" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< StartPosition_type > r (
              StartPosition_traits::create (i, f, this));

            if (!StartPosition_.present ())
            {
              this->StartPosition_.set (r);
              continue;
            }
          }

          // DescriptiveClipDescribedTrackIDs
          //
          if (n.name () == "DescriptiveClipDescribedTrackIDs" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DescriptiveClipDescribedTrackIDs_type > r (
              DescriptiveClipDescribedTrackIDs_traits::create (i, f, this));

            if (!this->DescriptiveClipDescribedTrackIDs_)
            {
              this->DescriptiveClipDescribedTrackIDs_.set (r);
              continue;
            }
          }

          break;
        }

        if (!SourcePackageID_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SourcePackageID",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!StartPosition_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StartPosition",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      DescriptiveClipType* DescriptiveClipType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class DescriptiveClipType (*this, f, c);
      }

      DescriptiveClipType::
      ~DescriptiveClipType ()
      {
      }

      // MaterialPackageType
      //

      MaterialPackageType::
      MaterialPackageType (const InstanceID_type& InstanceID,
                           const PackageID_type& PackageID,
                           const CreationTime_type& CreationTime,
                           const PackageLastModified_type& PackageLastModified,
                           const PackageTracks_type& PackageTracks)
      : ::st434::s377m::groups::PackageType (InstanceID,
                                             PackageID,
                                             CreationTime,
                                             PackageLastModified,
                                             PackageTracks)
      {
      }

      MaterialPackageType::
      MaterialPackageType (const InstanceID_type& InstanceID,
                           const PackageID_type& PackageID,
                           ::std::auto_ptr< CreationTime_type >& CreationTime,
                           ::std::auto_ptr< PackageLastModified_type >& PackageLastModified,
                           ::std::auto_ptr< PackageTracks_type >& PackageTracks)
      : ::st434::s377m::groups::PackageType (InstanceID,
                                             PackageID,
                                             CreationTime,
                                             PackageLastModified,
                                             PackageTracks)
      {
      }

      MaterialPackageType::
      MaterialPackageType (const MaterialPackageType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::st434::s377m::groups::PackageType (x, f, c)
      {
      }

      MaterialPackageType::
      MaterialPackageType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::st434::s377m::groups::PackageType (e, f, c)
      {
      }

      MaterialPackageType* MaterialPackageType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class MaterialPackageType (*this, f, c);
      }

      MaterialPackageType::
      ~MaterialPackageType ()
      {
      }

      // SourcePackageType
      //

      SourcePackageType::
      SourcePackageType (const InstanceID_type& InstanceID,
                         const PackageID_type& PackageID,
                         const CreationTime_type& CreationTime,
                         const PackageLastModified_type& PackageLastModified,
                         const PackageTracks_type& PackageTracks)
      : ::st434::s377m::groups::PackageType (InstanceID,
                                             PackageID,
                                             CreationTime,
                                             PackageLastModified,
                                             PackageTracks),
        EssenceDescription_ (::xml_schema::flags (), this)
      {
      }

      SourcePackageType::
      SourcePackageType (const InstanceID_type& InstanceID,
                         const PackageID_type& PackageID,
                         ::std::auto_ptr< CreationTime_type >& CreationTime,
                         ::std::auto_ptr< PackageLastModified_type >& PackageLastModified,
                         ::std::auto_ptr< PackageTracks_type >& PackageTracks)
      : ::st434::s377m::groups::PackageType (InstanceID,
                                             PackageID,
                                             CreationTime,
                                             PackageLastModified,
                                             PackageTracks),
        EssenceDescription_ (::xml_schema::flags (), this)
      {
      }

      SourcePackageType::
      SourcePackageType (const SourcePackageType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::st434::s377m::groups::PackageType (x, f, c),
        EssenceDescription_ (x.EssenceDescription_, f, this)
      {
      }

      SourcePackageType::
      SourcePackageType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::st434::s377m::groups::PackageType (e, f | ::xml_schema::flags::base, c),
        EssenceDescription_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void SourcePackageType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::PackageType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // EssenceDescription
          //
          if (n.name () == "EssenceDescription" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EssenceDescription_type > r (
              EssenceDescription_traits::create (i, f, this));

            if (!this->EssenceDescription_)
            {
              this->EssenceDescription_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SourcePackageType* SourcePackageType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SourcePackageType (*this, f, c);
      }

      SourcePackageType::
      ~SourcePackageType ()
      {
      }

      // FileDescriptorType
      //

      FileDescriptorType::
      FileDescriptorType (const InstanceID_type& InstanceID,
                          const SampleRate_type& SampleRate,
                          const ContainerFormat_type& ContainerFormat)
      : ::st434::s377m::groups::GenericDescriptorType (InstanceID),
        LinkedTrackID_ (::xml_schema::flags (), this),
        SampleRate_ (SampleRate, ::xml_schema::flags (), this),
        EssenceLength_ (::xml_schema::flags (), this),
        ContainerFormat_ (ContainerFormat, ::xml_schema::flags (), this),
        Codec_ (::xml_schema::flags (), this)
      {
      }

      FileDescriptorType::
      FileDescriptorType (const InstanceID_type& InstanceID,
                          ::std::auto_ptr< SampleRate_type >& SampleRate,
                          const ContainerFormat_type& ContainerFormat)
      : ::st434::s377m::groups::GenericDescriptorType (InstanceID),
        LinkedTrackID_ (::xml_schema::flags (), this),
        SampleRate_ (SampleRate, ::xml_schema::flags (), this),
        EssenceLength_ (::xml_schema::flags (), this),
        ContainerFormat_ (ContainerFormat, ::xml_schema::flags (), this),
        Codec_ (::xml_schema::flags (), this)
      {
      }

      FileDescriptorType::
      FileDescriptorType (const FileDescriptorType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::st434::s377m::groups::GenericDescriptorType (x, f, c),
        LinkedTrackID_ (x.LinkedTrackID_, f, this),
        SampleRate_ (x.SampleRate_, f, this),
        EssenceLength_ (x.EssenceLength_, f, this),
        ContainerFormat_ (x.ContainerFormat_, f, this),
        Codec_ (x.Codec_, f, this)
      {
      }

      FileDescriptorType::
      FileDescriptorType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::st434::s377m::groups::GenericDescriptorType (e, f | ::xml_schema::flags::base, c),
        LinkedTrackID_ (f, this),
        SampleRate_ (f, this),
        EssenceLength_ (f, this),
        ContainerFormat_ (f, this),
        Codec_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void FileDescriptorType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::GenericDescriptorType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // LinkedTrackID
          //
          if (n.name () == "LinkedTrackID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< LinkedTrackID_type > r (
              LinkedTrackID_traits::create (i, f, this));

            if (!this->LinkedTrackID_)
            {
              this->LinkedTrackID_.set (r);
              continue;
            }
          }

          // SampleRate
          //
          if (n.name () == "SampleRate" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SampleRate_type > r (
              SampleRate_traits::create (i, f, this));

            if (!SampleRate_.present ())
            {
              this->SampleRate_.set (r);
              continue;
            }
          }

          // EssenceLength
          //
          if (n.name () == "EssenceLength" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EssenceLength_type > r (
              EssenceLength_traits::create (i, f, this));

            if (!this->EssenceLength_)
            {
              this->EssenceLength_.set (r);
              continue;
            }
          }

          // ContainerFormat
          //
          if (n.name () == "ContainerFormat" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ContainerFormat_type > r (
              ContainerFormat_traits::create (i, f, this));

            if (!ContainerFormat_.present ())
            {
              this->ContainerFormat_.set (r);
              continue;
            }
          }

          // Codec
          //
          if (n.name () == "Codec" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< Codec_type > r (
              Codec_traits::create (i, f, this));

            if (!this->Codec_)
            {
              this->Codec_.set (r);
              continue;
            }
          }

          break;
        }

        if (!SampleRate_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SampleRate",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!ContainerFormat_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ContainerFormat",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      FileDescriptorType* FileDescriptorType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class FileDescriptorType (*this, f, c);
      }

      FileDescriptorType::
      ~FileDescriptorType ()
      {
      }

      // PictureDescriptorType
      //

      PictureDescriptorType::
      PictureDescriptorType (const InstanceID_type& InstanceID,
                             const SampleRate_type& SampleRate,
                             const ContainerFormat_type& ContainerFormat)
      : ::st434::s377m::groups::FileDescriptorType (InstanceID,
                                                    SampleRate,
                                                    ContainerFormat),
        SignalStandard_ (::xml_schema::flags (), this),
        FrameLayout_ (::xml_schema::flags (), this),
        StoredWidth_ (::xml_schema::flags (), this),
        StoredHeight_ (::xml_schema::flags (), this),
        StoredF2Offset_ (::xml_schema::flags (), this),
        SampledWidth_ (::xml_schema::flags (), this),
        SampledHeight_ (::xml_schema::flags (), this),
        SampledXOffset_ (::xml_schema::flags (), this),
        SampledYOffset_ (::xml_schema::flags (), this),
        DisplayHeight_ (::xml_schema::flags (), this),
        DisplayWidth_ (::xml_schema::flags (), this),
        DisplayXOffset_ (::xml_schema::flags (), this),
        DisplayYOffset_ (::xml_schema::flags (), this),
        DisplayF2Offset_ (::xml_schema::flags (), this),
        ImageAspectRatio_ (::xml_schema::flags (), this),
        ActiveFormatDescriptor_ (::xml_schema::flags (), this),
        VideoLineMap_ (::xml_schema::flags (), this),
        AlphaTransparency_ (::xml_schema::flags (), this),
        TransferCharacteristic_ (::xml_schema::flags (), this),
        ImageAlignmentFactor_ (::xml_schema::flags (), this),
        ImageStartOffset_ (::xml_schema::flags (), this),
        ImageEndOffset_ (::xml_schema::flags (), this),
        FieldDominance_ (::xml_schema::flags (), this),
        PictureCompression_ (::xml_schema::flags (), this)
      {
      }

      PictureDescriptorType::
      PictureDescriptorType (const InstanceID_type& InstanceID,
                             ::std::auto_ptr< SampleRate_type >& SampleRate,
                             const ContainerFormat_type& ContainerFormat)
      : ::st434::s377m::groups::FileDescriptorType (InstanceID,
                                                    SampleRate,
                                                    ContainerFormat),
        SignalStandard_ (::xml_schema::flags (), this),
        FrameLayout_ (::xml_schema::flags (), this),
        StoredWidth_ (::xml_schema::flags (), this),
        StoredHeight_ (::xml_schema::flags (), this),
        StoredF2Offset_ (::xml_schema::flags (), this),
        SampledWidth_ (::xml_schema::flags (), this),
        SampledHeight_ (::xml_schema::flags (), this),
        SampledXOffset_ (::xml_schema::flags (), this),
        SampledYOffset_ (::xml_schema::flags (), this),
        DisplayHeight_ (::xml_schema::flags (), this),
        DisplayWidth_ (::xml_schema::flags (), this),
        DisplayXOffset_ (::xml_schema::flags (), this),
        DisplayYOffset_ (::xml_schema::flags (), this),
        DisplayF2Offset_ (::xml_schema::flags (), this),
        ImageAspectRatio_ (::xml_schema::flags (), this),
        ActiveFormatDescriptor_ (::xml_schema::flags (), this),
        VideoLineMap_ (::xml_schema::flags (), this),
        AlphaTransparency_ (::xml_schema::flags (), this),
        TransferCharacteristic_ (::xml_schema::flags (), this),
        ImageAlignmentFactor_ (::xml_schema::flags (), this),
        ImageStartOffset_ (::xml_schema::flags (), this),
        ImageEndOffset_ (::xml_schema::flags (), this),
        FieldDominance_ (::xml_schema::flags (), this),
        PictureCompression_ (::xml_schema::flags (), this)
      {
      }

      PictureDescriptorType::
      PictureDescriptorType (const PictureDescriptorType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
      : ::st434::s377m::groups::FileDescriptorType (x, f, c),
        SignalStandard_ (x.SignalStandard_, f, this),
        FrameLayout_ (x.FrameLayout_, f, this),
        StoredWidth_ (x.StoredWidth_, f, this),
        StoredHeight_ (x.StoredHeight_, f, this),
        StoredF2Offset_ (x.StoredF2Offset_, f, this),
        SampledWidth_ (x.SampledWidth_, f, this),
        SampledHeight_ (x.SampledHeight_, f, this),
        SampledXOffset_ (x.SampledXOffset_, f, this),
        SampledYOffset_ (x.SampledYOffset_, f, this),
        DisplayHeight_ (x.DisplayHeight_, f, this),
        DisplayWidth_ (x.DisplayWidth_, f, this),
        DisplayXOffset_ (x.DisplayXOffset_, f, this),
        DisplayYOffset_ (x.DisplayYOffset_, f, this),
        DisplayF2Offset_ (x.DisplayF2Offset_, f, this),
        ImageAspectRatio_ (x.ImageAspectRatio_, f, this),
        ActiveFormatDescriptor_ (x.ActiveFormatDescriptor_, f, this),
        VideoLineMap_ (x.VideoLineMap_, f, this),
        AlphaTransparency_ (x.AlphaTransparency_, f, this),
        TransferCharacteristic_ (x.TransferCharacteristic_, f, this),
        ImageAlignmentFactor_ (x.ImageAlignmentFactor_, f, this),
        ImageStartOffset_ (x.ImageStartOffset_, f, this),
        ImageEndOffset_ (x.ImageEndOffset_, f, this),
        FieldDominance_ (x.FieldDominance_, f, this),
        PictureCompression_ (x.PictureCompression_, f, this)
      {
      }

      PictureDescriptorType::
      PictureDescriptorType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
      : ::st434::s377m::groups::FileDescriptorType (e, f | ::xml_schema::flags::base, c),
        SignalStandard_ (f, this),
        FrameLayout_ (f, this),
        StoredWidth_ (f, this),
        StoredHeight_ (f, this),
        StoredF2Offset_ (f, this),
        SampledWidth_ (f, this),
        SampledHeight_ (f, this),
        SampledXOffset_ (f, this),
        SampledYOffset_ (f, this),
        DisplayHeight_ (f, this),
        DisplayWidth_ (f, this),
        DisplayXOffset_ (f, this),
        DisplayYOffset_ (f, this),
        DisplayF2Offset_ (f, this),
        ImageAspectRatio_ (f, this),
        ActiveFormatDescriptor_ (f, this),
        VideoLineMap_ (f, this),
        AlphaTransparency_ (f, this),
        TransferCharacteristic_ (f, this),
        ImageAlignmentFactor_ (f, this),
        ImageStartOffset_ (f, this),
        ImageEndOffset_ (f, this),
        FieldDominance_ (f, this),
        PictureCompression_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void PictureDescriptorType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::FileDescriptorType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SignalStandard
          //
          if (n.name () == "SignalStandard" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SignalStandard_type > r (
              SignalStandard_traits::create (i, f, this));

            if (!this->SignalStandard_)
            {
              this->SignalStandard_.set (r);
              continue;
            }
          }

          // FrameLayout
          //
          if (n.name () == "FrameLayout" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< FrameLayout_type > r (
              FrameLayout_traits::create (i, f, this));

            if (!this->FrameLayout_)
            {
              this->FrameLayout_.set (r);
              continue;
            }
          }

          // StoredWidth
          //
          if (n.name () == "StoredWidth" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< StoredWidth_type > r (
              StoredWidth_traits::create (i, f, this));

            if (!this->StoredWidth_)
            {
              this->StoredWidth_.set (r);
              continue;
            }
          }

          // StoredHeight
          //
          if (n.name () == "StoredHeight" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< StoredHeight_type > r (
              StoredHeight_traits::create (i, f, this));

            if (!this->StoredHeight_)
            {
              this->StoredHeight_.set (r);
              continue;
            }
          }

          // StoredF2Offset
          //
          if (n.name () == "StoredF2Offset" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< StoredF2Offset_type > r (
              StoredF2Offset_traits::create (i, f, this));

            if (!this->StoredF2Offset_)
            {
              this->StoredF2Offset_.set (r);
              continue;
            }
          }

          // SampledWidth
          //
          if (n.name () == "SampledWidth" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SampledWidth_type > r (
              SampledWidth_traits::create (i, f, this));

            if (!this->SampledWidth_)
            {
              this->SampledWidth_.set (r);
              continue;
            }
          }

          // SampledHeight
          //
          if (n.name () == "SampledHeight" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SampledHeight_type > r (
              SampledHeight_traits::create (i, f, this));

            if (!this->SampledHeight_)
            {
              this->SampledHeight_.set (r);
              continue;
            }
          }

          // SampledXOffset
          //
          if (n.name () == "SampledXOffset" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SampledXOffset_type > r (
              SampledXOffset_traits::create (i, f, this));

            if (!this->SampledXOffset_)
            {
              this->SampledXOffset_.set (r);
              continue;
            }
          }

          // SampledYOffset
          //
          if (n.name () == "SampledYOffset" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SampledYOffset_type > r (
              SampledYOffset_traits::create (i, f, this));

            if (!this->SampledYOffset_)
            {
              this->SampledYOffset_.set (r);
              continue;
            }
          }

          // DisplayHeight
          //
          if (n.name () == "DisplayHeight" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DisplayHeight_type > r (
              DisplayHeight_traits::create (i, f, this));

            if (!this->DisplayHeight_)
            {
              this->DisplayHeight_.set (r);
              continue;
            }
          }

          // DisplayWidth
          //
          if (n.name () == "DisplayWidth" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DisplayWidth_type > r (
              DisplayWidth_traits::create (i, f, this));

            if (!this->DisplayWidth_)
            {
              this->DisplayWidth_.set (r);
              continue;
            }
          }

          // DisplayXOffset
          //
          if (n.name () == "DisplayXOffset" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DisplayXOffset_type > r (
              DisplayXOffset_traits::create (i, f, this));

            if (!this->DisplayXOffset_)
            {
              this->DisplayXOffset_.set (r);
              continue;
            }
          }

          // DisplayYOffset
          //
          if (n.name () == "DisplayYOffset" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DisplayYOffset_type > r (
              DisplayYOffset_traits::create (i, f, this));

            if (!this->DisplayYOffset_)
            {
              this->DisplayYOffset_.set (r);
              continue;
            }
          }

          // DisplayF2Offset
          //
          if (n.name () == "DisplayF2Offset" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DisplayF2Offset_type > r (
              DisplayF2Offset_traits::create (i, f, this));

            if (!this->DisplayF2Offset_)
            {
              this->DisplayF2Offset_.set (r);
              continue;
            }
          }

          // ImageAspectRatio
          //
          if (n.name () == "ImageAspectRatio" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ImageAspectRatio_type > r (
              ImageAspectRatio_traits::create (i, f, this));

            if (!this->ImageAspectRatio_)
            {
              this->ImageAspectRatio_.set (r);
              continue;
            }
          }

          // ActiveFormatDescriptor
          //
          if (n.name () == "ActiveFormatDescriptor" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ActiveFormatDescriptor_type > r (
              ActiveFormatDescriptor_traits::create (i, f, this));

            if (!this->ActiveFormatDescriptor_)
            {
              this->ActiveFormatDescriptor_.set (r);
              continue;
            }
          }

          // VideoLineMap
          //
          if (n.name () == "VideoLineMap" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< VideoLineMap_type > r (
              VideoLineMap_traits::create (i, f, this));

            if (!this->VideoLineMap_)
            {
              this->VideoLineMap_.set (r);
              continue;
            }
          }

          // AlphaTransparency
          //
          if (n.name () == "AlphaTransparency" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< AlphaTransparency_type > r (
              AlphaTransparency_traits::create (i, f, this));

            if (!this->AlphaTransparency_)
            {
              this->AlphaTransparency_.set (r);
              continue;
            }
          }

          // TransferCharacteristic
          //
          if (n.name () == "TransferCharacteristic" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< TransferCharacteristic_type > r (
              TransferCharacteristic_traits::create (i, f, this));

            if (!this->TransferCharacteristic_)
            {
              this->TransferCharacteristic_.set (r);
              continue;
            }
          }

          // ImageAlignmentFactor
          //
          if (n.name () == "ImageAlignmentFactor" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ImageAlignmentFactor_type > r (
              ImageAlignmentFactor_traits::create (i, f, this));

            if (!this->ImageAlignmentFactor_)
            {
              this->ImageAlignmentFactor_.set (r);
              continue;
            }
          }

          // ImageStartOffset
          //
          if (n.name () == "ImageStartOffset" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ImageStartOffset_type > r (
              ImageStartOffset_traits::create (i, f, this));

            if (!this->ImageStartOffset_)
            {
              this->ImageStartOffset_.set (r);
              continue;
            }
          }

          // ImageEndOffset
          //
          if (n.name () == "ImageEndOffset" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ImageEndOffset_type > r (
              ImageEndOffset_traits::create (i, f, this));

            if (!this->ImageEndOffset_)
            {
              this->ImageEndOffset_.set (r);
              continue;
            }
          }

          // FieldDominance
          //
          if (n.name () == "FieldDominance" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< FieldDominance_type > r (
              FieldDominance_traits::create (i, f, this));

            if (!this->FieldDominance_)
            {
              this->FieldDominance_.set (r);
              continue;
            }
          }

          // PictureCompression
          //
          if (n.name () == "PictureCompression" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PictureCompression_type > r (
              PictureCompression_traits::create (i, f, this));

            if (!this->PictureCompression_)
            {
              this->PictureCompression_.set (r);
              continue;
            }
          }

          break;
        }
      }

      PictureDescriptorType* PictureDescriptorType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class PictureDescriptorType (*this, f, c);
      }

      PictureDescriptorType::
      ~PictureDescriptorType ()
      {
      }

      // CDCIDescriptorType
      //

      CDCIDescriptorType::
      CDCIDescriptorType (const InstanceID_type& InstanceID,
                          const SampleRate_type& SampleRate,
                          const ContainerFormat_type& ContainerFormat)
      : ::st434::s377m::groups::PictureDescriptorType (InstanceID,
                                                       SampleRate,
                                                       ContainerFormat),
        ComponentDepth_ (::xml_schema::flags (), this),
        HorizontalSubsampling_ (::xml_schema::flags (), this),
        VerticalSubsampling_ (::xml_schema::flags (), this),
        ColorSiting_ (::xml_schema::flags (), this),
        ReversedByteOrder_ (::xml_schema::flags (), this),
        PaddingBits_ (::xml_schema::flags (), this),
        AlphaSampleDepth_ (::xml_schema::flags (), this),
        BlackRefLevel_ (::xml_schema::flags (), this),
        WhiteRefLevel_ (::xml_schema::flags (), this),
        ColorRange_ (::xml_schema::flags (), this)
      {
      }

      CDCIDescriptorType::
      CDCIDescriptorType (const InstanceID_type& InstanceID,
                          ::std::auto_ptr< SampleRate_type >& SampleRate,
                          const ContainerFormat_type& ContainerFormat)
      : ::st434::s377m::groups::PictureDescriptorType (InstanceID,
                                                       SampleRate,
                                                       ContainerFormat),
        ComponentDepth_ (::xml_schema::flags (), this),
        HorizontalSubsampling_ (::xml_schema::flags (), this),
        VerticalSubsampling_ (::xml_schema::flags (), this),
        ColorSiting_ (::xml_schema::flags (), this),
        ReversedByteOrder_ (::xml_schema::flags (), this),
        PaddingBits_ (::xml_schema::flags (), this),
        AlphaSampleDepth_ (::xml_schema::flags (), this),
        BlackRefLevel_ (::xml_schema::flags (), this),
        WhiteRefLevel_ (::xml_schema::flags (), this),
        ColorRange_ (::xml_schema::flags (), this)
      {
      }

      CDCIDescriptorType::
      CDCIDescriptorType (const CDCIDescriptorType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::st434::s377m::groups::PictureDescriptorType (x, f, c),
        ComponentDepth_ (x.ComponentDepth_, f, this),
        HorizontalSubsampling_ (x.HorizontalSubsampling_, f, this),
        VerticalSubsampling_ (x.VerticalSubsampling_, f, this),
        ColorSiting_ (x.ColorSiting_, f, this),
        ReversedByteOrder_ (x.ReversedByteOrder_, f, this),
        PaddingBits_ (x.PaddingBits_, f, this),
        AlphaSampleDepth_ (x.AlphaSampleDepth_, f, this),
        BlackRefLevel_ (x.BlackRefLevel_, f, this),
        WhiteRefLevel_ (x.WhiteRefLevel_, f, this),
        ColorRange_ (x.ColorRange_, f, this)
      {
      }

      CDCIDescriptorType::
      CDCIDescriptorType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::st434::s377m::groups::PictureDescriptorType (e, f | ::xml_schema::flags::base, c),
        ComponentDepth_ (f, this),
        HorizontalSubsampling_ (f, this),
        VerticalSubsampling_ (f, this),
        ColorSiting_ (f, this),
        ReversedByteOrder_ (f, this),
        PaddingBits_ (f, this),
        AlphaSampleDepth_ (f, this),
        BlackRefLevel_ (f, this),
        WhiteRefLevel_ (f, this),
        ColorRange_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void CDCIDescriptorType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::PictureDescriptorType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ComponentDepth
          //
          if (n.name () == "ComponentDepth" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ComponentDepth_type > r (
              ComponentDepth_traits::create (i, f, this));

            if (!this->ComponentDepth_)
            {
              this->ComponentDepth_.set (r);
              continue;
            }
          }

          // HorizontalSubsampling
          //
          if (n.name () == "HorizontalSubsampling" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< HorizontalSubsampling_type > r (
              HorizontalSubsampling_traits::create (i, f, this));

            if (!this->HorizontalSubsampling_)
            {
              this->HorizontalSubsampling_.set (r);
              continue;
            }
          }

          // VerticalSubsampling
          //
          if (n.name () == "VerticalSubsampling" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< VerticalSubsampling_type > r (
              VerticalSubsampling_traits::create (i, f, this));

            if (!this->VerticalSubsampling_)
            {
              this->VerticalSubsampling_.set (r);
              continue;
            }
          }

          // ColorSiting
          //
          if (n.name () == "ColorSiting" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ColorSiting_type > r (
              ColorSiting_traits::create (i, f, this));

            if (!this->ColorSiting_)
            {
              this->ColorSiting_.set (r);
              continue;
            }
          }

          // ReversedByteOrder
          //
          if (n.name () == "ReversedByteOrder" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ReversedByteOrder_type > r (
              ReversedByteOrder_traits::create (i, f, this));

            if (!this->ReversedByteOrder_)
            {
              this->ReversedByteOrder_.set (r);
              continue;
            }
          }

          // PaddingBits
          //
          if (n.name () == "PaddingBits" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PaddingBits_type > r (
              PaddingBits_traits::create (i, f, this));

            if (!this->PaddingBits_)
            {
              this->PaddingBits_.set (r);
              continue;
            }
          }

          // AlphaSampleDepth
          //
          if (n.name () == "AlphaSampleDepth" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< AlphaSampleDepth_type > r (
              AlphaSampleDepth_traits::create (i, f, this));

            if (!this->AlphaSampleDepth_)
            {
              this->AlphaSampleDepth_.set (r);
              continue;
            }
          }

          // BlackRefLevel
          //
          if (n.name () == "BlackRefLevel" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< BlackRefLevel_type > r (
              BlackRefLevel_traits::create (i, f, this));

            if (!this->BlackRefLevel_)
            {
              this->BlackRefLevel_.set (r);
              continue;
            }
          }

          // WhiteRefLevel
          //
          if (n.name () == "WhiteRefLevel" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< WhiteRefLevel_type > r (
              WhiteRefLevel_traits::create (i, f, this));

            if (!this->WhiteRefLevel_)
            {
              this->WhiteRefLevel_.set (r);
              continue;
            }
          }

          // ColorRange
          //
          if (n.name () == "ColorRange" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ColorRange_type > r (
              ColorRange_traits::create (i, f, this));

            if (!this->ColorRange_)
            {
              this->ColorRange_.set (r);
              continue;
            }
          }

          break;
        }
      }

      CDCIDescriptorType* CDCIDescriptorType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class CDCIDescriptorType (*this, f, c);
      }

      CDCIDescriptorType::
      ~CDCIDescriptorType ()
      {
      }

      // RGBADescriptorType
      //

      RGBADescriptorType::
      RGBADescriptorType (const InstanceID_type& InstanceID,
                          const SampleRate_type& SampleRate,
                          const ContainerFormat_type& ContainerFormat)
      : ::st434::s377m::groups::PictureDescriptorType (InstanceID,
                                                       SampleRate,
                                                       ContainerFormat),
        ComponentMaxRef_ (::xml_schema::flags (), this),
        ComponentMinRef_ (::xml_schema::flags (), this),
        AlphaMaxRef_ (::xml_schema::flags (), this),
        AlphaMinRef_ (::xml_schema::flags (), this),
        ScanningDirection_ (::xml_schema::flags (), this),
        PixelLayout_ (::xml_schema::flags (), this),
        Palette_ (::xml_schema::flags (), this),
        PaletteLayout_ (::xml_schema::flags (), this)
      {
      }

      RGBADescriptorType::
      RGBADescriptorType (const InstanceID_type& InstanceID,
                          ::std::auto_ptr< SampleRate_type >& SampleRate,
                          const ContainerFormat_type& ContainerFormat)
      : ::st434::s377m::groups::PictureDescriptorType (InstanceID,
                                                       SampleRate,
                                                       ContainerFormat),
        ComponentMaxRef_ (::xml_schema::flags (), this),
        ComponentMinRef_ (::xml_schema::flags (), this),
        AlphaMaxRef_ (::xml_schema::flags (), this),
        AlphaMinRef_ (::xml_schema::flags (), this),
        ScanningDirection_ (::xml_schema::flags (), this),
        PixelLayout_ (::xml_schema::flags (), this),
        Palette_ (::xml_schema::flags (), this),
        PaletteLayout_ (::xml_schema::flags (), this)
      {
      }

      RGBADescriptorType::
      RGBADescriptorType (const RGBADescriptorType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::st434::s377m::groups::PictureDescriptorType (x, f, c),
        ComponentMaxRef_ (x.ComponentMaxRef_, f, this),
        ComponentMinRef_ (x.ComponentMinRef_, f, this),
        AlphaMaxRef_ (x.AlphaMaxRef_, f, this),
        AlphaMinRef_ (x.AlphaMinRef_, f, this),
        ScanningDirection_ (x.ScanningDirection_, f, this),
        PixelLayout_ (x.PixelLayout_, f, this),
        Palette_ (x.Palette_, f, this),
        PaletteLayout_ (x.PaletteLayout_, f, this)
      {
      }

      RGBADescriptorType::
      RGBADescriptorType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::st434::s377m::groups::PictureDescriptorType (e, f | ::xml_schema::flags::base, c),
        ComponentMaxRef_ (f, this),
        ComponentMinRef_ (f, this),
        AlphaMaxRef_ (f, this),
        AlphaMinRef_ (f, this),
        ScanningDirection_ (f, this),
        PixelLayout_ (f, this),
        Palette_ (f, this),
        PaletteLayout_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void RGBADescriptorType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::PictureDescriptorType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ComponentMaxRef
          //
          if (n.name () == "ComponentMaxRef" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ComponentMaxRef_type > r (
              ComponentMaxRef_traits::create (i, f, this));

            if (!this->ComponentMaxRef_)
            {
              this->ComponentMaxRef_.set (r);
              continue;
            }
          }

          // ComponentMinRef
          //
          if (n.name () == "ComponentMinRef" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ComponentMinRef_type > r (
              ComponentMinRef_traits::create (i, f, this));

            if (!this->ComponentMinRef_)
            {
              this->ComponentMinRef_.set (r);
              continue;
            }
          }

          // AlphaMaxRef
          //
          if (n.name () == "AlphaMaxRef" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< AlphaMaxRef_type > r (
              AlphaMaxRef_traits::create (i, f, this));

            if (!this->AlphaMaxRef_)
            {
              this->AlphaMaxRef_.set (r);
              continue;
            }
          }

          // AlphaMinRef
          //
          if (n.name () == "AlphaMinRef" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< AlphaMinRef_type > r (
              AlphaMinRef_traits::create (i, f, this));

            if (!this->AlphaMinRef_)
            {
              this->AlphaMinRef_.set (r);
              continue;
            }
          }

          // ScanningDirection
          //
          if (n.name () == "ScanningDirection" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ScanningDirection_type > r (
              ScanningDirection_traits::create (i, f, this));

            if (!this->ScanningDirection_)
            {
              this->ScanningDirection_.set (r);
              continue;
            }
          }

          // PixelLayout
          //
          if (n.name () == "PixelLayout" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PixelLayout_type > r (
              PixelLayout_traits::create (i, f, this));

            if (!this->PixelLayout_)
            {
              this->PixelLayout_.set (r);
              continue;
            }
          }

          // Palette
          //
          if (n.name () == "Palette" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< Palette_type > r (
              Palette_traits::create (i, f, this));

            if (!this->Palette_)
            {
              this->Palette_.set (r);
              continue;
            }
          }

          // PaletteLayout
          //
          if (n.name () == "PaletteLayout" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PaletteLayout_type > r (
              PaletteLayout_traits::create (i, f, this));

            if (!this->PaletteLayout_)
            {
              this->PaletteLayout_.set (r);
              continue;
            }
          }

          break;
        }
      }

      RGBADescriptorType* RGBADescriptorType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class RGBADescriptorType (*this, f, c);
      }

      RGBADescriptorType::
      ~RGBADescriptorType ()
      {
      }

      // SoundDescriptorType
      //

      SoundDescriptorType::
      SoundDescriptorType (const InstanceID_type& InstanceID,
                           const SampleRate_type& SampleRate,
                           const ContainerFormat_type& ContainerFormat)
      : ::st434::s377m::groups::FileDescriptorType (InstanceID,
                                                    SampleRate,
                                                    ContainerFormat),
        AudioSampleRate_ (::xml_schema::flags (), this),
        Locked_ (::xml_schema::flags (), this),
        AudioReferenceLevel_ (::xml_schema::flags (), this),
        ElectrospatialFormulation_ (::xml_schema::flags (), this),
        ChannelCount_ (::xml_schema::flags (), this),
        QuantizationBits_ (::xml_schema::flags (), this),
        DialNorm_ (::xml_schema::flags (), this),
        SoundCompression_ (::xml_schema::flags (), this)
      {
      }

      SoundDescriptorType::
      SoundDescriptorType (const InstanceID_type& InstanceID,
                           ::std::auto_ptr< SampleRate_type >& SampleRate,
                           const ContainerFormat_type& ContainerFormat)
      : ::st434::s377m::groups::FileDescriptorType (InstanceID,
                                                    SampleRate,
                                                    ContainerFormat),
        AudioSampleRate_ (::xml_schema::flags (), this),
        Locked_ (::xml_schema::flags (), this),
        AudioReferenceLevel_ (::xml_schema::flags (), this),
        ElectrospatialFormulation_ (::xml_schema::flags (), this),
        ChannelCount_ (::xml_schema::flags (), this),
        QuantizationBits_ (::xml_schema::flags (), this),
        DialNorm_ (::xml_schema::flags (), this),
        SoundCompression_ (::xml_schema::flags (), this)
      {
      }

      SoundDescriptorType::
      SoundDescriptorType (const SoundDescriptorType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::st434::s377m::groups::FileDescriptorType (x, f, c),
        AudioSampleRate_ (x.AudioSampleRate_, f, this),
        Locked_ (x.Locked_, f, this),
        AudioReferenceLevel_ (x.AudioReferenceLevel_, f, this),
        ElectrospatialFormulation_ (x.ElectrospatialFormulation_, f, this),
        ChannelCount_ (x.ChannelCount_, f, this),
        QuantizationBits_ (x.QuantizationBits_, f, this),
        DialNorm_ (x.DialNorm_, f, this),
        SoundCompression_ (x.SoundCompression_, f, this)
      {
      }

      SoundDescriptorType::
      SoundDescriptorType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::st434::s377m::groups::FileDescriptorType (e, f | ::xml_schema::flags::base, c),
        AudioSampleRate_ (f, this),
        Locked_ (f, this),
        AudioReferenceLevel_ (f, this),
        ElectrospatialFormulation_ (f, this),
        ChannelCount_ (f, this),
        QuantizationBits_ (f, this),
        DialNorm_ (f, this),
        SoundCompression_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void SoundDescriptorType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::FileDescriptorType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // AudioSampleRate
          //
          if (n.name () == "AudioSampleRate" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< AudioSampleRate_type > r (
              AudioSampleRate_traits::create (i, f, this));

            if (!this->AudioSampleRate_)
            {
              this->AudioSampleRate_.set (r);
              continue;
            }
          }

          // Locked
          //
          if (n.name () == "Locked" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< Locked_type > r (
              Locked_traits::create (i, f, this));

            if (!this->Locked_)
            {
              this->Locked_.set (r);
              continue;
            }
          }

          // AudioReferenceLevel
          //
          if (n.name () == "AudioReferenceLevel" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< AudioReferenceLevel_type > r (
              AudioReferenceLevel_traits::create (i, f, this));

            if (!this->AudioReferenceLevel_)
            {
              this->AudioReferenceLevel_.set (r);
              continue;
            }
          }

          // ElectrospatialFormulation
          //
          if (n.name () == "ElectrospatialFormulation" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ElectrospatialFormulation_type > r (
              ElectrospatialFormulation_traits::create (i, f, this));

            if (!this->ElectrospatialFormulation_)
            {
              this->ElectrospatialFormulation_.set (r);
              continue;
            }
          }

          // ChannelCount
          //
          if (n.name () == "ChannelCount" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ChannelCount_type > r (
              ChannelCount_traits::create (i, f, this));

            if (!this->ChannelCount_)
            {
              this->ChannelCount_.set (r);
              continue;
            }
          }

          // QuantizationBits
          //
          if (n.name () == "QuantizationBits" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< QuantizationBits_type > r (
              QuantizationBits_traits::create (i, f, this));

            if (!this->QuantizationBits_)
            {
              this->QuantizationBits_.set (r);
              continue;
            }
          }

          // DialNorm
          //
          if (n.name () == "DialNorm" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DialNorm_type > r (
              DialNorm_traits::create (i, f, this));

            if (!this->DialNorm_)
            {
              this->DialNorm_.set (r);
              continue;
            }
          }

          // SoundCompression
          //
          if (n.name () == "SoundCompression" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< SoundCompression_type > r (
              SoundCompression_traits::create (i, f, this));

            if (!this->SoundCompression_)
            {
              this->SoundCompression_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SoundDescriptorType* SoundDescriptorType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SoundDescriptorType (*this, f, c);
      }

      SoundDescriptorType::
      ~SoundDescriptorType ()
      {
      }

      // DataEssenceDescriptorType
      //

      DataEssenceDescriptorType::
      DataEssenceDescriptorType (const InstanceID_type& InstanceID,
                                 const SampleRate_type& SampleRate,
                                 const ContainerFormat_type& ContainerFormat)
      : ::st434::s377m::groups::FileDescriptorType (InstanceID,
                                                    SampleRate,
                                                    ContainerFormat),
        DataEssenceCoding_ (::xml_schema::flags (), this)
      {
      }

      DataEssenceDescriptorType::
      DataEssenceDescriptorType (const InstanceID_type& InstanceID,
                                 ::std::auto_ptr< SampleRate_type >& SampleRate,
                                 const ContainerFormat_type& ContainerFormat)
      : ::st434::s377m::groups::FileDescriptorType (InstanceID,
                                                    SampleRate,
                                                    ContainerFormat),
        DataEssenceCoding_ (::xml_schema::flags (), this)
      {
      }

      DataEssenceDescriptorType::
      DataEssenceDescriptorType (const DataEssenceDescriptorType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
      : ::st434::s377m::groups::FileDescriptorType (x, f, c),
        DataEssenceCoding_ (x.DataEssenceCoding_, f, this)
      {
      }

      DataEssenceDescriptorType::
      DataEssenceDescriptorType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
      : ::st434::s377m::groups::FileDescriptorType (e, f | ::xml_schema::flags::base, c),
        DataEssenceCoding_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void DataEssenceDescriptorType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::FileDescriptorType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // DataEssenceCoding
          //
          if (n.name () == "DataEssenceCoding" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DataEssenceCoding_type > r (
              DataEssenceCoding_traits::create (i, f, this));

            if (!this->DataEssenceCoding_)
            {
              this->DataEssenceCoding_.set (r);
              continue;
            }
          }

          break;
        }
      }

      DataEssenceDescriptorType* DataEssenceDescriptorType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class DataEssenceDescriptorType (*this, f, c);
      }

      DataEssenceDescriptorType::
      ~DataEssenceDescriptorType ()
      {
      }

      // MultipleDescriptorType
      //

      MultipleDescriptorType::
      MultipleDescriptorType (const InstanceID_type& InstanceID,
                              const SampleRate_type& SampleRate,
                              const ContainerFormat_type& ContainerFormat,
                              const FileDescriptors_type& FileDescriptors)
      : ::st434::s377m::groups::FileDescriptorType (InstanceID,
                                                    SampleRate,
                                                    ContainerFormat),
        FileDescriptors_ (FileDescriptors, ::xml_schema::flags (), this)
      {
      }

      MultipleDescriptorType::
      MultipleDescriptorType (const InstanceID_type& InstanceID,
                              ::std::auto_ptr< SampleRate_type >& SampleRate,
                              const ContainerFormat_type& ContainerFormat,
                              ::std::auto_ptr< FileDescriptors_type >& FileDescriptors)
      : ::st434::s377m::groups::FileDescriptorType (InstanceID,
                                                    SampleRate,
                                                    ContainerFormat),
        FileDescriptors_ (FileDescriptors, ::xml_schema::flags (), this)
      {
      }

      MultipleDescriptorType::
      MultipleDescriptorType (const MultipleDescriptorType& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
      : ::st434::s377m::groups::FileDescriptorType (x, f, c),
        FileDescriptors_ (x.FileDescriptors_, f, this)
      {
      }

      MultipleDescriptorType::
      MultipleDescriptorType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
      : ::st434::s377m::groups::FileDescriptorType (e, f | ::xml_schema::flags::base, c),
        FileDescriptors_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void MultipleDescriptorType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::FileDescriptorType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // FileDescriptors
          //
          if (n.name () == "FileDescriptors" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< FileDescriptors_type > r (
              FileDescriptors_traits::create (i, f, this));

            if (!FileDescriptors_.present ())
            {
              this->FileDescriptors_.set (r);
              continue;
            }
          }

          break;
        }

        if (!FileDescriptors_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FileDescriptors",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      MultipleDescriptorType* MultipleDescriptorType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class MultipleDescriptorType (*this, f, c);
      }

      MultipleDescriptorType::
      ~MultipleDescriptorType ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType > r (
          ::st434::s377m::groups::AbstractSet (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType > r (
          ::st434::s377m::groups::AbstractSet (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType > r (
          ::st434::s377m::groups::AbstractSet (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::AbstractSet (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::AbstractSet (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::AbstractSet (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::AbstractSet (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::AbstractSet (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::AbstractSet (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType > r (
          ::st434::s377m::groups::AbstractSet (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType > r (
          ::st434::s377m::groups::AbstractSet (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType > r (
          ::st434::s377m::groups::AbstractSet (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType > r (
            ::st434::s377m::groups::AbstractSet (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "AbstractSet" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::AbstractSetType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "AbstractSet",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType >
      AbstractSet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "AbstractSet" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::AbstractSetType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::AbstractSetType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "AbstractSet",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType > r (
          ::st434::s377m::groups::InterchangeObject (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType > r (
          ::st434::s377m::groups::InterchangeObject (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType > r (
          ::st434::s377m::groups::InterchangeObject (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::InterchangeObject (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::InterchangeObject (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::InterchangeObject (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::InterchangeObject (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::InterchangeObject (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::InterchangeObject (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType > r (
          ::st434::s377m::groups::InterchangeObject (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType > r (
          ::st434::s377m::groups::InterchangeObject (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType > r (
          ::st434::s377m::groups::InterchangeObject (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType > r (
            ::st434::s377m::groups::InterchangeObject (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "InterchangeObject" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::InterchangeObjectType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "InterchangeObject",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType >
      InterchangeObject (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "InterchangeObject" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::InterchangeObjectType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::InterchangeObjectType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "InterchangeObject",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType > r (
          ::st434::s377m::groups::SubDescriptors (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType > r (
          ::st434::s377m::groups::SubDescriptors (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType > r (
          ::st434::s377m::groups::SubDescriptors (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SubDescriptors (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SubDescriptors (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SubDescriptors (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SubDescriptors (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SubDescriptors (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SubDescriptors (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType > r (
          ::st434::s377m::groups::SubDescriptors (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType > r (
          ::st434::s377m::groups::SubDescriptors (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType > r (
          ::st434::s377m::groups::SubDescriptors (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType > r (
            ::st434::s377m::groups::SubDescriptors (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SubDescriptors" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::SubDescriptorsType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SubDescriptors",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType >
      SubDescriptors (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SubDescriptors" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::SubDescriptorsType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::SubDescriptorsType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SubDescriptors",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType > r (
          ::st434::s377m::groups::DescriptiveFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType > r (
          ::st434::s377m::groups::DescriptiveFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType > r (
          ::st434::s377m::groups::DescriptiveFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DescriptiveFramework (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DescriptiveFramework (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DescriptiveFramework (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DescriptiveFramework (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DescriptiveFramework (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DescriptiveFramework (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType > r (
          ::st434::s377m::groups::DescriptiveFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType > r (
          ::st434::s377m::groups::DescriptiveFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType > r (
          ::st434::s377m::groups::DescriptiveFramework (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType > r (
            ::st434::s377m::groups::DescriptiveFramework (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DescriptiveFramework" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::DescriptiveFrameworkType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DescriptiveFramework",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType >
      DescriptiveFramework (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DescriptiveFramework" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::DescriptiveFrameworkType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::DescriptiveFrameworkType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DescriptiveFramework",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType > r (
          ::st434::s377m::groups::DescriptiveObject (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType > r (
          ::st434::s377m::groups::DescriptiveObject (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType > r (
          ::st434::s377m::groups::DescriptiveObject (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DescriptiveObject (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DescriptiveObject (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DescriptiveObject (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DescriptiveObject (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DescriptiveObject (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DescriptiveObject (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType > r (
          ::st434::s377m::groups::DescriptiveObject (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType > r (
          ::st434::s377m::groups::DescriptiveObject (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType > r (
          ::st434::s377m::groups::DescriptiveObject (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType > r (
            ::st434::s377m::groups::DescriptiveObject (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DescriptiveObject" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::DescriptiveObjectType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DescriptiveObject",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType >
      DescriptiveObject (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DescriptiveObject" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::DescriptiveObjectType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::DescriptiveObjectType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DescriptiveObject",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::TrackType > r (
          ::st434::s377m::groups::Track (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::TrackType > r (
          ::st434::s377m::groups::Track (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::TrackType > r (
          ::st434::s377m::groups::Track (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Track (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Track (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Track (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Track (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Track (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Track (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::TrackType > r (
          ::st434::s377m::groups::Track (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::TrackType > r (
          ::st434::s377m::groups::Track (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::TrackType > r (
          ::st434::s377m::groups::Track (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::TrackType > r (
            ::st434::s377m::groups::Track (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Track" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::TrackType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::TrackType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Track",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::TrackType >
      Track (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Track" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::TrackType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::TrackType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Track",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::PackageType > r (
          ::st434::s377m::groups::Package (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PackageType > r (
          ::st434::s377m::groups::Package (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PackageType > r (
          ::st434::s377m::groups::Package (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Package (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Package (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Package (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Package (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Package (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Package (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::PackageType > r (
          ::st434::s377m::groups::Package (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PackageType > r (
          ::st434::s377m::groups::Package (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PackageType > r (
          ::st434::s377m::groups::Package (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::PackageType > r (
            ::st434::s377m::groups::Package (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Package" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::PackageType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::PackageType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Package",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::PackageType >
      Package (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Package" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::PackageType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::PackageType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Package",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::ComponentType > r (
          ::st434::s377m::groups::Component (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::ComponentType > r (
          ::st434::s377m::groups::Component (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::ComponentType > r (
          ::st434::s377m::groups::Component (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Component (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Component (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Component (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Component (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Component (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Component (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::ComponentType > r (
          ::st434::s377m::groups::Component (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::ComponentType > r (
          ::st434::s377m::groups::Component (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::ComponentType > r (
          ::st434::s377m::groups::Component (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::ComponentType > r (
            ::st434::s377m::groups::Component (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Component" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::ComponentType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::ComponentType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Component",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::ComponentType >
      Component (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Component" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::ComponentType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::ComponentType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Component",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::SegmentType > r (
          ::st434::s377m::groups::Segment (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SegmentType > r (
          ::st434::s377m::groups::Segment (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SegmentType > r (
          ::st434::s377m::groups::Segment (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Segment (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Segment (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Segment (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Segment (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Segment (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Segment (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::SegmentType > r (
          ::st434::s377m::groups::Segment (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SegmentType > r (
          ::st434::s377m::groups::Segment (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SegmentType > r (
          ::st434::s377m::groups::Segment (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::SegmentType > r (
            ::st434::s377m::groups::Segment (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Segment" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::SegmentType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::SegmentType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Segment",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::SegmentType >
      Segment (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Segment" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::SegmentType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::SegmentType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Segment",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType > r (
          ::st434::s377m::groups::SourceReference (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType > r (
          ::st434::s377m::groups::SourceReference (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType > r (
          ::st434::s377m::groups::SourceReference (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SourceReference (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SourceReference (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SourceReference (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SourceReference (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SourceReference (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SourceReference (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType > r (
          ::st434::s377m::groups::SourceReference (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType > r (
          ::st434::s377m::groups::SourceReference (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType > r (
          ::st434::s377m::groups::SourceReference (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType > r (
            ::st434::s377m::groups::SourceReference (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SourceReference" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::SourceReferenceType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SourceReference",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType >
      SourceReference (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SourceReference" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::SourceReferenceType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::SourceReferenceType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SourceReference",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType > r (
          ::st434::s377m::groups::DMS1Event (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType > r (
          ::st434::s377m::groups::DMS1Event (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType > r (
          ::st434::s377m::groups::DMS1Event (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DMS1Event (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DMS1Event (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DMS1Event (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DMS1Event (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DMS1Event (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DMS1Event (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType > r (
          ::st434::s377m::groups::DMS1Event (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType > r (
          ::st434::s377m::groups::DMS1Event (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType > r (
          ::st434::s377m::groups::DMS1Event (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType > r (
            ::st434::s377m::groups::DMS1Event (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DMS1Event" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::DMS1EventType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DMS1Event",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType >
      DMS1Event (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DMS1Event" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::DMS1EventType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::DMS1EventType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DMS1Event",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType > r (
          ::st434::s377m::groups::CommentMarker (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType > r (
          ::st434::s377m::groups::CommentMarker (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType > r (
          ::st434::s377m::groups::CommentMarker (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::CommentMarker (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::CommentMarker (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::CommentMarker (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::CommentMarker (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::CommentMarker (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::CommentMarker (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType > r (
          ::st434::s377m::groups::CommentMarker (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType > r (
          ::st434::s377m::groups::CommentMarker (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType > r (
          ::st434::s377m::groups::CommentMarker (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType > r (
            ::st434::s377m::groups::CommentMarker (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CommentMarker" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::CommentMarkerType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CommentMarker",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType >
      CommentMarker (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "CommentMarker" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::CommentMarkerType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::CommentMarkerType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CommentMarker",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType > r (
          ::st434::s377m::groups::GenericDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType > r (
          ::st434::s377m::groups::GenericDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType > r (
          ::st434::s377m::groups::GenericDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::GenericDescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::GenericDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::GenericDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::GenericDescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::GenericDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::GenericDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType > r (
          ::st434::s377m::groups::GenericDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType > r (
          ::st434::s377m::groups::GenericDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType > r (
          ::st434::s377m::groups::GenericDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType > r (
            ::st434::s377m::groups::GenericDescriptor (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "GenericDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::GenericDescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "GenericDescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType >
      GenericDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "GenericDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::GenericDescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::GenericDescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "GenericDescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType > r (
          ::st434::s377m::groups::PhysicalDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType > r (
          ::st434::s377m::groups::PhysicalDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType > r (
          ::st434::s377m::groups::PhysicalDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::PhysicalDescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::PhysicalDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::PhysicalDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::PhysicalDescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::PhysicalDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::PhysicalDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType > r (
          ::st434::s377m::groups::PhysicalDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType > r (
          ::st434::s377m::groups::PhysicalDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType > r (
          ::st434::s377m::groups::PhysicalDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType > r (
            ::st434::s377m::groups::PhysicalDescriptor (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PhysicalDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::PhysicalDescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PhysicalDescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType >
      PhysicalDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "PhysicalDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::PhysicalDescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::PhysicalDescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PhysicalDescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::LocatorType > r (
          ::st434::s377m::groups::Locator (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::LocatorType > r (
          ::st434::s377m::groups::Locator (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::LocatorType > r (
          ::st434::s377m::groups::Locator (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Locator (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Locator (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Locator (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Locator (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Locator (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Locator (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::LocatorType > r (
          ::st434::s377m::groups::Locator (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::LocatorType > r (
          ::st434::s377m::groups::Locator (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::LocatorType > r (
          ::st434::s377m::groups::Locator (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::LocatorType > r (
            ::st434::s377m::groups::Locator (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Locator" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::LocatorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::LocatorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Locator",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::LocatorType >
      Locator (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Locator" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::LocatorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::LocatorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Locator",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Preface_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Preface_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Preface_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Preface_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Preface_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Preface_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Preface_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Preface_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Preface_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Preface_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Preface_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Preface_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::Preface_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Preface_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Preface_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Preface_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Preface_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Preface_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::PrefaceType > r (
          ::st434::s377m::groups::Preface (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PrefaceType > r (
          ::st434::s377m::groups::Preface (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PrefaceType > r (
          ::st434::s377m::groups::Preface (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Preface (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Preface (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Preface (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Preface (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Preface (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Preface (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::PrefaceType > r (
          ::st434::s377m::groups::Preface (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PrefaceType > r (
          ::st434::s377m::groups::Preface (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PrefaceType > r (
          ::st434::s377m::groups::Preface (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::PrefaceType > r (
            ::st434::s377m::groups::Preface (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Preface" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::PrefaceType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::PrefaceType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Preface",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrefaceType >
      Preface (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Preface" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::PrefaceType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::PrefaceType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Preface",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Identification_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Identification_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Identification_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Identification_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Identification_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Identification_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Identification_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Identification_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Identification_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Identification_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Identification_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Identification_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::Identification_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Identification_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Identification_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Identification_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Identification_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Identification_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::IdentificationType > r (
          ::st434::s377m::groups::Identification (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::IdentificationType > r (
          ::st434::s377m::groups::Identification (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::IdentificationType > r (
          ::st434::s377m::groups::Identification (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Identification (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Identification (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Identification (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Identification (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Identification (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Identification (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::IdentificationType > r (
          ::st434::s377m::groups::Identification (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::IdentificationType > r (
          ::st434::s377m::groups::Identification (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::IdentificationType > r (
          ::st434::s377m::groups::Identification (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::IdentificationType > r (
            ::st434::s377m::groups::Identification (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Identification" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::IdentificationType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::IdentificationType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Identification",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::IdentificationType >
      Identification (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Identification" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::IdentificationType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::IdentificationType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Identification",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::ContentStorage_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::ContentStorage_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::ContentStorage_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::ContentStorage_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::ContentStorage_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::ContentStorage_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::ContentStorage_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::ContentStorage_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::ContentStorage_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::ContentStorage_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::ContentStorage_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::ContentStorage_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::ContentStorage_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ContentStorage_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ContentStorage_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      ContentStorage_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ContentStorage_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ContentStorage_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType > r (
          ::st434::s377m::groups::ContentStorage (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType > r (
          ::st434::s377m::groups::ContentStorage (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType > r (
          ::st434::s377m::groups::ContentStorage (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::ContentStorage (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::ContentStorage (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::ContentStorage (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::ContentStorage (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::ContentStorage (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::ContentStorage (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType > r (
          ::st434::s377m::groups::ContentStorage (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType > r (
          ::st434::s377m::groups::ContentStorage (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType > r (
          ::st434::s377m::groups::ContentStorage (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType > r (
            ::st434::s377m::groups::ContentStorage (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ContentStorage" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::ContentStorageType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ContentStorage",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType >
      ContentStorage (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ContentStorage" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::ContentStorageType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::ContentStorageType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ContentStorage",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::EssenceData_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::EssenceData_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::EssenceData_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::EssenceData_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::EssenceData_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::EssenceData_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::EssenceData_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::EssenceData_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::EssenceData_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::EssenceData_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::EssenceData_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::EssenceData_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::EssenceData_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "EssenceData_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "EssenceData_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EssenceData_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "EssenceData_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "EssenceData_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType > r (
          ::st434::s377m::groups::EssenceData (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType > r (
          ::st434::s377m::groups::EssenceData (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType > r (
          ::st434::s377m::groups::EssenceData (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::EssenceData (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::EssenceData (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::EssenceData (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::EssenceData (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::EssenceData (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::EssenceData (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType > r (
          ::st434::s377m::groups::EssenceData (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType > r (
          ::st434::s377m::groups::EssenceData (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType > r (
          ::st434::s377m::groups::EssenceData (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType > r (
            ::st434::s377m::groups::EssenceData (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "EssenceData" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::EssenceDataType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "EssenceData",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType >
      EssenceData (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "EssenceData" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::EssenceDataType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::EssenceDataType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "EssenceData",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::NetworkLocator_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::NetworkLocator_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::NetworkLocator_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::NetworkLocator_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::NetworkLocator_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::NetworkLocator_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::NetworkLocator_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::NetworkLocator_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::NetworkLocator_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::NetworkLocator_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::NetworkLocator_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::NetworkLocator_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::NetworkLocator_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "NetworkLocator_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "NetworkLocator_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      NetworkLocator_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "NetworkLocator_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "NetworkLocator_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType > r (
          ::st434::s377m::groups::NetworkLocator (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType > r (
          ::st434::s377m::groups::NetworkLocator (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType > r (
          ::st434::s377m::groups::NetworkLocator (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::NetworkLocator (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::NetworkLocator (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::NetworkLocator (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::NetworkLocator (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::NetworkLocator (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::NetworkLocator (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType > r (
          ::st434::s377m::groups::NetworkLocator (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType > r (
          ::st434::s377m::groups::NetworkLocator (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType > r (
          ::st434::s377m::groups::NetworkLocator (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType > r (
            ::st434::s377m::groups::NetworkLocator (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "NetworkLocator" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::NetworkLocatorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "NetworkLocator",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType >
      NetworkLocator (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "NetworkLocator" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::NetworkLocatorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::NetworkLocatorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "NetworkLocator",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::TextLocator_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::TextLocator_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::TextLocator_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::TextLocator_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::TextLocator_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::TextLocator_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::TextLocator_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::TextLocator_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::TextLocator_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::TextLocator_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::TextLocator_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::TextLocator_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::TextLocator_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "TextLocator_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TextLocator_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TextLocator_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "TextLocator_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TextLocator_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType > r (
          ::st434::s377m::groups::TextLocator (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType > r (
          ::st434::s377m::groups::TextLocator (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType > r (
          ::st434::s377m::groups::TextLocator (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::TextLocator (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::TextLocator (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::TextLocator (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::TextLocator (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::TextLocator (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::TextLocator (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType > r (
          ::st434::s377m::groups::TextLocator (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType > r (
          ::st434::s377m::groups::TextLocator (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType > r (
          ::st434::s377m::groups::TextLocator (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType > r (
            ::st434::s377m::groups::TextLocator (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "TextLocator" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::TextLocatorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TextLocator",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType >
      TextLocator (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "TextLocator" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::TextLocatorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::TextLocatorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TextLocator",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::TimelineTrack_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::TimelineTrack_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::TimelineTrack_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::TimelineTrack_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::TimelineTrack_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::TimelineTrack_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::TimelineTrack_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::TimelineTrack_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::TimelineTrack_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::TimelineTrack_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::TimelineTrack_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::TimelineTrack_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::TimelineTrack_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "TimelineTrack_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TimelineTrack_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      TimelineTrack_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "TimelineTrack_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TimelineTrack_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType > r (
          ::st434::s377m::groups::TimelineTrack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType > r (
          ::st434::s377m::groups::TimelineTrack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType > r (
          ::st434::s377m::groups::TimelineTrack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::TimelineTrack (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::TimelineTrack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::TimelineTrack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::TimelineTrack (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::TimelineTrack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::TimelineTrack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType > r (
          ::st434::s377m::groups::TimelineTrack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType > r (
          ::st434::s377m::groups::TimelineTrack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType > r (
          ::st434::s377m::groups::TimelineTrack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType > r (
            ::st434::s377m::groups::TimelineTrack (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "TimelineTrack" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::TimelineTrackType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TimelineTrack",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType >
      TimelineTrack (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "TimelineTrack" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::TimelineTrackType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::TimelineTrackType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TimelineTrack",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::EventTrack_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::EventTrack_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::EventTrack_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::EventTrack_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::EventTrack_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::EventTrack_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::EventTrack_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::EventTrack_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::EventTrack_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::EventTrack_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::EventTrack_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::EventTrack_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::EventTrack_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "EventTrack_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "EventTrack_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      EventTrack_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "EventTrack_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "EventTrack_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::EventTrackType > r (
          ::st434::s377m::groups::EventTrack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::EventTrackType > r (
          ::st434::s377m::groups::EventTrack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::EventTrackType > r (
          ::st434::s377m::groups::EventTrack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::EventTrack (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::EventTrack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::EventTrack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::EventTrack (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::EventTrack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::EventTrack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::EventTrackType > r (
          ::st434::s377m::groups::EventTrack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::EventTrackType > r (
          ::st434::s377m::groups::EventTrack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::EventTrackType > r (
          ::st434::s377m::groups::EventTrack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::EventTrackType > r (
            ::st434::s377m::groups::EventTrack (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "EventTrack" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::EventTrackType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::EventTrackType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "EventTrack",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::EventTrackType >
      EventTrack (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "EventTrack" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::EventTrackType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::EventTrackType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "EventTrack",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::StaticTrack_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::StaticTrack_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::StaticTrack_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::StaticTrack_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::StaticTrack_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::StaticTrack_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::StaticTrack_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::StaticTrack_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::StaticTrack_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::StaticTrack_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::StaticTrack_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::StaticTrack_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::StaticTrack_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "StaticTrack_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "StaticTrack_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      StaticTrack_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "StaticTrack_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "StaticTrack_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType > r (
          ::st434::s377m::groups::StaticTrack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType > r (
          ::st434::s377m::groups::StaticTrack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType > r (
          ::st434::s377m::groups::StaticTrack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::StaticTrack (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::StaticTrack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::StaticTrack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::StaticTrack (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::StaticTrack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::StaticTrack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType > r (
          ::st434::s377m::groups::StaticTrack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType > r (
          ::st434::s377m::groups::StaticTrack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType > r (
          ::st434::s377m::groups::StaticTrack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType > r (
            ::st434::s377m::groups::StaticTrack (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "StaticTrack" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::StaticTrackType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "StaticTrack",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType >
      StaticTrack (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "StaticTrack" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::StaticTrackType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::StaticTrackType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "StaticTrack",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Sequence_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Sequence_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Sequence_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Sequence_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Sequence_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Sequence_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Sequence_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Sequence_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Sequence_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Sequence_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Sequence_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Sequence_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::Sequence_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Sequence_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Sequence_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Sequence_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Sequence_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Sequence_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::SequenceType > r (
          ::st434::s377m::groups::Sequence (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SequenceType > r (
          ::st434::s377m::groups::Sequence (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SequenceType > r (
          ::st434::s377m::groups::Sequence (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Sequence (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Sequence (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Sequence (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Sequence (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Sequence (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Sequence (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::SequenceType > r (
          ::st434::s377m::groups::Sequence (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SequenceType > r (
          ::st434::s377m::groups::Sequence (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SequenceType > r (
          ::st434::s377m::groups::Sequence (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::SequenceType > r (
            ::st434::s377m::groups::Sequence (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Sequence" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::SequenceType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::SequenceType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Sequence",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::SequenceType >
      Sequence (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Sequence" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::SequenceType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::SequenceType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Sequence",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Timecode_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Timecode_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Timecode_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Timecode_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Timecode_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Timecode_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Timecode_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Timecode_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Timecode_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Timecode_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Timecode_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::Timecode_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::Timecode_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Timecode_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Timecode_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      Timecode_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Timecode_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Timecode_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::TimecodeType > r (
          ::st434::s377m::groups::Timecode (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::TimecodeType > r (
          ::st434::s377m::groups::Timecode (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::TimecodeType > r (
          ::st434::s377m::groups::Timecode (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Timecode (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Timecode (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::Timecode (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Timecode (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Timecode (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::Timecode (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::TimecodeType > r (
          ::st434::s377m::groups::Timecode (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::TimecodeType > r (
          ::st434::s377m::groups::Timecode (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::TimecodeType > r (
          ::st434::s377m::groups::Timecode (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::TimecodeType > r (
            ::st434::s377m::groups::Timecode (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Timecode" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::TimecodeType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::TimecodeType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Timecode",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::TimecodeType >
      Timecode (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Timecode" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::TimecodeType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::TimecodeType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Timecode",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DescriptiveMarker_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DescriptiveMarker_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DescriptiveMarker_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DescriptiveMarker_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DescriptiveMarker_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DescriptiveMarker_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DescriptiveMarker_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DescriptiveMarker_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DescriptiveMarker_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DescriptiveMarker_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DescriptiveMarker_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DescriptiveMarker_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::DescriptiveMarker_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DescriptiveMarker_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DescriptiveMarker_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveMarker_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DescriptiveMarker_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DescriptiveMarker_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType > r (
          ::st434::s377m::groups::DescriptiveMarker (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType > r (
          ::st434::s377m::groups::DescriptiveMarker (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType > r (
          ::st434::s377m::groups::DescriptiveMarker (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DescriptiveMarker (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DescriptiveMarker (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DescriptiveMarker (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DescriptiveMarker (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DescriptiveMarker (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DescriptiveMarker (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType > r (
          ::st434::s377m::groups::DescriptiveMarker (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType > r (
          ::st434::s377m::groups::DescriptiveMarker (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType > r (
          ::st434::s377m::groups::DescriptiveMarker (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType > r (
            ::st434::s377m::groups::DescriptiveMarker (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DescriptiveMarker" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::DescriptiveMarkerType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DescriptiveMarker",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType >
      DescriptiveMarker (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DescriptiveMarker" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::DescriptiveMarkerType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::DescriptiveMarkerType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DescriptiveMarker",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::SourceClip_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::SourceClip_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::SourceClip_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SourceClip_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SourceClip_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SourceClip_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SourceClip_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SourceClip_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SourceClip_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::SourceClip_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::SourceClip_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::SourceClip_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::SourceClip_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SourceClip_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SourceClip_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourceClip_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SourceClip_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SourceClip_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::SourceClipType > r (
          ::st434::s377m::groups::SourceClip (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SourceClipType > r (
          ::st434::s377m::groups::SourceClip (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SourceClipType > r (
          ::st434::s377m::groups::SourceClip (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SourceClip (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SourceClip (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SourceClip (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SourceClip (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SourceClip (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SourceClip (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::SourceClipType > r (
          ::st434::s377m::groups::SourceClip (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SourceClipType > r (
          ::st434::s377m::groups::SourceClip (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SourceClipType > r (
          ::st434::s377m::groups::SourceClip (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::SourceClipType > r (
            ::st434::s377m::groups::SourceClip (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SourceClip" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::SourceClipType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::SourceClipType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SourceClip",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourceClipType >
      SourceClip (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SourceClip" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::SourceClipType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::SourceClipType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SourceClip",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DescriptiveClip_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DescriptiveClip_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DescriptiveClip_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DescriptiveClip_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DescriptiveClip_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DescriptiveClip_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DescriptiveClip_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DescriptiveClip_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DescriptiveClip_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DescriptiveClip_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DescriptiveClip_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DescriptiveClip_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::DescriptiveClip_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DescriptiveClip_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DescriptiveClip_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DescriptiveClip_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DescriptiveClip_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DescriptiveClip_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType > r (
          ::st434::s377m::groups::DescriptiveClip (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType > r (
          ::st434::s377m::groups::DescriptiveClip (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType > r (
          ::st434::s377m::groups::DescriptiveClip (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DescriptiveClip (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DescriptiveClip (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DescriptiveClip (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DescriptiveClip (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DescriptiveClip (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DescriptiveClip (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType > r (
          ::st434::s377m::groups::DescriptiveClip (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType > r (
          ::st434::s377m::groups::DescriptiveClip (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType > r (
          ::st434::s377m::groups::DescriptiveClip (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType > r (
            ::st434::s377m::groups::DescriptiveClip (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DescriptiveClip" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::DescriptiveClipType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DescriptiveClip",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType >
      DescriptiveClip (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DescriptiveClip" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::DescriptiveClipType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::DescriptiveClipType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DescriptiveClip",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::MaterialPackage_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::MaterialPackage_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::MaterialPackage_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::MaterialPackage_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::MaterialPackage_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::MaterialPackage_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::MaterialPackage_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::MaterialPackage_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::MaterialPackage_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::MaterialPackage_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::MaterialPackage_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::MaterialPackage_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::MaterialPackage_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "MaterialPackage_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MaterialPackage_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MaterialPackage_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "MaterialPackage_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MaterialPackage_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType > r (
          ::st434::s377m::groups::MaterialPackage (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType > r (
          ::st434::s377m::groups::MaterialPackage (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType > r (
          ::st434::s377m::groups::MaterialPackage (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::MaterialPackage (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::MaterialPackage (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::MaterialPackage (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::MaterialPackage (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::MaterialPackage (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::MaterialPackage (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType > r (
          ::st434::s377m::groups::MaterialPackage (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType > r (
          ::st434::s377m::groups::MaterialPackage (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType > r (
          ::st434::s377m::groups::MaterialPackage (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType > r (
            ::st434::s377m::groups::MaterialPackage (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "MaterialPackage" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::MaterialPackageType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MaterialPackage",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType >
      MaterialPackage (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "MaterialPackage" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::MaterialPackageType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::MaterialPackageType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MaterialPackage",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::SourcePackage_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::SourcePackage_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::SourcePackage_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SourcePackage_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SourcePackage_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SourcePackage_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SourcePackage_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SourcePackage_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SourcePackage_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::SourcePackage_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::SourcePackage_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::SourcePackage_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::SourcePackage_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SourcePackage_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SourcePackage_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SourcePackage_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SourcePackage_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SourcePackage_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType > r (
          ::st434::s377m::groups::SourcePackage (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType > r (
          ::st434::s377m::groups::SourcePackage (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType > r (
          ::st434::s377m::groups::SourcePackage (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SourcePackage (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SourcePackage (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SourcePackage (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SourcePackage (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SourcePackage (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SourcePackage (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType > r (
          ::st434::s377m::groups::SourcePackage (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType > r (
          ::st434::s377m::groups::SourcePackage (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType > r (
          ::st434::s377m::groups::SourcePackage (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType > r (
            ::st434::s377m::groups::SourcePackage (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SourcePackage" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::SourcePackageType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SourcePackage",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType >
      SourcePackage (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SourcePackage" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::SourcePackageType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::SourcePackageType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SourcePackage",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::FileDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::FileDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::FileDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::FileDescriptor_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::FileDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::FileDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::FileDescriptor_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::FileDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::FileDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::FileDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::FileDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::FileDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::FileDescriptor_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "FileDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FileDescriptor_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      FileDescriptor_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "FileDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FileDescriptor_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType > r (
          ::st434::s377m::groups::FileDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType > r (
          ::st434::s377m::groups::FileDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType > r (
          ::st434::s377m::groups::FileDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::FileDescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::FileDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::FileDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::FileDescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::FileDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::FileDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType > r (
          ::st434::s377m::groups::FileDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType > r (
          ::st434::s377m::groups::FileDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType > r (
          ::st434::s377m::groups::FileDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType > r (
            ::st434::s377m::groups::FileDescriptor (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "FileDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::FileDescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FileDescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType >
      FileDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "FileDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::FileDescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::FileDescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "FileDescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::PictureDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::PictureDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::PictureDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::PictureDescriptor_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::PictureDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::PictureDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::PictureDescriptor_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::PictureDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::PictureDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::PictureDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::PictureDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::PictureDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::PictureDescriptor_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PictureDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PictureDescriptor_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      PictureDescriptor_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "PictureDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PictureDescriptor_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType > r (
          ::st434::s377m::groups::PictureDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType > r (
          ::st434::s377m::groups::PictureDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType > r (
          ::st434::s377m::groups::PictureDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::PictureDescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::PictureDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::PictureDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::PictureDescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::PictureDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::PictureDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType > r (
          ::st434::s377m::groups::PictureDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType > r (
          ::st434::s377m::groups::PictureDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType > r (
          ::st434::s377m::groups::PictureDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType > r (
            ::st434::s377m::groups::PictureDescriptor (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PictureDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::PictureDescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PictureDescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType >
      PictureDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "PictureDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::PictureDescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::PictureDescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PictureDescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::CDCIDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::CDCIDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::CDCIDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::CDCIDescriptor_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::CDCIDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::CDCIDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::CDCIDescriptor_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::CDCIDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::CDCIDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::CDCIDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::CDCIDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::CDCIDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::CDCIDescriptor_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CDCIDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CDCIDescriptor_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      CDCIDescriptor_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "CDCIDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CDCIDescriptor_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType > r (
          ::st434::s377m::groups::CDCIDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType > r (
          ::st434::s377m::groups::CDCIDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType > r (
          ::st434::s377m::groups::CDCIDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::CDCIDescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::CDCIDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::CDCIDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::CDCIDescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::CDCIDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::CDCIDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType > r (
          ::st434::s377m::groups::CDCIDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType > r (
          ::st434::s377m::groups::CDCIDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType > r (
          ::st434::s377m::groups::CDCIDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType > r (
            ::st434::s377m::groups::CDCIDescriptor (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CDCIDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::CDCIDescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CDCIDescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType >
      CDCIDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "CDCIDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::CDCIDescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::CDCIDescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CDCIDescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::RGBADescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::RGBADescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::RGBADescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::RGBADescriptor_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::RGBADescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::RGBADescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::RGBADescriptor_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::RGBADescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::RGBADescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::RGBADescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::RGBADescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::RGBADescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::RGBADescriptor_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "RGBADescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RGBADescriptor_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      RGBADescriptor_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "RGBADescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RGBADescriptor_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType > r (
          ::st434::s377m::groups::RGBADescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType > r (
          ::st434::s377m::groups::RGBADescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType > r (
          ::st434::s377m::groups::RGBADescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::RGBADescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::RGBADescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::RGBADescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::RGBADescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::RGBADescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::RGBADescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType > r (
          ::st434::s377m::groups::RGBADescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType > r (
          ::st434::s377m::groups::RGBADescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType > r (
          ::st434::s377m::groups::RGBADescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType > r (
            ::st434::s377m::groups::RGBADescriptor (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "RGBADescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::RGBADescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RGBADescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType >
      RGBADescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "RGBADescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::RGBADescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::RGBADescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RGBADescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::SoundDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::SoundDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::SoundDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SoundDescriptor_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SoundDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SoundDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SoundDescriptor_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SoundDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SoundDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::SoundDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::SoundDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::SoundDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::SoundDescriptor_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SoundDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SoundDescriptor_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      SoundDescriptor_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SoundDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SoundDescriptor_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType > r (
          ::st434::s377m::groups::SoundDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType > r (
          ::st434::s377m::groups::SoundDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType > r (
          ::st434::s377m::groups::SoundDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SoundDescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SoundDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::SoundDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SoundDescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SoundDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::SoundDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType > r (
          ::st434::s377m::groups::SoundDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType > r (
          ::st434::s377m::groups::SoundDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType > r (
          ::st434::s377m::groups::SoundDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType > r (
            ::st434::s377m::groups::SoundDescriptor (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SoundDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::SoundDescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SoundDescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType >
      SoundDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SoundDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::SoundDescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::SoundDescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SoundDescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DataEssenceDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DataEssenceDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DataEssenceDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DataEssenceDescriptor_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DataEssenceDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DataEssenceDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DataEssenceDescriptor_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DataEssenceDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DataEssenceDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DataEssenceDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DataEssenceDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::DataEssenceDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (const ::xercesc::DOMDocument& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::DataEssenceDescriptor_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DataEssenceDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DataEssenceDescriptor_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DataEssenceDescriptor_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DataEssenceDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DataEssenceDescriptor_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType > r (
          ::st434::s377m::groups::DataEssenceDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType > r (
          ::st434::s377m::groups::DataEssenceDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType > r (
          ::st434::s377m::groups::DataEssenceDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DataEssenceDescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DataEssenceDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::DataEssenceDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DataEssenceDescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DataEssenceDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::DataEssenceDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType > r (
          ::st434::s377m::groups::DataEssenceDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType > r (
          ::st434::s377m::groups::DataEssenceDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType > r (
          ::st434::s377m::groups::DataEssenceDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType > r (
            ::st434::s377m::groups::DataEssenceDescriptor (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DataEssenceDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::DataEssenceDescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DataEssenceDescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType >
      DataEssenceDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DataEssenceDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::DataEssenceDescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::DataEssenceDescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DataEssenceDescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::MultipleDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::MultipleDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::MultipleDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::MultipleDescriptor_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::MultipleDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::MultipleDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::MultipleDescriptor_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::MultipleDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::MultipleDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::MultipleDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::MultipleDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s377m::groups::MultipleDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s377m::groups::MultipleDescriptor_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "MultipleDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MultipleDescriptor_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      MultipleDescriptor_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "MultipleDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MultipleDescriptor_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType > r (
          ::st434::s377m::groups::MultipleDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType > r (
          ::st434::s377m::groups::MultipleDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType > r (
          ::st434::s377m::groups::MultipleDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::MultipleDescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::MultipleDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::MultipleDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::MultipleDescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::MultipleDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::MultipleDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType > r (
          ::st434::s377m::groups::MultipleDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType > r (
          ::st434::s377m::groups::MultipleDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType > r (
          ::st434::s377m::groups::MultipleDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType > r (
            ::st434::s377m::groups::MultipleDescriptor (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "MultipleDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::MultipleDescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MultipleDescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType >
      MultipleDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "MultipleDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::MultipleDescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::MultipleDescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MultipleDescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      void
      AbstractSet (::std::ostream& o,
                   const ::st434::s377m::groups::AbstractSetType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::AbstractSet (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      AbstractSet (::std::ostream& o,
                   const ::st434::s377m::groups::AbstractSetType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::AbstractSet (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      AbstractSet (::std::ostream& o,
                   const ::st434::s377m::groups::AbstractSetType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::AbstractSet (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      AbstractSet (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::groups::AbstractSetType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::AbstractSet (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      AbstractSet (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::groups::AbstractSetType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::AbstractSet (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      AbstractSet (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::groups::AbstractSetType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::AbstractSet (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      AbstractSet (::xercesc::DOMDocument& d,
                   const ::st434::s377m::groups::AbstractSetType& s,
                   ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "AbstractSet" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "AbstractSet",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      AbstractSet (const ::st434::s377m::groups::AbstractSetType& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "AbstractSet",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::AbstractSet (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const AbstractSetType& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // ExtensionProperties
        //
        if (i.ExtensionProperties ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ExtensionProperties",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          s << *i.ExtensionProperties ();
        }

        // InstanceID
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "InstanceID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          a << i.InstanceID ();
        }
      }

      void
      InterchangeObject (::std::ostream& o,
                         const ::st434::s377m::groups::InterchangeObjectType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::InterchangeObject (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      InterchangeObject (::std::ostream& o,
                         const ::st434::s377m::groups::InterchangeObjectType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::InterchangeObject (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      InterchangeObject (::std::ostream& o,
                         const ::st434::s377m::groups::InterchangeObjectType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::InterchangeObject (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      InterchangeObject (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::groups::InterchangeObjectType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::InterchangeObject (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      InterchangeObject (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::groups::InterchangeObjectType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::InterchangeObject (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      InterchangeObject (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::groups::InterchangeObjectType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::InterchangeObject (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      InterchangeObject (::xercesc::DOMDocument& d,
                         const ::st434::s377m::groups::InterchangeObjectType& s,
                         ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "InterchangeObject" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "InterchangeObject",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      InterchangeObject (const ::st434::s377m::groups::InterchangeObjectType& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "InterchangeObject",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::InterchangeObject (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const InterchangeObjectType& i)
      {
        e << static_cast< const ::st434::s377m::groups::AbstractSetType& > (i);

        // LinkedGenerationID
        //
        if (i.LinkedGenerationID ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "LinkedGenerationID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          a << *i.LinkedGenerationID ();
        }
      }

      void
      SubDescriptors (::std::ostream& o,
                      const ::st434::s377m::groups::SubDescriptorsType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SubDescriptors (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SubDescriptors (::std::ostream& o,
                      const ::st434::s377m::groups::SubDescriptorsType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SubDescriptors (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SubDescriptors (::std::ostream& o,
                      const ::st434::s377m::groups::SubDescriptorsType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SubDescriptors (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SubDescriptors (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::SubDescriptorsType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SubDescriptors (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SubDescriptors (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::SubDescriptorsType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SubDescriptors (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SubDescriptors (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::SubDescriptorsType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SubDescriptors (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SubDescriptors (::xercesc::DOMDocument& d,
                      const ::st434::s377m::groups::SubDescriptorsType& s,
                      ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SubDescriptors" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SubDescriptors",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SubDescriptors (const ::st434::s377m::groups::SubDescriptorsType& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "SubDescriptors",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::SubDescriptors (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const SubDescriptorsType& i)
      {
        e << static_cast< const ::st434::s377m::groups::InterchangeObjectType& > (i);
      }

      void
      DescriptiveFramework (::std::ostream& o,
                            const ::st434::s377m::groups::DescriptiveFrameworkType& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveFramework (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DescriptiveFramework (::std::ostream& o,
                            const ::st434::s377m::groups::DescriptiveFrameworkType& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveFramework (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveFramework (::std::ostream& o,
                            const ::st434::s377m::groups::DescriptiveFrameworkType& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveFramework (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveFramework (::xercesc::XMLFormatTarget& t,
                            const ::st434::s377m::groups::DescriptiveFrameworkType& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveFramework (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DescriptiveFramework (::xercesc::XMLFormatTarget& t,
                            const ::st434::s377m::groups::DescriptiveFrameworkType& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveFramework (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveFramework (::xercesc::XMLFormatTarget& t,
                            const ::st434::s377m::groups::DescriptiveFrameworkType& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveFramework (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveFramework (::xercesc::DOMDocument& d,
                            const ::st434::s377m::groups::DescriptiveFrameworkType& s,
                            ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DescriptiveFramework" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DescriptiveFramework",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DescriptiveFramework (const ::st434::s377m::groups::DescriptiveFrameworkType& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "DescriptiveFramework",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::DescriptiveFramework (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const DescriptiveFrameworkType& i)
      {
        e << static_cast< const ::st434::s377m::groups::InterchangeObjectType& > (i);
      }

      void
      DescriptiveObject (::std::ostream& o,
                         const ::st434::s377m::groups::DescriptiveObjectType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveObject (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DescriptiveObject (::std::ostream& o,
                         const ::st434::s377m::groups::DescriptiveObjectType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveObject (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveObject (::std::ostream& o,
                         const ::st434::s377m::groups::DescriptiveObjectType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveObject (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveObject (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::groups::DescriptiveObjectType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveObject (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DescriptiveObject (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::groups::DescriptiveObjectType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveObject (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveObject (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::groups::DescriptiveObjectType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveObject (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveObject (::xercesc::DOMDocument& d,
                         const ::st434::s377m::groups::DescriptiveObjectType& s,
                         ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DescriptiveObject" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DescriptiveObject",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DescriptiveObject (const ::st434::s377m::groups::DescriptiveObjectType& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "DescriptiveObject",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::DescriptiveObject (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const DescriptiveObjectType& i)
      {
        e << static_cast< const ::st434::s377m::groups::InterchangeObjectType& > (i);
      }

      void
      Track (::std::ostream& o,
             const ::st434::s377m::groups::TrackType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Track (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Track (::std::ostream& o,
             const ::st434::s377m::groups::TrackType& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Track (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Track (::std::ostream& o,
             const ::st434::s377m::groups::TrackType& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Track (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Track (::xercesc::XMLFormatTarget& t,
             const ::st434::s377m::groups::TrackType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Track (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Track (::xercesc::XMLFormatTarget& t,
             const ::st434::s377m::groups::TrackType& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Track (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Track (::xercesc::XMLFormatTarget& t,
             const ::st434::s377m::groups::TrackType& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Track (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Track (::xercesc::DOMDocument& d,
             const ::st434::s377m::groups::TrackType& s,
             ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Track" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Track",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Track (const ::st434::s377m::groups::TrackType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Track",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::Track (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const TrackType& i)
      {
        e << static_cast< const ::st434::s377m::groups::InterchangeObjectType& > (i);

        // TrackID
        //
        if (i.TrackID ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TrackID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.TrackID ();
        }

        // EssenceTrackNumber
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EssenceTrackNumber",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.EssenceTrackNumber ();
        }

        // TrackName
        //
        if (i.TrackName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TrackName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.TrackName ();
        }

        // TrackSegment
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TrackSegment",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.TrackSegment ();
        }
      }

      void
      Package (::std::ostream& o,
               const ::st434::s377m::groups::PackageType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Package (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Package (::std::ostream& o,
               const ::st434::s377m::groups::PackageType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Package (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Package (::std::ostream& o,
               const ::st434::s377m::groups::PackageType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Package (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Package (::xercesc::XMLFormatTarget& t,
               const ::st434::s377m::groups::PackageType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Package (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Package (::xercesc::XMLFormatTarget& t,
               const ::st434::s377m::groups::PackageType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Package (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Package (::xercesc::XMLFormatTarget& t,
               const ::st434::s377m::groups::PackageType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Package (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Package (::xercesc::DOMDocument& d,
               const ::st434::s377m::groups::PackageType& s,
               ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Package" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Package",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Package (const ::st434::s377m::groups::PackageType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Package",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::Package (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const PackageType& i)
      {
        e << static_cast< const ::st434::s377m::groups::InterchangeObjectType& > (i);

        // PackageID
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PackageID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.PackageID ();
        }

        // PackageName
        //
        if (i.PackageName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PackageName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.PackageName ();
        }

        // CreationTime
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CreationTime",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.CreationTime ();
        }

        // PackageLastModified
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PackageLastModified",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.PackageLastModified ();
        }

        // PackageTracks
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PackageTracks",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.PackageTracks ();
        }
      }

      void
      Component (::std::ostream& o,
                 const ::st434::s377m::groups::ComponentType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Component (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Component (::std::ostream& o,
                 const ::st434::s377m::groups::ComponentType& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Component (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Component (::std::ostream& o,
                 const ::st434::s377m::groups::ComponentType& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Component (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Component (::xercesc::XMLFormatTarget& t,
                 const ::st434::s377m::groups::ComponentType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Component (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Component (::xercesc::XMLFormatTarget& t,
                 const ::st434::s377m::groups::ComponentType& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Component (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Component (::xercesc::XMLFormatTarget& t,
                 const ::st434::s377m::groups::ComponentType& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Component (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Component (::xercesc::DOMDocument& d,
                 const ::st434::s377m::groups::ComponentType& s,
                 ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Component" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Component",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Component (const ::st434::s377m::groups::ComponentType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Component",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::Component (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const ComponentType& i)
      {
        e << static_cast< const ::st434::s377m::groups::InterchangeObjectType& > (i);

        // ComponentDataDefinition
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ComponentDataDefinition",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.ComponentDataDefinition ();
        }

        // ComponentLength
        //
        if (i.ComponentLength ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ComponentLength",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ComponentLength ();
        }
      }

      void
      Segment (::std::ostream& o,
               const ::st434::s377m::groups::SegmentType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Segment (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Segment (::std::ostream& o,
               const ::st434::s377m::groups::SegmentType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Segment (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Segment (::std::ostream& o,
               const ::st434::s377m::groups::SegmentType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Segment (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Segment (::xercesc::XMLFormatTarget& t,
               const ::st434::s377m::groups::SegmentType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Segment (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Segment (::xercesc::XMLFormatTarget& t,
               const ::st434::s377m::groups::SegmentType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Segment (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Segment (::xercesc::XMLFormatTarget& t,
               const ::st434::s377m::groups::SegmentType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Segment (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Segment (::xercesc::DOMDocument& d,
               const ::st434::s377m::groups::SegmentType& s,
               ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Segment" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Segment",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Segment (const ::st434::s377m::groups::SegmentType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Segment",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::Segment (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const SegmentType& i)
      {
        e << static_cast< const ::st434::s377m::groups::ComponentType& > (i);
      }

      void
      SourceReference (::std::ostream& o,
                       const ::st434::s377m::groups::SourceReferenceType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourceReference (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SourceReference (::std::ostream& o,
                       const ::st434::s377m::groups::SourceReferenceType& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourceReference (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SourceReference (::std::ostream& o,
                       const ::st434::s377m::groups::SourceReferenceType& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourceReference (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SourceReference (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::groups::SourceReferenceType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourceReference (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SourceReference (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::groups::SourceReferenceType& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourceReference (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SourceReference (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::groups::SourceReferenceType& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourceReference (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SourceReference (::xercesc::DOMDocument& d,
                       const ::st434::s377m::groups::SourceReferenceType& s,
                       ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SourceReference" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SourceReference",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SourceReference (const ::st434::s377m::groups::SourceReferenceType& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "SourceReference",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::SourceReference (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const SourceReferenceType& i)
      {
        e << static_cast< const ::st434::s377m::groups::SegmentType& > (i);

        // SourcePackageID
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SourcePackageID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.SourcePackageID ();
        }

        // SourceTrackID
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SourceTrackID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.SourceTrackID ();
        }

        // ChannelIDs
        //
        if (i.ChannelIDs ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ChannelIDs",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ChannelIDs ();
        }

        // MonoSourceTrackIDs
        //
        if (i.MonoSourceTrackIDs ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MonoSourceTrackIDs",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.MonoSourceTrackIDs ();
        }
      }

      void
      DMS1Event (::std::ostream& o,
                 const ::st434::s377m::groups::DMS1EventType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DMS1Event (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DMS1Event (::std::ostream& o,
                 const ::st434::s377m::groups::DMS1EventType& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DMS1Event (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Event (::std::ostream& o,
                 const ::st434::s377m::groups::DMS1EventType& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DMS1Event (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Event (::xercesc::XMLFormatTarget& t,
                 const ::st434::s377m::groups::DMS1EventType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DMS1Event (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DMS1Event (::xercesc::XMLFormatTarget& t,
                 const ::st434::s377m::groups::DMS1EventType& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DMS1Event (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Event (::xercesc::XMLFormatTarget& t,
                 const ::st434::s377m::groups::DMS1EventType& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DMS1Event (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DMS1Event (::xercesc::DOMDocument& d,
                 const ::st434::s377m::groups::DMS1EventType& s,
                 ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DMS1Event" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DMS1Event",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DMS1Event (const ::st434::s377m::groups::DMS1EventType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "DMS1Event",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::DMS1Event (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const DMS1EventType& i)
      {
        e << static_cast< const ::st434::s377m::groups::SegmentType& > (i);

        // EventPosition
        //
        if (i.EventPosition ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EventPosition",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.EventPosition ();
        }

        // EventComment
        //
        if (i.EventComment ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EventComment",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.EventComment ();
        }
      }

      void
      CommentMarker (::std::ostream& o,
                     const ::st434::s377m::groups::CommentMarkerType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::CommentMarker (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      CommentMarker (::std::ostream& o,
                     const ::st434::s377m::groups::CommentMarkerType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::CommentMarker (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CommentMarker (::std::ostream& o,
                     const ::st434::s377m::groups::CommentMarkerType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::CommentMarker (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CommentMarker (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::groups::CommentMarkerType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::CommentMarker (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      CommentMarker (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::groups::CommentMarkerType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::CommentMarker (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CommentMarker (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::groups::CommentMarkerType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::CommentMarker (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CommentMarker (::xercesc::DOMDocument& d,
                     const ::st434::s377m::groups::CommentMarkerType& s,
                     ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CommentMarker" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "CommentMarker",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      CommentMarker (const ::st434::s377m::groups::CommentMarkerType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "CommentMarker",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::CommentMarker (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const CommentMarkerType& i)
      {
        e << static_cast< const ::st434::s377m::groups::DMS1EventType& > (i);
      }

      void
      GenericDescriptor (::std::ostream& o,
                         const ::st434::s377m::groups::GenericDescriptorType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::GenericDescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      GenericDescriptor (::std::ostream& o,
                         const ::st434::s377m::groups::GenericDescriptorType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::GenericDescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      GenericDescriptor (::std::ostream& o,
                         const ::st434::s377m::groups::GenericDescriptorType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::GenericDescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      GenericDescriptor (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::groups::GenericDescriptorType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::GenericDescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      GenericDescriptor (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::groups::GenericDescriptorType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::GenericDescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      GenericDescriptor (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::groups::GenericDescriptorType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::GenericDescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      GenericDescriptor (::xercesc::DOMDocument& d,
                         const ::st434::s377m::groups::GenericDescriptorType& s,
                         ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "GenericDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "GenericDescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      GenericDescriptor (const ::st434::s377m::groups::GenericDescriptorType& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "GenericDescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::GenericDescriptor (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const GenericDescriptorType& i)
      {
        e << static_cast< const ::st434::s377m::groups::InterchangeObjectType& > (i);

        // Locators
        //
        if (i.Locators ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Locators",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.Locators ();
        }

        // SubDescriptors
        //
        if (i.SubDescriptors ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SubDescriptors",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.SubDescriptors ();
        }
      }

      void
      PhysicalDescriptor (::std::ostream& o,
                          const ::st434::s377m::groups::PhysicalDescriptorType& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PhysicalDescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      PhysicalDescriptor (::std::ostream& o,
                          const ::st434::s377m::groups::PhysicalDescriptorType& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PhysicalDescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PhysicalDescriptor (::std::ostream& o,
                          const ::st434::s377m::groups::PhysicalDescriptorType& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PhysicalDescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PhysicalDescriptor (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::groups::PhysicalDescriptorType& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PhysicalDescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      PhysicalDescriptor (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::groups::PhysicalDescriptorType& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PhysicalDescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PhysicalDescriptor (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::groups::PhysicalDescriptorType& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PhysicalDescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PhysicalDescriptor (::xercesc::DOMDocument& d,
                          const ::st434::s377m::groups::PhysicalDescriptorType& s,
                          ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PhysicalDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "PhysicalDescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      PhysicalDescriptor (const ::st434::s377m::groups::PhysicalDescriptorType& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "PhysicalDescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::PhysicalDescriptor (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const PhysicalDescriptorType& i)
      {
        e << static_cast< const ::st434::s377m::groups::GenericDescriptorType& > (i);
      }

      void
      Locator (::std::ostream& o,
               const ::st434::s377m::groups::LocatorType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Locator (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Locator (::std::ostream& o,
               const ::st434::s377m::groups::LocatorType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Locator (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Locator (::std::ostream& o,
               const ::st434::s377m::groups::LocatorType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Locator (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Locator (::xercesc::XMLFormatTarget& t,
               const ::st434::s377m::groups::LocatorType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Locator (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Locator (::xercesc::XMLFormatTarget& t,
               const ::st434::s377m::groups::LocatorType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Locator (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Locator (::xercesc::XMLFormatTarget& t,
               const ::st434::s377m::groups::LocatorType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Locator (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Locator (::xercesc::DOMDocument& d,
               const ::st434::s377m::groups::LocatorType& s,
               ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Locator" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Locator",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Locator (const ::st434::s377m::groups::LocatorType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Locator",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::Locator (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const LocatorType& i)
      {
        e << static_cast< const ::st434::s377m::groups::InterchangeObjectType& > (i);
      }

      void
      Preface_REF (::std::ostream& o,
                   const ::st434::s377m::types::Ref& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Preface_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Preface_REF (::std::ostream& o,
                   const ::st434::s377m::types::Ref& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Preface_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Preface_REF (::std::ostream& o,
                   const ::st434::s377m::types::Ref& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Preface_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Preface_REF (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::types::Ref& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Preface_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Preface_REF (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::types::Ref& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Preface_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Preface_REF (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::types::Ref& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Preface_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Preface_REF (::xercesc::DOMDocument& d,
                   const ::st434::s377m::types::Ref& s,
                   ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Preface_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Preface_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Preface_REF (const ::st434::s377m::types::Ref& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Preface_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::Preface_REF (*d, s, f);
        return d;
      }

      void
      Preface (::std::ostream& o,
               const ::st434::s377m::groups::PrefaceType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Preface (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Preface (::std::ostream& o,
               const ::st434::s377m::groups::PrefaceType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Preface (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Preface (::std::ostream& o,
               const ::st434::s377m::groups::PrefaceType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Preface (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Preface (::xercesc::XMLFormatTarget& t,
               const ::st434::s377m::groups::PrefaceType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Preface (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Preface (::xercesc::XMLFormatTarget& t,
               const ::st434::s377m::groups::PrefaceType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Preface (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Preface (::xercesc::XMLFormatTarget& t,
               const ::st434::s377m::groups::PrefaceType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Preface (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Preface (::xercesc::DOMDocument& d,
               const ::st434::s377m::groups::PrefaceType& s,
               ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Preface" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Preface",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Preface (const ::st434::s377m::groups::PrefaceType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Preface",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::Preface (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const PrefaceType& i)
      {
        e << static_cast< const ::st434::s377m::groups::InterchangeObjectType& > (i);

        // FileLastModified
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FileLastModified",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.FileLastModified ();
        }

        // FormatVersion
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FormatVersion",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.FormatVersion ();
        }

        // ObjectModelVersion
        //
        if (i.ObjectModelVersion ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ObjectModelVersion",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ObjectModelVersion ();
        }

        // PrimaryPackage
        //
        if (i.PrimaryPackage ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PrimaryPackage",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.PrimaryPackage ();
        }

        // IdentificationList
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IdentificationList",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.IdentificationList ();
        }

        // ContentStorageObject
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ContentStorageObject",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.ContentStorageObject ();
        }

        // OperationalPattern
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OperationalPattern",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.OperationalPattern ();
        }

        // EssenceContainers
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EssenceContainers",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.EssenceContainers ();
        }

        // DescriptiveSchemes
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DescriptiveSchemes",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.DescriptiveSchemes ();
        }
      }

      void
      Identification_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Identification_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Identification_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Identification_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Identification_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Identification_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Identification_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Identification_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Identification_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Identification_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Identification_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Identification_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Identification_REF (::xercesc::DOMDocument& d,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Identification_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Identification_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Identification_REF (const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Identification_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::Identification_REF (*d, s, f);
        return d;
      }

      void
      Identification (::std::ostream& o,
                      const ::st434::s377m::groups::IdentificationType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Identification (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Identification (::std::ostream& o,
                      const ::st434::s377m::groups::IdentificationType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Identification (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Identification (::std::ostream& o,
                      const ::st434::s377m::groups::IdentificationType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Identification (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Identification (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::IdentificationType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Identification (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Identification (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::IdentificationType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Identification (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Identification (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::IdentificationType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Identification (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Identification (::xercesc::DOMDocument& d,
                      const ::st434::s377m::groups::IdentificationType& s,
                      ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Identification" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Identification",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Identification (const ::st434::s377m::groups::IdentificationType& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Identification",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::Identification (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const IdentificationType& i)
      {
        e << static_cast< const ::st434::s377m::groups::AbstractSetType& > (i);

        // GenerationID
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "GenerationID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.GenerationID ();
        }

        // ApplicationSupplierName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ApplicationSupplierName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.ApplicationSupplierName ();
        }

        // ApplicationName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ApplicationName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.ApplicationName ();
        }

        // ApplicationVersion
        //
        if (i.ApplicationVersion ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ApplicationVersion",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ApplicationVersion ();
        }

        // ApplicationVersionString
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ApplicationVersionString",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.ApplicationVersionString ();
        }

        // ApplicationProductID
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ApplicationProductID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.ApplicationProductID ();
        }

        // FileModificationDate
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FileModificationDate",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.FileModificationDate ();
        }

        // ToolkitVersion
        //
        if (i.ToolkitVersion ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ToolkitVersion",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ToolkitVersion ();
        }

        // ApplicationPlatform
        //
        if (i.ApplicationPlatform ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ApplicationPlatform",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ApplicationPlatform ();
        }
      }

      void
      ContentStorage_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ContentStorage_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      ContentStorage_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ContentStorage_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ContentStorage_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ContentStorage_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ContentStorage_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ContentStorage_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      ContentStorage_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ContentStorage_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ContentStorage_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ContentStorage_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ContentStorage_REF (::xercesc::DOMDocument& d,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ContentStorage_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ContentStorage_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      ContentStorage_REF (const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "ContentStorage_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::ContentStorage_REF (*d, s, f);
        return d;
      }

      void
      ContentStorage (::std::ostream& o,
                      const ::st434::s377m::groups::ContentStorageType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ContentStorage (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      ContentStorage (::std::ostream& o,
                      const ::st434::s377m::groups::ContentStorageType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ContentStorage (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ContentStorage (::std::ostream& o,
                      const ::st434::s377m::groups::ContentStorageType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ContentStorage (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ContentStorage (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::ContentStorageType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ContentStorage (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      ContentStorage (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::ContentStorageType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ContentStorage (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ContentStorage (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::ContentStorageType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::ContentStorage (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      ContentStorage (::xercesc::DOMDocument& d,
                      const ::st434::s377m::groups::ContentStorageType& s,
                      ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ContentStorage" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ContentStorage",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      ContentStorage (const ::st434::s377m::groups::ContentStorageType& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "ContentStorage",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::ContentStorage (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const ContentStorageType& i)
      {
        e << static_cast< const ::st434::s377m::groups::InterchangeObjectType& > (i);

        // Packages
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Packages",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.Packages ();
        }

        // EssenceDataObjects
        //
        if (i.EssenceDataObjects ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EssenceDataObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.EssenceDataObjects ();
        }
      }

      void
      EssenceData_REF (::std::ostream& o,
                       const ::st434::s377m::types::Ref& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EssenceData_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      EssenceData_REF (::std::ostream& o,
                       const ::st434::s377m::types::Ref& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EssenceData_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      EssenceData_REF (::std::ostream& o,
                       const ::st434::s377m::types::Ref& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EssenceData_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      EssenceData_REF (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::types::Ref& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EssenceData_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      EssenceData_REF (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::types::Ref& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EssenceData_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      EssenceData_REF (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::types::Ref& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EssenceData_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      EssenceData_REF (::xercesc::DOMDocument& d,
                       const ::st434::s377m::types::Ref& s,
                       ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "EssenceData_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "EssenceData_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      EssenceData_REF (const ::st434::s377m::types::Ref& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "EssenceData_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::EssenceData_REF (*d, s, f);
        return d;
      }

      void
      EssenceData (::std::ostream& o,
                   const ::st434::s377m::groups::EssenceDataType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EssenceData (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      EssenceData (::std::ostream& o,
                   const ::st434::s377m::groups::EssenceDataType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EssenceData (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      EssenceData (::std::ostream& o,
                   const ::st434::s377m::groups::EssenceDataType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EssenceData (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      EssenceData (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::groups::EssenceDataType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EssenceData (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      EssenceData (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::groups::EssenceDataType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EssenceData (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      EssenceData (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::groups::EssenceDataType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EssenceData (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      EssenceData (::xercesc::DOMDocument& d,
                   const ::st434::s377m::groups::EssenceDataType& s,
                   ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "EssenceData" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "EssenceData",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      EssenceData (const ::st434::s377m::groups::EssenceDataType& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "EssenceData",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::EssenceData (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const EssenceDataType& i)
      {
        e << static_cast< const ::st434::s377m::groups::InterchangeObjectType& > (i);

        // LinkedPackageID
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LinkedPackageID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.LinkedPackageID ();
        }

        // IndexStreamID
        //
        if (i.IndexStreamID ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IndexStreamID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.IndexStreamID ();
        }

        // EssenceStreamID
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EssenceStreamID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.EssenceStreamID ();
        }
      }

      void
      NetworkLocator_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::NetworkLocator_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      NetworkLocator_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::NetworkLocator_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      NetworkLocator_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::NetworkLocator_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      NetworkLocator_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::NetworkLocator_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      NetworkLocator_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::NetworkLocator_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      NetworkLocator_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::NetworkLocator_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      NetworkLocator_REF (::xercesc::DOMDocument& d,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "NetworkLocator_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "NetworkLocator_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      NetworkLocator_REF (const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "NetworkLocator_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::NetworkLocator_REF (*d, s, f);
        return d;
      }

      void
      NetworkLocator (::std::ostream& o,
                      const ::st434::s377m::groups::NetworkLocatorType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::NetworkLocator (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      NetworkLocator (::std::ostream& o,
                      const ::st434::s377m::groups::NetworkLocatorType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::NetworkLocator (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      NetworkLocator (::std::ostream& o,
                      const ::st434::s377m::groups::NetworkLocatorType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::NetworkLocator (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      NetworkLocator (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::NetworkLocatorType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::NetworkLocator (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      NetworkLocator (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::NetworkLocatorType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::NetworkLocator (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      NetworkLocator (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::NetworkLocatorType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::NetworkLocator (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      NetworkLocator (::xercesc::DOMDocument& d,
                      const ::st434::s377m::groups::NetworkLocatorType& s,
                      ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "NetworkLocator" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "NetworkLocator",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      NetworkLocator (const ::st434::s377m::groups::NetworkLocatorType& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "NetworkLocator",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::NetworkLocator (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const NetworkLocatorType& i)
      {
        e << static_cast< const ::st434::s377m::groups::LocatorType& > (i);

        // URL
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "URL",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.URL ();
        }
      }

      void
      TextLocator_REF (::std::ostream& o,
                       const ::st434::s377m::types::Ref& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TextLocator_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      TextLocator_REF (::std::ostream& o,
                       const ::st434::s377m::types::Ref& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TextLocator_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      TextLocator_REF (::std::ostream& o,
                       const ::st434::s377m::types::Ref& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TextLocator_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      TextLocator_REF (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::types::Ref& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TextLocator_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      TextLocator_REF (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::types::Ref& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TextLocator_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      TextLocator_REF (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::types::Ref& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TextLocator_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      TextLocator_REF (::xercesc::DOMDocument& d,
                       const ::st434::s377m::types::Ref& s,
                       ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "TextLocator_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "TextLocator_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      TextLocator_REF (const ::st434::s377m::types::Ref& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "TextLocator_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::TextLocator_REF (*d, s, f);
        return d;
      }

      void
      TextLocator (::std::ostream& o,
                   const ::st434::s377m::groups::TextLocatorType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TextLocator (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      TextLocator (::std::ostream& o,
                   const ::st434::s377m::groups::TextLocatorType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TextLocator (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      TextLocator (::std::ostream& o,
                   const ::st434::s377m::groups::TextLocatorType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TextLocator (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      TextLocator (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::groups::TextLocatorType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TextLocator (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      TextLocator (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::groups::TextLocatorType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TextLocator (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      TextLocator (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::groups::TextLocatorType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TextLocator (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      TextLocator (::xercesc::DOMDocument& d,
                   const ::st434::s377m::groups::TextLocatorType& s,
                   ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "TextLocator" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "TextLocator",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      TextLocator (const ::st434::s377m::groups::TextLocatorType& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "TextLocator",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::TextLocator (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const TextLocatorType& i)
      {
        e << static_cast< const ::st434::s377m::groups::LocatorType& > (i);

        // LocationName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LocationName",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.LocationName ();
        }
      }

      void
      TimelineTrack_REF (::std::ostream& o,
                         const ::st434::s377m::types::Ref& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TimelineTrack_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      TimelineTrack_REF (::std::ostream& o,
                         const ::st434::s377m::types::Ref& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TimelineTrack_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      TimelineTrack_REF (::std::ostream& o,
                         const ::st434::s377m::types::Ref& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TimelineTrack_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      TimelineTrack_REF (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::types::Ref& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TimelineTrack_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      TimelineTrack_REF (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::types::Ref& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TimelineTrack_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      TimelineTrack_REF (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::types::Ref& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TimelineTrack_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      TimelineTrack_REF (::xercesc::DOMDocument& d,
                         const ::st434::s377m::types::Ref& s,
                         ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "TimelineTrack_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "TimelineTrack_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      TimelineTrack_REF (const ::st434::s377m::types::Ref& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "TimelineTrack_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::TimelineTrack_REF (*d, s, f);
        return d;
      }

      void
      TimelineTrack (::std::ostream& o,
                     const ::st434::s377m::groups::TimelineTrackType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TimelineTrack (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      TimelineTrack (::std::ostream& o,
                     const ::st434::s377m::groups::TimelineTrackType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TimelineTrack (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      TimelineTrack (::std::ostream& o,
                     const ::st434::s377m::groups::TimelineTrackType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TimelineTrack (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      TimelineTrack (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::groups::TimelineTrackType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TimelineTrack (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      TimelineTrack (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::groups::TimelineTrackType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TimelineTrack (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      TimelineTrack (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::groups::TimelineTrackType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::TimelineTrack (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      TimelineTrack (::xercesc::DOMDocument& d,
                     const ::st434::s377m::groups::TimelineTrackType& s,
                     ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "TimelineTrack" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "TimelineTrack",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      TimelineTrack (const ::st434::s377m::groups::TimelineTrackType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "TimelineTrack",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::TimelineTrack (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const TimelineTrackType& i)
      {
        e << static_cast< const ::st434::s377m::groups::TrackType& > (i);

        // EditRate
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EditRate",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.EditRate ();
        }

        // Origin
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Origin",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.Origin ();
        }
      }

      void
      EventTrack_REF (::std::ostream& o,
                      const ::st434::s377m::types::Ref& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EventTrack_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      EventTrack_REF (::std::ostream& o,
                      const ::st434::s377m::types::Ref& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EventTrack_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      EventTrack_REF (::std::ostream& o,
                      const ::st434::s377m::types::Ref& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EventTrack_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      EventTrack_REF (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::types::Ref& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EventTrack_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      EventTrack_REF (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::types::Ref& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EventTrack_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      EventTrack_REF (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::types::Ref& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EventTrack_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      EventTrack_REF (::xercesc::DOMDocument& d,
                      const ::st434::s377m::types::Ref& s,
                      ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "EventTrack_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "EventTrack_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      EventTrack_REF (const ::st434::s377m::types::Ref& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "EventTrack_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::EventTrack_REF (*d, s, f);
        return d;
      }

      void
      EventTrack (::std::ostream& o,
                  const ::st434::s377m::groups::EventTrackType& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EventTrack (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      EventTrack (::std::ostream& o,
                  const ::st434::s377m::groups::EventTrackType& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EventTrack (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      EventTrack (::std::ostream& o,
                  const ::st434::s377m::groups::EventTrackType& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EventTrack (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      EventTrack (::xercesc::XMLFormatTarget& t,
                  const ::st434::s377m::groups::EventTrackType& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EventTrack (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      EventTrack (::xercesc::XMLFormatTarget& t,
                  const ::st434::s377m::groups::EventTrackType& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EventTrack (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      EventTrack (::xercesc::XMLFormatTarget& t,
                  const ::st434::s377m::groups::EventTrackType& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::EventTrack (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      EventTrack (::xercesc::DOMDocument& d,
                  const ::st434::s377m::groups::EventTrackType& s,
                  ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "EventTrack" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "EventTrack",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      EventTrack (const ::st434::s377m::groups::EventTrackType& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "EventTrack",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::EventTrack (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const EventTrackType& i)
      {
        e << static_cast< const ::st434::s377m::groups::TrackType& > (i);

        // EventTrackEditRate
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EventTrackEditRate",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.EventTrackEditRate ();
        }

        // EventTrackOrigin
        //
        if (i.EventTrackOrigin ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EventTrackOrigin",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.EventTrackOrigin ();
        }
      }

      void
      StaticTrack_REF (::std::ostream& o,
                       const ::st434::s377m::types::Ref& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::StaticTrack_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      StaticTrack_REF (::std::ostream& o,
                       const ::st434::s377m::types::Ref& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::StaticTrack_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      StaticTrack_REF (::std::ostream& o,
                       const ::st434::s377m::types::Ref& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::StaticTrack_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      StaticTrack_REF (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::types::Ref& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::StaticTrack_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      StaticTrack_REF (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::types::Ref& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::StaticTrack_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      StaticTrack_REF (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::types::Ref& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::StaticTrack_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      StaticTrack_REF (::xercesc::DOMDocument& d,
                       const ::st434::s377m::types::Ref& s,
                       ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "StaticTrack_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "StaticTrack_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      StaticTrack_REF (const ::st434::s377m::types::Ref& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "StaticTrack_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::StaticTrack_REF (*d, s, f);
        return d;
      }

      void
      StaticTrack (::std::ostream& o,
                   const ::st434::s377m::groups::StaticTrackType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::StaticTrack (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      StaticTrack (::std::ostream& o,
                   const ::st434::s377m::groups::StaticTrackType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::StaticTrack (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      StaticTrack (::std::ostream& o,
                   const ::st434::s377m::groups::StaticTrackType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::StaticTrack (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      StaticTrack (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::groups::StaticTrackType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::StaticTrack (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      StaticTrack (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::groups::StaticTrackType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::StaticTrack (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      StaticTrack (::xercesc::XMLFormatTarget& t,
                   const ::st434::s377m::groups::StaticTrackType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::StaticTrack (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      StaticTrack (::xercesc::DOMDocument& d,
                   const ::st434::s377m::groups::StaticTrackType& s,
                   ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "StaticTrack" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "StaticTrack",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      StaticTrack (const ::st434::s377m::groups::StaticTrackType& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "StaticTrack",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::StaticTrack (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const StaticTrackType& i)
      {
        e << static_cast< const ::st434::s377m::groups::TrackType& > (i);
      }

      void
      Sequence_REF (::std::ostream& o,
                    const ::st434::s377m::types::Ref& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Sequence_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Sequence_REF (::std::ostream& o,
                    const ::st434::s377m::types::Ref& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Sequence_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Sequence_REF (::std::ostream& o,
                    const ::st434::s377m::types::Ref& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Sequence_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Sequence_REF (::xercesc::XMLFormatTarget& t,
                    const ::st434::s377m::types::Ref& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Sequence_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Sequence_REF (::xercesc::XMLFormatTarget& t,
                    const ::st434::s377m::types::Ref& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Sequence_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Sequence_REF (::xercesc::XMLFormatTarget& t,
                    const ::st434::s377m::types::Ref& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Sequence_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Sequence_REF (::xercesc::DOMDocument& d,
                    const ::st434::s377m::types::Ref& s,
                    ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Sequence_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Sequence_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Sequence_REF (const ::st434::s377m::types::Ref& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Sequence_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::Sequence_REF (*d, s, f);
        return d;
      }

      void
      Sequence (::std::ostream& o,
                const ::st434::s377m::groups::SequenceType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Sequence (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Sequence (::std::ostream& o,
                const ::st434::s377m::groups::SequenceType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Sequence (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Sequence (::std::ostream& o,
                const ::st434::s377m::groups::SequenceType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Sequence (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Sequence (::xercesc::XMLFormatTarget& t,
                const ::st434::s377m::groups::SequenceType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Sequence (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Sequence (::xercesc::XMLFormatTarget& t,
                const ::st434::s377m::groups::SequenceType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Sequence (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Sequence (::xercesc::XMLFormatTarget& t,
                const ::st434::s377m::groups::SequenceType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Sequence (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Sequence (::xercesc::DOMDocument& d,
                const ::st434::s377m::groups::SequenceType& s,
                ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Sequence" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Sequence",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Sequence (const ::st434::s377m::groups::SequenceType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Sequence",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::Sequence (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const SequenceType& i)
      {
        e << static_cast< const ::st434::s377m::groups::SegmentType& > (i);

        // ComponentObjects
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ComponentObjects",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.ComponentObjects ();
        }
      }

      void
      Timecode_REF (::std::ostream& o,
                    const ::st434::s377m::types::Ref& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Timecode_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Timecode_REF (::std::ostream& o,
                    const ::st434::s377m::types::Ref& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Timecode_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Timecode_REF (::std::ostream& o,
                    const ::st434::s377m::types::Ref& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Timecode_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Timecode_REF (::xercesc::XMLFormatTarget& t,
                    const ::st434::s377m::types::Ref& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Timecode_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Timecode_REF (::xercesc::XMLFormatTarget& t,
                    const ::st434::s377m::types::Ref& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Timecode_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Timecode_REF (::xercesc::XMLFormatTarget& t,
                    const ::st434::s377m::types::Ref& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Timecode_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Timecode_REF (::xercesc::DOMDocument& d,
                    const ::st434::s377m::types::Ref& s,
                    ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Timecode_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Timecode_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Timecode_REF (const ::st434::s377m::types::Ref& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Timecode_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::Timecode_REF (*d, s, f);
        return d;
      }

      void
      Timecode (::std::ostream& o,
                const ::st434::s377m::groups::TimecodeType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Timecode (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Timecode (::std::ostream& o,
                const ::st434::s377m::groups::TimecodeType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Timecode (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Timecode (::std::ostream& o,
                const ::st434::s377m::groups::TimecodeType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Timecode (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Timecode (::xercesc::XMLFormatTarget& t,
                const ::st434::s377m::groups::TimecodeType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Timecode (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      Timecode (::xercesc::XMLFormatTarget& t,
                const ::st434::s377m::groups::TimecodeType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Timecode (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Timecode (::xercesc::XMLFormatTarget& t,
                const ::st434::s377m::groups::TimecodeType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::Timecode (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      Timecode (::xercesc::DOMDocument& d,
                const ::st434::s377m::groups::TimecodeType& s,
                ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Timecode" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Timecode",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      Timecode (const ::st434::s377m::groups::TimecodeType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "Timecode",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::Timecode (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const TimecodeType& i)
      {
        e << static_cast< const ::st434::s377m::groups::SegmentType& > (i);

        // StartTimecode
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StartTimecode",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.StartTimecode ();
        }

        // FramesPerSecond
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FramesPerSecond",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.FramesPerSecond ();
        }

        // DropFrame
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DropFrame",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.DropFrame ();
        }
      }

      void
      DescriptiveMarker_REF (::std::ostream& o,
                             const ::st434::s377m::types::Ref& s,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveMarker_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DescriptiveMarker_REF (::std::ostream& o,
                             const ::st434::s377m::types::Ref& s,
                             ::xml_schema::error_handler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveMarker_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveMarker_REF (::std::ostream& o,
                             const ::st434::s377m::types::Ref& s,
                             ::xercesc::DOMErrorHandler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveMarker_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveMarker_REF (::xercesc::XMLFormatTarget& t,
                             const ::st434::s377m::types::Ref& s,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveMarker_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DescriptiveMarker_REF (::xercesc::XMLFormatTarget& t,
                             const ::st434::s377m::types::Ref& s,
                             ::xml_schema::error_handler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveMarker_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveMarker_REF (::xercesc::XMLFormatTarget& t,
                             const ::st434::s377m::types::Ref& s,
                             ::xercesc::DOMErrorHandler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveMarker_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveMarker_REF (::xercesc::DOMDocument& d,
                             const ::st434::s377m::types::Ref& s,
                             ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DescriptiveMarker_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DescriptiveMarker_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DescriptiveMarker_REF (const ::st434::s377m::types::Ref& s,
                             const ::xml_schema::namespace_infomap& m,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "DescriptiveMarker_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::DescriptiveMarker_REF (*d, s, f);
        return d;
      }

      void
      DescriptiveMarker (::std::ostream& o,
                         const ::st434::s377m::groups::DescriptiveMarkerType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveMarker (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DescriptiveMarker (::std::ostream& o,
                         const ::st434::s377m::groups::DescriptiveMarkerType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveMarker (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveMarker (::std::ostream& o,
                         const ::st434::s377m::groups::DescriptiveMarkerType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveMarker (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveMarker (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::groups::DescriptiveMarkerType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveMarker (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DescriptiveMarker (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::groups::DescriptiveMarkerType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveMarker (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveMarker (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::groups::DescriptiveMarkerType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveMarker (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveMarker (::xercesc::DOMDocument& d,
                         const ::st434::s377m::groups::DescriptiveMarkerType& s,
                         ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DescriptiveMarker" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DescriptiveMarker",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DescriptiveMarker (const ::st434::s377m::groups::DescriptiveMarkerType& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "DescriptiveMarker",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::DescriptiveMarker (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const DescriptiveMarkerType& i)
      {
        e << static_cast< const ::st434::s377m::groups::CommentMarkerType& > (i);

        // DescribedTrackIDs
        //
        if (i.DescribedTrackIDs ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DescribedTrackIDs",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DescribedTrackIDs ();
        }

        // DescriptiveFrameworkObject
        //
        if (i.DescriptiveFrameworkObject ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DescriptiveFrameworkObject",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DescriptiveFrameworkObject ();
        }
      }

      void
      SourceClip_REF (::std::ostream& o,
                      const ::st434::s377m::types::Ref& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourceClip_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SourceClip_REF (::std::ostream& o,
                      const ::st434::s377m::types::Ref& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourceClip_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SourceClip_REF (::std::ostream& o,
                      const ::st434::s377m::types::Ref& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourceClip_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SourceClip_REF (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::types::Ref& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourceClip_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SourceClip_REF (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::types::Ref& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourceClip_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SourceClip_REF (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::types::Ref& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourceClip_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SourceClip_REF (::xercesc::DOMDocument& d,
                      const ::st434::s377m::types::Ref& s,
                      ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SourceClip_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SourceClip_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SourceClip_REF (const ::st434::s377m::types::Ref& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "SourceClip_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::SourceClip_REF (*d, s, f);
        return d;
      }

      void
      SourceClip (::std::ostream& o,
                  const ::st434::s377m::groups::SourceClipType& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourceClip (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SourceClip (::std::ostream& o,
                  const ::st434::s377m::groups::SourceClipType& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourceClip (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SourceClip (::std::ostream& o,
                  const ::st434::s377m::groups::SourceClipType& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourceClip (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SourceClip (::xercesc::XMLFormatTarget& t,
                  const ::st434::s377m::groups::SourceClipType& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourceClip (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SourceClip (::xercesc::XMLFormatTarget& t,
                  const ::st434::s377m::groups::SourceClipType& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourceClip (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SourceClip (::xercesc::XMLFormatTarget& t,
                  const ::st434::s377m::groups::SourceClipType& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourceClip (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SourceClip (::xercesc::DOMDocument& d,
                  const ::st434::s377m::groups::SourceClipType& s,
                  ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SourceClip" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SourceClip",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SourceClip (const ::st434::s377m::groups::SourceClipType& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "SourceClip",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::SourceClip (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const SourceClipType& i)
      {
        e << static_cast< const ::st434::s377m::groups::SourceReferenceType& > (i);

        // StartPosition
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StartPosition",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.StartPosition ();
        }
      }

      void
      DescriptiveClip_REF (::std::ostream& o,
                           const ::st434::s377m::types::Ref& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveClip_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DescriptiveClip_REF (::std::ostream& o,
                           const ::st434::s377m::types::Ref& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveClip_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveClip_REF (::std::ostream& o,
                           const ::st434::s377m::types::Ref& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveClip_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveClip_REF (::xercesc::XMLFormatTarget& t,
                           const ::st434::s377m::types::Ref& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveClip_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DescriptiveClip_REF (::xercesc::XMLFormatTarget& t,
                           const ::st434::s377m::types::Ref& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveClip_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveClip_REF (::xercesc::XMLFormatTarget& t,
                           const ::st434::s377m::types::Ref& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveClip_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveClip_REF (::xercesc::DOMDocument& d,
                           const ::st434::s377m::types::Ref& s,
                           ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DescriptiveClip_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DescriptiveClip_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DescriptiveClip_REF (const ::st434::s377m::types::Ref& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "DescriptiveClip_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::DescriptiveClip_REF (*d, s, f);
        return d;
      }

      void
      DescriptiveClip (::std::ostream& o,
                       const ::st434::s377m::groups::DescriptiveClipType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveClip (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DescriptiveClip (::std::ostream& o,
                       const ::st434::s377m::groups::DescriptiveClipType& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveClip (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveClip (::std::ostream& o,
                       const ::st434::s377m::groups::DescriptiveClipType& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveClip (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveClip (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::groups::DescriptiveClipType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveClip (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DescriptiveClip (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::groups::DescriptiveClipType& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveClip (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveClip (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::groups::DescriptiveClipType& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DescriptiveClip (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DescriptiveClip (::xercesc::DOMDocument& d,
                       const ::st434::s377m::groups::DescriptiveClipType& s,
                       ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DescriptiveClip" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DescriptiveClip",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DescriptiveClip (const ::st434::s377m::groups::DescriptiveClipType& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "DescriptiveClip",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::DescriptiveClip (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const DescriptiveClipType& i)
      {
        e << static_cast< const ::st434::s377m::groups::SegmentType& > (i);

        // SourcePackageID
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SourcePackageID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.SourcePackageID ();
        }

        // SourceTrackID
        //
        if (i.SourceTrackID ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SourceTrackID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.SourceTrackID ();
        }

        // StartPosition
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StartPosition",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.StartPosition ();
        }

        // DescriptiveClipDescribedTrackIDs
        //
        if (i.DescriptiveClipDescribedTrackIDs ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DescriptiveClipDescribedTrackIDs",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DescriptiveClipDescribedTrackIDs ();
        }
      }

      void
      MaterialPackage_REF (::std::ostream& o,
                           const ::st434::s377m::types::Ref& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MaterialPackage_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      MaterialPackage_REF (::std::ostream& o,
                           const ::st434::s377m::types::Ref& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MaterialPackage_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MaterialPackage_REF (::std::ostream& o,
                           const ::st434::s377m::types::Ref& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MaterialPackage_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MaterialPackage_REF (::xercesc::XMLFormatTarget& t,
                           const ::st434::s377m::types::Ref& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MaterialPackage_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      MaterialPackage_REF (::xercesc::XMLFormatTarget& t,
                           const ::st434::s377m::types::Ref& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MaterialPackage_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MaterialPackage_REF (::xercesc::XMLFormatTarget& t,
                           const ::st434::s377m::types::Ref& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MaterialPackage_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MaterialPackage_REF (::xercesc::DOMDocument& d,
                           const ::st434::s377m::types::Ref& s,
                           ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "MaterialPackage_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "MaterialPackage_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      MaterialPackage_REF (const ::st434::s377m::types::Ref& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "MaterialPackage_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::MaterialPackage_REF (*d, s, f);
        return d;
      }

      void
      MaterialPackage (::std::ostream& o,
                       const ::st434::s377m::groups::MaterialPackageType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MaterialPackage (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      MaterialPackage (::std::ostream& o,
                       const ::st434::s377m::groups::MaterialPackageType& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MaterialPackage (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MaterialPackage (::std::ostream& o,
                       const ::st434::s377m::groups::MaterialPackageType& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MaterialPackage (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MaterialPackage (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::groups::MaterialPackageType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MaterialPackage (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      MaterialPackage (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::groups::MaterialPackageType& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MaterialPackage (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MaterialPackage (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::groups::MaterialPackageType& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MaterialPackage (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MaterialPackage (::xercesc::DOMDocument& d,
                       const ::st434::s377m::groups::MaterialPackageType& s,
                       ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "MaterialPackage" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "MaterialPackage",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      MaterialPackage (const ::st434::s377m::groups::MaterialPackageType& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "MaterialPackage",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::MaterialPackage (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const MaterialPackageType& i)
      {
        e << static_cast< const ::st434::s377m::groups::PackageType& > (i);
      }

      void
      SourcePackage_REF (::std::ostream& o,
                         const ::st434::s377m::types::Ref& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourcePackage_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SourcePackage_REF (::std::ostream& o,
                         const ::st434::s377m::types::Ref& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourcePackage_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SourcePackage_REF (::std::ostream& o,
                         const ::st434::s377m::types::Ref& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourcePackage_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SourcePackage_REF (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::types::Ref& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourcePackage_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SourcePackage_REF (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::types::Ref& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourcePackage_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SourcePackage_REF (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::types::Ref& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourcePackage_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SourcePackage_REF (::xercesc::DOMDocument& d,
                         const ::st434::s377m::types::Ref& s,
                         ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SourcePackage_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SourcePackage_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SourcePackage_REF (const ::st434::s377m::types::Ref& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "SourcePackage_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::SourcePackage_REF (*d, s, f);
        return d;
      }

      void
      SourcePackage (::std::ostream& o,
                     const ::st434::s377m::groups::SourcePackageType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourcePackage (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SourcePackage (::std::ostream& o,
                     const ::st434::s377m::groups::SourcePackageType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourcePackage (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SourcePackage (::std::ostream& o,
                     const ::st434::s377m::groups::SourcePackageType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourcePackage (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SourcePackage (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::groups::SourcePackageType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourcePackage (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SourcePackage (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::groups::SourcePackageType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourcePackage (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SourcePackage (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::groups::SourcePackageType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SourcePackage (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SourcePackage (::xercesc::DOMDocument& d,
                     const ::st434::s377m::groups::SourcePackageType& s,
                     ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SourcePackage" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SourcePackage",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SourcePackage (const ::st434::s377m::groups::SourcePackageType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "SourcePackage",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::SourcePackage (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const SourcePackageType& i)
      {
        e << static_cast< const ::st434::s377m::groups::PackageType& > (i);

        // EssenceDescription
        //
        if (i.EssenceDescription ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EssenceDescription",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.EssenceDescription ();
        }
      }

      void
      FileDescriptor_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::FileDescriptor_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      FileDescriptor_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::FileDescriptor_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      FileDescriptor_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::FileDescriptor_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      FileDescriptor_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::FileDescriptor_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      FileDescriptor_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::FileDescriptor_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      FileDescriptor_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::FileDescriptor_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      FileDescriptor_REF (::xercesc::DOMDocument& d,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "FileDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "FileDescriptor_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      FileDescriptor_REF (const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "FileDescriptor_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::FileDescriptor_REF (*d, s, f);
        return d;
      }

      void
      FileDescriptor (::std::ostream& o,
                      const ::st434::s377m::groups::FileDescriptorType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::FileDescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      FileDescriptor (::std::ostream& o,
                      const ::st434::s377m::groups::FileDescriptorType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::FileDescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      FileDescriptor (::std::ostream& o,
                      const ::st434::s377m::groups::FileDescriptorType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::FileDescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      FileDescriptor (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::FileDescriptorType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::FileDescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      FileDescriptor (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::FileDescriptorType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::FileDescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      FileDescriptor (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::FileDescriptorType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::FileDescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      FileDescriptor (::xercesc::DOMDocument& d,
                      const ::st434::s377m::groups::FileDescriptorType& s,
                      ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "FileDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "FileDescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      FileDescriptor (const ::st434::s377m::groups::FileDescriptorType& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "FileDescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::FileDescriptor (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const FileDescriptorType& i)
      {
        e << static_cast< const ::st434::s377m::groups::GenericDescriptorType& > (i);

        // LinkedTrackID
        //
        if (i.LinkedTrackID ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LinkedTrackID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.LinkedTrackID ();
        }

        // SampleRate
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SampleRate",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.SampleRate ();
        }

        // EssenceLength
        //
        if (i.EssenceLength ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EssenceLength",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.EssenceLength ();
        }

        // ContainerFormat
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ContainerFormat",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.ContainerFormat ();
        }

        // Codec
        //
        if (i.Codec ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Codec",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.Codec ();
        }
      }

      void
      PictureDescriptor_REF (::std::ostream& o,
                             const ::st434::s377m::types::Ref& s,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PictureDescriptor_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      PictureDescriptor_REF (::std::ostream& o,
                             const ::st434::s377m::types::Ref& s,
                             ::xml_schema::error_handler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PictureDescriptor_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PictureDescriptor_REF (::std::ostream& o,
                             const ::st434::s377m::types::Ref& s,
                             ::xercesc::DOMErrorHandler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PictureDescriptor_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PictureDescriptor_REF (::xercesc::XMLFormatTarget& t,
                             const ::st434::s377m::types::Ref& s,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PictureDescriptor_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      PictureDescriptor_REF (::xercesc::XMLFormatTarget& t,
                             const ::st434::s377m::types::Ref& s,
                             ::xml_schema::error_handler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PictureDescriptor_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PictureDescriptor_REF (::xercesc::XMLFormatTarget& t,
                             const ::st434::s377m::types::Ref& s,
                             ::xercesc::DOMErrorHandler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PictureDescriptor_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PictureDescriptor_REF (::xercesc::DOMDocument& d,
                             const ::st434::s377m::types::Ref& s,
                             ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PictureDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "PictureDescriptor_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      PictureDescriptor_REF (const ::st434::s377m::types::Ref& s,
                             const ::xml_schema::namespace_infomap& m,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "PictureDescriptor_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::PictureDescriptor_REF (*d, s, f);
        return d;
      }

      void
      PictureDescriptor (::std::ostream& o,
                         const ::st434::s377m::groups::PictureDescriptorType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PictureDescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      PictureDescriptor (::std::ostream& o,
                         const ::st434::s377m::groups::PictureDescriptorType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PictureDescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PictureDescriptor (::std::ostream& o,
                         const ::st434::s377m::groups::PictureDescriptorType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PictureDescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PictureDescriptor (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::groups::PictureDescriptorType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PictureDescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      PictureDescriptor (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::groups::PictureDescriptorType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PictureDescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PictureDescriptor (::xercesc::XMLFormatTarget& t,
                         const ::st434::s377m::groups::PictureDescriptorType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PictureDescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PictureDescriptor (::xercesc::DOMDocument& d,
                         const ::st434::s377m::groups::PictureDescriptorType& s,
                         ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PictureDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "PictureDescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      PictureDescriptor (const ::st434::s377m::groups::PictureDescriptorType& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "PictureDescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::PictureDescriptor (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const PictureDescriptorType& i)
      {
        e << static_cast< const ::st434::s377m::groups::FileDescriptorType& > (i);

        // SignalStandard
        //
        if (i.SignalStandard ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SignalStandard",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.SignalStandard ();
        }

        // FrameLayout
        //
        if (i.FrameLayout ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FrameLayout",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.FrameLayout ();
        }

        // StoredWidth
        //
        if (i.StoredWidth ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StoredWidth",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.StoredWidth ();
        }

        // StoredHeight
        //
        if (i.StoredHeight ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StoredHeight",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.StoredHeight ();
        }

        // StoredF2Offset
        //
        if (i.StoredF2Offset ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StoredF2Offset",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.StoredF2Offset ();
        }

        // SampledWidth
        //
        if (i.SampledWidth ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SampledWidth",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.SampledWidth ();
        }

        // SampledHeight
        //
        if (i.SampledHeight ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SampledHeight",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.SampledHeight ();
        }

        // SampledXOffset
        //
        if (i.SampledXOffset ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SampledXOffset",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.SampledXOffset ();
        }

        // SampledYOffset
        //
        if (i.SampledYOffset ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SampledYOffset",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.SampledYOffset ();
        }

        // DisplayHeight
        //
        if (i.DisplayHeight ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DisplayHeight",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DisplayHeight ();
        }

        // DisplayWidth
        //
        if (i.DisplayWidth ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DisplayWidth",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DisplayWidth ();
        }

        // DisplayXOffset
        //
        if (i.DisplayXOffset ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DisplayXOffset",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DisplayXOffset ();
        }

        // DisplayYOffset
        //
        if (i.DisplayYOffset ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DisplayYOffset",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DisplayYOffset ();
        }

        // DisplayF2Offset
        //
        if (i.DisplayF2Offset ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DisplayF2Offset",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DisplayF2Offset ();
        }

        // ImageAspectRatio
        //
        if (i.ImageAspectRatio ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ImageAspectRatio",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ImageAspectRatio ();
        }

        // ActiveFormatDescriptor
        //
        if (i.ActiveFormatDescriptor ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ActiveFormatDescriptor",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ActiveFormatDescriptor ();
        }

        // VideoLineMap
        //
        if (i.VideoLineMap ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VideoLineMap",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.VideoLineMap ();
        }

        // AlphaTransparency
        //
        if (i.AlphaTransparency ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AlphaTransparency",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.AlphaTransparency ();
        }

        // TransferCharacteristic
        //
        if (i.TransferCharacteristic ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TransferCharacteristic",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.TransferCharacteristic ();
        }

        // ImageAlignmentFactor
        //
        if (i.ImageAlignmentFactor ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ImageAlignmentFactor",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ImageAlignmentFactor ();
        }

        // ImageStartOffset
        //
        if (i.ImageStartOffset ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ImageStartOffset",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ImageStartOffset ();
        }

        // ImageEndOffset
        //
        if (i.ImageEndOffset ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ImageEndOffset",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ImageEndOffset ();
        }

        // FieldDominance
        //
        if (i.FieldDominance ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FieldDominance",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.FieldDominance ();
        }

        // PictureCompression
        //
        if (i.PictureCompression ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PictureCompression",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.PictureCompression ();
        }
      }

      void
      CDCIDescriptor_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::CDCIDescriptor_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      CDCIDescriptor_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::CDCIDescriptor_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CDCIDescriptor_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::CDCIDescriptor_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CDCIDescriptor_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::CDCIDescriptor_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      CDCIDescriptor_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::CDCIDescriptor_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CDCIDescriptor_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::CDCIDescriptor_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CDCIDescriptor_REF (::xercesc::DOMDocument& d,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CDCIDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "CDCIDescriptor_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      CDCIDescriptor_REF (const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "CDCIDescriptor_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::CDCIDescriptor_REF (*d, s, f);
        return d;
      }

      void
      CDCIDescriptor (::std::ostream& o,
                      const ::st434::s377m::groups::CDCIDescriptorType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::CDCIDescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      CDCIDescriptor (::std::ostream& o,
                      const ::st434::s377m::groups::CDCIDescriptorType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::CDCIDescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CDCIDescriptor (::std::ostream& o,
                      const ::st434::s377m::groups::CDCIDescriptorType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::CDCIDescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CDCIDescriptor (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::CDCIDescriptorType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::CDCIDescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      CDCIDescriptor (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::CDCIDescriptorType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::CDCIDescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CDCIDescriptor (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::CDCIDescriptorType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::CDCIDescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      CDCIDescriptor (::xercesc::DOMDocument& d,
                      const ::st434::s377m::groups::CDCIDescriptorType& s,
                      ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CDCIDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "CDCIDescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      CDCIDescriptor (const ::st434::s377m::groups::CDCIDescriptorType& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "CDCIDescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::CDCIDescriptor (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const CDCIDescriptorType& i)
      {
        e << static_cast< const ::st434::s377m::groups::PictureDescriptorType& > (i);

        // ComponentDepth
        //
        if (i.ComponentDepth ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ComponentDepth",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ComponentDepth ();
        }

        // HorizontalSubsampling
        //
        if (i.HorizontalSubsampling ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HorizontalSubsampling",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.HorizontalSubsampling ();
        }

        // VerticalSubsampling
        //
        if (i.VerticalSubsampling ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VerticalSubsampling",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.VerticalSubsampling ();
        }

        // ColorSiting
        //
        if (i.ColorSiting ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ColorSiting",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ColorSiting ();
        }

        // ReversedByteOrder
        //
        if (i.ReversedByteOrder ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ReversedByteOrder",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ReversedByteOrder ();
        }

        // PaddingBits
        //
        if (i.PaddingBits ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PaddingBits",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.PaddingBits ();
        }

        // AlphaSampleDepth
        //
        if (i.AlphaSampleDepth ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AlphaSampleDepth",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.AlphaSampleDepth ();
        }

        // BlackRefLevel
        //
        if (i.BlackRefLevel ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BlackRefLevel",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.BlackRefLevel ();
        }

        // WhiteRefLevel
        //
        if (i.WhiteRefLevel ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "WhiteRefLevel",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.WhiteRefLevel ();
        }

        // ColorRange
        //
        if (i.ColorRange ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ColorRange",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ColorRange ();
        }
      }

      void
      RGBADescriptor_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::RGBADescriptor_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      RGBADescriptor_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::RGBADescriptor_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      RGBADescriptor_REF (::std::ostream& o,
                          const ::st434::s377m::types::Ref& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::RGBADescriptor_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      RGBADescriptor_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::RGBADescriptor_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      RGBADescriptor_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::RGBADescriptor_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      RGBADescriptor_REF (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::types::Ref& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::RGBADescriptor_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      RGBADescriptor_REF (::xercesc::DOMDocument& d,
                          const ::st434::s377m::types::Ref& s,
                          ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "RGBADescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "RGBADescriptor_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      RGBADescriptor_REF (const ::st434::s377m::types::Ref& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "RGBADescriptor_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::RGBADescriptor_REF (*d, s, f);
        return d;
      }

      void
      RGBADescriptor (::std::ostream& o,
                      const ::st434::s377m::groups::RGBADescriptorType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::RGBADescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      RGBADescriptor (::std::ostream& o,
                      const ::st434::s377m::groups::RGBADescriptorType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::RGBADescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      RGBADescriptor (::std::ostream& o,
                      const ::st434::s377m::groups::RGBADescriptorType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::RGBADescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      RGBADescriptor (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::RGBADescriptorType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::RGBADescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      RGBADescriptor (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::RGBADescriptorType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::RGBADescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      RGBADescriptor (::xercesc::XMLFormatTarget& t,
                      const ::st434::s377m::groups::RGBADescriptorType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::RGBADescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      RGBADescriptor (::xercesc::DOMDocument& d,
                      const ::st434::s377m::groups::RGBADescriptorType& s,
                      ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "RGBADescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "RGBADescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      RGBADescriptor (const ::st434::s377m::groups::RGBADescriptorType& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "RGBADescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::RGBADescriptor (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const RGBADescriptorType& i)
      {
        e << static_cast< const ::st434::s377m::groups::PictureDescriptorType& > (i);

        // ComponentMaxRef
        //
        if (i.ComponentMaxRef ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ComponentMaxRef",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ComponentMaxRef ();
        }

        // ComponentMinRef
        //
        if (i.ComponentMinRef ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ComponentMinRef",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ComponentMinRef ();
        }

        // AlphaMaxRef
        //
        if (i.AlphaMaxRef ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AlphaMaxRef",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.AlphaMaxRef ();
        }

        // AlphaMinRef
        //
        if (i.AlphaMinRef ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AlphaMinRef",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.AlphaMinRef ();
        }

        // ScanningDirection
        //
        if (i.ScanningDirection ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ScanningDirection",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ScanningDirection ();
        }

        // PixelLayout
        //
        if (i.PixelLayout ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PixelLayout",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.PixelLayout ();
        }

        // Palette
        //
        if (i.Palette ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Palette",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.Palette ();
        }

        // PaletteLayout
        //
        if (i.PaletteLayout ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PaletteLayout",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.PaletteLayout ();
        }
      }

      void
      SoundDescriptor_REF (::std::ostream& o,
                           const ::st434::s377m::types::Ref& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SoundDescriptor_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SoundDescriptor_REF (::std::ostream& o,
                           const ::st434::s377m::types::Ref& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SoundDescriptor_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SoundDescriptor_REF (::std::ostream& o,
                           const ::st434::s377m::types::Ref& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SoundDescriptor_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SoundDescriptor_REF (::xercesc::XMLFormatTarget& t,
                           const ::st434::s377m::types::Ref& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SoundDescriptor_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SoundDescriptor_REF (::xercesc::XMLFormatTarget& t,
                           const ::st434::s377m::types::Ref& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SoundDescriptor_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SoundDescriptor_REF (::xercesc::XMLFormatTarget& t,
                           const ::st434::s377m::types::Ref& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SoundDescriptor_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SoundDescriptor_REF (::xercesc::DOMDocument& d,
                           const ::st434::s377m::types::Ref& s,
                           ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SoundDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SoundDescriptor_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SoundDescriptor_REF (const ::st434::s377m::types::Ref& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "SoundDescriptor_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::SoundDescriptor_REF (*d, s, f);
        return d;
      }

      void
      SoundDescriptor (::std::ostream& o,
                       const ::st434::s377m::groups::SoundDescriptorType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SoundDescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SoundDescriptor (::std::ostream& o,
                       const ::st434::s377m::groups::SoundDescriptorType& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SoundDescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SoundDescriptor (::std::ostream& o,
                       const ::st434::s377m::groups::SoundDescriptorType& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SoundDescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SoundDescriptor (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::groups::SoundDescriptorType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SoundDescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      SoundDescriptor (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::groups::SoundDescriptorType& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SoundDescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SoundDescriptor (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::groups::SoundDescriptorType& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::SoundDescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      SoundDescriptor (::xercesc::DOMDocument& d,
                       const ::st434::s377m::groups::SoundDescriptorType& s,
                       ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SoundDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SoundDescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      SoundDescriptor (const ::st434::s377m::groups::SoundDescriptorType& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "SoundDescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::SoundDescriptor (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const SoundDescriptorType& i)
      {
        e << static_cast< const ::st434::s377m::groups::FileDescriptorType& > (i);

        // AudioSampleRate
        //
        if (i.AudioSampleRate ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AudioSampleRate",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.AudioSampleRate ();
        }

        // Locked
        //
        if (i.Locked ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Locked",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.Locked ();
        }

        // AudioReferenceLevel
        //
        if (i.AudioReferenceLevel ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AudioReferenceLevel",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.AudioReferenceLevel ();
        }

        // ElectrospatialFormulation
        //
        if (i.ElectrospatialFormulation ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ElectrospatialFormulation",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ElectrospatialFormulation ();
        }

        // ChannelCount
        //
        if (i.ChannelCount ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ChannelCount",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.ChannelCount ();
        }

        // QuantizationBits
        //
        if (i.QuantizationBits ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "QuantizationBits",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.QuantizationBits ();
        }

        // DialNorm
        //
        if (i.DialNorm ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DialNorm",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DialNorm ();
        }

        // SoundCompression
        //
        if (i.SoundCompression ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SoundCompression",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.SoundCompression ();
        }
      }

      void
      DataEssenceDescriptor_REF (::std::ostream& o,
                                 const ::st434::s377m::types::Ref& s,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DataEssenceDescriptor_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DataEssenceDescriptor_REF (::std::ostream& o,
                                 const ::st434::s377m::types::Ref& s,
                                 ::xml_schema::error_handler& h,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DataEssenceDescriptor_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DataEssenceDescriptor_REF (::std::ostream& o,
                                 const ::st434::s377m::types::Ref& s,
                                 ::xercesc::DOMErrorHandler& h,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DataEssenceDescriptor_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DataEssenceDescriptor_REF (::xercesc::XMLFormatTarget& t,
                                 const ::st434::s377m::types::Ref& s,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DataEssenceDescriptor_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DataEssenceDescriptor_REF (::xercesc::XMLFormatTarget& t,
                                 const ::st434::s377m::types::Ref& s,
                                 ::xml_schema::error_handler& h,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DataEssenceDescriptor_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DataEssenceDescriptor_REF (::xercesc::XMLFormatTarget& t,
                                 const ::st434::s377m::types::Ref& s,
                                 ::xercesc::DOMErrorHandler& h,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DataEssenceDescriptor_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DataEssenceDescriptor_REF (::xercesc::DOMDocument& d,
                                 const ::st434::s377m::types::Ref& s,
                                 ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DataEssenceDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DataEssenceDescriptor_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DataEssenceDescriptor_REF (const ::st434::s377m::types::Ref& s,
                                 const ::xml_schema::namespace_infomap& m,
                                 ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "DataEssenceDescriptor_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::DataEssenceDescriptor_REF (*d, s, f);
        return d;
      }

      void
      DataEssenceDescriptor (::std::ostream& o,
                             const ::st434::s377m::groups::DataEssenceDescriptorType& s,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DataEssenceDescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DataEssenceDescriptor (::std::ostream& o,
                             const ::st434::s377m::groups::DataEssenceDescriptorType& s,
                             ::xml_schema::error_handler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DataEssenceDescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DataEssenceDescriptor (::std::ostream& o,
                             const ::st434::s377m::groups::DataEssenceDescriptorType& s,
                             ::xercesc::DOMErrorHandler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DataEssenceDescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DataEssenceDescriptor (::xercesc::XMLFormatTarget& t,
                             const ::st434::s377m::groups::DataEssenceDescriptorType& s,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DataEssenceDescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DataEssenceDescriptor (::xercesc::XMLFormatTarget& t,
                             const ::st434::s377m::groups::DataEssenceDescriptorType& s,
                             ::xml_schema::error_handler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DataEssenceDescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DataEssenceDescriptor (::xercesc::XMLFormatTarget& t,
                             const ::st434::s377m::groups::DataEssenceDescriptorType& s,
                             ::xercesc::DOMErrorHandler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::string& e,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::DataEssenceDescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DataEssenceDescriptor (::xercesc::DOMDocument& d,
                             const ::st434::s377m::groups::DataEssenceDescriptorType& s,
                             ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DataEssenceDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DataEssenceDescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DataEssenceDescriptor (const ::st434::s377m::groups::DataEssenceDescriptorType& s,
                             const ::xml_schema::namespace_infomap& m,
                             ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "DataEssenceDescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::DataEssenceDescriptor (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const DataEssenceDescriptorType& i)
      {
        e << static_cast< const ::st434::s377m::groups::FileDescriptorType& > (i);

        // DataEssenceCoding
        //
        if (i.DataEssenceCoding ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DataEssenceCoding",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DataEssenceCoding ();
        }
      }

      void
      MultipleDescriptor_REF (::std::ostream& o,
                              const ::st434::s377m::types::Ref& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MultipleDescriptor_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      MultipleDescriptor_REF (::std::ostream& o,
                              const ::st434::s377m::types::Ref& s,
                              ::xml_schema::error_handler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MultipleDescriptor_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MultipleDescriptor_REF (::std::ostream& o,
                              const ::st434::s377m::types::Ref& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MultipleDescriptor_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MultipleDescriptor_REF (::xercesc::XMLFormatTarget& t,
                              const ::st434::s377m::types::Ref& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MultipleDescriptor_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      MultipleDescriptor_REF (::xercesc::XMLFormatTarget& t,
                              const ::st434::s377m::types::Ref& s,
                              ::xml_schema::error_handler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MultipleDescriptor_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MultipleDescriptor_REF (::xercesc::XMLFormatTarget& t,
                              const ::st434::s377m::types::Ref& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MultipleDescriptor_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MultipleDescriptor_REF (::xercesc::DOMDocument& d,
                              const ::st434::s377m::types::Ref& s,
                              ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "MultipleDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "MultipleDescriptor_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      MultipleDescriptor_REF (const ::st434::s377m::types::Ref& s,
                              const ::xml_schema::namespace_infomap& m,
                              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "MultipleDescriptor_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::MultipleDescriptor_REF (*d, s, f);
        return d;
      }

      void
      MultipleDescriptor (::std::ostream& o,
                          const ::st434::s377m::groups::MultipleDescriptorType& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MultipleDescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      MultipleDescriptor (::std::ostream& o,
                          const ::st434::s377m::groups::MultipleDescriptorType& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MultipleDescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MultipleDescriptor (::std::ostream& o,
                          const ::st434::s377m::groups::MultipleDescriptorType& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MultipleDescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MultipleDescriptor (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::groups::MultipleDescriptorType& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MultipleDescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      MultipleDescriptor (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::groups::MultipleDescriptorType& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MultipleDescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MultipleDescriptor (::xercesc::XMLFormatTarget& t,
                          const ::st434::s377m::groups::MultipleDescriptorType& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::MultipleDescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      MultipleDescriptor (::xercesc::DOMDocument& d,
                          const ::st434::s377m::groups::MultipleDescriptorType& s,
                          ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "MultipleDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "MultipleDescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      MultipleDescriptor (const ::st434::s377m::groups::MultipleDescriptorType& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "MultipleDescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::MultipleDescriptor (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const MultipleDescriptorType& i)
      {
        e << static_cast< const ::st434::s377m::groups::FileDescriptorType& > (i);

        // FileDescriptors
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FileDescriptors",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.FileDescriptors ();
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

