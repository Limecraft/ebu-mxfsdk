// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "dataTypes/s377m_types.hxx"

namespace st434
{
  namespace s377m
  {
    namespace types
    {
      // Boolean
      // 


      // Float
      // 


      // Int8
      // 


      // Int16
      // 


      // Int32
      // 


      // Int64
      // 


      // Length
      // 


      // Position
      // 


      // UInt8
      // 


      // UInt16
      // 


      // UInt32
      // 


      // UInt64
      // 


      // UID
      // 


      // LocalTag
      // 


      // UL
      // 


      // UMID32
      // 


      // UMID64
      // 


      // UUID
      // 


      // KLVKey
      // 


      // VersionType
      // 


      // Collection
      // 


      // Array
      // 


      // Batch
      // 


      // DataStream
      // 


      // Rational
      // 

      const Rational::Numerator_type& Rational::
      Numerator () const
      {
        return this->Numerator_.get ();
      }

      Rational::Numerator_type& Rational::
      Numerator ()
      {
        return this->Numerator_.get ();
      }

      void Rational::
      Numerator (const Numerator_type& x)
      {
        this->Numerator_.set (x);
      }

      void Rational::
      Numerator (::std::auto_ptr< Numerator_type > x)
      {
        this->Numerator_.set (x);
      }

      const Rational::Denominator_type& Rational::
      Denominator () const
      {
        return this->Denominator_.get ();
      }

      Rational::Denominator_type& Rational::
      Denominator ()
      {
        return this->Denominator_.get ();
      }

      void Rational::
      Denominator (const Denominator_type& x)
      {
        this->Denominator_.set (x);
      }

      void Rational::
      Denominator (::std::auto_ptr< Denominator_type > x)
      {
        this->Denominator_.set (x);
      }


      // EditRate
      // 


      // ISO7bitCharString
      // 


      // UTF16CharString
      // 


      // TimestampType
      // 

      const TimestampType::Year_type& TimestampType::
      Year () const
      {
        return this->Year_.get ();
      }

      TimestampType::Year_type& TimestampType::
      Year ()
      {
        return this->Year_.get ();
      }

      void TimestampType::
      Year (const Year_type& x)
      {
        this->Year_.set (x);
      }

      void TimestampType::
      Year (::std::auto_ptr< Year_type > x)
      {
        this->Year_.set (x);
      }

      const TimestampType::Month_type& TimestampType::
      Month () const
      {
        return this->Month_.get ();
      }

      TimestampType::Month_type& TimestampType::
      Month ()
      {
        return this->Month_.get ();
      }

      void TimestampType::
      Month (const Month_type& x)
      {
        this->Month_.set (x);
      }

      void TimestampType::
      Month (::std::auto_ptr< Month_type > x)
      {
        this->Month_.set (x);
      }

      const TimestampType::Day_type& TimestampType::
      Day () const
      {
        return this->Day_.get ();
      }

      TimestampType::Day_type& TimestampType::
      Day ()
      {
        return this->Day_.get ();
      }

      void TimestampType::
      Day (const Day_type& x)
      {
        this->Day_.set (x);
      }

      void TimestampType::
      Day (::std::auto_ptr< Day_type > x)
      {
        this->Day_.set (x);
      }

      const TimestampType::Hour_type& TimestampType::
      Hour () const
      {
        return this->Hour_.get ();
      }

      TimestampType::Hour_type& TimestampType::
      Hour ()
      {
        return this->Hour_.get ();
      }

      void TimestampType::
      Hour (const Hour_type& x)
      {
        this->Hour_.set (x);
      }

      void TimestampType::
      Hour (::std::auto_ptr< Hour_type > x)
      {
        this->Hour_.set (x);
      }

      const TimestampType::Minute_type& TimestampType::
      Minute () const
      {
        return this->Minute_.get ();
      }

      TimestampType::Minute_type& TimestampType::
      Minute ()
      {
        return this->Minute_.get ();
      }

      void TimestampType::
      Minute (const Minute_type& x)
      {
        this->Minute_.set (x);
      }

      void TimestampType::
      Minute (::std::auto_ptr< Minute_type > x)
      {
        this->Minute_.set (x);
      }

      const TimestampType::Second_type& TimestampType::
      Second () const
      {
        return this->Second_.get ();
      }

      TimestampType::Second_type& TimestampType::
      Second ()
      {
        return this->Second_.get ();
      }

      void TimestampType::
      Second (const Second_type& x)
      {
        this->Second_.set (x);
      }

      void TimestampType::
      Second (::std::auto_ptr< Second_type > x)
      {
        this->Second_.set (x);
      }

      const TimestampType::mSec4_type& TimestampType::
      mSec4 () const
      {
        return this->mSec4_.get ();
      }

      TimestampType::mSec4_type& TimestampType::
      mSec4 ()
      {
        return this->mSec4_.get ();
      }

      void TimestampType::
      mSec4 (const mSec4_type& x)
      {
        this->mSec4_.set (x);
      }

      void TimestampType::
      mSec4 (::std::auto_ptr< mSec4_type > x)
      {
        this->mSec4_.set (x);
      }


      // ProductVersionType
      // 

      const ProductVersionType::Major_type& ProductVersionType::
      Major () const
      {
        return this->Major_.get ();
      }

      ProductVersionType::Major_type& ProductVersionType::
      Major ()
      {
        return this->Major_.get ();
      }

      void ProductVersionType::
      Major (const Major_type& x)
      {
        this->Major_.set (x);
      }

      void ProductVersionType::
      Major (::std::auto_ptr< Major_type > x)
      {
        this->Major_.set (x);
      }

      const ProductVersionType::Minor_type& ProductVersionType::
      Minor () const
      {
        return this->Minor_.get ();
      }

      ProductVersionType::Minor_type& ProductVersionType::
      Minor ()
      {
        return this->Minor_.get ();
      }

      void ProductVersionType::
      Minor (const Minor_type& x)
      {
        this->Minor_.set (x);
      }

      void ProductVersionType::
      Minor (::std::auto_ptr< Minor_type > x)
      {
        this->Minor_.set (x);
      }

      const ProductVersionType::Patch_type& ProductVersionType::
      Patch () const
      {
        return this->Patch_.get ();
      }

      ProductVersionType::Patch_type& ProductVersionType::
      Patch ()
      {
        return this->Patch_.get ();
      }

      void ProductVersionType::
      Patch (const Patch_type& x)
      {
        this->Patch_.set (x);
      }

      void ProductVersionType::
      Patch (::std::auto_ptr< Patch_type > x)
      {
        this->Patch_.set (x);
      }

      const ProductVersionType::Build_type& ProductVersionType::
      Build () const
      {
        return this->Build_.get ();
      }

      ProductVersionType::Build_type& ProductVersionType::
      Build ()
      {
        return this->Build_.get ();
      }

      void ProductVersionType::
      Build (const Build_type& x)
      {
        this->Build_.set (x);
      }

      void ProductVersionType::
      Build (::std::auto_ptr< Build_type > x)
      {
        this->Build_.set (x);
      }

      const ProductVersionType::Release_type& ProductVersionType::
      Release () const
      {
        return this->Release_.get ();
      }

      ProductVersionType::Release_type& ProductVersionType::
      Release ()
      {
        return this->Release_.get ();
      }

      void ProductVersionType::
      Release (const Release_type& x)
      {
        this->Release_.set (x);
      }

      void ProductVersionType::
      Release (::std::auto_ptr< Release_type > x)
      {
        this->Release_.set (x);
      }


      // RGBAComponentType
      // 

      const RGBAComponentType::Code_type& RGBAComponentType::
      Code () const
      {
        return this->Code_.get ();
      }

      RGBAComponentType::Code_type& RGBAComponentType::
      Code ()
      {
        return this->Code_.get ();
      }

      void RGBAComponentType::
      Code (const Code_type& x)
      {
        this->Code_.set (x);
      }

      void RGBAComponentType::
      Code (::std::auto_ptr< Code_type > x)
      {
        this->Code_.set (x);
      }

      const RGBAComponentType::Depth_type& RGBAComponentType::
      Depth () const
      {
        return this->Depth_.get ();
      }

      RGBAComponentType::Depth_type& RGBAComponentType::
      Depth ()
      {
        return this->Depth_.get ();
      }

      void RGBAComponentType::
      Depth (const Depth_type& x)
      {
        this->Depth_.set (x);
      }

      void RGBAComponentType::
      Depth (::std::auto_ptr< Depth_type > x)
      {
        this->Depth_.set (x);
      }


      // RGBALayout
      // 

      const RGBALayout::RGBAComponent_sequence& RGBALayout::
      RGBAComponent () const
      {
        return this->RGBAComponent_;
      }

      RGBALayout::RGBAComponent_sequence& RGBALayout::
      RGBAComponent ()
      {
        return this->RGBAComponent_;
      }

      void RGBALayout::
      RGBAComponent (const RGBAComponent_sequence& s)
      {
        this->RGBAComponent_ = s;
      }


      // Orientation
      // 


      // SignalStandard
      // 


      // Ref
      // 

      const Ref::TargetInstance_type& Ref::
      TargetInstance () const
      {
        return this->TargetInstance_.get ();
      }

      Ref::TargetInstance_type& Ref::
      TargetInstance ()
      {
        return this->TargetInstance_.get ();
      }

      void Ref::
      TargetInstance (const TargetInstance_type& x)
      {
        this->TargetInstance_.set (x);
      }

      void Ref::
      TargetInstance (::std::auto_ptr< TargetInstance_type > x)
      {
        this->TargetInstance_.set (x);
      }


      // StrongRefHolder
      // 


      // WeakRefHolder
      // 


      // StrongRefArray
      // 


      // StrongRefBatch
      // 


      // StrongRefCollection
      // 


      // WeakRefArray
      // 


      // WeakRefBatch
      // 


      // WeakRefCollection
      // 


      // Year
      // 


      // Month
      // 


      // Day
      // 


      // Hour
      // 


      // Minute
      // 


      // Second
      // 


      // mSec4
      // 


      // Release
      // 

      Release::
      Release (::xml_schema::unsigned_byte v): ::st434::s377m::types::UInt8 (v)
      {
      }

      Release::
      Release (const ::st434::s377m::types::UInt8& v)
      : ::st434::s377m::types::UInt8 (v)
      {
      }

      Release::
      Release (const Release& v,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (v, f, c)
      {
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace st434
{
  namespace s377m
  {
    namespace types
    {
      // Boolean
      //

      Boolean::
      Boolean (const ::xml_schema::boolean& _xsd_boolean_base)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::boolean, char, ::xml_schema::simple_type > (_xsd_boolean_base)
      {
      }

      Boolean::
      Boolean (const Boolean& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::boolean, char, ::xml_schema::simple_type > (x, f, c)
      {
      }

      Boolean::
      Boolean (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::boolean, char, ::xml_schema::simple_type > (e, f, c)
      {
      }

      Boolean::
      Boolean (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::boolean, char, ::xml_schema::simple_type > (a, f, c)
      {
      }

      Boolean::
      Boolean (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::boolean, char, ::xml_schema::simple_type > (s, e, f, c)
      {
      }

      Boolean* Boolean::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class Boolean (*this, f, c);
      }

      Boolean::
      ~Boolean ()
      {
      }

      // Float
      //

      Float::
      Float (const ::xml_schema::double_& _xsd_double__base)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (_xsd_double__base)
      {
      }

      Float::
      Float (const Float& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (x, f, c)
      {
      }

      Float::
      Float (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (e, f, c)
      {
      }

      Float::
      Float (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (a, f, c)
      {
      }

      Float::
      Float (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ > (s, e, f, c)
      {
      }

      Float* Float::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class Float (*this, f, c);
      }

      Float::
      ~Float ()
      {
      }

      // Int8
      //

      Int8::
      Int8 (const ::xml_schema::byte& _xsd_byte_base)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::byte, char, ::xml_schema::simple_type > (_xsd_byte_base)
      {
      }

      Int8::
      Int8 (const Int8& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::byte, char, ::xml_schema::simple_type > (x, f, c)
      {
      }

      Int8::
      Int8 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::byte, char, ::xml_schema::simple_type > (e, f, c)
      {
      }

      Int8::
      Int8 (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::byte, char, ::xml_schema::simple_type > (a, f, c)
      {
      }

      Int8::
      Int8 (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::byte, char, ::xml_schema::simple_type > (s, e, f, c)
      {
      }

      Int8* Int8::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class Int8 (*this, f, c);
      }

      Int8::
      ~Int8 ()
      {
      }

      // Int16
      //

      Int16::
      Int16 (const ::xml_schema::short_& _xsd_short__base)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::short_, char, ::xml_schema::simple_type > (_xsd_short__base)
      {
      }

      Int16::
      Int16 (const Int16& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::short_, char, ::xml_schema::simple_type > (x, f, c)
      {
      }

      Int16::
      Int16 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::short_, char, ::xml_schema::simple_type > (e, f, c)
      {
      }

      Int16::
      Int16 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::short_, char, ::xml_schema::simple_type > (a, f, c)
      {
      }

      Int16::
      Int16 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::short_, char, ::xml_schema::simple_type > (s, e, f, c)
      {
      }

      Int16* Int16::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class Int16 (*this, f, c);
      }

      Int16::
      ~Int16 ()
      {
      }

      // Int32
      //

      Int32::
      Int32 (const ::xml_schema::integer& _xsd_integer_base)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (_xsd_integer_base)
      {
      }

      Int32::
      Int32 (const Int32& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (x, f, c)
      {
      }

      Int32::
      Int32 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (e, f, c)
      {
      }

      Int32::
      Int32 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (a, f, c)
      {
      }

      Int32::
      Int32 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (s, e, f, c)
      {
      }

      Int32* Int32::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class Int32 (*this, f, c);
      }

      Int32::
      ~Int32 ()
      {
      }

      // Int64
      //

      Int64::
      Int64 (const ::xml_schema::long_& _xsd_long__base)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type > (_xsd_long__base)
      {
      }

      Int64::
      Int64 (const Int64& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type > (x, f, c)
      {
      }

      Int64::
      Int64 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type > (e, f, c)
      {
      }

      Int64::
      Int64 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type > (a, f, c)
      {
      }

      Int64::
      Int64 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type > (s, e, f, c)
      {
      }

      Int64* Int64::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class Int64 (*this, f, c);
      }

      Int64::
      ~Int64 ()
      {
      }

      // Length
      //

      Length::
      Length (const ::xml_schema::long_& _xsd_long__base)
      : ::st434::s377m::types::Int64 (_xsd_long__base)
      {
      }

      Length::
      Length (const Length& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::Int64 (x, f, c)
      {
      }

      Length::
      Length (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::Int64 (e, f, c)
      {
      }

      Length::
      Length (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::Int64 (a, f, c)
      {
      }

      Length::
      Length (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::Int64 (s, e, f, c)
      {
      }

      Length* Length::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class Length (*this, f, c);
      }

      Length::
      ~Length ()
      {
      }

      // Position
      //

      Position::
      Position (const ::xml_schema::long_& _xsd_long__base)
      : ::st434::s377m::types::Int64 (_xsd_long__base)
      {
      }

      Position::
      Position (const Position& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
      : ::st434::s377m::types::Int64 (x, f, c)
      {
      }

      Position::
      Position (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
      : ::st434::s377m::types::Int64 (e, f, c)
      {
      }

      Position::
      Position (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
      : ::st434::s377m::types::Int64 (a, f, c)
      {
      }

      Position::
      Position (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
      : ::st434::s377m::types::Int64 (s, e, f, c)
      {
      }

      Position* Position::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class Position (*this, f, c);
      }

      Position::
      ~Position ()
      {
      }

      // UInt8
      //

      UInt8::
      UInt8 (const ::xml_schema::unsigned_byte& _xsd_unsigned_byte_base)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, char, ::xml_schema::simple_type > (_xsd_unsigned_byte_base)
      {
      }

      UInt8::
      UInt8 (const UInt8& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, char, ::xml_schema::simple_type > (x, f, c)
      {
      }

      UInt8::
      UInt8 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, char, ::xml_schema::simple_type > (e, f, c)
      {
      }

      UInt8::
      UInt8 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, char, ::xml_schema::simple_type > (a, f, c)
      {
      }

      UInt8::
      UInt8 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, char, ::xml_schema::simple_type > (s, e, f, c)
      {
      }

      UInt8* UInt8::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class UInt8 (*this, f, c);
      }

      UInt8::
      ~UInt8 ()
      {
      }

      // UInt16
      //

      UInt16::
      UInt16 (const ::xml_schema::unsigned_short& _xsd_unsigned_short_base)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type > (_xsd_unsigned_short_base)
      {
      }

      UInt16::
      UInt16 (const UInt16& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type > (x, f, c)
      {
      }

      UInt16::
      UInt16 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type > (e, f, c)
      {
      }

      UInt16::
      UInt16 (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type > (a, f, c)
      {
      }

      UInt16::
      UInt16 (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type > (s, e, f, c)
      {
      }

      UInt16* UInt16::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class UInt16 (*this, f, c);
      }

      UInt16::
      ~UInt16 ()
      {
      }

      // UInt32
      //

      UInt32::
      UInt32 (const ::xml_schema::unsigned_int& _xsd_unsigned_int_base)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, char, ::xml_schema::simple_type > (_xsd_unsigned_int_base)
      {
      }

      UInt32::
      UInt32 (const UInt32& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, char, ::xml_schema::simple_type > (x, f, c)
      {
      }

      UInt32::
      UInt32 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, char, ::xml_schema::simple_type > (e, f, c)
      {
      }

      UInt32::
      UInt32 (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, char, ::xml_schema::simple_type > (a, f, c)
      {
      }

      UInt32::
      UInt32 (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, char, ::xml_schema::simple_type > (s, e, f, c)
      {
      }

      UInt32* UInt32::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class UInt32 (*this, f, c);
      }

      UInt32::
      ~UInt32 ()
      {
      }

      // UInt64
      //

      UInt64::
      UInt64 (const ::xml_schema::unsigned_long& _xsd_unsigned_long_base)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_long, char, ::xml_schema::simple_type > (_xsd_unsigned_long_base)
      {
      }

      UInt64::
      UInt64 (const UInt64& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_long, char, ::xml_schema::simple_type > (x, f, c)
      {
      }

      UInt64::
      UInt64 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_long, char, ::xml_schema::simple_type > (e, f, c)
      {
      }

      UInt64::
      UInt64 (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_long, char, ::xml_schema::simple_type > (a, f, c)
      {
      }

      UInt64::
      UInt64 (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_long, char, ::xml_schema::simple_type > (s, e, f, c)
      {
      }

      UInt64* UInt64::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class UInt64 (*this, f, c);
      }

      UInt64::
      ~UInt64 ()
      {
      }

      // UID
      //

      UID::
      UID ()
      : ::xml_schema::string ()
      {
      }

      UID::
      UID (const char* _xsd_string_base)
      : ::xml_schema::string (_xsd_string_base)
      {
      }

      UID::
      UID (const ::std::string& _xsd_string_base)
      : ::xml_schema::string (_xsd_string_base)
      {
      }

      UID::
      UID (const ::xml_schema::string& _xsd_string_base)
      : ::xml_schema::string (_xsd_string_base)
      {
      }

      UID::
      UID (const UID& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
      : ::xml_schema::string (x, f, c)
      {
      }

      UID::
      UID (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
      : ::xml_schema::string (e, f, c)
      {
      }

      UID::
      UID (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
      : ::xml_schema::string (a, f, c)
      {
      }

      UID::
      UID (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
      : ::xml_schema::string (s, e, f, c)
      {
      }

      UID* UID::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class UID (*this, f, c);
      }

      UID::
      ~UID ()
      {
      }

      // LocalTag
      //

      LocalTag::
      LocalTag ()
      : ::xml_schema::string ()
      {
      }

      LocalTag::
      LocalTag (const char* _xsd_string_base)
      : ::xml_schema::string (_xsd_string_base)
      {
      }

      LocalTag::
      LocalTag (const ::std::string& _xsd_string_base)
      : ::xml_schema::string (_xsd_string_base)
      {
      }

      LocalTag::
      LocalTag (const ::xml_schema::string& _xsd_string_base)
      : ::xml_schema::string (_xsd_string_base)
      {
      }

      LocalTag::
      LocalTag (const LocalTag& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
      : ::xml_schema::string (x, f, c)
      {
      }

      LocalTag::
      LocalTag (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
      : ::xml_schema::string (e, f, c)
      {
      }

      LocalTag::
      LocalTag (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
      : ::xml_schema::string (a, f, c)
      {
      }

      LocalTag::
      LocalTag (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
      : ::xml_schema::string (s, e, f, c)
      {
      }

      LocalTag* LocalTag::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class LocalTag (*this, f, c);
      }

      LocalTag::
      ~LocalTag ()
      {
      }

      // UL
      //

      UL::
      UL ()
      : ::st434::s377m::types::UID ()
      {
      }

      UL::
      UL (const char* _xsd_string_base)
      : ::st434::s377m::types::UID (_xsd_string_base)
      {
      }

      UL::
      UL (const ::std::string& _xsd_string_base)
      : ::st434::s377m::types::UID (_xsd_string_base)
      {
      }

      UL::
      UL (const ::xml_schema::string& _xsd_string_base)
      : ::st434::s377m::types::UID (_xsd_string_base)
      {
      }

      UL::
      UL (const UL& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
      : ::st434::s377m::types::UID (x, f, c)
      {
      }

      UL::
      UL (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
      : ::st434::s377m::types::UID (e, f, c)
      {
      }

      UL::
      UL (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
      : ::st434::s377m::types::UID (a, f, c)
      {
      }

      UL::
      UL (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
      : ::st434::s377m::types::UID (s, e, f, c)
      {
      }

      UL* UL::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class UL (*this, f, c);
      }

      UL::
      ~UL ()
      {
      }

      // UMID32
      //

      UMID32::
      UMID32 ()
      : ::st434::s377m::types::UID ()
      {
      }

      UMID32::
      UMID32 (const char* _xsd_string_base)
      : ::st434::s377m::types::UID (_xsd_string_base)
      {
      }

      UMID32::
      UMID32 (const ::std::string& _xsd_string_base)
      : ::st434::s377m::types::UID (_xsd_string_base)
      {
      }

      UMID32::
      UMID32 (const ::xml_schema::string& _xsd_string_base)
      : ::st434::s377m::types::UID (_xsd_string_base)
      {
      }

      UMID32::
      UMID32 (const UMID32& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::UID (x, f, c)
      {
      }

      UMID32::
      UMID32 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::UID (e, f, c)
      {
      }

      UMID32::
      UMID32 (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::UID (a, f, c)
      {
      }

      UMID32::
      UMID32 (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::UID (s, e, f, c)
      {
      }

      UMID32* UMID32::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class UMID32 (*this, f, c);
      }

      UMID32::
      ~UMID32 ()
      {
      }

      // UMID64
      //

      UMID64::
      UMID64 ()
      : ::st434::s377m::types::UID ()
      {
      }

      UMID64::
      UMID64 (const char* _xsd_string_base)
      : ::st434::s377m::types::UID (_xsd_string_base)
      {
      }

      UMID64::
      UMID64 (const ::std::string& _xsd_string_base)
      : ::st434::s377m::types::UID (_xsd_string_base)
      {
      }

      UMID64::
      UMID64 (const ::xml_schema::string& _xsd_string_base)
      : ::st434::s377m::types::UID (_xsd_string_base)
      {
      }

      UMID64::
      UMID64 (const UMID64& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::UID (x, f, c)
      {
      }

      UMID64::
      UMID64 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::UID (e, f, c)
      {
      }

      UMID64::
      UMID64 (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::UID (a, f, c)
      {
      }

      UMID64::
      UMID64 (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::UID (s, e, f, c)
      {
      }

      UMID64* UMID64::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class UMID64 (*this, f, c);
      }

      UMID64::
      ~UMID64 ()
      {
      }

      // UUID
      //

      UUID::
      UUID ()
      : ::st434::s377m::types::UID ()
      {
      }

      UUID::
      UUID (const char* _xsd_string_base)
      : ::st434::s377m::types::UID (_xsd_string_base)
      {
      }

      UUID::
      UUID (const ::std::string& _xsd_string_base)
      : ::st434::s377m::types::UID (_xsd_string_base)
      {
      }

      UUID::
      UUID (const ::xml_schema::string& _xsd_string_base)
      : ::st434::s377m::types::UID (_xsd_string_base)
      {
      }

      UUID::
      UUID (const UUID& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
      : ::st434::s377m::types::UID (x, f, c)
      {
      }

      UUID::
      UUID (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
      : ::st434::s377m::types::UID (e, f, c)
      {
      }

      UUID::
      UUID (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
      : ::st434::s377m::types::UID (a, f, c)
      {
      }

      UUID::
      UUID (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
      : ::st434::s377m::types::UID (s, e, f, c)
      {
      }

      UUID* UUID::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class UUID (*this, f, c);
      }

      UUID::
      ~UUID ()
      {
      }

      // KLVKey
      //

      KLVKey::
      KLVKey ()
      : ::st434::s377m::types::UID ()
      {
      }

      KLVKey::
      KLVKey (const char* _xsd_string_base)
      : ::st434::s377m::types::UID (_xsd_string_base)
      {
      }

      KLVKey::
      KLVKey (const ::std::string& _xsd_string_base)
      : ::st434::s377m::types::UID (_xsd_string_base)
      {
      }

      KLVKey::
      KLVKey (const ::xml_schema::string& _xsd_string_base)
      : ::st434::s377m::types::UID (_xsd_string_base)
      {
      }

      KLVKey::
      KLVKey (const KLVKey& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::UID (x, f, c)
      {
      }

      KLVKey::
      KLVKey (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::UID (e, f, c)
      {
      }

      KLVKey::
      KLVKey (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::UID (a, f, c)
      {
      }

      KLVKey::
      KLVKey (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::UID (s, e, f, c)
      {
      }

      KLVKey* KLVKey::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class KLVKey (*this, f, c);
      }

      KLVKey::
      ~KLVKey ()
      {
      }

      // VersionType
      //

      VersionType::
      VersionType (const ::xml_schema::unsigned_short& _xsd_unsigned_short_base)
      : ::st434::s377m::types::UInt16 (_xsd_unsigned_short_base)
      {
      }

      VersionType::
      VersionType (const VersionType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::st434::s377m::types::UInt16 (x, f, c)
      {
      }

      VersionType::
      VersionType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::st434::s377m::types::UInt16 (e, f, c)
      {
      }

      VersionType::
      VersionType (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::st434::s377m::types::UInt16 (a, f, c)
      {
      }

      VersionType::
      VersionType (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::st434::s377m::types::UInt16 (s, e, f, c)
      {
      }

      VersionType* VersionType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class VersionType (*this, f, c);
      }

      VersionType::
      ~VersionType ()
      {
      }

      // Collection
      //

      Collection::
      Collection ()
      : ::xml_schema::type ()
      {
      }

      Collection::
      Collection (const Collection& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c)
      {
      }

      Collection::
      Collection (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
      : ::xml_schema::type (e, f, c)
      {
      }

      Collection::
      Collection (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
      : ::xml_schema::type (a, f, c)
      {
      }

      Collection::
      Collection (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
      : ::xml_schema::type (s, e, f, c)
      {
      }

      Collection* Collection::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class Collection (*this, f, c);
      }

      Collection::
      ~Collection ()
      {
      }

      // Array
      //

      Array::
      Array ()
      : ::st434::s377m::types::Collection ()
      {
      }

      Array::
      Array (const Array& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::st434::s377m::types::Collection (x, f, c)
      {
      }

      Array::
      Array (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::st434::s377m::types::Collection (e, f, c)
      {
      }

      Array::
      Array (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::st434::s377m::types::Collection (a, f, c)
      {
      }

      Array::
      Array (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::st434::s377m::types::Collection (s, e, f, c)
      {
      }

      Array* Array::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class Array (*this, f, c);
      }

      Array::
      ~Array ()
      {
      }

      // Batch
      //

      Batch::
      Batch ()
      : ::st434::s377m::types::Collection ()
      {
      }

      Batch::
      Batch (const Batch& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::st434::s377m::types::Collection (x, f, c)
      {
      }

      Batch::
      Batch (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::st434::s377m::types::Collection (e, f, c)
      {
      }

      Batch::
      Batch (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::st434::s377m::types::Collection (a, f, c)
      {
      }

      Batch::
      Batch (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::st434::s377m::types::Collection (s, e, f, c)
      {
      }

      Batch* Batch::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class Batch (*this, f, c);
      }

      Batch::
      ~Batch ()
      {
      }

      // DataStream
      //

      DataStream::
      DataStream ()
      : ::xml_schema::hex_binary ()
      {
      }

      DataStream::
      DataStream (const ::xml_schema::hex_binary& _xsd_hex_binary_base)
      : ::xml_schema::hex_binary (_xsd_hex_binary_base)
      {
      }

      DataStream::
      DataStream (const DataStream& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
      : ::xml_schema::hex_binary (x, f, c)
      {
      }

      DataStream::
      DataStream (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
      : ::xml_schema::hex_binary (e, f, c)
      {
      }

      DataStream::
      DataStream (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
      : ::xml_schema::hex_binary (a, f, c)
      {
      }

      DataStream::
      DataStream (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
      : ::xml_schema::hex_binary (s, e, f, c)
      {
      }

      DataStream* DataStream::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class DataStream (*this, f, c);
      }

      DataStream::
      ~DataStream ()
      {
      }

      // Rational
      //

      Rational::
      Rational (const Numerator_type& Numerator,
                const Denominator_type& Denominator)
      : ::xml_schema::type (),
        Numerator_ (Numerator, ::xml_schema::flags (), this),
        Denominator_ (Denominator, ::xml_schema::flags (), this)
      {
      }

      Rational::
      Rational (const Rational& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        Numerator_ (x.Numerator_, f, this),
        Denominator_ (x.Denominator_, f, this)
      {
      }

      Rational::
      Rational (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        Numerator_ (f, this),
        Denominator_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void Rational::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Numerator
          //
          if (n.name () == "Numerator" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004")
          {
            ::std::auto_ptr< Numerator_type > r (
              Numerator_traits::create (i, f, this));

            if (!Numerator_.present ())
            {
              this->Numerator_.set (r);
              continue;
            }
          }

          // Denominator
          //
          if (n.name () == "Denominator" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004")
          {
            ::std::auto_ptr< Denominator_type > r (
              Denominator_traits::create (i, f, this));

            if (!Denominator_.present ())
            {
              this->Denominator_.set (r);
              continue;
            }
          }

          break;
        }

        if (!Numerator_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Numerator",
            "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004");
        }

        if (!Denominator_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Denominator",
            "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004");
        }
      }

      Rational* Rational::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class Rational (*this, f, c);
      }

      Rational::
      ~Rational ()
      {
      }

      // EditRate
      //

      EditRate::
      EditRate (const Numerator_type& Numerator,
                const Denominator_type& Denominator)
      : ::st434::s377m::types::Rational (Numerator,
                                         Denominator)
      {
      }

      EditRate::
      EditRate (const EditRate& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
      : ::st434::s377m::types::Rational (x, f, c)
      {
      }

      EditRate::
      EditRate (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
      : ::st434::s377m::types::Rational (e, f, c)
      {
      }

      EditRate* EditRate::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class EditRate (*this, f, c);
      }

      EditRate::
      ~EditRate ()
      {
      }

      // ISO7bitCharString
      //

      ISO7bitCharString::
      ISO7bitCharString ()
      : ::xml_schema::string ()
      {
      }

      ISO7bitCharString::
      ISO7bitCharString (const char* _xsd_string_base)
      : ::xml_schema::string (_xsd_string_base)
      {
      }

      ISO7bitCharString::
      ISO7bitCharString (const ::std::string& _xsd_string_base)
      : ::xml_schema::string (_xsd_string_base)
      {
      }

      ISO7bitCharString::
      ISO7bitCharString (const ::xml_schema::string& _xsd_string_base)
      : ::xml_schema::string (_xsd_string_base)
      {
      }

      ISO7bitCharString::
      ISO7bitCharString (const ISO7bitCharString& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::xml_schema::string (x, f, c)
      {
      }

      ISO7bitCharString::
      ISO7bitCharString (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::xml_schema::string (e, f, c)
      {
      }

      ISO7bitCharString::
      ISO7bitCharString (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::xml_schema::string (a, f, c)
      {
      }

      ISO7bitCharString::
      ISO7bitCharString (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::xml_schema::string (s, e, f, c)
      {
      }

      ISO7bitCharString* ISO7bitCharString::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class ISO7bitCharString (*this, f, c);
      }

      ISO7bitCharString::
      ~ISO7bitCharString ()
      {
      }

      // UTF16CharString
      //

      UTF16CharString::
      UTF16CharString ()
      : ::xml_schema::string ()
      {
      }

      UTF16CharString::
      UTF16CharString (const char* _xsd_string_base)
      : ::xml_schema::string (_xsd_string_base)
      {
      }

      UTF16CharString::
      UTF16CharString (const ::std::string& _xsd_string_base)
      : ::xml_schema::string (_xsd_string_base)
      {
      }

      UTF16CharString::
      UTF16CharString (const ::xml_schema::string& _xsd_string_base)
      : ::xml_schema::string (_xsd_string_base)
      {
      }

      UTF16CharString::
      UTF16CharString (const UTF16CharString& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::xml_schema::string (x, f, c)
      {
      }

      UTF16CharString::
      UTF16CharString (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::xml_schema::string (e, f, c)
      {
      }

      UTF16CharString::
      UTF16CharString (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::xml_schema::string (a, f, c)
      {
      }

      UTF16CharString::
      UTF16CharString (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::xml_schema::string (s, e, f, c)
      {
      }

      UTF16CharString* UTF16CharString::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class UTF16CharString (*this, f, c);
      }

      UTF16CharString::
      ~UTF16CharString ()
      {
      }

      // TimestampType
      //

      TimestampType::
      TimestampType (const Year_type& Year,
                     const Month_type& Month,
                     const Day_type& Day,
                     const Hour_type& Hour,
                     const Minute_type& Minute,
                     const Second_type& Second,
                     const mSec4_type& mSec4)
      : ::xml_schema::type (),
        Year_ (Year, ::xml_schema::flags (), this),
        Month_ (Month, ::xml_schema::flags (), this),
        Day_ (Day, ::xml_schema::flags (), this),
        Hour_ (Hour, ::xml_schema::flags (), this),
        Minute_ (Minute, ::xml_schema::flags (), this),
        Second_ (Second, ::xml_schema::flags (), this),
        mSec4_ (mSec4, ::xml_schema::flags (), this)
      {
      }

      TimestampType::
      TimestampType (const TimestampType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        Year_ (x.Year_, f, this),
        Month_ (x.Month_, f, this),
        Day_ (x.Day_, f, this),
        Hour_ (x.Hour_, f, this),
        Minute_ (x.Minute_, f, this),
        Second_ (x.Second_, f, this),
        mSec4_ (x.mSec4_, f, this)
      {
      }

      TimestampType::
      TimestampType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        Year_ (f, this),
        Month_ (f, this),
        Day_ (f, this),
        Hour_ (f, this),
        Minute_ (f, this),
        Second_ (f, this),
        mSec4_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void TimestampType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Year
          //
          if (n.name () == "Year" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004")
          {
            ::std::auto_ptr< Year_type > r (
              Year_traits::create (i, f, this));

            if (!Year_.present ())
            {
              this->Year_.set (r);
              continue;
            }
          }

          // Month
          //
          if (n.name () == "Month" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004")
          {
            ::std::auto_ptr< Month_type > r (
              Month_traits::create (i, f, this));

            if (!Month_.present ())
            {
              this->Month_.set (r);
              continue;
            }
          }

          // Day
          //
          if (n.name () == "Day" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004")
          {
            ::std::auto_ptr< Day_type > r (
              Day_traits::create (i, f, this));

            if (!Day_.present ())
            {
              this->Day_.set (r);
              continue;
            }
          }

          // Hour
          //
          if (n.name () == "Hour" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004")
          {
            ::std::auto_ptr< Hour_type > r (
              Hour_traits::create (i, f, this));

            if (!Hour_.present ())
            {
              this->Hour_.set (r);
              continue;
            }
          }

          // Minute
          //
          if (n.name () == "Minute" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004")
          {
            ::std::auto_ptr< Minute_type > r (
              Minute_traits::create (i, f, this));

            if (!Minute_.present ())
            {
              this->Minute_.set (r);
              continue;
            }
          }

          // Second
          //
          if (n.name () == "Second" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004")
          {
            ::std::auto_ptr< Second_type > r (
              Second_traits::create (i, f, this));

            if (!Second_.present ())
            {
              this->Second_.set (r);
              continue;
            }
          }

          // mSec4
          //
          if (n.name () == "mSec4" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004")
          {
            ::std::auto_ptr< mSec4_type > r (
              mSec4_traits::create (i, f, this));

            if (!mSec4_.present ())
            {
              this->mSec4_.set (r);
              continue;
            }
          }

          break;
        }

        if (!Year_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Year",
            "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004");
        }

        if (!Month_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Month",
            "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004");
        }

        if (!Day_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Day",
            "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004");
        }

        if (!Hour_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Hour",
            "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004");
        }

        if (!Minute_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Minute",
            "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004");
        }

        if (!Second_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Second",
            "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004");
        }

        if (!mSec4_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "mSec4",
            "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004");
        }
      }

      TimestampType* TimestampType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class TimestampType (*this, f, c);
      }

      TimestampType::
      ~TimestampType ()
      {
      }

      // ProductVersionType
      //

      ProductVersionType::
      ProductVersionType (const Major_type& Major,
                          const Minor_type& Minor,
                          const Patch_type& Patch,
                          const Build_type& Build,
                          const Release_type& Release)
      : ::xml_schema::type (),
        Major_ (Major, ::xml_schema::flags (), this),
        Minor_ (Minor, ::xml_schema::flags (), this),
        Patch_ (Patch, ::xml_schema::flags (), this),
        Build_ (Build, ::xml_schema::flags (), this),
        Release_ (Release, ::xml_schema::flags (), this)
      {
      }

      ProductVersionType::
      ProductVersionType (const ProductVersionType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        Major_ (x.Major_, f, this),
        Minor_ (x.Minor_, f, this),
        Patch_ (x.Patch_, f, this),
        Build_ (x.Build_, f, this),
        Release_ (x.Release_, f, this)
      {
      }

      ProductVersionType::
      ProductVersionType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        Major_ (f, this),
        Minor_ (f, this),
        Patch_ (f, this),
        Build_ (f, this),
        Release_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ProductVersionType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Major
          //
          if (n.name () == "Major" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004")
          {
            ::std::auto_ptr< Major_type > r (
              Major_traits::create (i, f, this));

            if (!Major_.present ())
            {
              this->Major_.set (r);
              continue;
            }
          }

          // Minor
          //
          if (n.name () == "Minor" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004")
          {
            ::std::auto_ptr< Minor_type > r (
              Minor_traits::create (i, f, this));

            if (!Minor_.present ())
            {
              this->Minor_.set (r);
              continue;
            }
          }

          // Patch
          //
          if (n.name () == "Patch" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004")
          {
            ::std::auto_ptr< Patch_type > r (
              Patch_traits::create (i, f, this));

            if (!Patch_.present ())
            {
              this->Patch_.set (r);
              continue;
            }
          }

          // Build
          //
          if (n.name () == "Build" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004")
          {
            ::std::auto_ptr< Build_type > r (
              Build_traits::create (i, f, this));

            if (!Build_.present ())
            {
              this->Build_.set (r);
              continue;
            }
          }

          // Release
          //
          if (n.name () == "Release" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004")
          {
            ::std::auto_ptr< Release_type > r (
              Release_traits::create (i, f, this));

            if (!Release_.present ())
            {
              this->Release_.set (r);
              continue;
            }
          }

          break;
        }

        if (!Major_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Major",
            "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004");
        }

        if (!Minor_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Minor",
            "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004");
        }

        if (!Patch_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Patch",
            "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004");
        }

        if (!Build_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Build",
            "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004");
        }

        if (!Release_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Release",
            "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004");
        }
      }

      ProductVersionType* ProductVersionType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class ProductVersionType (*this, f, c);
      }

      ProductVersionType::
      ~ProductVersionType ()
      {
      }

      // RGBAComponentType
      //

      RGBAComponentType::
      RGBAComponentType (const Code_type& Code,
                         const Depth_type& Depth)
      : ::xml_schema::type (),
        Code_ (Code, ::xml_schema::flags (), this),
        Depth_ (Depth, ::xml_schema::flags (), this)
      {
      }

      RGBAComponentType::
      RGBAComponentType (const RGBAComponentType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        Code_ (x.Code_, f, this),
        Depth_ (x.Depth_, f, this)
      {
      }

      RGBAComponentType::
      RGBAComponentType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        Code_ (f, this),
        Depth_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void RGBAComponentType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Code
          //
          if (n.name () == "Code" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004")
          {
            ::std::auto_ptr< Code_type > r (
              Code_traits::create (i, f, this));

            if (!Code_.present ())
            {
              this->Code_.set (r);
              continue;
            }
          }

          // Depth
          //
          if (n.name () == "Depth" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004")
          {
            ::std::auto_ptr< Depth_type > r (
              Depth_traits::create (i, f, this));

            if (!Depth_.present ())
            {
              this->Depth_.set (r);
              continue;
            }
          }

          break;
        }

        if (!Code_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Code",
            "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004");
        }

        if (!Depth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Depth",
            "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004");
        }
      }

      RGBAComponentType* RGBAComponentType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class RGBAComponentType (*this, f, c);
      }

      RGBAComponentType::
      ~RGBAComponentType ()
      {
      }

      // RGBALayout
      //

      RGBALayout::
      RGBALayout ()
      : ::xml_schema::type (),
        RGBAComponent_ (::xml_schema::flags (), this)
      {
      }

      RGBALayout::
      RGBALayout (const RGBALayout& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        RGBAComponent_ (x.RGBAComponent_, f, this)
      {
      }

      RGBALayout::
      RGBALayout (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        RGBAComponent_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void RGBALayout::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // RGBAComponent
          //
          if (n.name () == "RGBAComponent" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004")
          {
            ::std::auto_ptr< RGBAComponent_type > r (
              RGBAComponent_traits::create (i, f, this));

            this->RGBAComponent_.push_back (r);
            continue;
          }

          break;
        }
      }

      RGBALayout* RGBALayout::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class RGBALayout (*this, f, c);
      }

      RGBALayout::
      ~RGBALayout ()
      {
      }

      // Orientation
      //

      Orientation::
      Orientation (const ::xml_schema::unsigned_byte& _xsd_unsigned_byte_base)
      : ::st434::s377m::types::UInt8 (_xsd_unsigned_byte_base)
      {
      }

      Orientation::
      Orientation (const Orientation& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (x, f, c)
      {
      }

      Orientation::
      Orientation (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (e, f, c)
      {
      }

      Orientation::
      Orientation (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (a, f, c)
      {
      }

      Orientation::
      Orientation (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (s, e, f, c)
      {
      }

      Orientation* Orientation::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class Orientation (*this, f, c);
      }

      Orientation::
      ~Orientation ()
      {
      }

      // SignalStandard
      //

      SignalStandard::
      SignalStandard (const ::xml_schema::unsigned_byte& _xsd_unsigned_byte_base)
      : ::st434::s377m::types::UInt8 (_xsd_unsigned_byte_base)
      {
      }

      SignalStandard::
      SignalStandard (const SignalStandard& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (x, f, c)
      {
      }

      SignalStandard::
      SignalStandard (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (e, f, c)
      {
      }

      SignalStandard::
      SignalStandard (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (a, f, c)
      {
      }

      SignalStandard::
      SignalStandard (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (s, e, f, c)
      {
      }

      SignalStandard* SignalStandard::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SignalStandard (*this, f, c);
      }

      SignalStandard::
      ~SignalStandard ()
      {
      }

      // Ref
      //

      Ref::
      Ref (const TargetInstance_type& TargetInstance)
      : ::xml_schema::type (),
        TargetInstance_ (TargetInstance, ::xml_schema::flags (), this)
      {
      }

      Ref::
      Ref (const Ref& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        TargetInstance_ (x.TargetInstance_, f, this)
      {
      }

      Ref::
      Ref (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        TargetInstance_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
          this->parse (p, f);
        }
      }

      void Ref::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "TargetInstance" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004")
          {
            ::std::auto_ptr< TargetInstance_type > r (
              TargetInstance_traits::create (i, f, this));

            this->TargetInstance_.set (r);
            continue;
          }
        }

        if (!TargetInstance_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "TargetInstance",
            "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004");
        }
      }

      Ref* Ref::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class Ref (*this, f, c);
      }

      Ref::
      ~Ref ()
      {
      }

      // StrongRefHolder
      //

      StrongRefHolder::
      StrongRefHolder ()
      : ::xml_schema::type ()
      {
      }

      StrongRefHolder::
      StrongRefHolder (const StrongRefHolder& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c)
      {
      }

      StrongRefHolder::
      StrongRefHolder (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::xml_schema::type (e, f, c)
      {
      }

      StrongRefHolder::
      StrongRefHolder (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::xml_schema::type (a, f, c)
      {
      }

      StrongRefHolder::
      StrongRefHolder (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
      : ::xml_schema::type (s, e, f, c)
      {
      }

      StrongRefHolder* StrongRefHolder::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class StrongRefHolder (*this, f, c);
      }

      StrongRefHolder::
      ~StrongRefHolder ()
      {
      }

      // WeakRefHolder
      //

      WeakRefHolder::
      WeakRefHolder ()
      : ::xml_schema::type ()
      {
      }

      WeakRefHolder::
      WeakRefHolder (const WeakRefHolder& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c)
      {
      }

      WeakRefHolder::
      WeakRefHolder (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::xml_schema::type (e, f, c)
      {
      }

      WeakRefHolder::
      WeakRefHolder (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::xml_schema::type (a, f, c)
      {
      }

      WeakRefHolder::
      WeakRefHolder (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::xml_schema::type (s, e, f, c)
      {
      }

      WeakRefHolder* WeakRefHolder::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class WeakRefHolder (*this, f, c);
      }

      WeakRefHolder::
      ~WeakRefHolder ()
      {
      }

      // StrongRefArray
      //

      StrongRefArray::
      StrongRefArray ()
      : ::xml_schema::type ()
      {
      }

      StrongRefArray::
      StrongRefArray (const StrongRefArray& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c)
      {
      }

      StrongRefArray::
      StrongRefArray (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::xml_schema::type (e, f, c)
      {
      }

      StrongRefArray::
      StrongRefArray (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::xml_schema::type (a, f, c)
      {
      }

      StrongRefArray::
      StrongRefArray (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::xml_schema::type (s, e, f, c)
      {
      }

      StrongRefArray* StrongRefArray::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class StrongRefArray (*this, f, c);
      }

      StrongRefArray::
      ~StrongRefArray ()
      {
      }

      // StrongRefBatch
      //

      StrongRefBatch::
      StrongRefBatch ()
      : ::xml_schema::type ()
      {
      }

      StrongRefBatch::
      StrongRefBatch (const StrongRefBatch& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c)
      {
      }

      StrongRefBatch::
      StrongRefBatch (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::xml_schema::type (e, f, c)
      {
      }

      StrongRefBatch::
      StrongRefBatch (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::xml_schema::type (a, f, c)
      {
      }

      StrongRefBatch::
      StrongRefBatch (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::xml_schema::type (s, e, f, c)
      {
      }

      StrongRefBatch* StrongRefBatch::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class StrongRefBatch (*this, f, c);
      }

      StrongRefBatch::
      ~StrongRefBatch ()
      {
      }

      // StrongRefCollection
      //

      StrongRefCollection::
      StrongRefCollection ()
      : ::xml_schema::type ()
      {
      }

      StrongRefCollection::
      StrongRefCollection (const StrongRefCollection& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c)
      {
      }

      StrongRefCollection::
      StrongRefCollection (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::xml_schema::type (e, f, c)
      {
      }

      StrongRefCollection::
      StrongRefCollection (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::xml_schema::type (a, f, c)
      {
      }

      StrongRefCollection::
      StrongRefCollection (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::xml_schema::type (s, e, f, c)
      {
      }

      StrongRefCollection* StrongRefCollection::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class StrongRefCollection (*this, f, c);
      }

      StrongRefCollection::
      ~StrongRefCollection ()
      {
      }

      // WeakRefArray
      //

      WeakRefArray::
      WeakRefArray ()
      : ::xml_schema::type ()
      {
      }

      WeakRefArray::
      WeakRefArray (const WeakRefArray& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c)
      {
      }

      WeakRefArray::
      WeakRefArray (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::xml_schema::type (e, f, c)
      {
      }

      WeakRefArray::
      WeakRefArray (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::xml_schema::type (a, f, c)
      {
      }

      WeakRefArray::
      WeakRefArray (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::xml_schema::type (s, e, f, c)
      {
      }

      WeakRefArray* WeakRefArray::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class WeakRefArray (*this, f, c);
      }

      WeakRefArray::
      ~WeakRefArray ()
      {
      }

      // WeakRefBatch
      //

      WeakRefBatch::
      WeakRefBatch ()
      : ::xml_schema::type ()
      {
      }

      WeakRefBatch::
      WeakRefBatch (const WeakRefBatch& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c)
      {
      }

      WeakRefBatch::
      WeakRefBatch (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::xml_schema::type (e, f, c)
      {
      }

      WeakRefBatch::
      WeakRefBatch (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::xml_schema::type (a, f, c)
      {
      }

      WeakRefBatch::
      WeakRefBatch (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
      : ::xml_schema::type (s, e, f, c)
      {
      }

      WeakRefBatch* WeakRefBatch::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class WeakRefBatch (*this, f, c);
      }

      WeakRefBatch::
      ~WeakRefBatch ()
      {
      }

      // WeakRefCollection
      //

      WeakRefCollection::
      WeakRefCollection ()
      : ::xml_schema::type ()
      {
      }

      WeakRefCollection::
      WeakRefCollection (const WeakRefCollection& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c)
      {
      }

      WeakRefCollection::
      WeakRefCollection (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::xml_schema::type (e, f, c)
      {
      }

      WeakRefCollection::
      WeakRefCollection (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::xml_schema::type (a, f, c)
      {
      }

      WeakRefCollection::
      WeakRefCollection (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::xml_schema::type (s, e, f, c)
      {
      }

      WeakRefCollection* WeakRefCollection::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class WeakRefCollection (*this, f, c);
      }

      WeakRefCollection::
      ~WeakRefCollection ()
      {
      }

      // Year
      //

      Year::
      Year (const ::xml_schema::unsigned_short& _xsd_unsigned_short_base)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type > (_xsd_unsigned_short_base)
      {
      }

      Year::
      Year (const Year& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type > (x, f, c)
      {
      }

      Year::
      Year (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type > (e, f, c)
      {
      }

      Year::
      Year (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type > (a, f, c)
      {
      }

      Year::
      Year (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
      : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type > (s, e, f, c)
      {
      }

      Year* Year::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class Year (*this, f, c);
      }

      Year::
      ~Year ()
      {
      }

      // Month
      //

      Month::
      Month (const ::xml_schema::unsigned_byte& _xsd_unsigned_byte_base)
      : ::st434::s377m::types::UInt8 (_xsd_unsigned_byte_base)
      {
      }

      Month::
      Month (const Month& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (x, f, c)
      {
      }

      Month::
      Month (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (e, f, c)
      {
      }

      Month::
      Month (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (a, f, c)
      {
      }

      Month::
      Month (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (s, e, f, c)
      {
      }

      Month* Month::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class Month (*this, f, c);
      }

      Month::
      ~Month ()
      {
      }

      // Day
      //

      Day::
      Day (const ::xml_schema::unsigned_byte& _xsd_unsigned_byte_base)
      : ::st434::s377m::types::UInt8 (_xsd_unsigned_byte_base)
      {
      }

      Day::
      Day (const Day& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (x, f, c)
      {
      }

      Day::
      Day (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (e, f, c)
      {
      }

      Day::
      Day (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (a, f, c)
      {
      }

      Day::
      Day (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (s, e, f, c)
      {
      }

      Day* Day::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class Day (*this, f, c);
      }

      Day::
      ~Day ()
      {
      }

      // Hour
      //

      Hour::
      Hour (const ::xml_schema::unsigned_byte& _xsd_unsigned_byte_base)
      : ::st434::s377m::types::UInt8 (_xsd_unsigned_byte_base)
      {
      }

      Hour::
      Hour (const Hour& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (x, f, c)
      {
      }

      Hour::
      Hour (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (e, f, c)
      {
      }

      Hour::
      Hour (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (a, f, c)
      {
      }

      Hour::
      Hour (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (s, e, f, c)
      {
      }

      Hour* Hour::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class Hour (*this, f, c);
      }

      Hour::
      ~Hour ()
      {
      }

      // Minute
      //

      Minute::
      Minute (const ::xml_schema::unsigned_byte& _xsd_unsigned_byte_base)
      : ::st434::s377m::types::UInt8 (_xsd_unsigned_byte_base)
      {
      }

      Minute::
      Minute (const Minute& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (x, f, c)
      {
      }

      Minute::
      Minute (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (e, f, c)
      {
      }

      Minute::
      Minute (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (a, f, c)
      {
      }

      Minute::
      Minute (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (s, e, f, c)
      {
      }

      Minute* Minute::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class Minute (*this, f, c);
      }

      Minute::
      ~Minute ()
      {
      }

      // Second
      //

      Second::
      Second (const ::xml_schema::unsigned_byte& _xsd_unsigned_byte_base)
      : ::st434::s377m::types::UInt8 (_xsd_unsigned_byte_base)
      {
      }

      Second::
      Second (const Second& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (x, f, c)
      {
      }

      Second::
      Second (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (e, f, c)
      {
      }

      Second::
      Second (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (a, f, c)
      {
      }

      Second::
      Second (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (s, e, f, c)
      {
      }

      Second* Second::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class Second (*this, f, c);
      }

      Second::
      ~Second ()
      {
      }

      // mSec4
      //

      mSec4::
      mSec4 (const ::xml_schema::unsigned_byte& _xsd_unsigned_byte_base)
      : ::st434::s377m::types::UInt8 (_xsd_unsigned_byte_base)
      {
      }

      mSec4::
      mSec4 (const mSec4& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (x, f, c)
      {
      }

      mSec4::
      mSec4 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (e, f, c)
      {
      }

      mSec4::
      mSec4 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (a, f, c)
      {
      }

      mSec4::
      mSec4 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (s, e, f, c)
      {
      }

      mSec4* mSec4::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class mSec4 (*this, f, c);
      }

      mSec4::
      ~mSec4 ()
      {
      }

      // Release
      //

      Release::
      Release (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (e, f, c)
      {
      }

      Release::
      Release (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (a, f, c)
      {
      }

      Release::
      Release (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
      : ::st434::s377m::types::UInt8 (s, e, f, c)
      {
      }

      Release* Release::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class Release (*this, f, c);
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace st434
{
  namespace s377m
  {
    namespace types
    {
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace st434
{
  namespace s377m
  {
    namespace types
    {
      void
      operator<< (::xercesc::DOMElement& e, const Boolean& i)
      {
        e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::boolean, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const Boolean& i)
      {
        a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::boolean, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const Boolean& i)
      {
        l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::boolean, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const Float& i)
      {
        e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const Float& i)
      {
        a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const Float& i)
      {
        l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::double_ >& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const Int8& i)
      {
        e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::byte, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const Int8& i)
      {
        a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::byte, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const Int8& i)
      {
        l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::byte, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const Int16& i)
      {
        e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::short_, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const Int16& i)
      {
        a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::short_, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const Int16& i)
      {
        l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::short_, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const Int32& i)
      {
        e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const Int32& i)
      {
        a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const Int32& i)
      {
        l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const Int64& i)
      {
        e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const Int64& i)
      {
        a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const Int64& i)
      {
        l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const Length& i)
      {
        e << static_cast< const ::st434::s377m::types::Int64& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const Length& i)
      {
        a << static_cast< const ::st434::s377m::types::Int64& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const Length& i)
      {
        l << static_cast< const ::st434::s377m::types::Int64& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const Position& i)
      {
        e << static_cast< const ::st434::s377m::types::Int64& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const Position& i)
      {
        a << static_cast< const ::st434::s377m::types::Int64& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const Position& i)
      {
        l << static_cast< const ::st434::s377m::types::Int64& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const UInt8& i)
      {
        e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const UInt8& i)
      {
        a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const UInt8& i)
      {
        l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const UInt16& i)
      {
        e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const UInt16& i)
      {
        a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const UInt16& i)
      {
        l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const UInt32& i)
      {
        e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const UInt32& i)
      {
        a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const UInt32& i)
      {
        l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const UInt64& i)
      {
        e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_long, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const UInt64& i)
      {
        a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_long, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const UInt64& i)
      {
        l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_long, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const UID& i)
      {
        e << static_cast< const ::xml_schema::string& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const UID& i)
      {
        a << static_cast< const ::xml_schema::string& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const UID& i)
      {
        l << static_cast< const ::xml_schema::string& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const LocalTag& i)
      {
        e << static_cast< const ::xml_schema::string& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const LocalTag& i)
      {
        a << static_cast< const ::xml_schema::string& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const LocalTag& i)
      {
        l << static_cast< const ::xml_schema::string& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const UL& i)
      {
        e << static_cast< const ::st434::s377m::types::UID& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const UL& i)
      {
        a << static_cast< const ::st434::s377m::types::UID& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const UL& i)
      {
        l << static_cast< const ::st434::s377m::types::UID& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const UMID32& i)
      {
        e << static_cast< const ::st434::s377m::types::UID& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const UMID32& i)
      {
        a << static_cast< const ::st434::s377m::types::UID& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const UMID32& i)
      {
        l << static_cast< const ::st434::s377m::types::UID& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const UMID64& i)
      {
        e << static_cast< const ::st434::s377m::types::UID& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const UMID64& i)
      {
        a << static_cast< const ::st434::s377m::types::UID& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const UMID64& i)
      {
        l << static_cast< const ::st434::s377m::types::UID& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const UUID& i)
      {
        e << static_cast< const ::st434::s377m::types::UID& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const UUID& i)
      {
        a << static_cast< const ::st434::s377m::types::UID& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const UUID& i)
      {
        l << static_cast< const ::st434::s377m::types::UID& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const KLVKey& i)
      {
        e << static_cast< const ::st434::s377m::types::UID& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const KLVKey& i)
      {
        a << static_cast< const ::st434::s377m::types::UID& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const KLVKey& i)
      {
        l << static_cast< const ::st434::s377m::types::UID& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const VersionType& i)
      {
        e << static_cast< const ::st434::s377m::types::UInt16& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const VersionType& i)
      {
        a << static_cast< const ::st434::s377m::types::UInt16& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const VersionType& i)
      {
        l << static_cast< const ::st434::s377m::types::UInt16& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const Collection& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr&, const Collection&)
      {
      }

      void
      operator<< (::xml_schema::list_stream&,
                  const Collection&)
      {
      }

      void
      operator<< (::xercesc::DOMElement& e, const Array& i)
      {
        e << static_cast< const ::st434::s377m::types::Collection& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const Array& i)
      {
        a << static_cast< const ::st434::s377m::types::Collection& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const Array& i)
      {
        l << static_cast< const ::st434::s377m::types::Collection& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const Batch& i)
      {
        e << static_cast< const ::st434::s377m::types::Collection& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const Batch& i)
      {
        a << static_cast< const ::st434::s377m::types::Collection& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const Batch& i)
      {
        l << static_cast< const ::st434::s377m::types::Collection& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const DataStream& i)
      {
        e << static_cast< const ::xml_schema::hex_binary& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const DataStream& i)
      {
        a << static_cast< const ::xml_schema::hex_binary& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const DataStream& i)
      {
        l << static_cast< const ::xml_schema::hex_binary& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const Rational& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // Numerator
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Numerator",
              "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004",
              e));

          s << i.Numerator ();
        }

        // Denominator
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Denominator",
              "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004",
              e));

          s << i.Denominator ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const EditRate& i)
      {
        e << static_cast< const ::st434::s377m::types::Rational& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const ISO7bitCharString& i)
      {
        e << static_cast< const ::xml_schema::string& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const ISO7bitCharString& i)
      {
        a << static_cast< const ::xml_schema::string& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const ISO7bitCharString& i)
      {
        l << static_cast< const ::xml_schema::string& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const UTF16CharString& i)
      {
        e << static_cast< const ::xml_schema::string& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const UTF16CharString& i)
      {
        a << static_cast< const ::xml_schema::string& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const UTF16CharString& i)
      {
        l << static_cast< const ::xml_schema::string& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const TimestampType& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // Year
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Year",
              "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004",
              e));

          s << i.Year ();
        }

        // Month
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Month",
              "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004",
              e));

          s << i.Month ();
        }

        // Day
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Day",
              "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004",
              e));

          s << i.Day ();
        }

        // Hour
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Hour",
              "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004",
              e));

          s << i.Hour ();
        }

        // Minute
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Minute",
              "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004",
              e));

          s << i.Minute ();
        }

        // Second
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Second",
              "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004",
              e));

          s << i.Second ();
        }

        // mSec4
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "mSec4",
              "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004",
              e));

          s << i.mSec4 ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ProductVersionType& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // Major
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Major",
              "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004",
              e));

          s << i.Major ();
        }

        // Minor
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Minor",
              "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004",
              e));

          s << i.Minor ();
        }

        // Patch
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Patch",
              "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004",
              e));

          s << i.Patch ();
        }

        // Build
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Build",
              "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004",
              e));

          s << i.Build ();
        }

        // Release
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Release",
              "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004",
              e));

          s << i.Release ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const RGBAComponentType& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // Code
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Code",
              "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004",
              e));

          s << i.Code ();
        }

        // Depth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Depth",
              "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004",
              e));

          s << i.Depth ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const RGBALayout& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // RGBAComponent
        //
        for (RGBALayout::RGBAComponent_const_iterator
             b (i.RGBAComponent ().begin ()), n (i.RGBAComponent ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RGBAComponent",
              "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004",
              e));

          s << *b;
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const Orientation& i)
      {
        e << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const Orientation& i)
      {
        a << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const Orientation& i)
      {
        l << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const SignalStandard& i)
      {
        e << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const SignalStandard& i)
      {
        a << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const SignalStandard& i)
      {
        l << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const Ref& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // TargetInstance
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "TargetInstance",
              "http://www.smpte-ra.org/schemas/434/2006/types/S377M/2004",
              e));

          a << i.TargetInstance ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const StrongRefHolder& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr&, const StrongRefHolder&)
      {
      }

      void
      operator<< (::xml_schema::list_stream&,
                  const StrongRefHolder&)
      {
      }

      void
      operator<< (::xercesc::DOMElement& e, const WeakRefHolder& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr&, const WeakRefHolder&)
      {
      }

      void
      operator<< (::xml_schema::list_stream&,
                  const WeakRefHolder&)
      {
      }

      void
      operator<< (::xercesc::DOMElement& e, const StrongRefArray& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr&, const StrongRefArray&)
      {
      }

      void
      operator<< (::xml_schema::list_stream&,
                  const StrongRefArray&)
      {
      }

      void
      operator<< (::xercesc::DOMElement& e, const StrongRefBatch& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr&, const StrongRefBatch&)
      {
      }

      void
      operator<< (::xml_schema::list_stream&,
                  const StrongRefBatch&)
      {
      }

      void
      operator<< (::xercesc::DOMElement& e, const StrongRefCollection& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr&, const StrongRefCollection&)
      {
      }

      void
      operator<< (::xml_schema::list_stream&,
                  const StrongRefCollection&)
      {
      }

      void
      operator<< (::xercesc::DOMElement& e, const WeakRefArray& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr&, const WeakRefArray&)
      {
      }

      void
      operator<< (::xml_schema::list_stream&,
                  const WeakRefArray&)
      {
      }

      void
      operator<< (::xercesc::DOMElement& e, const WeakRefBatch& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr&, const WeakRefBatch&)
      {
      }

      void
      operator<< (::xml_schema::list_stream&,
                  const WeakRefBatch&)
      {
      }

      void
      operator<< (::xercesc::DOMElement& e, const WeakRefCollection& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr&, const WeakRefCollection&)
      {
      }

      void
      operator<< (::xml_schema::list_stream&,
                  const WeakRefCollection&)
      {
      }

      void
      operator<< (::xercesc::DOMElement& e, const Year& i)
      {
        e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const Year& i)
      {
        a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const Year& i)
      {
        l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, char, ::xml_schema::simple_type >& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const Month& i)
      {
        e << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const Month& i)
      {
        a << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const Month& i)
      {
        l << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const Day& i)
      {
        e << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const Day& i)
      {
        a << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const Day& i)
      {
        l << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const Hour& i)
      {
        e << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const Hour& i)
      {
        a << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const Hour& i)
      {
        l << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const Minute& i)
      {
        e << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const Minute& i)
      {
        a << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const Minute& i)
      {
        l << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const Second& i)
      {
        e << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const Second& i)
      {
        a << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const Second& i)
      {
        l << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const mSec4& i)
      {
        e << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const mSec4& i)
      {
        a << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const mSec4& i)
      {
        l << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const Release& i)
      {
        e << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const Release& i)
      {
        a << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }

      void
      operator<< (::xml_schema::list_stream& l,
                  const Release& i)
      {
        l << static_cast< const ::st434::s377m::types::UInt8& > (i);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

