// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "groups/s377m_packs.hxx"

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      // PartitionPackType
      // 

      const PartitionPackType::MajorVersion_type& PartitionPackType::
      MajorVersion () const
      {
        return this->MajorVersion_.get ();
      }

      PartitionPackType::MajorVersion_type& PartitionPackType::
      MajorVersion ()
      {
        return this->MajorVersion_.get ();
      }

      void PartitionPackType::
      MajorVersion (const MajorVersion_type& x)
      {
        this->MajorVersion_.set (x);
      }

      void PartitionPackType::
      MajorVersion (::std::auto_ptr< MajorVersion_type > x)
      {
        this->MajorVersion_.set (x);
      }

      PartitionPackType::MajorVersion_type PartitionPackType::
      MajorVersion_default_value ()
      {
        return MajorVersion_type (1);
      }

      const PartitionPackType::MinorVersion_type& PartitionPackType::
      MinorVersion () const
      {
        return this->MinorVersion_.get ();
      }

      PartitionPackType::MinorVersion_type& PartitionPackType::
      MinorVersion ()
      {
        return this->MinorVersion_.get ();
      }

      void PartitionPackType::
      MinorVersion (const MinorVersion_type& x)
      {
        this->MinorVersion_.set (x);
      }

      void PartitionPackType::
      MinorVersion (::std::auto_ptr< MinorVersion_type > x)
      {
        this->MinorVersion_.set (x);
      }

      PartitionPackType::MinorVersion_type PartitionPackType::
      MinorVersion_default_value ()
      {
        return MinorVersion_type (2);
      }

      const PartitionPackType::KAGSize_type& PartitionPackType::
      KAGSize () const
      {
        return this->KAGSize_.get ();
      }

      PartitionPackType::KAGSize_type& PartitionPackType::
      KAGSize ()
      {
        return this->KAGSize_.get ();
      }

      void PartitionPackType::
      KAGSize (const KAGSize_type& x)
      {
        this->KAGSize_.set (x);
      }

      void PartitionPackType::
      KAGSize (::std::auto_ptr< KAGSize_type > x)
      {
        this->KAGSize_.set (x);
      }

      const PartitionPackType::ThisPartition_type& PartitionPackType::
      ThisPartition () const
      {
        return this->ThisPartition_.get ();
      }

      PartitionPackType::ThisPartition_type& PartitionPackType::
      ThisPartition ()
      {
        return this->ThisPartition_.get ();
      }

      void PartitionPackType::
      ThisPartition (const ThisPartition_type& x)
      {
        this->ThisPartition_.set (x);
      }

      void PartitionPackType::
      ThisPartition (::std::auto_ptr< ThisPartition_type > x)
      {
        this->ThisPartition_.set (x);
      }

      const PartitionPackType::PreviousPartition_type& PartitionPackType::
      PreviousPartition () const
      {
        return this->PreviousPartition_.get ();
      }

      PartitionPackType::PreviousPartition_type& PartitionPackType::
      PreviousPartition ()
      {
        return this->PreviousPartition_.get ();
      }

      void PartitionPackType::
      PreviousPartition (const PreviousPartition_type& x)
      {
        this->PreviousPartition_.set (x);
      }

      void PartitionPackType::
      PreviousPartition (::std::auto_ptr< PreviousPartition_type > x)
      {
        this->PreviousPartition_.set (x);
      }

      PartitionPackType::PreviousPartition_type PartitionPackType::
      PreviousPartition_default_value ()
      {
        return PreviousPartition_type (0ULL);
      }

      const PartitionPackType::FooterPartition_type& PartitionPackType::
      FooterPartition () const
      {
        return this->FooterPartition_.get ();
      }

      PartitionPackType::FooterPartition_type& PartitionPackType::
      FooterPartition ()
      {
        return this->FooterPartition_.get ();
      }

      void PartitionPackType::
      FooterPartition (const FooterPartition_type& x)
      {
        this->FooterPartition_.set (x);
      }

      void PartitionPackType::
      FooterPartition (::std::auto_ptr< FooterPartition_type > x)
      {
        this->FooterPartition_.set (x);
      }

      PartitionPackType::FooterPartition_type PartitionPackType::
      FooterPartition_default_value ()
      {
        return FooterPartition_type (0ULL);
      }

      const PartitionPackType::HeaderByteCount_type& PartitionPackType::
      HeaderByteCount () const
      {
        return this->HeaderByteCount_.get ();
      }

      PartitionPackType::HeaderByteCount_type& PartitionPackType::
      HeaderByteCount ()
      {
        return this->HeaderByteCount_.get ();
      }

      void PartitionPackType::
      HeaderByteCount (const HeaderByteCount_type& x)
      {
        this->HeaderByteCount_.set (x);
      }

      void PartitionPackType::
      HeaderByteCount (::std::auto_ptr< HeaderByteCount_type > x)
      {
        this->HeaderByteCount_.set (x);
      }

      PartitionPackType::HeaderByteCount_type PartitionPackType::
      HeaderByteCount_default_value ()
      {
        return HeaderByteCount_type (0ULL);
      }

      const PartitionPackType::IndexByteCount_type& PartitionPackType::
      IndexByteCount () const
      {
        return this->IndexByteCount_.get ();
      }

      PartitionPackType::IndexByteCount_type& PartitionPackType::
      IndexByteCount ()
      {
        return this->IndexByteCount_.get ();
      }

      void PartitionPackType::
      IndexByteCount (const IndexByteCount_type& x)
      {
        this->IndexByteCount_.set (x);
      }

      void PartitionPackType::
      IndexByteCount (::std::auto_ptr< IndexByteCount_type > x)
      {
        this->IndexByteCount_.set (x);
      }

      PartitionPackType::IndexByteCount_type PartitionPackType::
      IndexByteCount_default_value ()
      {
        return IndexByteCount_type (0ULL);
      }

      const PartitionPackType::IndexStreamID_type& PartitionPackType::
      IndexStreamID () const
      {
        return this->IndexStreamID_.get ();
      }

      PartitionPackType::IndexStreamID_type& PartitionPackType::
      IndexStreamID ()
      {
        return this->IndexStreamID_.get ();
      }

      void PartitionPackType::
      IndexStreamID (const IndexStreamID_type& x)
      {
        this->IndexStreamID_.set (x);
      }

      void PartitionPackType::
      IndexStreamID (::std::auto_ptr< IndexStreamID_type > x)
      {
        this->IndexStreamID_.set (x);
      }

      PartitionPackType::IndexStreamID_type PartitionPackType::
      IndexStreamID_default_value ()
      {
        return IndexStreamID_type (0);
      }

      const PartitionPackType::BodyOffset_type& PartitionPackType::
      BodyOffset () const
      {
        return this->BodyOffset_.get ();
      }

      PartitionPackType::BodyOffset_type& PartitionPackType::
      BodyOffset ()
      {
        return this->BodyOffset_.get ();
      }

      void PartitionPackType::
      BodyOffset (const BodyOffset_type& x)
      {
        this->BodyOffset_.set (x);
      }

      void PartitionPackType::
      BodyOffset (::std::auto_ptr< BodyOffset_type > x)
      {
        this->BodyOffset_.set (x);
      }

      const PartitionPackType::EssenceStreamID_type& PartitionPackType::
      EssenceStreamID () const
      {
        return this->EssenceStreamID_.get ();
      }

      PartitionPackType::EssenceStreamID_type& PartitionPackType::
      EssenceStreamID ()
      {
        return this->EssenceStreamID_.get ();
      }

      void PartitionPackType::
      EssenceStreamID (const EssenceStreamID_type& x)
      {
        this->EssenceStreamID_.set (x);
      }

      void PartitionPackType::
      EssenceStreamID (::std::auto_ptr< EssenceStreamID_type > x)
      {
        this->EssenceStreamID_.set (x);
      }

      PartitionPackType::EssenceStreamID_type PartitionPackType::
      EssenceStreamID_default_value ()
      {
        return EssenceStreamID_type (0);
      }

      const PartitionPackType::OperationalPattern_type& PartitionPackType::
      OperationalPattern () const
      {
        return this->OperationalPattern_.get ();
      }

      PartitionPackType::OperationalPattern_type& PartitionPackType::
      OperationalPattern ()
      {
        return this->OperationalPattern_.get ();
      }

      void PartitionPackType::
      OperationalPattern (const OperationalPattern_type& x)
      {
        this->OperationalPattern_.set (x);
      }

      void PartitionPackType::
      OperationalPattern (::std::auto_ptr< OperationalPattern_type > x)
      {
        this->OperationalPattern_.set (x);
      }

      const PartitionPackType::EssenceContainers_type& PartitionPackType::
      EssenceContainers () const
      {
        return this->EssenceContainers_.get ();
      }

      PartitionPackType::EssenceContainers_type& PartitionPackType::
      EssenceContainers ()
      {
        return this->EssenceContainers_.get ();
      }

      void PartitionPackType::
      EssenceContainers (const EssenceContainers_type& x)
      {
        this->EssenceContainers_.set (x);
      }

      void PartitionPackType::
      EssenceContainers (::std::auto_ptr< EssenceContainers_type > x)
      {
        this->EssenceContainers_.set (x);
      }


      // PrimerPackType
      // 

      const PrimerPackType::LocalTagEntryBatch_type& PrimerPackType::
      LocalTagEntryBatch () const
      {
        return this->LocalTagEntryBatch_.get ();
      }

      PrimerPackType::LocalTagEntryBatch_type& PrimerPackType::
      LocalTagEntryBatch ()
      {
        return this->LocalTagEntryBatch_.get ();
      }

      void PrimerPackType::
      LocalTagEntryBatch (const LocalTagEntryBatch_type& x)
      {
        this->LocalTagEntryBatch_.set (x);
      }

      void PrimerPackType::
      LocalTagEntryBatch (::std::auto_ptr< LocalTagEntryBatch_type > x)
      {
        this->LocalTagEntryBatch_.set (x);
      }


      // RandomIndexPackType
      // 

      const RandomIndexPackType::PartitionOffsetPairArray_type& RandomIndexPackType::
      PartitionOffsetPairArray () const
      {
        return this->PartitionOffsetPairArray_.get ();
      }

      RandomIndexPackType::PartitionOffsetPairArray_type& RandomIndexPackType::
      PartitionOffsetPairArray ()
      {
        return this->PartitionOffsetPairArray_.get ();
      }

      void RandomIndexPackType::
      PartitionOffsetPairArray (const PartitionOffsetPairArray_type& x)
      {
        this->PartitionOffsetPairArray_.set (x);
      }

      void RandomIndexPackType::
      PartitionOffsetPairArray (::std::auto_ptr< PartitionOffsetPairArray_type > x)
      {
        this->PartitionOffsetPairArray_.set (x);
      }

      const RandomIndexPackType::PackLength_type& RandomIndexPackType::
      PackLength () const
      {
        return this->PackLength_.get ();
      }

      RandomIndexPackType::PackLength_type& RandomIndexPackType::
      PackLength ()
      {
        return this->PackLength_.get ();
      }

      void RandomIndexPackType::
      PackLength (const PackLength_type& x)
      {
        this->PackLength_.set (x);
      }

      void RandomIndexPackType::
      PackLength (::std::auto_ptr< PackLength_type > x)
      {
        this->PackLength_.set (x);
      }


      // LocalTagEntryBatch
      // 

      const LocalTagEntryBatch::LocalTagEntry_sequence& LocalTagEntryBatch::
      LocalTagEntry () const
      {
        return this->LocalTagEntry_;
      }

      LocalTagEntryBatch::LocalTagEntry_sequence& LocalTagEntryBatch::
      LocalTagEntry ()
      {
        return this->LocalTagEntry_;
      }

      void LocalTagEntryBatch::
      LocalTagEntry (const LocalTagEntry_sequence& s)
      {
        this->LocalTagEntry_ = s;
      }


      // PartitionOffsetPairArray
      // 

      const PartitionOffsetPairArray::PartitionOffsetPair_sequence& PartitionOffsetPairArray::
      PartitionOffsetPair () const
      {
        return this->PartitionOffsetPair_;
      }

      PartitionOffsetPairArray::PartitionOffsetPair_sequence& PartitionOffsetPairArray::
      PartitionOffsetPair ()
      {
        return this->PartitionOffsetPair_;
      }

      void PartitionOffsetPairArray::
      PartitionOffsetPair (const PartitionOffsetPair_sequence& s)
      {
        this->PartitionOffsetPair_ = s;
      }


      // LocalTagEntry
      // 

      const LocalTagEntry::LocalTag_type& LocalTagEntry::
      LocalTag () const
      {
        return this->LocalTag_.get ();
      }

      LocalTagEntry::LocalTag_type& LocalTagEntry::
      LocalTag ()
      {
        return this->LocalTag_.get ();
      }

      void LocalTagEntry::
      LocalTag (const LocalTag_type& x)
      {
        this->LocalTag_.set (x);
      }

      void LocalTagEntry::
      LocalTag (::std::auto_ptr< LocalTag_type > x)
      {
        this->LocalTag_.set (x);
      }

      const LocalTagEntry::LocalTagUniqueID_type& LocalTagEntry::
      LocalTagUniqueID () const
      {
        return this->LocalTagUniqueID_.get ();
      }

      LocalTagEntry::LocalTagUniqueID_type& LocalTagEntry::
      LocalTagUniqueID ()
      {
        return this->LocalTagUniqueID_.get ();
      }

      void LocalTagEntry::
      LocalTagUniqueID (const LocalTagUniqueID_type& x)
      {
        this->LocalTagUniqueID_.set (x);
      }

      void LocalTagEntry::
      LocalTagUniqueID (::std::auto_ptr< LocalTagUniqueID_type > x)
      {
        this->LocalTagUniqueID_.set (x);
      }


      // PartitionOffsetPair
      // 

      const PartitionOffsetPair::EssenceStreamID_type& PartitionOffsetPair::
      EssenceStreamID () const
      {
        return this->EssenceStreamID_.get ();
      }

      PartitionOffsetPair::EssenceStreamID_type& PartitionOffsetPair::
      EssenceStreamID ()
      {
        return this->EssenceStreamID_.get ();
      }

      void PartitionOffsetPair::
      EssenceStreamID (const EssenceStreamID_type& x)
      {
        this->EssenceStreamID_.set (x);
      }

      void PartitionOffsetPair::
      EssenceStreamID (::std::auto_ptr< EssenceStreamID_type > x)
      {
        this->EssenceStreamID_.set (x);
      }

      PartitionOffsetPair::EssenceStreamID_type PartitionOffsetPair::
      EssenceStreamID_default_value ()
      {
        return EssenceStreamID_type (0);
      }

      const PartitionOffsetPair::ByteOffset_type& PartitionOffsetPair::
      ByteOffset () const
      {
        return this->ByteOffset_.get ();
      }

      PartitionOffsetPair::ByteOffset_type& PartitionOffsetPair::
      ByteOffset ()
      {
        return this->ByteOffset_.get ();
      }

      void PartitionOffsetPair::
      ByteOffset (const ByteOffset_type& x)
      {
        this->ByteOffset_.set (x);
      }

      void PartitionOffsetPair::
      ByteOffset (::std::auto_ptr< ByteOffset_type > x)
      {
        this->ByteOffset_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      // PartitionPackType
      //

      PartitionPackType::
      PartitionPackType (const MajorVersion_type& MajorVersion,
                         const MinorVersion_type& MinorVersion,
                         const KAGSize_type& KAGSize,
                         const ThisPartition_type& ThisPartition,
                         const PreviousPartition_type& PreviousPartition,
                         const FooterPartition_type& FooterPartition,
                         const HeaderByteCount_type& HeaderByteCount,
                         const IndexByteCount_type& IndexByteCount,
                         const IndexStreamID_type& IndexStreamID,
                         const BodyOffset_type& BodyOffset,
                         const EssenceStreamID_type& EssenceStreamID,
                         const OperationalPattern_type& OperationalPattern,
                         const EssenceContainers_type& EssenceContainers)
      : ::xml_schema::type (),
        MajorVersion_ (MajorVersion, ::xml_schema::flags (), this),
        MinorVersion_ (MinorVersion, ::xml_schema::flags (), this),
        KAGSize_ (KAGSize, ::xml_schema::flags (), this),
        ThisPartition_ (ThisPartition, ::xml_schema::flags (), this),
        PreviousPartition_ (PreviousPartition, ::xml_schema::flags (), this),
        FooterPartition_ (FooterPartition, ::xml_schema::flags (), this),
        HeaderByteCount_ (HeaderByteCount, ::xml_schema::flags (), this),
        IndexByteCount_ (IndexByteCount, ::xml_schema::flags (), this),
        IndexStreamID_ (IndexStreamID, ::xml_schema::flags (), this),
        BodyOffset_ (BodyOffset, ::xml_schema::flags (), this),
        EssenceStreamID_ (EssenceStreamID, ::xml_schema::flags (), this),
        OperationalPattern_ (OperationalPattern, ::xml_schema::flags (), this),
        EssenceContainers_ (EssenceContainers, ::xml_schema::flags (), this)
      {
      }

      PartitionPackType::
      PartitionPackType (const MajorVersion_type& MajorVersion,
                         const MinorVersion_type& MinorVersion,
                         const KAGSize_type& KAGSize,
                         const ThisPartition_type& ThisPartition,
                         const PreviousPartition_type& PreviousPartition,
                         const FooterPartition_type& FooterPartition,
                         const HeaderByteCount_type& HeaderByteCount,
                         const IndexByteCount_type& IndexByteCount,
                         const IndexStreamID_type& IndexStreamID,
                         const BodyOffset_type& BodyOffset,
                         const EssenceStreamID_type& EssenceStreamID,
                         const OperationalPattern_type& OperationalPattern,
                         ::std::auto_ptr< EssenceContainers_type >& EssenceContainers)
      : ::xml_schema::type (),
        MajorVersion_ (MajorVersion, ::xml_schema::flags (), this),
        MinorVersion_ (MinorVersion, ::xml_schema::flags (), this),
        KAGSize_ (KAGSize, ::xml_schema::flags (), this),
        ThisPartition_ (ThisPartition, ::xml_schema::flags (), this),
        PreviousPartition_ (PreviousPartition, ::xml_schema::flags (), this),
        FooterPartition_ (FooterPartition, ::xml_schema::flags (), this),
        HeaderByteCount_ (HeaderByteCount, ::xml_schema::flags (), this),
        IndexByteCount_ (IndexByteCount, ::xml_schema::flags (), this),
        IndexStreamID_ (IndexStreamID, ::xml_schema::flags (), this),
        BodyOffset_ (BodyOffset, ::xml_schema::flags (), this),
        EssenceStreamID_ (EssenceStreamID, ::xml_schema::flags (), this),
        OperationalPattern_ (OperationalPattern, ::xml_schema::flags (), this),
        EssenceContainers_ (EssenceContainers, ::xml_schema::flags (), this)
      {
      }

      PartitionPackType::
      PartitionPackType (const PartitionPackType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        MajorVersion_ (x.MajorVersion_, f, this),
        MinorVersion_ (x.MinorVersion_, f, this),
        KAGSize_ (x.KAGSize_, f, this),
        ThisPartition_ (x.ThisPartition_, f, this),
        PreviousPartition_ (x.PreviousPartition_, f, this),
        FooterPartition_ (x.FooterPartition_, f, this),
        HeaderByteCount_ (x.HeaderByteCount_, f, this),
        IndexByteCount_ (x.IndexByteCount_, f, this),
        IndexStreamID_ (x.IndexStreamID_, f, this),
        BodyOffset_ (x.BodyOffset_, f, this),
        EssenceStreamID_ (x.EssenceStreamID_, f, this),
        OperationalPattern_ (x.OperationalPattern_, f, this),
        EssenceContainers_ (x.EssenceContainers_, f, this)
      {
      }

      PartitionPackType::
      PartitionPackType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        MajorVersion_ (f, this),
        MinorVersion_ (f, this),
        KAGSize_ (f, this),
        ThisPartition_ (f, this),
        PreviousPartition_ (f, this),
        FooterPartition_ (f, this),
        HeaderByteCount_ (f, this),
        IndexByteCount_ (f, this),
        IndexStreamID_ (f, this),
        BodyOffset_ (f, this),
        EssenceStreamID_ (f, this),
        OperationalPattern_ (f, this),
        EssenceContainers_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void PartitionPackType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // MajorVersion
          //
          if (n.name () == "MajorVersion" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< MajorVersion_type > r (
              MajorVersion_traits::create (i, f, this));

            if (!MajorVersion_.present ())
            {
              this->MajorVersion_.set (r);
              continue;
            }
          }

          // MinorVersion
          //
          if (n.name () == "MinorVersion" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< MinorVersion_type > r (
              MinorVersion_traits::create (i, f, this));

            if (!MinorVersion_.present ())
            {
              this->MinorVersion_.set (r);
              continue;
            }
          }

          // KAGSize
          //
          if (n.name () == "KAGSize" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< KAGSize_type > r (
              KAGSize_traits::create (i, f, this));

            if (!KAGSize_.present ())
            {
              this->KAGSize_.set (r);
              continue;
            }
          }

          // ThisPartition
          //
          if (n.name () == "ThisPartition" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ThisPartition_type > r (
              ThisPartition_traits::create (i, f, this));

            if (!ThisPartition_.present ())
            {
              this->ThisPartition_.set (r);
              continue;
            }
          }

          // PreviousPartition
          //
          if (n.name () == "PreviousPartition" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PreviousPartition_type > r (
              PreviousPartition_traits::create (i, f, this));

            if (!PreviousPartition_.present ())
            {
              this->PreviousPartition_.set (r);
              continue;
            }
          }

          // FooterPartition
          //
          if (n.name () == "FooterPartition" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< FooterPartition_type > r (
              FooterPartition_traits::create (i, f, this));

            if (!FooterPartition_.present ())
            {
              this->FooterPartition_.set (r);
              continue;
            }
          }

          // HeaderByteCount
          //
          if (n.name () == "HeaderByteCount" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< HeaderByteCount_type > r (
              HeaderByteCount_traits::create (i, f, this));

            if (!HeaderByteCount_.present ())
            {
              this->HeaderByteCount_.set (r);
              continue;
            }
          }

          // IndexByteCount
          //
          if (n.name () == "IndexByteCount" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< IndexByteCount_type > r (
              IndexByteCount_traits::create (i, f, this));

            if (!IndexByteCount_.present ())
            {
              this->IndexByteCount_.set (r);
              continue;
            }
          }

          // IndexStreamID
          //
          if (n.name () == "IndexStreamID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< IndexStreamID_type > r (
              IndexStreamID_traits::create (i, f, this));

            if (!IndexStreamID_.present ())
            {
              this->IndexStreamID_.set (r);
              continue;
            }
          }

          // BodyOffset
          //
          if (n.name () == "BodyOffset" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< BodyOffset_type > r (
              BodyOffset_traits::create (i, f, this));

            if (!BodyOffset_.present ())
            {
              this->BodyOffset_.set (r);
              continue;
            }
          }

          // EssenceStreamID
          //
          if (n.name () == "EssenceStreamID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EssenceStreamID_type > r (
              EssenceStreamID_traits::create (i, f, this));

            if (!EssenceStreamID_.present ())
            {
              this->EssenceStreamID_.set (r);
              continue;
            }
          }

          // OperationalPattern
          //
          if (n.name () == "OperationalPattern" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< OperationalPattern_type > r (
              OperationalPattern_traits::create (i, f, this));

            if (!OperationalPattern_.present ())
            {
              this->OperationalPattern_.set (r);
              continue;
            }
          }

          // EssenceContainers
          //
          if (n.name () == "EssenceContainers" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EssenceContainers_type > r (
              EssenceContainers_traits::create (i, f, this));

            if (!EssenceContainers_.present ())
            {
              this->EssenceContainers_.set (r);
              continue;
            }
          }

          break;
        }

        if (!MajorVersion_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MajorVersion",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!MinorVersion_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MinorVersion",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!KAGSize_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "KAGSize",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!ThisPartition_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ThisPartition",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!PreviousPartition_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PreviousPartition",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!FooterPartition_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FooterPartition",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!HeaderByteCount_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HeaderByteCount",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!IndexByteCount_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "IndexByteCount",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!IndexStreamID_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "IndexStreamID",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!BodyOffset_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BodyOffset",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!EssenceStreamID_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EssenceStreamID",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!OperationalPattern_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "OperationalPattern",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!EssenceContainers_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EssenceContainers",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      PartitionPackType* PartitionPackType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class PartitionPackType (*this, f, c);
      }

      PartitionPackType::
      ~PartitionPackType ()
      {
      }

      // PrimerPackType
      //

      PrimerPackType::
      PrimerPackType (const LocalTagEntryBatch_type& LocalTagEntryBatch)
      : ::xml_schema::type (),
        LocalTagEntryBatch_ (LocalTagEntryBatch, ::xml_schema::flags (), this)
      {
      }

      PrimerPackType::
      PrimerPackType (::std::auto_ptr< LocalTagEntryBatch_type >& LocalTagEntryBatch)
      : ::xml_schema::type (),
        LocalTagEntryBatch_ (LocalTagEntryBatch, ::xml_schema::flags (), this)
      {
      }

      PrimerPackType::
      PrimerPackType (const PrimerPackType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        LocalTagEntryBatch_ (x.LocalTagEntryBatch_, f, this)
      {
      }

      PrimerPackType::
      PrimerPackType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        LocalTagEntryBatch_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void PrimerPackType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // LocalTagEntryBatch
          //
          if (n.name () == "LocalTagEntryBatch" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            ::std::auto_ptr< LocalTagEntryBatch_type > r (
              LocalTagEntryBatch_traits::create (i, f, this));

            if (!LocalTagEntryBatch_.present ())
            {
              this->LocalTagEntryBatch_.set (r);
              continue;
            }
          }

          break;
        }

        if (!LocalTagEntryBatch_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LocalTagEntryBatch",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      PrimerPackType* PrimerPackType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class PrimerPackType (*this, f, c);
      }

      PrimerPackType::
      ~PrimerPackType ()
      {
      }

      // RandomIndexPackType
      //

      RandomIndexPackType::
      RandomIndexPackType (const PartitionOffsetPairArray_type& PartitionOffsetPairArray,
                           const PackLength_type& PackLength)
      : ::xml_schema::type (),
        PartitionOffsetPairArray_ (PartitionOffsetPairArray, ::xml_schema::flags (), this),
        PackLength_ (PackLength, ::xml_schema::flags (), this)
      {
      }

      RandomIndexPackType::
      RandomIndexPackType (::std::auto_ptr< PartitionOffsetPairArray_type >& PartitionOffsetPairArray,
                           const PackLength_type& PackLength)
      : ::xml_schema::type (),
        PartitionOffsetPairArray_ (PartitionOffsetPairArray, ::xml_schema::flags (), this),
        PackLength_ (PackLength, ::xml_schema::flags (), this)
      {
      }

      RandomIndexPackType::
      RandomIndexPackType (const RandomIndexPackType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        PartitionOffsetPairArray_ (x.PartitionOffsetPairArray_, f, this),
        PackLength_ (x.PackLength_, f, this)
      {
      }

      RandomIndexPackType::
      RandomIndexPackType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        PartitionOffsetPairArray_ (f, this),
        PackLength_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void RandomIndexPackType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PartitionOffsetPairArray
          //
          if (n.name () == "PartitionOffsetPairArray" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            ::std::auto_ptr< PartitionOffsetPairArray_type > r (
              PartitionOffsetPairArray_traits::create (i, f, this));

            if (!PartitionOffsetPairArray_.present ())
            {
              this->PartitionOffsetPairArray_.set (r);
              continue;
            }
          }

          // PackLength
          //
          if (n.name () == "PackLength" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< PackLength_type > r (
              PackLength_traits::create (i, f, this));

            if (!PackLength_.present ())
            {
              this->PackLength_.set (r);
              continue;
            }
          }

          break;
        }

        if (!PartitionOffsetPairArray_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PartitionOffsetPairArray",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }

        if (!PackLength_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PackLength",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      RandomIndexPackType* RandomIndexPackType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class RandomIndexPackType (*this, f, c);
      }

      RandomIndexPackType::
      ~RandomIndexPackType ()
      {
      }

      // LocalTagEntryBatch
      //

      LocalTagEntryBatch::
      LocalTagEntryBatch ()
      : ::xml_schema::type (),
        LocalTagEntry_ (::xml_schema::flags (), this)
      {
      }

      LocalTagEntryBatch::
      LocalTagEntryBatch (const LocalTagEntryBatch& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        LocalTagEntry_ (x.LocalTagEntry_, f, this)
      {
      }

      LocalTagEntryBatch::
      LocalTagEntryBatch (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        LocalTagEntry_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void LocalTagEntryBatch::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // LocalTagEntry
          //
          if (n.name () == "LocalTagEntry" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            ::std::auto_ptr< LocalTagEntry_type > r (
              LocalTagEntry_traits::create (i, f, this));

            this->LocalTagEntry_.push_back (r);
            continue;
          }

          break;
        }
      }

      LocalTagEntryBatch* LocalTagEntryBatch::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class LocalTagEntryBatch (*this, f, c);
      }

      LocalTagEntryBatch::
      ~LocalTagEntryBatch ()
      {
      }

      // PartitionOffsetPairArray
      //

      PartitionOffsetPairArray::
      PartitionOffsetPairArray ()
      : ::xml_schema::type (),
        PartitionOffsetPair_ (::xml_schema::flags (), this)
      {
      }

      PartitionOffsetPairArray::
      PartitionOffsetPairArray (const PartitionOffsetPairArray& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        PartitionOffsetPair_ (x.PartitionOffsetPair_, f, this)
      {
      }

      PartitionOffsetPairArray::
      PartitionOffsetPairArray (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        PartitionOffsetPair_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void PartitionOffsetPairArray::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PartitionOffsetPair
          //
          if (n.name () == "PartitionOffsetPair" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
          {
            ::std::auto_ptr< PartitionOffsetPair_type > r (
              PartitionOffsetPair_traits::create (i, f, this));

            this->PartitionOffsetPair_.push_back (r);
            continue;
          }

          break;
        }
      }

      PartitionOffsetPairArray* PartitionOffsetPairArray::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class PartitionOffsetPairArray (*this, f, c);
      }

      PartitionOffsetPairArray::
      ~PartitionOffsetPairArray ()
      {
      }

      // LocalTagEntry
      //

      LocalTagEntry::
      LocalTagEntry (const LocalTag_type& LocalTag,
                     const LocalTagUniqueID_type& LocalTagUniqueID)
      : ::xml_schema::type (),
        LocalTag_ (LocalTag, ::xml_schema::flags (), this),
        LocalTagUniqueID_ (LocalTagUniqueID, ::xml_schema::flags (), this)
      {
      }

      LocalTagEntry::
      LocalTagEntry (const LocalTagEntry& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        LocalTag_ (x.LocalTag_, f, this),
        LocalTagUniqueID_ (x.LocalTagUniqueID_, f, this)
      {
      }

      LocalTagEntry::
      LocalTagEntry (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        LocalTag_ (f, this),
        LocalTagUniqueID_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void LocalTagEntry::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // LocalTag
          //
          if (n.name () == "LocalTag" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< LocalTag_type > r (
              LocalTag_traits::create (i, f, this));

            if (!LocalTag_.present ())
            {
              this->LocalTag_.set (r);
              continue;
            }
          }

          // LocalTagUniqueID
          //
          if (n.name () == "LocalTagUniqueID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< LocalTagUniqueID_type > r (
              LocalTagUniqueID_traits::create (i, f, this));

            if (!LocalTagUniqueID_.present ())
            {
              this->LocalTagUniqueID_.set (r);
              continue;
            }
          }

          break;
        }

        if (!LocalTag_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LocalTag",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!LocalTagUniqueID_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LocalTagUniqueID",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      LocalTagEntry* LocalTagEntry::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class LocalTagEntry (*this, f, c);
      }

      LocalTagEntry::
      ~LocalTagEntry ()
      {
      }

      // PartitionOffsetPair
      //

      PartitionOffsetPair::
      PartitionOffsetPair (const EssenceStreamID_type& EssenceStreamID,
                           const ByteOffset_type& ByteOffset)
      : ::xml_schema::type (),
        EssenceStreamID_ (EssenceStreamID, ::xml_schema::flags (), this),
        ByteOffset_ (ByteOffset, ::xml_schema::flags (), this)
      {
      }

      PartitionOffsetPair::
      PartitionOffsetPair (const PartitionOffsetPair& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        EssenceStreamID_ (x.EssenceStreamID_, f, this),
        ByteOffset_ (x.ByteOffset_, f, this)
      {
      }

      PartitionOffsetPair::
      PartitionOffsetPair (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        EssenceStreamID_ (f, this),
        ByteOffset_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void PartitionOffsetPair::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // EssenceStreamID
          //
          if (n.name () == "EssenceStreamID" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< EssenceStreamID_type > r (
              EssenceStreamID_traits::create (i, f, this));

            if (!EssenceStreamID_.present ())
            {
              this->EssenceStreamID_.set (r);
              continue;
            }
          }

          // ByteOffset
          //
          if (n.name () == "ByteOffset" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< ByteOffset_type > r (
              ByteOffset_traits::create (i, f, this));

            if (!ByteOffset_.present ())
            {
              this->ByteOffset_.set (r);
              continue;
            }
          }

          break;
        }

        if (!EssenceStreamID_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EssenceStreamID",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }

        if (!ByteOffset_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ByteOffset",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      PartitionOffsetPair* PartitionOffsetPair::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class PartitionOffsetPair (*this, f, c);
      }

      PartitionOffsetPair::
      ~PartitionOffsetPair ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType > r (
          ::st434::s377m::groups::PartitionPack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType > r (
          ::st434::s377m::groups::PartitionPack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType > r (
          ::st434::s377m::groups::PartitionPack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::PartitionPack (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::PartitionPack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::PartitionPack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::PartitionPack (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::PartitionPack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::PartitionPack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType > r (
          ::st434::s377m::groups::PartitionPack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType > r (
          ::st434::s377m::groups::PartitionPack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType > r (
          ::st434::s377m::groups::PartitionPack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType > r (
            ::st434::s377m::groups::PartitionPack (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PartitionPack" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::PartitionPackType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PartitionPack",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType >
      PartitionPack (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "PartitionPack" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::PartitionPackType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::PartitionPackType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PartitionPack",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType > r (
          ::st434::s377m::groups::PrimerPack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType > r (
          ::st434::s377m::groups::PrimerPack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType > r (
          ::st434::s377m::groups::PrimerPack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::PrimerPack (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::PrimerPack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::PrimerPack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::PrimerPack (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::PrimerPack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::PrimerPack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType > r (
          ::st434::s377m::groups::PrimerPack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType > r (
          ::st434::s377m::groups::PrimerPack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType > r (
          ::st434::s377m::groups::PrimerPack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType > r (
            ::st434::s377m::groups::PrimerPack (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PrimerPack" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::PrimerPackType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PrimerPack",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType >
      PrimerPack (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "PrimerPack" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::PrimerPackType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::PrimerPackType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PrimerPack",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType > r (
          ::st434::s377m::groups::RandomIndexPack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType > r (
          ::st434::s377m::groups::RandomIndexPack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType > r (
          ::st434::s377m::groups::RandomIndexPack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::RandomIndexPack (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::RandomIndexPack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s377m::groups::RandomIndexPack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::RandomIndexPack (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::RandomIndexPack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s377m::groups::RandomIndexPack (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType > r (
          ::st434::s377m::groups::RandomIndexPack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType > r (
          ::st434::s377m::groups::RandomIndexPack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType > r (
          ::st434::s377m::groups::RandomIndexPack (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType > r (
            ::st434::s377m::groups::RandomIndexPack (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "RandomIndexPack" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::RandomIndexPackType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RandomIndexPack",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType >
      RandomIndexPack (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "RandomIndexPack" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::groups::RandomIndexPackType > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::groups::RandomIndexPackType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RandomIndexPack",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace st434
{
  namespace s377m
  {
    namespace groups
    {
      void
      PartitionPack (::std::ostream& o,
                     const ::st434::s377m::groups::PartitionPackType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PartitionPack (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      PartitionPack (::std::ostream& o,
                     const ::st434::s377m::groups::PartitionPackType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PartitionPack (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PartitionPack (::std::ostream& o,
                     const ::st434::s377m::groups::PartitionPackType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PartitionPack (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PartitionPack (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::groups::PartitionPackType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PartitionPack (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      PartitionPack (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::groups::PartitionPackType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PartitionPack (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PartitionPack (::xercesc::XMLFormatTarget& t,
                     const ::st434::s377m::groups::PartitionPackType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PartitionPack (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PartitionPack (::xercesc::DOMDocument& d,
                     const ::st434::s377m::groups::PartitionPackType& s,
                     ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PartitionPack" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "PartitionPack",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      PartitionPack (const ::st434::s377m::groups::PartitionPackType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "PartitionPack",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::PartitionPack (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const PartitionPackType& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // MajorVersion
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MajorVersion",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.MajorVersion ();
        }

        // MinorVersion
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MinorVersion",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.MinorVersion ();
        }

        // KAGSize
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "KAGSize",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.KAGSize ();
        }

        // ThisPartition
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ThisPartition",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.ThisPartition ();
        }

        // PreviousPartition
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PreviousPartition",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.PreviousPartition ();
        }

        // FooterPartition
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FooterPartition",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.FooterPartition ();
        }

        // HeaderByteCount
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HeaderByteCount",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.HeaderByteCount ();
        }

        // IndexByteCount
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IndexByteCount",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.IndexByteCount ();
        }

        // IndexStreamID
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IndexStreamID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.IndexStreamID ();
        }

        // BodyOffset
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BodyOffset",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.BodyOffset ();
        }

        // EssenceStreamID
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EssenceStreamID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.EssenceStreamID ();
        }

        // OperationalPattern
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OperationalPattern",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.OperationalPattern ();
        }

        // EssenceContainers
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EssenceContainers",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.EssenceContainers ();
        }
      }

      void
      PrimerPack (::std::ostream& o,
                  const ::st434::s377m::groups::PrimerPackType& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PrimerPack (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      PrimerPack (::std::ostream& o,
                  const ::st434::s377m::groups::PrimerPackType& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PrimerPack (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PrimerPack (::std::ostream& o,
                  const ::st434::s377m::groups::PrimerPackType& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PrimerPack (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PrimerPack (::xercesc::XMLFormatTarget& t,
                  const ::st434::s377m::groups::PrimerPackType& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PrimerPack (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      PrimerPack (::xercesc::XMLFormatTarget& t,
                  const ::st434::s377m::groups::PrimerPackType& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PrimerPack (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PrimerPack (::xercesc::XMLFormatTarget& t,
                  const ::st434::s377m::groups::PrimerPackType& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::PrimerPack (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      PrimerPack (::xercesc::DOMDocument& d,
                  const ::st434::s377m::groups::PrimerPackType& s,
                  ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PrimerPack" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "PrimerPack",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      PrimerPack (const ::st434::s377m::groups::PrimerPackType& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "PrimerPack",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::PrimerPack (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const PrimerPackType& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // LocalTagEntryBatch
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LocalTagEntryBatch",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          s << i.LocalTagEntryBatch ();
        }
      }

      void
      RandomIndexPack (::std::ostream& o,
                       const ::st434::s377m::groups::RandomIndexPackType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::RandomIndexPack (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      RandomIndexPack (::std::ostream& o,
                       const ::st434::s377m::groups::RandomIndexPackType& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::RandomIndexPack (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      RandomIndexPack (::std::ostream& o,
                       const ::st434::s377m::groups::RandomIndexPackType& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::RandomIndexPack (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      RandomIndexPack (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::groups::RandomIndexPackType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::RandomIndexPack (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      RandomIndexPack (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::groups::RandomIndexPackType& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::RandomIndexPack (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      RandomIndexPack (::xercesc::XMLFormatTarget& t,
                       const ::st434::s377m::groups::RandomIndexPackType& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s377m::groups::RandomIndexPack (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      RandomIndexPack (::xercesc::DOMDocument& d,
                       const ::st434::s377m::groups::RandomIndexPackType& s,
                       ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "RandomIndexPack" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "RandomIndexPack",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      RandomIndexPack (const ::st434::s377m::groups::RandomIndexPackType& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "RandomIndexPack",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
            m, f));

        ::st434::s377m::groups::RandomIndexPack (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const RandomIndexPackType& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // PartitionOffsetPairArray
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PartitionOffsetPairArray",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          s << i.PartitionOffsetPairArray ();
        }

        // PackLength
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PackLength",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.PackLength ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const LocalTagEntryBatch& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // LocalTagEntry
        //
        for (LocalTagEntryBatch::LocalTagEntry_const_iterator
             b (i.LocalTagEntry ().begin ()), n (i.LocalTagEntry ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LocalTagEntry",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          s << *b;
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const PartitionOffsetPairArray& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // PartitionOffsetPair
        //
        for (PartitionOffsetPairArray::PartitionOffsetPair_const_iterator
             b (i.PartitionOffsetPair ().begin ()), n (i.PartitionOffsetPair ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PartitionOffsetPair",
              "http://www.smpte-ra.org/schemas/434/2006/groups/S377M/2004",
              e));

          s << *b;
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const LocalTagEntry& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // LocalTag
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LocalTag",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.LocalTag ();
        }

        // LocalTagUniqueID
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LocalTagUniqueID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.LocalTagUniqueID ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const PartitionOffsetPair& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // EssenceStreamID
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EssenceStreamID",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.EssenceStreamID ();
        }

        // ByteOffset
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ByteOffset",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.ByteOffset ();
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

