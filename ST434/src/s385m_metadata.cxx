// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "groups/s385m_metadata.hxx"

namespace st434
{
  namespace s385m
  {
    namespace groups
    {
      // DateTimeDescriptorType
      // 

      const DateTimeDescriptorType::DateTimeRate_optional& DateTimeDescriptorType::
      DateTimeRate () const
      {
        return this->DateTimeRate_;
      }

      DateTimeDescriptorType::DateTimeRate_optional& DateTimeDescriptorType::
      DateTimeRate ()
      {
        return this->DateTimeRate_;
      }

      void DateTimeDescriptorType::
      DateTimeRate (const DateTimeRate_type& x)
      {
        this->DateTimeRate_.set (x);
      }

      void DateTimeDescriptorType::
      DateTimeRate (const DateTimeRate_optional& x)
      {
        this->DateTimeRate_ = x;
      }

      void DateTimeDescriptorType::
      DateTimeRate (::std::auto_ptr< DateTimeRate_type > x)
      {
        this->DateTimeRate_.set (x);
      }

      const DateTimeDescriptorType::DateTimeDropFrame_optional& DateTimeDescriptorType::
      DateTimeDropFrame () const
      {
        return this->DateTimeDropFrame_;
      }

      DateTimeDescriptorType::DateTimeDropFrame_optional& DateTimeDescriptorType::
      DateTimeDropFrame ()
      {
        return this->DateTimeDropFrame_;
      }

      void DateTimeDescriptorType::
      DateTimeDropFrame (const DateTimeDropFrame_type& x)
      {
        this->DateTimeDropFrame_.set (x);
      }

      void DateTimeDescriptorType::
      DateTimeDropFrame (const DateTimeDropFrame_optional& x)
      {
        this->DateTimeDropFrame_ = x;
      }

      void DateTimeDescriptorType::
      DateTimeDropFrame (::std::auto_ptr< DateTimeDropFrame_type > x)
      {
        this->DateTimeDropFrame_.set (x);
      }

      DateTimeDescriptorType::DateTimeDropFrame_type DateTimeDescriptorType::
      DateTimeDropFrame_default_value ()
      {
        return DateTimeDropFrame_type (false);
      }

      const DateTimeDescriptorType::DateTimeEmbedded_optional& DateTimeDescriptorType::
      DateTimeEmbedded () const
      {
        return this->DateTimeEmbedded_;
      }

      DateTimeDescriptorType::DateTimeEmbedded_optional& DateTimeDescriptorType::
      DateTimeEmbedded ()
      {
        return this->DateTimeEmbedded_;
      }

      void DateTimeDescriptorType::
      DateTimeEmbedded (const DateTimeEmbedded_type& x)
      {
        this->DateTimeEmbedded_.set (x);
      }

      void DateTimeDescriptorType::
      DateTimeEmbedded (const DateTimeEmbedded_optional& x)
      {
        this->DateTimeEmbedded_ = x;
      }

      void DateTimeDescriptorType::
      DateTimeEmbedded (::std::auto_ptr< DateTimeEmbedded_type > x)
      {
        this->DateTimeEmbedded_.set (x);
      }

      DateTimeDescriptorType::DateTimeEmbedded_type DateTimeDescriptorType::
      DateTimeEmbedded_default_value ()
      {
        return DateTimeEmbedded_type (true);
      }

      const DateTimeDescriptorType::DateTimeKind_type& DateTimeDescriptorType::
      DateTimeKind () const
      {
        return this->DateTimeKind_.get ();
      }

      DateTimeDescriptorType::DateTimeKind_type& DateTimeDescriptorType::
      DateTimeKind ()
      {
        return this->DateTimeKind_.get ();
      }

      void DateTimeDescriptorType::
      DateTimeKind (const DateTimeKind_type& x)
      {
        this->DateTimeKind_.set (x);
      }

      void DateTimeDescriptorType::
      DateTimeKind (::std::auto_ptr< DateTimeKind_type > x)
      {
        this->DateTimeKind_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace st434
{
  namespace s385m
  {
    namespace groups
    {
      // DateTimeDescriptorType
      //

      DateTimeDescriptorType::
      DateTimeDescriptorType (const InstanceID_type& InstanceID,
                              const SampleRate_type& SampleRate,
                              const ContainerFormat_type& ContainerFormat,
                              const DateTimeKind_type& DateTimeKind)
      : ::st434::s377m::groups::FileDescriptorType (InstanceID,
                                                    SampleRate,
                                                    ContainerFormat),
        DateTimeRate_ (::xml_schema::flags (), this),
        DateTimeDropFrame_ (::xml_schema::flags (), this),
        DateTimeEmbedded_ (::xml_schema::flags (), this),
        DateTimeKind_ (DateTimeKind, ::xml_schema::flags (), this)
      {
      }

      DateTimeDescriptorType::
      DateTimeDescriptorType (const InstanceID_type& InstanceID,
                              ::std::auto_ptr< SampleRate_type >& SampleRate,
                              const ContainerFormat_type& ContainerFormat,
                              const DateTimeKind_type& DateTimeKind)
      : ::st434::s377m::groups::FileDescriptorType (InstanceID,
                                                    SampleRate,
                                                    ContainerFormat),
        DateTimeRate_ (::xml_schema::flags (), this),
        DateTimeDropFrame_ (::xml_schema::flags (), this),
        DateTimeEmbedded_ (::xml_schema::flags (), this),
        DateTimeKind_ (DateTimeKind, ::xml_schema::flags (), this)
      {
      }

      DateTimeDescriptorType::
      DateTimeDescriptorType (const DateTimeDescriptorType& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
      : ::st434::s377m::groups::FileDescriptorType (x, f, c),
        DateTimeRate_ (x.DateTimeRate_, f, this),
        DateTimeDropFrame_ (x.DateTimeDropFrame_, f, this),
        DateTimeEmbedded_ (x.DateTimeEmbedded_, f, this),
        DateTimeKind_ (x.DateTimeKind_, f, this)
      {
      }

      DateTimeDescriptorType::
      DateTimeDescriptorType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
      : ::st434::s377m::groups::FileDescriptorType (e, f | ::xml_schema::flags::base, c),
        DateTimeRate_ (f, this),
        DateTimeDropFrame_ (f, this),
        DateTimeEmbedded_ (f, this),
        DateTimeKind_ (f, this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void DateTimeDescriptorType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::st434::s377m::groups::FileDescriptorType::parse (p, f);

        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // DateTimeRate
          //
          if (n.name () == "DateTimeRate" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DateTimeRate_type > r (
              DateTimeRate_traits::create (i, f, this));

            if (!this->DateTimeRate_)
            {
              this->DateTimeRate_.set (r);
              continue;
            }
          }

          // DateTimeDropFrame
          //
          if (n.name () == "DateTimeDropFrame" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DateTimeDropFrame_type > r (
              DateTimeDropFrame_traits::create (i, f, this));

            if (!this->DateTimeDropFrame_)
            {
              this->DateTimeDropFrame_.set (r);
              continue;
            }
          }

          // DateTimeEmbedded
          //
          if (n.name () == "DateTimeEmbedded" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DateTimeEmbedded_type > r (
              DateTimeEmbedded_traits::create (i, f, this));

            if (!this->DateTimeEmbedded_)
            {
              this->DateTimeEmbedded_.set (r);
              continue;
            }
          }

          // DateTimeKind
          //
          if (n.name () == "DateTimeKind" && n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/properties/S335M")
          {
            ::std::auto_ptr< DateTimeKind_type > r (
              DateTimeKind_traits::create (i, f, this));

            if (!DateTimeKind_.present ())
            {
              this->DateTimeKind_.set (r);
              continue;
            }
          }

          break;
        }

        if (!DateTimeKind_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "DateTimeKind",
            "http://www.smpte-ra.org/schemas/434/2006/properties/S335M");
        }
      }

      DateTimeDescriptorType* DateTimeDescriptorType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class DateTimeDescriptorType (*this, f, c);
      }

      DateTimeDescriptorType::
      ~DateTimeDescriptorType ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace st434
{
  namespace s385m
  {
    namespace groups
    {
      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DateTimeDescriptor_REF (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s385m::groups::DateTimeDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DateTimeDescriptor_REF (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s385m::groups::DateTimeDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DateTimeDescriptor_REF (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s385m::groups::DateTimeDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DateTimeDescriptor_REF (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s385m::groups::DateTimeDescriptor_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DateTimeDescriptor_REF (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s385m::groups::DateTimeDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DateTimeDescriptor_REF (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s385m::groups::DateTimeDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DateTimeDescriptor_REF (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s385m::groups::DateTimeDescriptor_REF (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DateTimeDescriptor_REF (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s385m::groups::DateTimeDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DateTimeDescriptor_REF (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s385m::groups::DateTimeDescriptor_REF (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DateTimeDescriptor_REF (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s385m::groups::DateTimeDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DateTimeDescriptor_REF (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s385m::groups::DateTimeDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DateTimeDescriptor_REF (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s377m::types::Ref > r (
          ::st434::s385m::groups::DateTimeDescriptor_REF (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DateTimeDescriptor_REF (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::st434::s385m::groups::DateTimeDescriptor_REF (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DateTimeDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S385M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DateTimeDescriptor_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S385M/2004");
      }

      ::std::auto_ptr< ::st434::s377m::types::Ref >
      DateTimeDescriptor_REF (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DateTimeDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S385M/2004")
        {
          ::std::auto_ptr< ::st434::s377m::types::Ref > r (
            ::xsd::cxx::tree::traits< ::st434::s377m::types::Ref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DateTimeDescriptor_REF",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S385M/2004");
      }

      ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType >
      DateTimeDescriptor (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType > r (
          ::st434::s385m::groups::DateTimeDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType >
      DateTimeDescriptor (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType > r (
          ::st434::s385m::groups::DateTimeDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType >
      DateTimeDescriptor (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType > r (
          ::st434::s385m::groups::DateTimeDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType >
      DateTimeDescriptor (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s385m::groups::DateTimeDescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType >
      DateTimeDescriptor (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s385m::groups::DateTimeDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType >
      DateTimeDescriptor (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::st434::s385m::groups::DateTimeDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType >
      DateTimeDescriptor (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s385m::groups::DateTimeDescriptor (isrc, f, p);
      }

      ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType >
      DateTimeDescriptor (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s385m::groups::DateTimeDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType >
      DateTimeDescriptor (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::st434::s385m::groups::DateTimeDescriptor (isrc, h, f, p);
      }

      ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType >
      DateTimeDescriptor (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType > r (
          ::st434::s385m::groups::DateTimeDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType >
      DateTimeDescriptor (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType > r (
          ::st434::s385m::groups::DateTimeDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType >
      DateTimeDescriptor (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType > r (
          ::st434::s385m::groups::DateTimeDescriptor (
            d, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType >
      DateTimeDescriptor (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType > r (
            ::st434::s385m::groups::DateTimeDescriptor (
              c, f | ::xml_schema::flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DateTimeDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S385M/2004")
        {
          ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s385m::groups::DateTimeDescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DateTimeDescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S385M/2004");
      }

      ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType >
      DateTimeDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DateTimeDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S385M/2004")
        {
          ::std::auto_ptr< ::st434::s385m::groups::DateTimeDescriptorType > r (
            ::xsd::cxx::tree::traits< ::st434::s385m::groups::DateTimeDescriptorType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DateTimeDescriptor",
          "http://www.smpte-ra.org/schemas/434/2006/groups/S385M/2004");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace st434
{
  namespace s385m
  {
    namespace groups
    {
      void
      DateTimeDescriptor_REF (::std::ostream& o,
                              const ::st434::s377m::types::Ref& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s385m::groups::DateTimeDescriptor_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DateTimeDescriptor_REF (::std::ostream& o,
                              const ::st434::s377m::types::Ref& s,
                              ::xml_schema::error_handler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s385m::groups::DateTimeDescriptor_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DateTimeDescriptor_REF (::std::ostream& o,
                              const ::st434::s377m::types::Ref& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s385m::groups::DateTimeDescriptor_REF (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DateTimeDescriptor_REF (::xercesc::XMLFormatTarget& t,
                              const ::st434::s377m::types::Ref& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s385m::groups::DateTimeDescriptor_REF (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DateTimeDescriptor_REF (::xercesc::XMLFormatTarget& t,
                              const ::st434::s377m::types::Ref& s,
                              ::xml_schema::error_handler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s385m::groups::DateTimeDescriptor_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DateTimeDescriptor_REF (::xercesc::XMLFormatTarget& t,
                              const ::st434::s377m::types::Ref& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s385m::groups::DateTimeDescriptor_REF (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DateTimeDescriptor_REF (::xercesc::DOMDocument& d,
                              const ::st434::s377m::types::Ref& s,
                              ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DateTimeDescriptor_REF" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S385M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DateTimeDescriptor_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S385M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DateTimeDescriptor_REF (const ::st434::s377m::types::Ref& s,
                              const ::xml_schema::namespace_infomap& m,
                              ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "DateTimeDescriptor_REF",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S385M/2004",
            m, f));

        ::st434::s385m::groups::DateTimeDescriptor_REF (*d, s, f);
        return d;
      }

      void
      DateTimeDescriptor (::std::ostream& o,
                          const ::st434::s385m::groups::DateTimeDescriptorType& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s385m::groups::DateTimeDescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DateTimeDescriptor (::std::ostream& o,
                          const ::st434::s385m::groups::DateTimeDescriptorType& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s385m::groups::DateTimeDescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DateTimeDescriptor (::std::ostream& o,
                          const ::st434::s385m::groups::DateTimeDescriptorType& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s385m::groups::DateTimeDescriptor (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DateTimeDescriptor (::xercesc::XMLFormatTarget& t,
                          const ::st434::s385m::groups::DateTimeDescriptorType& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s385m::groups::DateTimeDescriptor (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      DateTimeDescriptor (::xercesc::XMLFormatTarget& t,
                          const ::st434::s385m::groups::DateTimeDescriptorType& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s385m::groups::DateTimeDescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DateTimeDescriptor (::xercesc::XMLFormatTarget& t,
                          const ::st434::s385m::groups::DateTimeDescriptorType& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::st434::s385m::groups::DateTimeDescriptor (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      DateTimeDescriptor (::xercesc::DOMDocument& d,
                          const ::st434::s385m::groups::DateTimeDescriptorType& s,
                          ::xml_schema::flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DateTimeDescriptor" &&
            n.namespace_ () == "http://www.smpte-ra.org/schemas/434/2006/groups/S385M/2004")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DateTimeDescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S385M/2004");
        }
      }

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
      DateTimeDescriptor (const ::st434::s385m::groups::DateTimeDescriptorType& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "DateTimeDescriptor",
            "http://www.smpte-ra.org/schemas/434/2006/groups/S385M/2004",
            m, f));

        ::st434::s385m::groups::DateTimeDescriptor (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const DateTimeDescriptorType& i)
      {
        e << static_cast< const ::st434::s377m::groups::FileDescriptorType& > (i);

        // DateTimeRate
        //
        if (i.DateTimeRate ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DateTimeRate",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DateTimeRate ();
        }

        // DateTimeDropFrame
        //
        if (i.DateTimeDropFrame ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DateTimeDropFrame",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DateTimeDropFrame ();
        }

        // DateTimeEmbedded
        //
        if (i.DateTimeEmbedded ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DateTimeEmbedded",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << *i.DateTimeEmbedded ();
        }

        // DateTimeKind
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DateTimeKind",
              "http://www.smpte-ra.org/schemas/434/2006/properties/S335M",
              e));

          s << i.DateTimeKind ();
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

